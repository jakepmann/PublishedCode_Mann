### full RNAseq analysis code from thesis

## re-analysis of human RNAseq data from https://doi.org/10.7554/eLife.23813


if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("biomaRt")

library(readxl)
mito_data <- read_excel("mitochondrial_genes.xlsx")
nuclear_data <- read_excel("nuclear_genes.xlsx")


## functions to convert human to mouse orthologues using MGI data, and vice versa (from https://www.r-bloggers.com/2016/10/converting-mouse-to-human-gene-names-with-biomart-package/)

musGenes <- c("Hmmr", "Tlx3", "Cpeb4")

# Basic function to convert mouse to human gene names
convertMouseGeneList <- function(x){

require("biomaRt")
human = useMart("ensembl", dataset = "hsapiens_gene_ensembl")
mouse = useMart("ensembl", dataset = "mmusculus_gene_ensembl")

genesV2 = getLDS(attributes = c("mgi_symbol"), filters = "mgi_symbol", values = x , mart = mouse, attributesL = c("hgnc_symbol"), martL = human, uniqueRows=T)
humanx <- unique(genesV2[, 2])

# Print the first 6 genes found to the screen
print(head(humanx))
return(humanx)
}
genes <- convertMouseGeneList(musGenes)

convertHumanGeneList <- function(x){
require("biomaRt")
human = useMart("ensembl", dataset = "hsapiens_gene_ensembl")
mouse = useMart("ensembl", dataset = "mmusculus_gene_ensembl")
genesV2 = getLDS(attributes = c("hgnc_symbol"), filters = "hgnc_symbol", values = x , mart = human, attributesL = c("mgi_symbol"), martL = mouse, uniqueRows=T)
humanx <- unique(genesV2[, 2])
# Print the first 6 genes found to the screen
print(head(humanx))
return(humanx)
}


## go from ensembl IDs to gene symbols

library("biomaRt")

ensembl = useMart("ensembl",dataset="hsapiens_gene_ensembl")
mito_data$HGNC <- getBM(attributes='hgnc_symbol', filters = 'ensembl_gene_id', values = mito_data$ENSEMBL, mart = ensembl)
nuclear_data$HGNC <- getBM(attributes='hgnc_symbol', filters = 'ensembl_gene_id', values = nuclear_data$ENSEMBL, mart = ensembl)

library(stringr)
mito_genes2 <- str_replace(mito_genes, "MT", "MT-")
mito_genes3 <- str_replace(mito_genes, "--", "")

## convert human to ms gene lists for the heatmaps

mito_genes <- as.vector(t(mito_data$HGNC))
mito_Ms_genes <- convertHumanGeneList(mito_genes3)
write.table(mito_Ms_genes, file="mito_Ms_genes.csv",sep=",")

nuclear_genes <- as.vector(t(nuclear_data$HGNC))
nuclear_Ms_genes <- convertHumanGeneList(nuclear_genes)
write.table(nuclear_Ms_genes, file="nuclear_Ms_genes.csv",sep=",")


### download raw data

library(GEOquery)
GSE97156 <- getGEO("GSE97156",GSEMatrix=FALSE)
GSE97156@header[["supplementary_file"]]

##### switch over to terminal ------------------

brew install wget
wget ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE97nnn/GSE97156/suppl/GSE97156_RAW.tar

## tidy column headers


##### switch back to R ------------------

library(dplyr)

### import data (raw counts)

setwd("/Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Human_eLife/GSE97156_RAW")

library(readxl)
P1_data <- read_excel("elife-23813-fig3-data1-v3.xlsx", sheet = "P1", skip=1)
colnames(P1_data) <- c("GeneSymbol", "Neck_count", "Abdo_count", "Ctrl_count", "fc_nk", "fc_mv", "fc_sub", "desc", "code", "probe_id", "other")

library(illuminaHumanv4.db)
x <- illuminaHumanv4ENSEMBL
mapped_genes <- mappedkeys(x)
xx <- as.data.frame(x[mapped_genes])

P1_annot <- merge(P1_data, xx, by=c("probe_id"), all = TRUE)
P1_annot <- P1_annot[!is.na(P1_annot$ensembl_id), ]

Pat1_1 = subset(P1_annot, select = -c(Abdo_count, Ctrl_count, fc_nk, fc_mv, fc_sub, desc, GeneSymbol, code, other))
colnames(Pat1_1) <- c("probe_id", "count", "ensembl_id")
Pat1_2 = subset(P1_annot, select = -c(Neck_count, Ctrl_count, fc_nk, fc_mv, fc_sub, desc, GeneSymbol, code, other))
colnames(Pat1_2) <- c("probe_id", "count", "ensembl_id")
Ctl6_1 = subset(P1_annot, select = -c(Abdo_count, Neck_count, fc_nk, fc_mv, fc_sub, desc, GeneSymbol, code, other))
colnames(Ctl6_1) <- c("probe_id", "count", "ensembl_id")

### import rest of data (raw counts) from GEO

Pat2_1 <- read.table(header = TRUE,  dec = ".", file = "GSM2552853_P2_1.tsv", sep = "\t")
Pat2_2 <- read.table(header = TRUE,  dec = ".", file = "GSM2552854_P2_2.tsv", sep = "\t")
Pat2_3 <- read.table(header = TRUE,  dec = ".", file = "GSM2552855_P2_3.tsv", sep = "\t")
Pat3_1 <- read.table(header = TRUE,  dec = ".", file = "GSM2552856_P3_1.tsv", sep = "\t")
Pat3_2 <- read.table(header = TRUE,  dec = ".", file = "GSM2552857_P3_2.tsv", sep = "\t")
Pat3_3 <- read.table(header = TRUE,  dec = ".", file = "GSM2552858_P3_3.tsv", sep = "\t")
Ctl1_1 <- read.table(header = TRUE,  dec = ".", file = "GSM2552859_Control1_1.tsv", sep = "\t")
Ctl1_2 <- read.table(header = TRUE,  dec = ".", file = "GSM2552860_Control1_2.tsv", sep = "\t")
Ctl2_1 <- read.table(header = TRUE,  dec = ".", file = "GSM2552861_Control2_1.tsv", sep = "\t")
Ctl2_2 <- read.table(header = TRUE,  dec = ".", file = "GSM2552862_Control2_2.tsv", sep = "\t")
Ctl2_3 <- read.table(header = TRUE,  dec = ".", file = "GSM2552863_Control2_3.tsv", sep = "\t")
Ctl3_1 <- read.table(header = TRUE,  dec = ".", file = "GSM2552864_Control3_1.tsv", sep = "\t")
Ctl3_2 <- read.table(header = TRUE,  dec = ".", file = "GSM2552865_Control3_2.tsv", sep = "\t")
Ctl3_3 <- read.table(header = TRUE,  dec = ".", file = "GSM2552866_Control3_3.tsv", sep = "\t")
Ctl4_1 <- read.table(header = TRUE,  dec = ".", file = "GSM2552867_Control4_1.tsv", sep = "\t")
Ctl4_2 <- read.table(header = TRUE,  dec = ".", file = "GSM2552868_Control4_2.tsv", sep = "\t")
Ctl4_3 <- read.table(header = TRUE,  dec = ".", file = "GSM2552869_Control4_3.tsv", sep = "\t")
Ctl5_1 <- read.table(header = TRUE,  dec = ".", file = "GSM2552870_Control5_1.tsv", sep = "\t")
Ctl5_2 <- read.table(header = TRUE,  dec = ".", file = "GSM2552871_Control5_2.tsv", sep = "\t")
Ctl5_3 <- read.table(header = TRUE,  dec = ".", file = "GSM2552872_Control5_3.tsv", sep = "\t")

## rename columns

colnames(Pat2_1) <- c("ensembl_id", "GeneSymbol", "tss_id", "locus", "count")
colnames(Pat2_2) <- c("ensembl_id", "GeneSymbol", "tss_id", "locus", "count")
colnames(Pat2_3) <- c("ensembl_id", "GeneSymbol", "tss_id", "locus", "count")
colnames(Pat3_1) <- c("ensembl_id", "GeneSymbol", "tss_id", "locus", "count")
colnames(Pat3_2) <- c("ensembl_id", "GeneSymbol", "tss_id", "locus", "count")
colnames(Pat3_3) <- c("ensembl_id", "GeneSymbol", "tss_id", "locus", "count")
colnames(Ctl1_1) <- c("ensembl_id", "GeneSymbol", "tss_id", "locus", "count")
colnames(Ctl1_2) <- c("ensembl_id", "GeneSymbol", "tss_id", "locus", "count")
colnames(Ctl2_1) <- c("ensembl_id", "GeneSymbol", "tss_id", "locus", "count")
colnames(Ctl2_2) <- c("ensembl_id", "GeneSymbol", "tss_id", "locus", "count")
colnames(Ctl2_3) <- c("ensembl_id", "GeneSymbol", "tss_id", "locus", "count")
colnames(Ctl3_1) <- c("ensembl_id", "GeneSymbol", "tss_id", "locus", "count")
colnames(Ctl3_2) <- c("ensembl_id", "GeneSymbol", "tss_id", "locus", "count")
colnames(Ctl3_3) <- c("ensembl_id", "GeneSymbol", "tss_id", "locus", "count")
colnames(Ctl4_1) <- c("ensembl_id", "GeneSymbol", "tss_id", "locus", "count")
colnames(Ctl4_2) <- c("ensembl_id", "GeneSymbol", "tss_id", "locus", "count")
colnames(Ctl4_3) <- c("ensembl_id", "GeneSymbol", "tss_id", "locus", "count")
colnames(Ctl5_1) <- c("ensembl_id", "GeneSymbol", "tss_id", "locus", "count")
colnames(Ctl5_2) <- c("ensembl_id", "GeneSymbol", "tss_id", "locus", "count")
colnames(Ctl5_3) <- c("ensembl_id", "GeneSymbol", "tss_id", "locus", "count")

setwd("/Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Human_eLife")

### sort files before collapsing replicates

Ctl1_1 <- Ctl1_1%>% arrange(desc(ensembl_id))
Ctl1_2 <- Ctl1_2%>% arrange(desc(ensembl_id))
Ctl2_1 <- Ctl2_1%>% arrange(desc(ensembl_id))
Ctl2_2 <- Ctl2_2%>% arrange(desc(ensembl_id))
Ctl2_3 <- Ctl2_3%>% arrange(desc(ensembl_id))
Ctl3_1 <- Ctl3_1%>% arrange(desc(ensembl_id))
Ctl3_2 <- Ctl3_2%>% arrange(desc(ensembl_id))
Ctl3_3 <- Ctl3_3%>% arrange(desc(ensembl_id))
Ctl4_1 <- Ctl4_1%>% arrange(desc(ensembl_id))
Ctl4_2 <- Ctl4_2%>% arrange(desc(ensembl_id))
Ctl4_3 <- Ctl4_3%>% arrange(desc(ensembl_id))
Ctl5_1 <- Ctl5_1%>% arrange(desc(ensembl_id))
Ctl5_2 <- Ctl5_2%>% arrange(desc(ensembl_id))
Ctl5_3 <- Ctl5_3%>% arrange(desc(ensembl_id))
Ctl6_1 <- Ctl6_1%>% arrange(desc(ensembl_id))
Pat1_1 <- Pat1_1%>% arrange(desc(ensembl_id))
Pat1_2 <- Pat1_2%>% arrange(desc(ensembl_id))
Pat2_1 <- Pat2_1%>% arrange(desc(ensembl_id))
Pat2_2 <- Pat2_2%>% arrange(desc(ensembl_id))
Pat2_3 <- Pat2_3%>% arrange(desc(ensembl_id))
Pat3_1 <- Pat3_1%>% arrange(desc(ensembl_id))
Pat3_2 <- Pat3_2%>% arrange(desc(ensembl_id))
Pat3_3 <- Pat3_3%>% arrange(desc(ensembl_id))

### sum counts to get average accross replicates

Ctl1 <- cbind(Ctl1_1$ensembl_id, as.numeric(Ctl1_1$count), as.numeric(Ctl1_2$count))
colnames(Ctl1) <- c("ensembl_id", "count1", "count2")
Ctl1 <- as.data.frame(Ctl1)
Ctl1$count1 <- as.numeric(Ctl1$count1)
Ctl1$count2 <- as.numeric(Ctl1$count2)
Ctl1$count <- round(((Ctl1$count1 + Ctl1$count2)/2), digits=0)

Ctl2 <- cbind(Ctl2_1$ensembl_id, as.numeric(Ctl2_1$count), as.numeric(Ctl2_2$count), as.numeric(Ctl2_3$count))
colnames(Ctl2) <- c("ensembl_id", "count1", "count2", "count3")
Ctl2 <- as.data.frame(Ctl2)
Ctl2$count1 <- as.numeric(Ctl2$count1)
Ctl2$count2 <- as.numeric(Ctl2$count2)
Ctl2$count3 <- as.numeric(Ctl2$count3)
Ctl2$count <- round(((Ctl2$count1 + Ctl2$count2 + Ctl2$count3)/3), digits=0)

Ctl3 <- cbind(Ctl3_1$ensembl_id, as.numeric(Ctl3_1$count), as.numeric(Ctl3_2$count), as.numeric(Ctl3_3$count))
colnames(Ctl3) <- c("ensembl_id", "count1", "count2", "count3")
Ctl3 <- as.data.frame(Ctl3)
Ctl3$count1 <- as.numeric(Ctl3$count1)
Ctl3$count2 <- as.numeric(Ctl3$count2)
Ctl3$count3 <- as.numeric(Ctl3$count3)
Ctl3$count <- round(((Ctl3$count1 + Ctl3$count2 + Ctl3$count3)/3), digits=0)

Ctl4 <- cbind(Ctl4_1$ensembl_id, as.numeric(Ctl4_1$count), as.numeric(Ctl4_2$count), as.numeric(Ctl4_3$count))
colnames(Ctl4) <- c("ensembl_id", "count1", "count2", "count3")
Ctl4 <- as.data.frame(Ctl4)
Ctl4$count1 <- as.numeric(Ctl4$count1)
Ctl4$count2 <- as.numeric(Ctl4$count2)
Ctl4$count3 <- as.numeric(Ctl4$count3)
Ctl4$count <- round(((Ctl4$count1 + Ctl4$count2 + Ctl4$count3)/3), digits=0)

Ctl5 <- cbind(Ctl5_1$ensembl_id, as.numeric(Ctl5_1$count), as.numeric(Ctl5_2$count), as.numeric(Ctl5_3$count))
colnames(Ctl5) <- c("ensembl_id", "count1", "count2", "count3")
Ctl5 <- as.data.frame(Ctl5)
Ctl5$count1 <- as.numeric(Ctl5$count1)
Ctl5$count2 <- as.numeric(Ctl5$count2)
Ctl5$count3 <- as.numeric(Ctl5$count3)
Ctl5$count <- round(((Ctl5$count1 + Ctl5$count2 + Ctl5$count3)/3), digits=0)

Ctl6 <- as.data.frame(Ctl6_1)
Ctl6 <- Ctl6[complete.cases(Ctl6), ]
Ctl6$count <- round(Ctl6$count, digits=0)

Pat1 <- cbind(Pat1_1$ensembl_id, as.numeric(Pat1_1$count), as.numeric(Pat1_2$count))
colnames(Pat1) <- c("ensembl_id", "count1", "count2")
Pat1 <- as.data.frame(Pat1)
Pat1$count1 <- as.numeric(Pat1$count1)
Pat1$count2 <- as.numeric(Pat1$count2)
Pat1$count <- round(((Pat1$count1 + Pat1$count2)/2), digits=0)
Pat1 <- Pat1[complete.cases(Pat1), ]

Pat2 <- cbind(Pat2_1$ensembl_id, as.numeric(Pat2_1$count), as.numeric(Pat2_2$count), as.numeric(Pat2_3$count))
colnames(Pat2) <- c("ensembl_id", "count1", "count2", "count3")
Pat2 <- as.data.frame(Pat2)
Pat2$count1 <- as.numeric(Pat2$count1)
Pat2$count2 <- as.numeric(Pat2$count2)
Pat2$count3 <- as.numeric(Pat2$count3)
Pat2$count <- round(((Pat2$count1 + Pat2$count2 + Pat2$count3)/3), digits=0)

Pat3 <- cbind(Pat3_1$ensembl_id, as.numeric(Pat3_1$count), as.numeric(Pat3_2$count), as.numeric(Pat3_3$count))
colnames(Pat3) <- c("ensembl_id", "count1", "count2", "count3")
Pat3 <- as.data.frame(Pat3)
Pat3$count1 <- as.numeric(Pat3$count1)
Pat3$count2 <- as.numeric(Pat3$count2)
Pat3$count3 <- as.numeric(Pat3$count3)
Pat3$count <- round(((Pat3$count1 + Pat3$count2 + Pat3$count3)/3), digits=0)

## Sum multiple counts per gene [only affects array data]
Ctl1_v2 <- Ctl1 %>% group_by(ensembl_id) %>% summarise(count = sum(count))
Ctl1_v2 <- Ctl1 %>% group_by(ensembl_id) %>% summarise(count = sum(count))
Ctl2_v2 <- Ctl2 %>% group_by(ensembl_id) %>% summarise(count = sum(count))
Ctl2_v2 <- Ctl2 %>% group_by(ensembl_id) %>% summarise(count = sum(count))
Ctl2_v2 <- Ctl2 %>% group_by(ensembl_id) %>% summarise(count = sum(count))
Ctl3_v2 <- Ctl3 %>% group_by(ensembl_id) %>% summarise(count = sum(count))
Ctl3_v2 <- Ctl3 %>% group_by(ensembl_id) %>% summarise(count = sum(count))
Ctl3_v2 <- Ctl3 %>% group_by(ensembl_id) %>% summarise(count = sum(count))
Ctl4_v2 <- Ctl4 %>% group_by(ensembl_id) %>% summarise(count = sum(count))
Ctl4_v2 <- Ctl4 %>% group_by(ensembl_id) %>% summarise(count = sum(count))
Ctl4_v2 <- Ctl4 %>% group_by(ensembl_id) %>% summarise(count = sum(count))
Ctl5_v2 <- Ctl5 %>% group_by(ensembl_id) %>% summarise(count = sum(count))
Ctl5_v2 <- Ctl5 %>% group_by(ensembl_id) %>% summarise(count = sum(count))
Ctl5_v2 <- Ctl5 %>% group_by(ensembl_id) %>% summarise(count = sum(count))
Ctl6_v2 <- Ctl6 %>% group_by(ensembl_id) %>% summarise(count = sum(count))
Pat1_v2 <- Pat1 %>% group_by(ensembl_id) %>% summarise(count = sum(count))
Pat1_v2 <- Pat1 %>% group_by(ensembl_id) %>% summarise(count = sum(count))
Pat2_v2 <- Pat2 %>% group_by(ensembl_id) %>% summarise(count = sum(count))
Pat2_v2 <- Pat2 %>% group_by(ensembl_id) %>% summarise(count = sum(count))
Pat2_v2 <- Pat2 %>% group_by(ensembl_id) %>% summarise(count = sum(count))
Pat3_v2 <- Pat3 %>% group_by(ensembl_id) %>% summarise(count = sum(count))
Pat3_v2 <- Pat3 %>% group_by(ensembl_id) %>% summarise(count = sum(count))
Pat3_v2 <- Pat3 %>% group_by(ensembl_id) %>% summarise(count = sum(count))

## make a matrix of counts

counts_matrix <- cbind(Ctl1_v2$ensembl_id, Ctl1_v2$count, Ctl2_v2$count, Ctl3_v2$count, Ctl4_v2$count, Ctl5_v2$count)
colnames(counts_matrix) <- c("ensembl_id", "Ctl1", "Ctl2", "Ctl3", "Ctl4", "Ctl5")
counts_matrix <- as.data.frame(counts_matrix)
counts_matrix <- merge(counts_matrix, Ctl6_v2, by=c("ensembl_id"), all = TRUE)
counts_matrix <- merge(counts_matrix, Pat1_v2, by=c("ensembl_id"), all = TRUE)
counts_matrix <- merge(counts_matrix, Pat2_v2, by=c("ensembl_id"), all = TRUE)
counts_matrix <- merge(counts_matrix, Pat3_v2, by=c("ensembl_id"), all = TRUE)
colnames(counts_matrix) <- c("ensembl_id", "Ctl1", "Ctl2", "Ctl3", "Ctl4", "Ctl5", "Ctl6", "Pat1", "Pat2", "Pat3")
counts_matrix <- as.data.frame(counts_matrix)
write.table(counts_matrix, file="counts_matrix_hum.csv",sep=",")

## drop na from counts matrix (limiting number of genes due to array data), but can repeat later by dropping pat1 & ctrl6
counts_matrix$Ctl1 <- as.numeric(counts_matrix$Ctl1)
counts_matrix$Ctl2 <- as.numeric(counts_matrix$Ctl2)
counts_matrix$Ctl3 <- as.numeric(counts_matrix$Ctl3)
counts_matrix$Ctl4 <- as.numeric(counts_matrix$Ctl4)
counts_matrix$Ctl5 <- as.numeric(counts_matrix$Ctl5)
counts_matrix_v2 <- counts_matrix[complete.cases(counts_matrix), ]
rownames(counts_matrix_v2) <- counts_matrix_v2$ensembl_id
counts_matrix_v3 <- as.matrix(counts_matrix_v2[2:10])
any(counts_matrix_v3 < 0)

## add coldata

library(readxl)
coldata <- read_excel("coldata.xlsx")
coldata$condition <- as.factor(coldata$condition)
coldata$type <- as.factor(coldata$type)

## make DESeq dds

library(DESeq2)
dds <- DESeqDataSetFromMatrix(countData = counts_matrix_v3,colData = coldata, design = ~ condition)

require(DESeq2)
require(ggplot2)
require(data.table)
require(plotly)
require(DT)
require(htmlwidgets)
require(R2HTML)

lfc = 1.5 #treshold for the ADJUSTED fold changes
pval = 0.01 #treshold for the ADJUSTED pvalues

#Calls DEseq2 on dds and store the results in de
de<-DESeq(dds)

#Uses the built-in DESEQ2 results operator for creating a matrix-like structure storing the DE analysis results; the structure is stored in res_raw and subsequently converted in a data frame (res) 
  
res_raw <-results(de)
res <- signif(as.data.frame(res_raw), digits = sig_dig) #converts into data frame and sets the number of digits
res <- cbind(rownames(res), res) #adds one column with the genes ID to the res dataframe (it will be useful later on)
colnames(res) <- c("ensembl_id","Mean of norm counts", "log2 FC (MLE)", "lFC Std Err" , "Wald Stat", "Wald test pval", "BH_pval") # sets the column names
res <- res[!is.na(res$BH_pval), ]


setwd("/Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Human_eLife")
hum_to_ms_annot <- read.csv("hum_to_ms_annot.txt", sep = "\t")
hum_to_ms_annot <- hum_to_ms_annot %>% rename(GeneSymbol = Gene.name)
hum_to_ms_annot <- hum_to_ms_annot %>% rename(ensembl_id = Gene.stable.ID)
hum_to_ms_annot_simple <- hum_to_ms_annot[!duplicated(hum_to_ms_annot$ensembl_id), ]
hum_to_ms_annot_simple = subset(hum_to_ms_annot_simple, select = -c(Gene.stable.ID.version, Transcript.stable.ID, Transcript.stable.ID.version, Mouse.protein.or.transcript.stable.ID, Last.common.ancestor.with.Mouse))

ms_to_hum_annot <- read.csv("ms_to_hum_annot.txt", sep = "\t")
ms_to_hum_annot <- ms_to_hum_annot %>% rename(GeneSymbol = Gene.name)
ms_to_hum_annot <- ms_to_hum_annot %>% rename(ensembl_id = Gene.stable.ID)

res_annot <- merge(res, hum_to_ms_annot_simple, by=c("ensembl_id"), all = FALSE)
write.table(res_annot, file="res_annot.csv",sep=",")

#take the roots of the samples_names; replicates cannot be distinguished here -- set the name of the control 
name_control <- "Ctl"
names_mutants <- "Pat"
num_comparisons <= length(names_mutants)
name_mutant <- names_mutants[num_comparisons] 

  ##*Plots and Tables -----------------------------------------------------------------------------------------------------------------
  
  #**Assigns dynamic names to the table to export, taking the res data frame defined above ---------------------------------- 
  assign(paste0("results_table_",name_control,"_", name_mutant),  res ) #takes the whole res data frame
  dummy<-merge(hum_to_ms_annot_simple, get(paste0("results_table_",name_control,"_", name_mutant)), by="ensembl_id")
  assign(paste0("results_table_",name_control,"_", name_mutant), dummy)

  
  assign(paste0("results_table_topscore_",name_control,"_", name_mutant), res[which(abs(res$`log2 FC (MLE)`)>lfc & res$`BH_pval` <pval),]) #takes only the rows of the res data frame that have the best log2FC and the best BH_pval
  dummy<-merge(hum_to_ms_annot_simple, get(paste0("results_table_topscore_",name_control,"_", name_mutant)), by="ensembl_id")
  assign(paste0("results_table_topscore_",name_control,"_", name_mutant), dummy)
  write.table(results_table_topscore_Ctl_Pat, file="results_table_topscore_Ctl_Pat.csv",sep=",")
    
  #**Building the datatables ---------------------------------------------------------------------------------------------------------
  #The datatables are widgets created through the saveWidget function; this can "automatically" be sorted clicking on it --> Useful for having a general overview
  
  #***Summingup datatable ------------------------------------------
  #Builds the datatable containing all the resuls of the DE analysis
  
  #Creates the summingup_matrix, which includes only some columns of the correspondent results_table (more handy for visualisation) 
  assign(paste0("summingup_matrix_",name_control, "_", name_mutant), get(paste0("results_table_",name_control,"_", name_mutant))[, c(1:10)])
  dummy <- get(paste0("summingup_matrix_",name_control, "_", name_mutant))
  rownames(dummy) <- c()
  assign( paste0("summingup_matrix_",name_control, "_", name_mutant), dummy )
  #Creates a dynamic table (widget) of all the results
  assign(paste0("summingup_datatable_",name_control, "_", name_mutant) , datatable(get(paste0("summingup_matrix_",name_control, "_", name_mutant))) )
  #saves the datatable widget to in the working directory
  saveWidget( get(paste0("summingup_datatable_",name_control, "_", name_mutant)), file= paste0("summingup_datatable_",name_control, "_", name_mutant, ".html") )

  #***Topscores datatable ----------------------------------------- 
  #Builds the matrix containing only the top log2FC (adjusted) top scores (independently on the pvalues)
  assign(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant),  subset(get(paste0("summingup_matrix_",name_control, "_", name_mutant)),  (abs(get(paste0("summingup_matrix_",name_control, "_", name_mutant))[,"log2 FC (MLE)"]) >lfc &  get(paste0("summingup_matrix_",name_control, "_", name_mutant))[,"BH_pval"] <pval )  ) ) 
  dummy <- get(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant))
  rownames(dummy) <- c()
  assign( paste0("summingup_matrix_topscores_",name_control, "_", name_mutant), dummy )
  #Creates a dynamic table (widget) of the topscores
  assign(paste0("topscores_datatable_",name_control, "_", name_mutant) , datatable(get(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant))) )
  #saves the datatable widget to in the working directory
  saveWidget( get(paste0("topscores_datatable_",name_control, "_", name_mutant)), file= paste0("topscores_datatable_",name_control, "_", name_mutant, ".html") )




#** Raw counts, CPM, TPM  ---------------------------------------------------------------

# produces the raw_counts matrix
# merges the raw_counts matrix (all the raw counts for each sample) with the genes_lenghts_table
raw_counts <- (merge(counts_matrix, hum_to_ms_annot_simple, by=c("ensembl_id"), all = FALSE))
write.csv(raw_counts, file="raw_counts.csv", row.names=FALSE)

norm_counts <- as.data.frame(counts(de, normalized=T))
norm_counts$ensembl_id <- rownames(norm_counts)

# produces the Raw Counts Normalised (DESeq2 normalisation) table 
raw_counts_normalised <- (merge(norm_counts, hum_to_ms_annot_simple, by=c("ensembl_id"), all = FALSE))
write.csv(raw_counts_normalised, file="raw_counts_normalised.csv", row.names=FALSE)

# computes the CPM on the raw counts
CPM_working = subset(raw_counts, select = c(2:10))
CPM_working$sum <- rowSums(CPM_working)
CPM <- apply(raw_counts[,c(2:10)],2, function(x){x*10^6/CPM_working$sum})
CPM <- cbind(raw_counts[,c(1)],CPM)
CPM <- cbind(raw_counts[,c(11:13)],CPM)
CPM <- CPM %>% rename("ensembl_id" = "V1")
write.csv(CPM, file="raw_counts_CPM.csv", row.names=FALSE)

count_zeroes<- function(x){length(which(x<=.5))}
numberofzeroes <- apply(CPM[,c(7:ncol(CPM))], 1, count_zeroes)
CPM_filtered <- CPM[which(numberofzeroes<=5),]


  #**Dispersion plot---------------------------------------------------------------------------------------------
  #This will not be stored or printed; for sanity check purposes only
  plotDispEsts(de, main=paste(name_mutant, " vs ", name_control))

  #**MA plot -----------------------------------------------------------------------------------------------------
  #Plot of the mean of normalised (according to DESEq) counts of the control vs. the log2fold change "corrected as well"

  #***Plot static MA -------------------------------------------------------------------------------------------------- 

  #Creates the dataframe for ggplot
  MA_dataframe <- data.frame(Ln_mean=log(res$`Mean of norm counts`), foldchange = res$`log2 FC (MLE)`, pvaladj=res$`BH_pval`)
  rownames(MA_dataframe) <- rownames(res)
  MA_dataframe <- MA_dataframe[which(!is.na(MA_dataframe$foldchange)), ]
  MA_dataframe$Diff_Exp <- rep(0, nrow(MA_dataframe))
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)>=lfc  )] <- "Relevant log2 FC" 
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)>=lfc & MA_dataframe$pvaladj<=pval)] <- "Relevant log2 FC and Pval" 
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)<lfc)] = "Non significant" 

  #Creates the ggplot
  r <-ggplot(MA_dataframe, aes(x=Ln_mean, y=foldchange, text=rownames(MA_dataframe)))+
    geom_point(aes(colour= Diff_Exp), size=.5)+
    geom_hline(yintercept=0, linetype=1, color="green") + geom_hline(yintercept=lfc,linetype=3, color="green") + geom_hline(yintercept=-lfc, linetype=3, color="green")+
    scale_colour_manual(values = c("Relevant log2 FC and Pval" ="red", "Non significant" = "black", "Relevant log2 FC" ="blue"))+
    xlab("ln mean of norm. counts") + ylab("log2 fold change")+ scale_x_continuous(labels = function(x)as.integer(exp(x)))+
    #+ylim(-4, 4)
    labs(aesthetic='custom text')+
    ggtitle(paste("MA plot", name_control, "vs.", name_mutant))

  #Saves the plot in a variable
  assign(paste("static", "MAplot", name_control, name_mutant, sep = "_"), r)

  #Saves the pdf of the plot in the OUTPUT directory
  pdf(file= paste("static", "MAplot", name_control, name_mutant, ".pdf", sep = "_"))
  print(r)
  dev.off()

  #***Plot dynamic MA -------------------------------------------------------------------------------------------------- 

  #Creates the plot
  s<- ggplotly(r, tooltip=c("text", "x", "y") )

  #SAves the plot in a variable
  assign(paste("dynamic", "MAplot", name_control, name_mutant, sep = "_"), s)

  #Saves the WIDGET of the plot in the OUTPUT directory
  print(s)
  saveWidget(s, file= paste0("dynamic_MAplot",name_control, "_", name_mutant, ".html") )

  #**Volcano Plots --------------------------------------------------------------

  #***Plot static volcano--------------------------------------------------------

  #creates a data frame with some of the columns taken from res which, in turn, summarises the DESEq2 results
  tab = data.frame(logFC = res$`log2 FC (MLE)`, negLogPval = -log10(res$`BH_pval`))
  rownames(tab) <- rownames(res)

  #Identifies the DE genes
  candidate_results <- subset(res, (abs(res$`log2 FC (MLE)`) > lfc & res$`BH_pval` < pval))
  assign( paste0("candidate_results_tab_",name_control,"_",name_mutant), subset(tab, (abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval))) )

  #Identifies the not DE genes
  non_candidate_results <- subset(res, (abs(res$`log2 FC (MLE)`) <= lfc | res$`BH_pval` >= pval))
  assign(paste0("non_candidate_results_tab_",name_control,"_",name_mutant), subset(tab, (abs(tab$logFC) <= lfc | tab$negLogPval <= -log10(pval))) )

  #Mark DE and non DE genes in the dataframe 
  dummy <- get(paste0("non_candidate_results_tab_",name_control,"_",name_mutant))
  dummy$Diff_Exp <- "DE -"
  assign(paste0("non_candidate_results_tab_",name_control,"_",name_mutant), dummy)

  dummy <- get(paste0("candidate_results_tab_",name_control,"_",name_mutant))
  if(nrow(dummy)>0){dummy$Diff_Exp <- "DE +"}
  assign(paste0("candidate_results_tab_",name_control,"_",name_mutant), dummy)

  #merge the "candidate" and "non candidate" dataframes
  assign(paste0("results_tab_",name_control,"_",name_mutant), rbind(get(paste0("candidate_results_tab_",name_control,"_",name_mutant)), get(paste0("non_candidate_results_tab_",name_control,"_",name_mutant)) ))

  #builds the ggplot
  h<-ggplot( get(paste0("results_tab_",name_control,"_",name_mutant)), aes(x=logFC, y=negLogPval, text=rownames(get(paste0("results_tab_",name_control,"_",name_mutant))) ) )+
   geom_point(aes(colour= Diff_Exp), size=.5)+
   geom_hline(yintercept=-log10(pval), linetype=3, color="green") + geom_vline(xintercept=-c(-lfc, lfc), linetype=3, color="blue")+
   scale_colour_manual(values = c("DE +" ="red", "DE -" = "black"))+
   xlab("log2 fold change") + ylab("-log10 pvalue")+ 
   ggtitle(paste("Volcano plot", name_control, "vs.", name_mutant))

  #Saves the plot in a variable
  assign(paste("static", "Vplot", name_control, name_mutant, sep = "_"), h)

  #Saves the pdf of the plot in the OUTPUT directory
  pdf(file= paste("static", "Vplot", name_control, name_mutant, ".pdf", sep = "_"))
  print(h)
  dev.off()

  #***Plot dynamic volcano----------------------------------------------------------------------------------------------------------

  #Creates the plot
  k<- ggplotly(h, tooltip=c("text", "x", "y") )

  #Saves the plot in a variable
  assign(paste("dynamic", "Vplot", name_control, name_mutant, sep = "_"), k)

  print(k)

  #Saves the WIDGET of the plot in the OUTPUT directory


# #CREATES THE TABLE FOR GSEA =====================================================
# #The data are taken from the res_raw table.
GSEA_table <- data.frame(Sign= sign(res_raw$log2FoldChange), pval=(res_raw$padj),stringsAsFactors = FALSE)
GSEA_table$metric <- -log10(GSEA_table$pval)/GSEA_table$Sign
rownames(GSEA_table) <- rownames(res_raw)

GSEA_input_ranked_table <- cbind(rownames(GSEA_table), GSEA_table$metric)
colnames(GSEA_input_ranked_table) <- cbind("Gene name", "Metric")
GSEA_input_ranked_table<-GSEA_input_ranked_table[-which(is.na(GSEA_input_ranked_table[,"Metric"])),]

write.table(GSEA_input_ranked_table, file=paste0("GSEA_input_ranked_table_",name_control,"_", name_mutant, ".rnk"), quote=F,sep="\t", row.names = FALSE)


## further analysis, interpretation, and figures =====================================================
require(dplyr)

vplot_tab <- res_annot
vplot_tab <- vplot_tab %>% rename("log2FC" = "log2 FC (MLE)")

########## make volcano plot 
library(ggplot2)
library(ggrepel)
library(dplyr)
library(pheatmap)

vplot_tab$neglog_p = -log10(vplot_tab$BH_pval)
vplot_tab <- vplot_tab[complete.cases(vplot_tab), ]

############  edit formatting of signficance for labelleing

vplot_tab$significant = ifelse(vplot_tab$neglog_p > 2 & vplot_tab$log2FC <=-1.5 | vplot_tab$neglog_p > 2 & vplot_tab$log2FC>=1.5, "sig", "not")
vplot_tab_label1 = subset(vplot_tab, neglog_p > 10)
vplot_tab_label2 = subset(vplot_tab, neglog_p > 7)
vplot_tab_label2 <- subset(vplot_tab_label2, log2FC <=-2.5 | log2FC>=2)
vplot_tab_label3 = subset(vplot_tab, log2FC <=-5)
vplot_tab_label4 = subset(vplot_tab, log2FC >=3.5)
vplot_tab_label_final <- rbind(vplot_tab_label1, vplot_tab_label2)
vplot_tab_label_final <- rbind(vplot_tab_label_final, vplot_tab_label3)
vplot_tab_label_final <- rbind(vplot_tab_label_final, vplot_tab_label4)
vplot_tab_label_final <- vplot_tab_label_final %>% distinct(GeneSymbol, .keep_all = TRUE)

############

Hum_vol <- ggplot(data=vplot_tab, aes(x=log2FC, y=neglog_p, colour=significant)) + geom_point(alpha=0.4, size=1.75) + xlab("Log2 Fold change") + ylab("-log10 p-value") + theme_bw() + theme(legend.position="right") + xlim(c(-5, 5)) + geom_text_repel(data = vplot_tab_label_final, aes(label = GeneSymbol), size = 3, key_glyph = "point")
Hum_vol

pdf(file="Hum_vol.pdf",width=9,height=6)
Hum_vol
dev.off()

############

######################## make heatmaps

##### hm of significantly differentially expressed genes


completeFun <- function(data, desiredCols) {
  completeVec <- complete.cases(data[, desiredCols])
  return(data[completeVec, ])
}


vplot_tab_hm <- vplot_tab
vplot_tab_hm$significant = ifelse(vplot_tab$BH_pval <=.0001 & vplot_tab$log2FC <=-3 | vplot_tab$log2FC>=2.2, "sig", "not")
vplot_tab_hm$sig2 = ifelse(vplot_tab$BH_pval <=.01, "sig", "not")

hm_tab <- as.data.frame(merge(norm_counts, vplot_tab_hm, by="ensembl_id"))
hm_tab$Ctl1 <- as.numeric(hm_tab$Ctl1)
hm_tab$Ctl2 <- as.numeric(hm_tab$Ctl2)
hm_tab$Ctl3 <- as.numeric(hm_tab$Ctl3)
hm_tab$Ctl4 <- as.numeric(hm_tab$Ctl4)
hm_tab$Ctl5 <- as.numeric(hm_tab$Ctl5)
hm_tab$Ctl6 <- as.numeric(hm_tab$Ctl6)
hm_tab$Pat1 <- as.numeric(hm_tab$Pat1)
hm_tab$Pat2 <- as.numeric(hm_tab$Pat2)
hm_tab$Pat3 <- as.numeric(hm_tab$Pat3)
write.table(hm_tab, file="CPM_gsea.csv",sep=",")

hm_tab_sig = subset(hm_tab, significant=="sig")

hm_sig <- pheatmap(hm_tab_sig[2:10], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_sig$GeneSymbol, fontsize_row = 8, cutree_rows = 7, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, main = "Significantly differentially expressed genes")

pdf(file="Hum_hm_sig.pdf",width=8,height=6)
hm_sig
dev.off()


########## other heatmaps not done as would need mouse -> human gene name conversions and not needed at this time


############### Pathway analysis using enrichr =====================================================

require(enrichR)
require(tidyr)
require(cowplot)
require(viridis)

## look at sig up & down genes using enrichR
dbs_option <- listEnrichrDbs()

####### use upregulated genes

up_dge = subset(hm_tab, sig2=='sig' & log2FC>0)
write.table(up_dge,file="up_dge.csv",sep=",")
up_list <- as.data.frame(up_dge$GeneSymbol)
up_list <- up_list %>% rename("genes" = "up_dge$GeneSymbol")
up_list <- up_list %>% drop_na()
up_list <- distinct(up_list)

dbs_search <- c("GO_Biological_Process_2018","KEGG_2019_Human", "MSigDB_Hallmark_2020","GO_Cellular_Component_2018","GTEx_Tissue_Sample_Gene_Expression_Profiles_up","TF_Perturbations_Followed_by_Expression","GO_Molecular_Function_2018", "HMDB_Metabolites")

up_genes_enrichr <- enrichr(up_list$genes, databases = dbs_search)

## make figure from enrichr analyses

GO_biol_data_up <- up_genes_enrichr[["GO_Biological_Process_2018"]]
View(GO_biol_data_up)
GO_biol_data_up = subset(GO_biol_data_up, Adjusted.P.value<.05)
GO_biol_data_up <- GO_biol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_biol_data_up$db <- "GO_biol_2019_Human"
GO_biol_fig_up <-ggplot(data=GO_biol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Biological_Process_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_biol_fig_up

KEGG_data_up <- up_genes_enrichr[["KEGG_2019_Human"]]
View(KEGG_data_up)
KEGG_data_up = subset(KEGG_data_up, Adjusted.P.value<.05)
KEGG_data_up <- KEGG_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
KEGG_data_up$db <- "KEGG_2019_Human"
KEGG_fig_up <-ggplot(data=KEGG_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("KEGG_2019_Human") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
KEGG_fig_up

Hall_data_up <- up_genes_enrichr[["MSigDB_Hallmark_2020"]]
View(Hall_data_up)
Hall_data_up = subset(Hall_data_up, Adjusted.P.value<.05)
Hall_data_up <- Hall_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Hall_data_up$db <- "MSigDB_Hallmark_2020"
Hall_fig_up <-ggplot(data=Hall_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("MSigDB_Hallmark_2020") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
Hall_fig_up

GO_cell_data_up <- up_genes_enrichr[["GO_Cellular_Component_2018"]]
View(GO_cell_data_up)
GO_cell_data_up = subset(GO_cell_data_up, Adjusted.P.value<.05)
GO_cell_data_up <- GO_cell_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_cell_data_up$db <- "GO_Cellular_Component_2018"
GO_cell_fig_up <-ggplot(data=GO_cell_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Cellular_Component_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_cell_fig_up

GTEx_data_up <- up_genes_enrichr[["GTEx_Tissue_Sample_Gene_Expression_Profiles_up"]]
View(GTEx_data_up)
GTEx_data_up = subset(GTEx_data_up, Adjusted.P.value<.05)
GTEx_data_up <- GTEx_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GTEx_data_up$db <- "GTEx_Tissue_Sample_Gene_Expression_Profiles_up"
GTEx_fig_up <-ggplot(data=GTEx_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GTEx_Tissue_Sample_Gene_Expression_Profiles_up") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GTEx_fig_up

TF_data_up <- up_genes_enrichr[["TF_Perturbations_Followed_by_Expression"]]
View(TF_data_up)
TF_data_up = subset(TF_data_up, Adjusted.P.value<.05)
TF_data_up <- TF_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
TF_data_up$db <- "TF_Perturbations_Followed_by_Expression"
TF_fig_up <-ggplot(data=TF_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("TF_Perturbations_Followed_by_Expression") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
TF_fig_up

GO_mol_data_up <- up_genes_enrichr[["GO_Molecular_Function_2018"]]
View(GO_mol_data_up)
GO_mol_data_up = subset(GO_mol_data_up, Adjusted.P.value<.05)
GO_mol_data_up <- GO_mol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_mol_data_up$db <- "GO_Molecular_Function_2018"
GO_mol_fig_up <-ggplot(data=GO_mol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Molecular_Function_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_mol_fig_up

Metabol_data_up <- up_genes_enrichr[["HMDB_Metabolites"]]
View(Metabol_data_up)
Metabol_data_up = subset(Metabol_data_up, Adjusted.P.value<.05)
Metabol_data_up <- Metabol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Metabol_data_up$db <- "HMDB_Metabolites"
Metabol_fig_up <-ggplot(data=Metabol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("HMDB_Metabolites") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
Metabol_fig_up

up_path_summary <- rbind(GO_biol_data_up, KEGG_data_up, Hall_data_up, GO_cell_data_up, GTEx_data_up, TF_data_up, GO_mol_data_up, Metabol_data_up)
up_path_summary$dir <- "Up"  

####### use upregulated genes

down_dge = subset(hm_tab, sig2=='sig' & log2FC<0)
write.table(down_dge,file="down_dge.csv",sep=",")
down_list <- as.data.frame(down_dge$GeneSymbol)
down_list <- down_list %>% rename("genes" = "down_dge$GeneSymbol")
down_list <- down_list %>% drop_na()
down_list <- distinct(down_list)

dbs_search <- c("GO_Biological_Process_2018","KEGG_2019_Human", "MSigDB_Hallmark_2020","GO_Cellular_Component_2018","GTEx_Tissue_Sample_Gene_Expression_Profiles_up","TF_Perturbations_Followed_by_Expression","GO_Molecular_Function_2018", "HMDB_Metabolites")

down_genes_enrichr <- enrichr(down_list$genes, databases = dbs_search)

## make figure from enrichr analyses

GO_biol_data_down <- down_genes_enrichr[["GO_Biological_Process_2018"]]
View(GO_biol_data_down)
GO_biol_data_down = subset(GO_biol_data_down, Adjusted.P.value<.05)
GO_biol_data_down <- GO_biol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_biol_data_down$db <- "GO_biol_2019_Human"
GO_biol_fig_down <-ggplot(data=GO_biol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Biological_Process_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_biol_fig_down

KEGG_data_down <- down_genes_enrichr[["KEGG_2019_Human"]]
View(KEGG_data_down)
KEGG_data_down = subset(KEGG_data_down, Adjusted.P.value<.05)
KEGG_data_down <- KEGG_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
KEGG_data_down$db <- "KEGG_2019_Human"
KEGG_fig_down <-ggplot(data=KEGG_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("KEGG_2019_Human") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
KEGG_fig_down

Hall_data_down <- down_genes_enrichr[["MSigDB_Hallmark_2020"]]
View(Hall_data_down)
Hall_data_down = subset(Hall_data_down, Adjusted.P.value<.05)
Hall_data_down <- Hall_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Hall_data_down$db <- "MSigDB_Hallmark_2020"
Hall_fig_down <-ggplot(data=Hall_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("MSigDB_Hallmark_2020") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
Hall_fig_down

GO_cell_data_down <- down_genes_enrichr[["GO_Cellular_Component_2018"]]
View(GO_cell_data_down)
GO_cell_data_down = subset(GO_cell_data_down, Adjusted.P.value<.05)
GO_cell_data_down <- GO_cell_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_cell_data_down$db <- "GO_Cellular_Component_2018"
GO_cell_fig_down <-ggplot(data=GO_cell_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Cellular_Component_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_cell_fig_down

GTEx_data_down <- down_genes_enrichr[["GTEx_Tissue_Sample_Gene_Expression_Profiles_up"]]
View(GTEx_data_down)
GTEx_data_down = subset(GTEx_data_down, Adjusted.P.value<.05)
GTEx_data_down <- GTEx_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GTEx_data_down$db <- "GTEx_Tissue_Sample_Gene_Expression_Profiles_down"
GTEx_fig_down <-ggplot(data=GTEx_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GTEx_Tissue_Sample_Gene_Expression_Profiles_up") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GTEx_fig_down

TF_data_down <- down_genes_enrichr[["TF_Perturbations_Followed_by_Expression"]]
View(TF_data_down)
TF_data_down = subset(TF_data_down, Adjusted.P.value<.05)
TF_data_down <- TF_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
TF_data_down$db <- "TF_Perturbations_Followed_by_Expression"
TF_fig_down <-ggplot(data=TF_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("TF_Perturbations_Followed_by_Expression") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
TF_fig_down

GO_mol_data_down <- down_genes_enrichr[["GO_Molecular_Function_2018"]]
View(GO_mol_data_down)
GO_mol_data_down = subset(GO_mol_data_down, Adjusted.P.value<.05)
GO_mol_data_down <- GO_mol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_mol_data_down$db <- "GO_Molecular_Function_2018"
GO_mol_fig_down <-ggplot(data=GO_mol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Molecular_Function_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_mol_fig_down

Metabol_data_down <- down_genes_enrichr[["HMDB_Metabolites"]]
View(Metabol_data_down)
Metabol_data_down = subset(Metabol_data_down, Adjusted.P.value<.05)
Metabol_data_down <- Metabol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Metabol_data_down$db <- "HMDB_Metabolites"
Metabol_fig_down <-ggplot(data=Metabol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("HMDB_Metabolites") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
Metabol_fig_down

down_path_summary <- rbind(GO_biol_data_down, KEGG_data_down, Hall_data_down, GO_cell_data_down, GTEx_data_down, TF_data_down, GO_mol_data_down, Metabol_data_down)
down_path_summary$dir <- "down"  

path_summary <- rbind(up_path_summary, down_path_summary)
path_summary <- path_summary %>% arrange(desc(-Adjusted.P.value))               
write.table(path_summary,file="path_summary.csv",sep=",")

up_path_col1 <- plot_grid(GO_biol_fig_up, KEGG_fig_up, Hall_fig_up, GO_cell_fig_up, ncol = 1, labels = c('A', 'C', 'E', 'G', 'I', 'K', 'M', 'O'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))
up_path_col2 <- plot_grid(GTEx_fig_up, TF_fig_up, GO_mol_fig_up, Metabol_fig_up, ncol = 1, labels = c('B', 'D', 'F', 'H'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))

pdf(file="up_path_sumfig.pdf",width=16,height=12)
plot_grid(up_path_col1, up_path_col2, ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()

down_path_col1 <- plot_grid(GO_biol_fig_down, KEGG_fig_down, Hall_fig_down, GO_cell_fig_down, ncol = 1, labels = c('A', 'C', 'E', 'G', 'I', 'K', 'M', 'O'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))
down_path_col2 <- plot_grid(GTEx_fig_down, TF_fig_down, GO_mol_fig_down, Metabol_fig_down, ncol = 1, labels = c('B', 'D', 'F', 'H'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))

pdf(file="down_path_sumfig.pdf",width=16,height=12)
plot_grid(down_path_col1, down_path_col2, ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()


############### Compare differentially expressed genes to human adipose RNAseq data ====================

## convert up and down dge into mouse orthologues

up_dge_hum <- up_dge[!is.na(up_dge$Mouse.gene.name), ]
write.table(up_dge_hum, file="Hum_up_genes.txt",sep="\t")

down_dge_hum <- down_dge[!is.na(down_dge$Mouse.gene.name), ]
write.table(down_dge_hum, file="Hum_down_genes.txt",sep="\t")


Mfn2-R707W RNAseq upstream processing Dec20

## install python3, then pip (ad update it), then cutadapt

brew install python3
python3
sudo easy_install pip
pip --version
sudo -H  pip install --upgrade pip
python3 -m pip install --user --upgrade cutadapt

## add the directory to path

sudo nano /etc/paths

/Users/jakemann/Library/Python/3.7/bin
/Users/jakemann/Library/Python/3.7/lib/python/site-packages 


## trim files 

cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/a237_BAT/a237_BAT_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/a237_BAT/a237_BAT_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a237_BAT/a237_BAT_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a237_BAT/a237_BAT_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/a239_BAT/a239_BAT_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/a239_BAT/a239_BAT_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a239_BAT/a239_BAT_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a239_BAT/a239_BAT_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/a349_BAT/a349_BAT_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/a349_BAT/a349_BAT_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a349_BAT/a349_BAT_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a349_BAT/a349_BAT_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/a359_BAT/a359_BAT_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/a359_BAT/a359_BAT_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a359_BAT/a359_BAT_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a359_BAT/a359_BAT_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/a371_BAT/a371_BAT_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/a371_BAT/a371_BAT_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a371_BAT/a371_BAT_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a371_BAT/a371_BAT_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/a389_IngWAT/a389_IngWAT_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/a389_IngWAT/a389_IngWAT_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a389_IngWAT/a389_IngWAT_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a389_IngWAT/a389_IngWAT_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/a397_IngWAT/a397_IngWAT_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/a397_IngWAT/a397_IngWAT_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a397_IngWAT/a397_IngWAT_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a397_IngWAT/a397_IngWAT_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/a402_IngWAT/a402_IngWAT_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/a402_IngWAT/a402_IngWAT_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a402_IngWAT/a402_IngWAT_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a402_IngWAT/a402_IngWAT_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/a406_IngWAT_v2/a406_IngWAT_v2_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/a406_IngWAT_v2/a406_IngWAT_v2_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a406_IngWAT_v2/a406_IngWAT_v2_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a406_IngWAT_v2/a406_IngWAT_v2_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/a408_IngWAT_v2/a408_IngWAT_v2_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/a408_IngWAT_v2/a408_IngWAT_v2_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a408_IngWAT_v2/a408_IngWAT_v2_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a408_IngWAT_v2/a408_IngWAT_v2_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/a413_IngWAT_v2/a413_IngWAT_v2_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/a413_IngWAT_v2/a413_IngWAT_v2_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a413_IngWAT_v2/a413_IngWAT_v2_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a413_IngWAT_v2/a413_IngWAT_v2_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/a425_IngWAT_v2/a425_IngWAT_v2_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/a425_IngWAT_v2/a425_IngWAT_v2_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a425_IngWAT_v2/a425_IngWAT_v2_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a425_IngWAT_v2/a425_IngWAT_v2_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/a437_IngWAT/a437_IngWAT_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/a437_IngWAT/a437_IngWAT_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a437_IngWAT/a437_IngWAT_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a437_IngWAT/a437_IngWAT_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/a447_IngWAT/a447_IngWAT_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/a447_IngWAT/a447_IngWAT_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a447_IngWAT/a447_IngWAT_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a447_IngWAT/a447_IngWAT_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/a516_IngWAT/a516_IngWAT_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/a516_IngWAT/a516_IngWAT_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a516_IngWAT/a516_IngWAT_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a516_IngWAT/a516_IngWAT_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/a519_IngWAT/a519_IngWAT_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/a519_IngWAT/a519_IngWAT_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a519_IngWAT/a519_IngWAT_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a519_IngWAT/a519_IngWAT_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/a520_IngWAT_v2/a520_IngWAT_v2_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/a520_IngWAT_v2/a520_IngWAT_v2_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a520_IngWAT_v2/a520_IngWAT_v2_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a520_IngWAT_v2/a520_IngWAT_v2_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/a529_IngWAT/a529_IngWAT_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/a529_IngWAT/a529_IngWAT_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a529_IngWAT/a529_IngWAT_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a529_IngWAT/a529_IngWAT_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/a593_BAT/a593_BAT_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/a593_BAT/a593_BAT_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a593_BAT/a593_BAT_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a593_BAT/a593_BAT_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/a596_BAT/a596_BAT_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/a596_BAT/a596_BAT_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a596_BAT/a596_BAT_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a596_BAT/a596_BAT_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/a601_BAT/a601_BAT_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/a601_BAT/a601_BAT_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a601_BAT/a601_BAT_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a601_BAT/a601_BAT_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/a613_BAT/a613_BAT_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/a613_BAT/a613_BAT_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a613_BAT/a613_BAT_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a613_BAT/a613_BAT_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/a614_BAT/a614_BAT_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/a614_BAT/a614_BAT_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a614_BAT/a614_BAT_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a614_BAT/a614_BAT_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/am2_dp8_D/am2_dp8_D_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/am2_dp8_D/am2_dp8_D_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/am2_dp8_D/am2_dp8_D_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/am2_dp8_D/am2_dp8_D_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/am2_dp8_E/am2_dp8_E_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/am2_dp8_E/am2_dp8_E_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/am2_dp8_E/am2_dp8_E_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/am2_dp8_E/am2_dp8_E_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/am2_dp8_F/am2_dp8_F_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/am2_dp8_F/am2_dp8_F_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/am2_dp8_F/am2_dp8_F_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/am2_dp8_F/am2_dp8_F_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dm2_D/aWT_dm2_D_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dm2_D/aWT_dm2_D_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dm2_D/aWT_dm2_D_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dm2_D/aWT_dm2_D_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dm2_F/aWT_dm2_F_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dm2_F/aWT_dm2_F_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dm2_F/aWT_dm2_F_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dm2_F/aWT_dm2_F_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dp8_D/aWT_dp8_D_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dp8_D/aWT_dp8_D_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dp8_D/aWT_dp8_D_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dp8_D/aWT_dp8_D_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dp8_E/aWT_dp8_E_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dp8_E/aWT_dp8_E_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dp8_E/aWT_dp8_E_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dp8_E/aWT_dp8_E_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dp8_F/aWT_dp8_F_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dp8_F/aWT_dp8_F_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dp8_F/aWT_dp8_F_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dp8_F/aWT_dp8_F_2.fq.gz
cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/am2_dm2_E/am2_dm2_E_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/am2_dm2_E/am2_dm2_E_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/am2_dm2_E/am2_dm2_E_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/am2_dm2_E/am2_dm2_E_2.fq.gz

cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/a598_BAT/a598_BAT_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/a598_BAT/a598_BAT_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a598_BAT/a598_BAT_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a598_BAT/a598_BAT_2.fq.gz

cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/am2_dm2_D/am2_dm2_D_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/am2_dm2_D/am2_dm2_D_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/am2_dm2_D/am2_dm2_D_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/am2_dm2_D/am2_dm2_D_2.fq.gz

cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/am2_dm2_F/am2_dm2_F_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/am2_dm2_F/am2_dm2_F_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/am2_dm2_F/am2_dm2_F_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/am2_dm2_F/am2_dm2_F_2.fq.gz

cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dm2_E/aWT_dm2_E_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dm2_E/aWT_dm2_E_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dm2_E/aWT_dm2_E_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dm2_E/aWT_dm2_E_2.fq.gz

cutadapt --nextseq-trim=20 -m 15 -j 0 -a AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG -o /Users/jakemann/RNAseq_Dec20/raw_data/a618_BAT/a618_BAT_1_t.fq.gz -p /Users/jakemann/RNAseq_Dec20/raw_data/a618_BAT/a618_BAT_2_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a618_BAT/a618_BAT_1.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a618_BAT/a618_BAT_2.fq.gz


## used previously indexed genome from previous RNAseq analysis [made using STAR]


## perform alignment

mkdir /Users/jakemann/RNAseq_Dec20/aligned

sudo launchctl limit maxfiles 65536 2000000

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/a237_BAT/a237_BAT_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a237_BAT/a237_BAT_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/a237_BAT

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/a239_BAT/a239_BAT_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a239_BAT/a239_BAT_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/a239_BAT

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/a349_BAT/a349_BAT_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a349_BAT/a349_BAT_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/a349_BAT

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/a359_BAT/a359_BAT_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a359_BAT/a359_BAT_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/a359_BAT

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/a371_BAT/a371_BAT_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a371_BAT/a371_BAT_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/a371_BAT

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/
a389_IngWAT/a389_IngWAT_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a389_IngWAT/a389_IngWAT_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/a389_IngWAT

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/a397_IngWAT/a397_IngWAT_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a397_IngWAT/a397_IngWAT_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/a397_IngWAT

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/a402_IngWAT/a402_IngWAT_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a402_IngWAT/a402_IngWAT_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/a402_IngWAT

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/a406_IngWAT_v2/a406_IngWAT_v2_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a406_IngWAT_v2/a406_IngWAT_v2_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/
a406_IngWAT_v2

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/a408_IngWAT_v2/a408_IngWAT_v2_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a408_IngWAT_v2/a408_IngWAT_v2_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/a408_IngWAT_v2

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/a413_IngWAT_v2/a413_IngWAT_v2_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a413_IngWAT_v2/a413_IngWAT_v2_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/a413_IngWAT_v2

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/a425_IngWAT_v2/a425_IngWAT_v2_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a425_IngWAT_v2/a425_IngWAT_v2_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/a425_IngWAT_v2

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/a437_IngWAT/a437_IngWAT_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a437_IngWAT/a437_IngWAT_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/a437_IngWAT

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/a447_IngWAT/a447_IngWAT_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a447_IngWAT/a447_IngWAT_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/a447_IngWAT

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/a516_IngWAT/a516_IngWAT_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a516_IngWAT/a516_IngWAT_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/a516_IngWAT

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/a519_IngWAT/a519_IngWAT_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a519_IngWAT/a519_IngWAT_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/a519_IngWAT

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/a520_IngWAT_v2/a520_IngWAT_v2_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a520_IngWAT_v2/a520_IngWAT_v2_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/
a520_IngWAT_v2

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/a529_IngWAT/a529_IngWAT_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a529_IngWAT/a529_IngWAT_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/a529_IngWAT

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/a593_BAT/a593_BAT_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a593_BAT/a593_BAT_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/a593_BAT

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/a596_BAT/a596_BAT_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a596_BAT/a596_BAT_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/a596_BAT

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/a598_BAT/a598_BAT_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a598_BAT/a598_BAT_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/a598_BAT

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/a601_BAT/a601_BAT_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a601_BAT/a601_BAT_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/a601_BAT

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/a613_BAT/a613_BAT_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a613_BAT/a613_BAT_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/a613_BAT

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/a614_BAT/a614_BAT_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a614_BAT/a614_BAT_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/a614_BAT

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/a618_BAT/a618_BAT_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/a618_BAT/a618_BAT_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/a618_BAT

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/am2_dm2_D/am2_dm2_D_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/am2_dm2_D/am2_dm2_D_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/am2_dm2_D

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/am2_dm2_E/am2_dm2_E_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/am2_dm2_E/am2_dm2_E_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/am2_dm2_E

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/am2_dm2_F/am2_dm2_F_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/am2_dm2_F/am2_dm2_F_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/am2_dm2_F

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/am2_dp8_D/am2_dp8_D_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/am2_dp8_D/am2_dp8_D_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/am2_dp8_D

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/am2_dp8_E/am2_dp8_E_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/am2_dp8_E/am2_dp8_E_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/am2_dp8_E

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/am2_dp8_F/am2_dp8_F_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/am2_dp8_F/am2_dp8_F_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/am2_dp8_F

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dm2_D/aWT_dm2_D_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dm2_D/aWT_dm2_D_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/aWT_dm2_D

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dm2_E/aWT_dm2_E_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dm2_E/aWT_dm2_E_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/aWT_dm2_E

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dm2_F/aWT_dm2_F_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dm2_F/aWT_dm2_F_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/aWT_dm2_F

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dp8_D/aWT_dp8_D_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dp8_D/aWT_dp8_D_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/aWT_dp8_D

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dp8_E/aWT_dp8_E_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dp8_E/aWT_dp8_E_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/aWT_dp8_E

STAR --runThreadN 12 --genomeDir /Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/genomeDir --readFilesIn /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dp8_F/aWT_dp8_F_1_t.fq.gz /Users/jakemann/RNAseq_Dec20/raw_data/aWT_dp8_F/aWT_dp8_F_2_t.fq.gz --readFilesCommand gunzip -c --outMultimapperOrder Random --outSAMmultNmax 1 --quantMode GeneCounts --outSAMtype BAM Unsorted --outFileNamePrefix /Users/jakemann/RNAseq_Dec20/aligned/aWT_dp8_F



## problem with STAR that means cannot do SortedByCoordiante, therefore will need to sort using samtools

## download samtools - http://www.htslib.org/doc/samtools.html and install if needed: brew install samtools

## sort BAM files

samtools sort /Users/jakemann/RNAseq_Dec20/aligned/a237_BATAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/a237_BAT_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/a239_BATAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/a239_BAT_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/a349_BATAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/a349_BAT_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/a359_BATAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/a359_BAT_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/a371_BATAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/a371_BAT_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/a389_IngWATAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/a389_IngWAT_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/a397_IngWATAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/a397_IngWAT_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/a402_IngWATAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/a402_IngWAT_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/a406_IngWAT_v2Aligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/a406_IngWAT_v2_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/a408_IngWAT_v2Aligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/a408_IngWAT_v2_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/a413_IngWAT_v2Aligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/a413_IngWAT_v2_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/a425_IngWAT_v2Aligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/a425_IngWAT_v2_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/a437_IngWATAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/a437_IngWAT_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/a447_IngWATAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/a447_IngWAT_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/a516_IngWATAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/a516_IngWAT_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/a519_IngWATAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/a519_IngWAT_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/a520_IngWAT_v2Aligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/a520_IngWAT_v2_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/a529_IngWATAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/a529_IngWAT_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/a593_BATAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/a593_BAT_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/a596_BATAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/a596_BAT_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/a598_BATAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/a598_BAT_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/a601_BATAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/a601_BAT_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/a613_BATAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/a613_BAT_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/a614_BATAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/a614_BAT_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/a618_BATAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/a618_BAT_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/am2_dm2_DAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/am2_dm2_D_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/am2_dm2_EAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/am2_dm2_E_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/am2_dm2_FAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/am2_dm2_F_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/am2_dp8_DAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/am2_dp8_D_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/am2_dp8_EAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/am2_dp8_E_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/am2_dp8_FAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/am2_dp8_F_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/aWT_dm2_DAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/aWT_dm2_D_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/aWT_dm2_EAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/aWT_dm2_E_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/aWT_dm2_FAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/aWT_dm2_F_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/aWT_dp8_DAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/aWT_dp8_D_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/aWT_dp8_EAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/aWT_dp8_E_sort.bam
samtools sort /Users/jakemann/RNAseq_Dec20/aligned/aWT_dp8_FAligned.out.bam -o /Users/jakemann/RNAseq_Dec20/aligned/aWT_dp8_F_sort.bam


## counts with with Subread/featureCounts - http://subread.sourceforge.net/

## also export to coded names for DESeq2

export PATH=/Users/jakemann/subread-2.0.1-MacOS-x86_64/bin:$PATH

featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/KI_BAT_1 /Users/jakemann/RNAseq_Dec20/aligned/a237_BAT_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/KI_BAT_2 /Users/jakemann/RNAseq_Dec20/aligned/a239_BAT_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/WT_BAT_1 /Users/jakemann/RNAseq_Dec20/aligned/a349_BAT_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/WT_BAT_2 /Users/jakemann/RNAseq_Dec20/aligned/a359_BAT_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/KI_BAT_3 /Users/jakemann/RNAseq_Dec20/aligned/a371_BAT_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/KI_IngCD_1 /Users/jakemann/RNAseq_Dec20/aligned/a389_IngWAT_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/WT_IngCD_1 /Users/jakemann/RNAseq_Dec20/aligned/a397_IngWAT_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/WT_IngCD_2 /Users/jakemann/RNAseq_Dec20/aligned/a402_IngWAT_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/WT_IngCD_3 /Users/jakemann/RNAseq_Dec20/aligned/a406_IngWAT_v2_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/WT_IngCD_4 /Users/jakemann/RNAseq_Dec20/aligned/a408_IngWAT_v2_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/KI_IngCD_2 /Users/jakemann/RNAseq_Dec20/aligned/a413_IngWAT_v2_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/KI_IngCD_3 /Users/jakemann/RNAseq_Dec20/aligned/a425_IngWAT_v2_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/WT_IngCD_5 /Users/jakemann/RNAseq_Dec20/aligned/a437_IngWAT_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/KI_IngCD_4 /Users/jakemann/RNAseq_Dec20/aligned/a447_IngWAT_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/WT_IngCD_6 /Users/jakemann/RNAseq_Dec20/aligned/a516_IngWAT_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/WT_IngCD_7 /Users/jakemann/RNAseq_Dec20/aligned/a519_IngWAT_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/KI_IngCD_5 /Users/jakemann/RNAseq_Dec20/aligned/a520_IngWAT_v2_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/KI_IngCD_6 /Users/jakemann/RNAseq_Dec20/aligned/a529_IngWAT_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/KI_BAT_4 /Users/jakemann/RNAseq_Dec20/aligned/a593_BAT_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/WT_BAT_3 /Users/jakemann/RNAseq_Dec20/aligned/a596_BAT_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/WT_BAT_4 /Users/jakemann/RNAseq_Dec20/aligned/a598_BAT_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/KI_BAT_5 /Users/jakemann/RNAseq_Dec20/aligned/a601_BAT_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/WT_BAT_5 /Users/jakemann/RNAseq_Dec20/aligned/a613_BAT_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/KI_BAT_6 /Users/jakemann/RNAseq_Dec20/aligned/a614_BAT_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/WT_BAT_6 /Users/jakemann/RNAseq_Dec20/aligned/a618_BAT_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/m2_dm2_D /Users/jakemann/RNAseq_Dec20/aligned/am2_dm2_D_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/m2_dm2_E /Users/jakemann/RNAseq_Dec20/aligned/am2_dm2_E_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/m2_dm2_F /Users/jakemann/RNAseq_Dec20/aligned/am2_dm2_F_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/m2_dp8_D /Users/jakemann/RNAseq_Dec20/aligned/am2_dp8_D_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/m2_dp8_E /Users/jakemann/RNAseq_Dec20/aligned/am2_dp8_E_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/m2_dp8_F /Users/jakemann/RNAseq_Dec20/aligned/am2_dp8_F_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/WT_dm2_D /Users/jakemann/RNAseq_Dec20/aligned/aWT_dm2_D_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/WT_dm2_E /Users/jakemann/RNAseq_Dec20/aligned/aWT_dm2_E_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/WT_dm2_F /Users/jakemann/RNAseq_Dec20/aligned/aWT_dm2_F_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/WT_dp8_D /Users/jakemann/RNAseq_Dec20/aligned/aWT_dp8_D_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/WT_dp8_E /Users/jakemann/RNAseq_Dec20/aligned/aWT_dp8_E_sort.bam
featureCounts -p -s 2 -t exon -g gene_name -a /Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.100.gtf -o /Users/jakemann/RNAseq_Dec20/counts_v1/WT_dp8_F /Users/jakemann/RNAseq_Dec20/aligned/aWT_dp8_F_sort.bam

## then move to R for further analysis


#### PRELIMINARIES ############################################################################################# 

#*Uploads the needed libraries --------------------------------------------------------------------------------


require(DESeq2)

require(ggplot2)

require(data.table)

require(plotly)

require(DT)

require(htmlwidgets)

require(R2HTML)


soft_version <- packageVersion("DESeq2")

#*Set the number of significant digits for the output --------------------------
sig_dig = 4

## Analysis for brown adipose tissue

#*Set the working directory ---------------------------------------------------------------------------------

#get the default wd
default_wd <- getwd()

#Set the directory where all the saved outputs will be stored
setwd("/Users/jakemann/RNAseq_Dec20/output_v1/BAT")

new_wd <- getwd()
#### DATA UPLOAD ###############################################################################################################

annotation_table <- read.csv("/Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.95_gene_annotation_table.txt", sep = "\t")

# inputs the list of the count files
input_files <- list.files(path = "/Users/jakemann/RNAseq_Dec20/counts_v1/", pattern = "*tab$", full.names = TRUE)
input_files <- input_files[grep(input_files, pattern="KI_BAT|WT_BAT")]

# inputs the list of the summary files
summary_files <-  list.files(path = "/Users/jakemann/RNAseq_Dec20/counts_v1/", pattern = "summary$", full.names = TRUE)
summary_files <- summary_files[grep(summary_files, pattern="KI_BAT|WT_BAT")]

#Reads the count files (input_files)
#create a list; each element of a list (named ''sample'' in the following) is a count table
counts_tables <- lapply(input_files, fread, header = FALSE, stringsAsFactors = FALSE, skip=2, select=c(1,7), col.names=c("GeneID","Counts"))

#Reads the summary files (summary_files)
#create a list; each element of a list is a summary table
summary_tables <- lapply(summary_files, read.delim, header = FALSE, stringsAsFactors = FALSE, skip=1, quote = "")

#takes the names of the genes from the counts_tables
genes_names <- counts_tables[[1]]$GeneID
genes_number = length(genes_names)

#take the names of each element (sample) of the list from the input files 
samples_names <- substr(noquote(unlist(lapply(basename(input_files), tools::file_path_sans_ext))) ,1,8)

#assign the names to the elements of the counts_tables list, composed by the counts tables; NOTE: each replicate has its ID
names(counts_tables) <- samples_names

#Creates a single data frame with all the samples as columns, for reporting and clustering purposes -- see heatmaps below
counts_tables_dataframe <- sapply(counts_tables, '[[', 2)
#assignes the genes names to the rows of the counts_tables_dataframe
rownames(counts_tables_dataframe) <- genes_names

#assign the names to the elements of the summary_tables list, composed by the summary tables; NOTE: each replicate has its ID
names(summary_tables) <- samples_names

#take the roots of the samples_names; replicates cannot be distinguished here -- set the name of the control 
name_control <- "WT_"
names_mutants <- setdiff(unique((substr(samples_names,1,3))), name_control)

#Creates the datasets_matrix, containing all the names of the datasets and replicates for reporting purposes
datasets_matrix <- matrix(samples_names, nrow=length(grep(name_control, samples_names)), ncol=length(names_mutants)+1)
colnames(datasets_matrix) <- c(names_mutants, name_control)





####PAIRWISE COMPARISONS ####################################################################################################
# *Set the tresholds ----------------------------------------------------------------------------------------------------

lfc = 1.5 #treshold for the ADJUSTED fold changes
pval = 0.01 #treshold for the ADJUSTED pvalues

num_comparisons=1 #loop's counter initialisation

###COMPARISONS, PLOTS AND TABLES LOOP ======================================================================================

# *Start of the loop ------------------------------------------------------------------------------------------------------
while(num_comparisons <= length(names_mutants)){    

  # **Grabbing the data ----------------------------------------------------------------------------------------------------  
  name_mutant <- names_mutants[num_comparisons]  
  
  #extract the needed samples from the whole list
  assign( paste0("counts_tables_", name_control), counts_tables[grep(name_control, samples_names, value = TRUE)]) #extract the controls counts tables 

  assign( paste0("counts_tables_", name_mutant), counts_tables[grep(name_mutant, samples_names, value = TRUE)]) #extract the mutants counts tables 

  assign( paste0("counts_list_", name_control, "_", name_mutant) , c( get( paste0("counts_tables_", name_control)),  get(paste0("counts_tables_", name_mutant)) )) #merges the two counts tables above in one list

  # **Creating the counts matrix needed for DESeq2 AND ... ---------------------------------------------------------------------  

  #creates the counts matrix: each row is a gene, the first n columns are the counts coming from the control's replicates, the last p columns are the counts from the mutant replicates
  assign( paste0( "columns_list_", name_control, "_", name_mutant), sapply(get( paste0("counts_list_", name_control, "_", name_mutant) ), `[[` , 2) )  #takes one column each two (i.e. only the columns containing the counts) from the counts list

  assign( paste0( "counts_matrix_", name_control, "_", name_mutant),  matrix(unlist( get( paste0( "columns_list_", name_control, "_", name_mutant) ) , use.names = FALSE), ncol = length( get( paste0("counts_list_", name_control, "_", name_mutant) ) ) )  )#convert the list into a matrix, for convenience

  assign( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names"), get(  paste0( "counts_matrix_", name_control, "_", name_mutant) ) )  #the counts matrix with names is also created; at this stage is the same of the counts matrix

  # #filters out low counts
  
  # matrix_to_filter <- get(paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names"))
  # summing_rows <- apply(matrix_to_filter, 1, sum)
  # rows_to_keep <- which(summing_rows > 10)
  # matrix_filtered <- matrix_to_filter[rows_to_keep,]
  # genes_names <- names(matrix_filtered)
  # assign( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names"), matrix_filtered)

  #** ... AND Creating the summary matrix ---------------------------------------------------------------------
  #The summary matrix contains, for each comparison, the general information about the counts statistics
  
  #extracts the needed samples from the whole list
  assign( paste0("summary_tables_", name_control), summary_tables[grep(name_control, samples_names, value = TRUE)]) #extract the controls summary tables 
  
  assign( paste0("summary_tables_", name_mutant), summary_tables[grep(name_mutant, samples_names, value = TRUE)]) #extract the mutants summary tables 
  
  assign( paste0("summary_list_", name_control, "_", name_mutant) , c( get( paste0("summary_tables_", name_control)),  get(paste0("summary_tables_", name_mutant)) )) #merges the two summary tables above in one list
  
  #creates the summary matrix: each row is a gene, the first n columns are the counts coming from the control's replicates, the last p columns are the counts from the mutant replicates
  assign( paste0( "columns_list_", name_control, "_", name_mutant), sapply(get( paste0("summary_list_", name_control, "_", name_mutant) ), `[[` , 2) )  #takes one column each two (i.e. only the columns containing the counts) from the counts list
  
  assign( paste0( "summary_matrix_", name_control, "_", name_mutant),  matrix(unlist( get( paste0( "columns_list_", name_control, "_", name_mutant) ) , use.names = FALSE), ncol = length( get( paste0("summary_list_", name_control, "_", name_mutant) ) ) )  )#convert the list into a matrix, for convenience
  
  assign( paste0( "summary_matrix_", name_control, "_", name_mutant, "_with_names"), get(  paste0( "summary_matrix_", name_control, "_", name_mutant) ) )  #the counts matrix with names is also created; at this stage is the same of the counts matrix
  
  
  col_names <-c(grep(name_control, samples_names, value=TRUE),  grep(name_mutant, samples_names, value = TRUE))  # takes the right names for the columns of the counts matrix, from the sample names 

  dummy<- get( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names") )         #workaround for assigning dynamically colnames and rownames to the counts_matrix - START
  colnames(dummy) <- col_names
  assign(  paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names")  ,  dummy)

  dummy<- get( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names") )
  rownames(dummy) <- genes_names
  assign(  paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names")  ,  dummy)    #workaround for assigning dynamically colnames and rownames to the counts_matrix - END

  dummy<- get( paste0( "summary_matrix_", name_control, "_", name_mutant) )         #workaround for assigning dynamically colnames and rownames to the summary_matrix - START
  colnames(dummy) <- col_names
  rownames(dummy) <- summary_tables[[1]][,1]
  assign(  paste0( "summary_matrix_", name_control, "_", name_mutant)  ,  dummy) #workaround for assigning dynamically colnames and rownames to the summary_matrix - END

  # #Evaluating the number of the reads counted and uncounted by HTSEQ2
  total_uncounted <- apply(get(paste0( "summary_matrix_", name_control, "_", name_mutant))[-1,], 2, sum)
  total_counted <- get(paste0( "summary_matrix_", name_control, "_", name_mutant))[1,]
  total_number <- total_uncounted + total_counted
  fraction_counted <- signif(total_counted/total_number, digits=3)
  void_row<-rep(" ", length(total_counted))
  statistics_matrix <- rbind(total_number, total_counted, total_uncounted,fraction_counted,void_row)
  rownames(statistics_matrix)<-c("TOTAL READS MAPPED", "TOTAL READS COUNTED", "TOTAL READS NON COUNTED", "FRACTION COUNTED" , "DETAILS UNCOUNTED:")

    #merging summary matrix and statistics matrix
  dummy<- rbind(statistics_matrix, get( paste0( "summary_matrix_", name_control, "_", name_mutant) )) 
  assign(  paste0( "summary_matrix_", name_control, "_", name_mutant)  ,  dummy)
  
  #**Defining the "experimental design" -----------------------------------
  comparisons <- sapply(col_names, function(x) substr(x,1,3))  #takes only the first parts of the column names; these are the identifiers of the control and mutant's data, irrespectively of the replicates 

  experimental_design <- data.frame(row.names = col_names, comparisons=comparisons)
  experimental_design$correlated <- c(seq(1: length(grep(name_control, col_names)) ),  seq(1: length(grep(name_mutant, col_names)) ) )
  
  #experimental_design$comparisons<- relevel(experimental_design$comparisons, ref=name_control)
  experimental_design$comparisons<- factor(experimental_design$comparisons, levels=c(name_control, name_mutant))
  
  #**Calling DESeq2 ------------------------

  #Creating the dds data structure, needed from DESEQ2
  dds <- DESeqDataSetFromMatrix(countData= get( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names")) , colData=experimental_design, design=~comparisons)
  
  #Calls DEseq2 on dds and store the results in de
  de<-DESeq(dds)

  #Uses the built-in DESEQ2 results operator for creating a matrix-like structure storing the DE analysis results; the structure is stored in res_raw and subsequently converted in a data frame (res) 
  
  res_raw <-results(de)
  res <- signif(as.data.frame(res_raw), digits = sig_dig) #converts into data frame and sets the number of digits
  res <- cbind(rownames(res), res) #adds one column with the genes ID to the res dataframe (it will be useful later on)
  colnames(res) <- c("ID","Mean of norm counts", "log2 FC (MLE)", "lFC Std Err" , "Wald Stat", "Wald test pval", "BH pval") # sets the column names
  
  
  ##*Plots and Tables -----------------------------------------------------------------------------------------------------------------
  
  #**Assigns dynamic names to the table to export, taking the res data frame defined above ---------------------------------- 
  assign(paste0("results_table_",name_control,"_", name_mutant),  res ) #takes the whole res data frame
  dummy<-merge(annotation_table, get(paste0("results_table_",name_control,"_", name_mutant)), by.x="GeneSymbol", by.y="ID")
  assign(paste0("results_table_",name_control,"_", name_mutant), dummy)
  
  
  assign(paste0("results_table_topscore_",name_control,"_", name_mutant), res[which(abs(res$`log2 FC (MLE)`)>lfc & res$`BH pval` <pval),]) #takes only the rows of the res data frame that have the best log2FC and the best BH pval
  dummy<-merge(annotation_table, get(paste0("results_table_topscore_",name_control,"_", name_mutant)), by.x="GeneSymbol", by.y="ID")
  assign(paste0("results_table_topscore_",name_control,"_", name_mutant), dummy)
  
  
  #**Prints the tables above in .csv---------------------------------------------------------------------------------
  
  #write.table(get(paste0("results_table_topscore_",name_control,"_", name_mutant)), file=paste0("results_table_topscore_",name_control,"_", name_mutant, ".tsv"),quote=F,sep="\t", row.names = FALSE)
  
  #write.table(get(paste0("results_table_",name_control,"_", name_mutant)), file=paste0("results_table_",name_control,"_", name_mutant, ".tsv"), quote=F,sep="\t", row.names = FALSE)
  
  #write.table(get(paste0("counts_matrix_",name_control,"_", name_mutant, "_with_names")), file=paste0("counts_matrix_",name_control,"_", name_mutant, ".tsv"), quote=F,sep="\t", row.names = FALSE)
  
  #**Building the datatables ---------------------------------------------------------------------------------------------------------
  #The datatables are widgets created through the saveWidget function; this can "automatically" be sorted clicking on it --> Useful for having a general overview
  
  #***Summingup datatable ------------------------------------------
  #Builds the datatable containing all the resuls of the DE analysis
  
  #Creates the summingup_matrix, which includes only some columns of the correspondent results_table (more handy for visualisation) 
  assign(paste0("summingup_matrix_",name_control, "_", name_mutant), get(paste0("results_table_",name_control,"_", name_mutant))[, c(1:7,10,11)])
  dummy <- get(paste0("summingup_matrix_",name_control, "_", name_mutant))
  rownames(dummy) <- c()
  assign( paste0("summingup_matrix_",name_control, "_", name_mutant), dummy )
  #Creates a dynamic table (widget) of all the results
  assign(paste0("summingup_datatable_",name_control, "_", name_mutant) , datatable(get(paste0("summingup_matrix_",name_control, "_", name_mutant))) )
  #saves the datatable widget to in the working directory
  saveWidget( get(paste0("summingup_datatable_",name_control, "_", name_mutant)), file= paste0("summingup_datatable_",name_control, "_", name_mutant, ".html") )

  #***Topscores datatable ----------------------------------------- 
  #Builds the matrix containing only the top log2FC (adjusted) top scores (independently on the pvalues)
  assign(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant),  subset(get(paste0("summingup_matrix_",name_control, "_", name_mutant)),  (abs(get(paste0("summingup_matrix_",name_control, "_", name_mutant))[,"log2 FC (MLE)"]) >lfc &  get(paste0("summingup_matrix_",name_control, "_", name_mutant))[,"BH pval"] <pval )  ) ) 
  dummy <- get(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant))
  rownames(dummy) <- c()
  assign( paste0("summingup_matrix_topscores_",name_control, "_", name_mutant), dummy )
  #Creates a dynamic table (widget) of the topscores
  assign(paste0("topscores_datatable_",name_control, "_", name_mutant) , datatable(get(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant))) )
  #saves the datatable widget to in the working directory
  saveWidget( get(paste0("topscores_datatable_",name_control, "_", name_mutant)), file= paste0("topscores_datatable_",name_control, "_", name_mutant, ".html") )

  #**Dispersion plot---------------------------------------------------------------------------------------------
  #This will not be stored or printed; for sanity check purposes only
  plotDispEsts(de, main=paste(name_mutant, " vs ", name_control))

  #**MA plot -----------------------------------------------------------------------------------------------------
  #Plot of the mean of normalised (according to DESEq) counts of the control vs. the log2fold change "corrected as well"

  #***Plot static MA -------------------------------------------------------------------------------------------------- 

  #Creates the dataframe for ggplot
  MA_dataframe <- data.frame(Ln_mean=log(res$`Mean of norm counts`), foldchange = res$`log2 FC (MLE)`, pvaladj=res$`BH pval`)
  rownames(MA_dataframe) <- rownames(res)
  MA_dataframe <- MA_dataframe[which(!is.na(MA_dataframe$foldchange)), ]
  MA_dataframe$Diff_Exp <- rep(0, nrow(MA_dataframe))
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)>=lfc  )] <- "Relevant log2 FC" 
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)>=lfc & MA_dataframe$pvaladj<=pval)] <- "Relevant log2 FC and Pval" 
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)<lfc)] = "Non significant" 

  #Creates the ggplot
  r <-ggplot(MA_dataframe, aes(x=Ln_mean, y=foldchange, text=rownames(MA_dataframe)))+
    geom_point(aes(colour= Diff_Exp), size=.5)+
    geom_hline(yintercept=0, linetype=1, color="green") + geom_hline(yintercept=lfc,linetype=3, color="green") + geom_hline(yintercept=-lfc, linetype=3, color="green")+
    scale_colour_manual(values = c("Relevant log2 FC and Pval" ="red", "Non significant" = "black", "Relevant log2 FC" ="blue"))+
    xlab("ln mean of norm. counts") + ylab("log2 fold change")+ scale_x_continuous(labels = function(x)as.integer(exp(x)))+
    #+ylim(-4, 4)
    labs(aesthetic='custom text')+
    ggtitle(paste("MA plot", name_control, "vs.", name_mutant))

  #Saves the plot in a variable
  assign(paste("static", "MAplot", name_control, name_mutant, sep = "_"), r)

  #Saves the pdf of the plot in the OUTPUT directory
  pdf(file= paste("static", "MAplot", name_control, name_mutant, ".pdf", sep = "_"))
  print(r)
  dev.off()

  #***Plot dynamic MA -------------------------------------------------------------------------------------------------- 

  #Creates the plot
  s<- ggplotly(r, tooltip=c("text", "x", "y") )

  #SAves the plot in a variable
  assign(paste("dynamic", "MAplot", name_control, name_mutant, sep = "_"), s)

  #Saves the WIDGET of the plot in the OUTPUT directory
  print(s)
  saveWidget(s, file= paste0("dynamic_MAplot",name_control, "_", name_mutant, ".html") )

  #**Volcano Plots --------------------------------------------------------------

  #***Plot static volcano--------------------------------------------------------

  #creates a data frame with some of the columns taken from res which, in turn, summarises the DESEq2 results
  tab = data.frame(logFC = res$`log2 FC (MLE)`, negLogPval = -log10(res$`BH pval`))
  rownames(tab) <- rownames(res)

  #Identifies the DE genes
  candidate_results <- subset(res, (abs(res$`log2 FC (MLE)`) > lfc & res$`BH pval` < pval))
  assign( paste0("candidate_results_tab_",name_control,"_",name_mutant), subset(tab, (abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval))) )

  #Identifies the not DE genes
  non_candidate_results <- subset(res, (abs(res$`log2 FC (MLE)`) <= lfc | res$`BH pval` >= pval))
  assign(paste0("non_candidate_results_tab_",name_control,"_",name_mutant), subset(tab, (abs(tab$logFC) <= lfc | tab$negLogPval <= -log10(pval))) )

  #Mark DE and non DE genes in the dataframe 
  dummy <- get(paste0("non_candidate_results_tab_",name_control,"_",name_mutant))
  dummy$Diff_Exp <- "DE -"
  assign(paste0("non_candidate_results_tab_",name_control,"_",name_mutant), dummy)

  dummy <- get(paste0("candidate_results_tab_",name_control,"_",name_mutant))
  if(nrow(dummy)>0){dummy$Diff_Exp <- "DE +"}
  assign(paste0("candidate_results_tab_",name_control,"_",name_mutant), dummy)

  #merge the "candidate" and "non candidate" dataframes
  assign(paste0("results_tab_",name_control,"_",name_mutant), rbind(get(paste0("candidate_results_tab_",name_control,"_",name_mutant)), get(paste0("non_candidate_results_tab_",name_control,"_",name_mutant)) ))

  #builds the ggplot
  h<-ggplot( get(paste0("results_tab_",name_control,"_",name_mutant)), aes(x=logFC, y=negLogPval, text=rownames(get(paste0("results_tab_",name_control,"_",name_mutant))) ) )+
   geom_point(aes(colour= Diff_Exp), size=.5)+
   geom_hline(yintercept=-log10(pval), linetype=3, color="green") + geom_vline(xintercept=-c(-lfc, lfc), linetype=3, color="blue")+
   scale_colour_manual(values = c("DE +" ="red", "DE -" = "black"))+
   xlab("log2 fold change") + ylab("-log10 pvalue")+ 
   ggtitle(paste("Volcano plot", name_control, "vs.", name_mutant))

  #Saves the plot in a variable
  assign(paste("static", "Vplot", name_control, name_mutant, sep = "_"), h)

  #Saves the pdf of the plot in the OUTPUT directory
  pdf(file= paste("static", "Vplot", name_control, name_mutant, ".pdf", sep = "_"))
  print(h)
  dev.off()

  #***Plot dynamic volcano----------------------------------------------------------------------------------------------------------

  #Creates the plot
  k<- ggplotly(h, tooltip=c("text", "x", "y") )

  #Saves the plot in a variable
  assign(paste("dynamic", "Vplot", name_control, name_mutant, sep = "_"), k)

  print(k)

  #Saves the WIDGET of the plot in the OUTPUT directory
  saveWidget(k, file= paste0("dynamic_Vplot",name_control, "_", name_mutant, ".html") )

  #Updates the loop counter
  print(num_comparisons)
  num_comparisons= num_comparisons +1
} 
#*End of the loop --------------------------------------------


# #PRODUCES ADDITIONAL TABLES =================================================

#**Produces the genes_lenghts  ---------------------------------------------------------------
#takes the genes lengths from the first feature counts input file and creates the genes_lenghts table
feature_counts_table <- fread(input_files[[1]])
genes_lenghts <- as.matrix(feature_counts_table$Length)
rownames(genes_lenghts) <- feature_counts_table$Geneid
colnames(genes_lenghts) <- "Lenght"

#**Produces the annotation_table_with_length ---------------------------------------------------------------
annotation_table_with_length <- merge(annotation_table, genes_lenghts, all.x=T, by.x="GeneSymbol", by.y="row.names")

#** Raw counts, CPM, TPM  ---------------------------------------------------------------

# produces the raw_counts matrix
# merges the raw_counts matrix (all the raw counts for each sample) with the genes_lenghts_table
raw_counts <- (merge(annotation_table_with_length, counts(de), by.x="GeneSymbol", by.y="row.names", all.x=T))
write.csv(raw_counts, file="raw_counts.csv", row.names=FALSE)

# produces the Raw Counts Normalised (DESeq2 normalisation) table 
raw_counts_normalised <- (merge(annotation_table_with_length, counts(de, normalized=T), by.x="GeneSymbol", by.y="row.names", all.x=T))
write.csv(raw_counts_normalised, file="raw_counts_normalised.csv", row.names=FALSE)

# computes the CPM on the raw counts
CPM_working = subset(raw_counts, select = c(2:((ncol(norm_counts))+1)))
CPM_working$sum <- rowSums(CPM_working)
CPM <- apply(raw_counts[,c(2:((ncol(norm_counts))+1))],2, function(x){x*10^6/CPM_working$sum})
CPM <- cbind(raw_counts[,c(1:6)],CPM)
write.csv(CPM, file="raw_counts_CPM.csv", row.names=FALSE)

# computes the TPM
RPK <-  (raw_counts[,c(2:((ncol(norm_counts))+1))])/(raw_counts$Lenght/1000)  #<- Reads Per Kilobase (Normalises the counts for the genes length, expressed in kilobases)
Scaling_factor <- apply(RPK,2,sum)/10^6
TPM <- sweep(RPK, 2, Scaling_factor, FUN = '/')
TPM <- cbind(raw_counts[,c(1:6)],TPM)
write.csv(TPM, file="raw_counts_TPM.csv", row.names=FALSE)

#** Produces the results_tables  ---------------------------------------------------------------

#computes the average CPM for controls and mutants
assign(paste0("average_",name_control), apply(CPM[,grep(colnames(CPM), pattern=name_control)],1,mean ) )
dummy<-as.data.frame(get(paste0("average_",name_control)))
colnames(dummy) <- paste0("Average CPM ",name_control)
rownames(dummy) <- CPM$gene_id
assign(paste0("average_",name_control), dummy)
#
assign(paste0("average_",names_mutants), apply(CPM[,grep(colnames(CPM), pattern=names_mutants)],1,mean ) )
dummy<-as.data.frame(get(paste0("average_",names_mutants)))
colnames(dummy) <- paste0("Average CPM ",names_mutants)
rownames(dummy) <- CPM$gene_id
assign(paste0("average_",names_mutants), dummy)
#
#merges the averages CPMs tables with the results table and the genes_length table
dummy<- merge(get(paste0("average_",name_control)),  get(paste0("average_",names_mutants)), by="row.names") 
rownames(dummy) <- dummy$Row.names
dummy<- dummy[,-1]
#
assign(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM"), merge( get(paste0("results_table_",name_control,"_", names_mutants)), dummy, by.y="row.names", by.x="gene_id") ) 
assign(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM"), merge( get(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM")), genes_lenghts, by.x="GeneSymbol", by.y="row.names", all.x=T ) )
write.csv(get(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM")), file=paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM.csv"), row.names = FALSE)
#
assign(paste0("results_table_topscore_", name_control,"_", names_mutants, "_", "CPM"), merge( get(paste0("results_table_topscore_",name_control,"_", names_mutants)), dummy, by.y="row.names", by.x="gene_id") ) 
assign(paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM"), merge( get(paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM")), genes_lenghts, by.x="GeneSymbol", by.y="row.names", all.x=T ) )
write.csv(get(paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM")), file=paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM.csv"), row.names = FALSE)

#**Filters the counts matrix  according to the CPM ------------------------

# # Filters the counts matrix eliminating the rows where at least one element violates the condition (low counts threshold)

count_zeroes<- function(x){length(which(x<=.5))}
numberofzeroes <- apply(CPM[,c(7:ncol(CPM))], 1, count_zeroes)
CPM_filtered <- CPM[which(numberofzeroes<=5),]
# write.csv(counts_matrix_cpm_filtered, file="cpm_counts_filtered.csv")
# 
#Filters the results_mtrx with the same criteria above 
results_mtrx <- get(paste0("results_table_",name_control,"_", name_mutant, "_CPM"))
results_mtrx_filtered <- results_mtrx[which(results_mtrx$gene_id %in% CPM_filtered$gene_id), ]
#write.csv(results_mtrx, file="results_table.csv", row.names = FALSE)
write.csv(results_mtrx_filtered, file="results_table_CPM_filtered.csv", row.names = FALSE)
#Filters the results_mtrx with the same criteria above 
results_mtrx <- get(paste0("results_table_",name_control,"_", name_mutant, "_CPM"))
results_mtrx_filtered <- results_mtrx[which(results_mtrx$gene_id %in% CPM_filtered$gene_id), ]
#write.csv(results_mtrx, file="results_table.csv", row.names = FALSE)
write.csv(results_mtrx_filtered, file="results_table_CPM_filtered.csv", row.names = FALSE)

results_mtrx_topscore <- get(paste0("results_table_topscore_",name_control,"_", name_mutant, "_CPM"))
results_mtrx_topscore_filtered <- results_mtrx_topscore[which(results_mtrx_topscore$gene_id %in% CPM_filtered$gene_id), ]
write.csv(results_mtrx_topscore_filtered, file="results_table_CPM_topscore_filtered.csv", row.names = FALSE)

#CREATES A HEATMAP =================================================
library(gplots)
#class(CPM_filtered) <- "numeric"
#CPM_filtered_resorted <-CPM_filtered[order(CPM_filtered[,7], decreasing = TRUE),]
#class(CPM_filtered_resorted) <- "numeric"
CPM_filtered_heat <- as.matrix(CPM_filtered[,c(7:ncol(CPM))])
class(CPM_filtered_heat) <- "numeric"

CPM_filtered_heat_sorted <-CPM_filtered_heat[order(CPM_filtered_heat[,1], decreasing = TRUE),]

pdf(file="BAT_hm.pdf")
heatmap.2(CPM_filtered_heat_sorted[c(1:7000),], distfun=function(x) dist(x, method="minkowski"), hclustfun=function(x) hclust(x, method="ward.D2"), scale="row", trace = 'none', labRow = FALSE, dendrogram="column", margins=c(8,1), cexCol = .75)
dev.off()


# #CREATES THE TABLE FOR GSEA =====================================================
# #The data are taken from the res_raw table.
GSEA_table <- data.frame(Sign= sign(res_raw$log2FoldChange), pval=(res_raw$padj),stringsAsFactors = FALSE)
GSEA_table$metric <- -log10(GSEA_table$pval)/GSEA_table$Sign
rownames(GSEA_table) <- rownames(res_raw)

GSEA_input_ranked_table <- cbind(rownames(GSEA_table), GSEA_table$metric)
colnames(GSEA_input_ranked_table) <- cbind("Gene name", "Metric")
GSEA_input_ranked_table<-GSEA_input_ranked_table[-which(is.na(GSEA_input_ranked_table[,"Metric"])),]

write.table(GSEA_input_ranked_table, file=paste0("GSEA_input_ranked_table_",name_control,"_", name_mutant, ".rnk"), quote=F,sep="\t", row.names = FALSE)


## further analysis, interpretation, and figures =====================================================
require(dplyr)


vplot_tab <- merge(results_table_WT__KI__CPM, annotation_table, by="gene_id")
vplot_tab <- vplot_tab %>% rename("BH_pval" = "BH pval")
vplot_tab <- vplot_tab %>% rename("log2FC" = "log2 FC (MLE)")

########## make volcano plot 
library(ggplot2)
library(ggrepel)
library(dplyr)
library(pheatmap)

vplot_tab$neglog_p = -log10(vplot_tab$BH_pval)
vplot_tab <- vplot_tab[complete.cases(vplot_tab), ]

############  edit formatting of signficance for labelleing

vplot_tab$significant = ifelse(vplot_tab$neglog_p > 2 & vplot_tab$log2FC <=-1.5 | vplot_tab$neglog_p > 2 & vplot_tab$log2FC>=1.5, "sig", "not")
vplot_tab_label1 = subset(vplot_tab, neglog_p > 15)
vplot_tab_label2 = subset(vplot_tab, neglog_p > 5)
vplot_tab_label2 <- subset(vplot_tab_label2, log2FC <=-2.5 | log2FC>=3)
vplot_tab_label3 = subset(vplot_tab_label2, log2FC <=-2.8)
vplot_tab_label4 = subset(vplot_tab, neglog_p > 2 & vplot_tab$log2FC <=-3 | vplot_tab$neglog_p > 2 & vplot_tab$log2FC>=4.5)
vplot_tab_label_final <- rbind(vplot_tab_label1, vplot_tab_label2)
vplot_tab_label_final <- rbind(vplot_tab_label_final, vplot_tab_label3)
vplot_tab_label_final <- rbind(vplot_tab_label_final, vplot_tab_label4)
vplot_tab_label_final <- vplot_tab_label_final %>% distinct(GeneSymbol.x, .keep_all = TRUE)

############

BAT_vol <- ggplot(data=vplot_tab, aes(x=log2FC, y=neglog_p, colour=significant)) + geom_point(alpha=0.4, size=1.75) + xlab("Log2 Fold change") + ylab("-log10 p-value") + theme_classic() + theme(legend.position="none") + geom_text_repel(data = vplot_tab_label_final, aes(label = GeneSymbol.x), color="black",size = 3, key_glyph = "point") + theme(plot.title = element_text(hjust = 0.2)) + ggtitle("BAT") + scale_colour_manual(values = c("#999999", "#009E73")) + scale_y_continuous(labels = scales::comma, expand = c(0,1), breaks = seq(0, 40, 10), limits=c(0, 40))
pdf(file="BAT_vol.pdf",width=9,height=6)
BAT_vol
dev.off()

############

######################## make heatmaps

##### hm of significantly differentially expressed genes

vplot_tab_hm <- vplot_tab
vplot_tab_hm$significant = ifelse(vplot_tab$BH_pval <=.0001 & vplot_tab$log2FC <=-3 | vplot_tab$log2FC>=2.2, "sig", "not")
vplot_tab_hm$sig2 = ifelse(vplot_tab$BH_pval <=.01, "sig", "not")


norm_counts <- as.data.frame(counts(de, normalized=T))
numberofzeroes <- apply(norm_counts[,c(1:ncol(norm_counts))], 1, count_zeroes)
norm_counts_filtered <- norm_counts[which(numberofzeroes<=5),]
norm_counts_filtered$GeneSymbol.x <- rownames(norm_counts_filtered)

hm_tab <- merge(norm_counts_filtered, vplot_tab_hm, by="GeneSymbol.x")
hm_tab <- hm_tab %>% rename("GeneSymbol.x" = "GeneSymbol")
write.table(hm_tab, file="norm_counts_gsea.csv",sep=",")

hm_tab_sig = subset(hm_tab, significant=="sig")

hm_sig <- pheatmap(hm_tab_sig[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_sig$GeneSymbol, fontsize_row = 8, cutree_rows = 7, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, main = "Significantly differentially expressed genes")

pdf(file="BAT_hm_sig.pdf",width=8,height=8)
hm_sig
dev.off()


##### hm of adipogenesis-related genes

hm_tab_adip = subset(hm_tab, GeneSymbol=="Lep" | GeneSymbol=="Adipoq" | GeneSymbol=="Cd36" | GeneSymbol=="Pparg" | GeneSymbol=="Glut4" | GeneSymbol=="Fasn"| GeneSymbol=="Plin1"| GeneSymbol=="Plin2"| GeneSymbol=="Plin4"| GeneSymbol=="Fabp4"| GeneSymbol=="Isnr"| GeneSymbol=="Lpl"| GeneSymbol=="Agpat2"| GeneSymbol=="Bscl2"| GeneSymbol=="Cidec"| GeneSymbol=="Cebpa"| GeneSymbol=="Acaca"| GeneSymbol=="Ppargc1a"| GeneSymbol=="Ppargc1b"| GeneSymbol=="Slc2a4" )

rownames(hm_tab_adip) = hm_tab_adip$GeneSymbol
hm_adip_annot = data.frame("Sig" = hm_tab_adip$sig2)
rownames(hm_adip_annot) = rownames(hm_tab_adip)

hm_adip <- pheatmap(hm_tab_adip[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_adip$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_adip_annot, legend_labels = "Relative expression", main = "Adipogenesis-related genes")

pdf(file="BAT_hm_adip.pdf",width=5,height=6)
hm_adip
dev.off()

##### hm of ISR-related genes

hm_tab_ISR = subset(hm_tab, GeneSymbol=="Atf4" | GeneSymbol=="Atf5" |GeneSymbol=="Atf6" | GeneSymbol=="Xbp1" | GeneSymbol=="Gdf15" | GeneSymbol=="Fgf21" | GeneSymbol=="Trib3"| GeneSymbol=="Eif2ak4"| GeneSymbol=="Ddit3"| GeneSymbol=="Gadd34"| GeneSymbol=="Perk"| GeneSymbol=="Eif2ak1"| GeneSymbol=="Hif1a")
hm_tab_ISR <- hm_tab_ISR %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_ISR) = hm_tab_ISR$GeneSymbol
hm_ISR_annot = data.frame("Sig" = hm_tab_ISR$sig2)
rownames(hm_ISR_annot) = rownames(hm_tab_ISR)

hm_ISR <- pheatmap(hm_tab_ISR[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_ISR$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_ISR_annot, main = "ISR genes")

pdf(file="BAT_hm_ISR.pdf",width=5,height=6)
hm_ISR
dev.off()

##### hm of mitochondrial-related genes

hm_tab_mito = subset(hm_tab, GeneSymbol=="Mfn1" | GeneSymbol=="Mfn2" | GeneSymbol=="Opa1" | GeneSymbol=="Fis1" | GeneSymbol=="Tomm20" | GeneSymbol=="Ppargc1a"| GeneSymbol=="Ppargc1b"| GeneSymbol=="Cs" | GeneSymbol=='mt-Rnr1' | GeneSymbol=='mt-Rnr2' | GeneSymbol=='mt-Tl1' | GeneSymbol=='mt-Nd1' | GeneSymbol=='mt-Ti' | GeneSymbol=='mt-Tq' | GeneSymbol=='mt-Tm' | GeneSymbol=='mt-Nd2' | GeneSymbol=='mt-Tw' | GeneSymbol=='mt-Ta' | GeneSymbol=='mt-Tn' | GeneSymbol=='mt-Tc' | GeneSymbol=='mt-Ty' | GeneSymbol=='mt-Co1' | GeneSymbol=='mt-Ts1' | GeneSymbol=='mt-Td' | GeneSymbol=='mt-Co2' | GeneSymbol=='mt-Atp8' | GeneSymbol=='mt-Atp6' | GeneSymbol=='mt-Co3' | GeneSymbol=='mt-Tg' | GeneSymbol=='mt-Nd3' | GeneSymbol=='mt-Tr' | GeneSymbol=='mt-Nd4' | GeneSymbol=='mt-Th' | GeneSymbol=='mt-Ts2' | GeneSymbol=='mt-Tl2' | GeneSymbol=='mt-Nd5' | GeneSymbol=='mt-Nd6' | GeneSymbol=='mt-Te' | GeneSymbol=='mt-Cytb' | GeneSymbol=='mt-Tt' | GeneSymbol=='mt-Tp' | GeneSymbol=='mt-Nd4l' | GeneSymbol=='Sdha' | GeneSymbol=="Prkn" | GeneSymbol=="Pink1" | GeneSymbol=="Bnip3" | GeneSymbol=="Nrf1" | GeneSymbol==""| GeneSymbol=="Mff"| GeneSymbol=="Cycs")
hm_tab_mito <- hm_tab_mito %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_mito) = hm_tab_mito$GeneSymbol
hm_mito_annot = data.frame("Sig" = hm_tab_mito$sig2)
rownames(hm_mito_annot) = rownames(hm_tab_mito)

hm_mito <- pheatmap(hm_tab_mito[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_mito$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial function-related genes")

pdf(file="BAT_hm_mito.pdf",width=5,height=6)
hm_mito
dev.off()

##### hm of inflammation-related genes

hm_tab_inflam = subset(hm_tab, GeneSymbol=='Ifng' |GeneSymbol=='Cd68' |GeneSymbol=='Cd11b' |GeneSymbol=='Itgam' |GeneSymbol=='Ccl2' |GeneSymbol=='Cd4' |GeneSymbol=='Cd3g' |GeneSymbol=='Cd8a' |GeneSymbol=='Tnf' |GeneSymbol=='Il1b' |GeneSymbol=='Il4' |GeneSymbol=='Il13' |GeneSymbol=='Il10' |GeneSymbol=='Ptprc' |GeneSymbol=='Adgre1' |GeneSymbol=='Il6' |GeneSymbol=='Mif' |GeneSymbol=='Tlr4')
hm_tab_inflam <- hm_tab_inflam %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_inflam) = hm_tab_inflam$GeneSymbol
hm_inflam_annot = data.frame("Sig" = hm_tab_inflam$sig2)
rownames(hm_inflam_annot) = rownames(hm_tab_inflam)

hm_inflam <- pheatmap(hm_tab_inflam[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_inflam$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_inflam_annot, legend_labels = "Relative expression", main = "Inflammatory genes")

pdf(file="BAT_hm_inflam.pdf",width=5,height=6)
hm_inflam
dev.off()


##### hm of fibrosis-related genes

hm_tab_fibros = subset(hm_tab, GeneSymbol=='Tgfb1' |GeneSymbol=='Sod1' |GeneSymbol=='Hif1a' |GeneSymbol=='Pdgfa' |GeneSymbol=='Gtf2ird1' |GeneSymbol=='Inhba' |GeneSymbol=='Rock1')
hm_tab_fibros <- hm_tab_fibros %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_fibros) = hm_tab_fibros$GeneSymbol
hm_fibros_annot = data.frame("Sig" = hm_tab_fibros$sig2)
rownames(hm_fibros_annot) = rownames(hm_tab_fibros)

hm_fibros <- pheatmap(hm_tab_fibros[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_fibros$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_fibros_annot, legend_labels = "Relative expression", main = "Fibrosis-related genes")

pdf(file="BAT_hm_fibros.pdf",width=5,height=6)
hm_fibros
dev.off()



##### hm of hallmark adipogenesis genes

hm_tab_hall_adip1 = subset(hm_tab, GeneSymbol=='Abca1' |GeneSymbol=='Abcb8' |GeneSymbol=='Acaa2' |GeneSymbol=='Acadl' |GeneSymbol=='Acadm' |GeneSymbol=='Acads' |GeneSymbol=='Acly' |GeneSymbol=='Aco2' |GeneSymbol=='Acox1' |GeneSymbol=='Adcy6' |GeneSymbol=='Adig' |GeneSymbol=='Adipoq' |GeneSymbol=='Adipor2' |GeneSymbol=='Agpat3' |GeneSymbol=='Aifm1' |GeneSymbol=='Ak2' |GeneSymbol=='Aldh2' |GeneSymbol=='Aldoa' |GeneSymbol=='Angpt1' |GeneSymbol=='Angptl4' |GeneSymbol=='Aplp2' |GeneSymbol=='Apoe' |GeneSymbol=='Araf' |GeneSymbol=='Arl4A' |GeneSymbol=='Atl2' |GeneSymbol=='Atp1B3' |GeneSymbol=='Atp5Po' |GeneSymbol=='Baz2A' |GeneSymbol=='Bckdha' |GeneSymbol=='Bcl2L13' |GeneSymbol=='Bcl6' |GeneSymbol=='C3' |GeneSymbol=='Cat' |GeneSymbol=='Cavin1' |GeneSymbol=='Cavin2' |GeneSymbol=='Ccng2' |GeneSymbol=='Cd151' |GeneSymbol=='Cd302' |GeneSymbol=='Cd36' |GeneSymbol=='Cdkn2C' |GeneSymbol=='Chchd10' |GeneSymbol=='Chuk' |GeneSymbol=='Cidea' |GeneSymbol=='Cmbl' |GeneSymbol=='Cmpk1' |GeneSymbol=='Col15A1' |GeneSymbol=='Col4A1' |GeneSymbol=='Coq3' |GeneSymbol=='Coq5' |GeneSymbol=='Coq9' |GeneSymbol=='Cox6A1' |GeneSymbol=='Cox7B' |GeneSymbol=='Cox8A' |GeneSymbol=='Cpt2' |GeneSymbol=='Crat' |GeneSymbol=='Cs' |GeneSymbol=='Cyc1' |GeneSymbol=='Cyp4B1' |GeneSymbol=='Dbt' |GeneSymbol=='Ddt' |GeneSymbol=='Decr1' |GeneSymbol=='Dgat1' |GeneSymbol=='Dhcr7' |GeneSymbol=='Dhrs7' |GeneSymbol=='Dhrs7B' |GeneSymbol=='Dlat' |GeneSymbol=='Dld' |GeneSymbol=='Dnajb9' |GeneSymbol=='Dnajc15' |GeneSymbol=='Dram2' |GeneSymbol=='Ech1' |GeneSymbol=='Echs1' |GeneSymbol=='Elmod3' |GeneSymbol=='Elovl6' |GeneSymbol=='Enpp2' |GeneSymbol=='Ephx2' |GeneSymbol=='Esrra' |GeneSymbol=='Esyt1' |GeneSymbol=='Etfb' |GeneSymbol=='Fabp4' |GeneSymbol=='Fah' |GeneSymbol=='Fzd4' |GeneSymbol=='G3Bp2' |GeneSymbol=='Gadd45A' |GeneSymbol=='Gbe1' |GeneSymbol=='Ghitm' |GeneSymbol=='Gpam' |GeneSymbol=='Gpat4' |GeneSymbol=='Gpd2' |GeneSymbol=='Gphn' |GeneSymbol=='Gpx3' |GeneSymbol=='Gpx4' |GeneSymbol=='Grpel1' |GeneSymbol=='Hadh' |GeneSymbol=='Hibch' |GeneSymbol=='Hspb8' |GeneSymbol=='Idh1' |GeneSymbol=='Idh3A' |GeneSymbol=='Idh3G' |GeneSymbol=='Ifngr1' |GeneSymbol=='Immt' |GeneSymbol=='Itga7' |GeneSymbol=='Itih5' |GeneSymbol=='Itsn1' |GeneSymbol=='Jagn1' |GeneSymbol=='Lama4' |GeneSymbol=='Lep' |GeneSymbol=='Lifr' |GeneSymbol=='Lipe' |GeneSymbol=='Lpcat3' |GeneSymbol=='Lpl' |GeneSymbol=='Ltc4S' |GeneSymbol=='Map4K3' |GeneSymbol=='Mccc1' |GeneSymbol=='Mdh2' |GeneSymbol=='Me1' |GeneSymbol=='Mgll' |GeneSymbol=='Mgst3' |GeneSymbol=='Miga2' |GeneSymbol=='Mrap' |GeneSymbol=='Mrpl15' |GeneSymbol=='Mtarc2')

hm_tab_hall_adip2 = subset(hm_tab, GeneSymbol=='Mtch2' |GeneSymbol=='Mylk' |GeneSymbol=='Nabp1' |GeneSymbol=='Ndufa5' |GeneSymbol=='Ndufab1' |GeneSymbol=='Ndufb7' |GeneSymbol=='Ndufs3' |GeneSymbol=='Nkiras1' |GeneSymbol=='Nmt1' |GeneSymbol=='Omd' |GeneSymbol=='Orm1' |GeneSymbol=='Pdcd4' |GeneSymbol=='Pemt' |GeneSymbol=='Pex14' |GeneSymbol=='Pfkfb3' |GeneSymbol=='Pfkl' |GeneSymbol=='Pgm1' |GeneSymbol=='Phldb1' |GeneSymbol=='Phyh' |GeneSymbol=='Pim3' |GeneSymbol=='Plin2' |GeneSymbol=='Por' |GeneSymbol=='Pparg' |GeneSymbol=='Ppm1B' |GeneSymbol=='Ppp1R15B' |GeneSymbol=='Prdx3' |GeneSymbol=='Preb' |GeneSymbol=='Ptcd3' |GeneSymbol=='Ptger3' |GeneSymbol=='Qdpr' |GeneSymbol=='Rab34' |GeneSymbol=='Reep5' |GeneSymbol=='Reep6' |GeneSymbol=='Retn' |GeneSymbol=='Retsat' |GeneSymbol=='Riok3' |GeneSymbol=='Rmdn3' |GeneSymbol=='Rnf11' |GeneSymbol=='Rreb1' |GeneSymbol=='Rtn3' |GeneSymbol=='Samm50' |GeneSymbol=='Scarb1' |GeneSymbol=='Scp2' |GeneSymbol=='Sdhb' |GeneSymbol=='Sdhc' |GeneSymbol=='Slc19A1' |GeneSymbol=='Slc1A5' |GeneSymbol=='Slc25A1' |GeneSymbol=='Slc25A10' |GeneSymbol=='Slc27A1' |GeneSymbol=='Slc5A6' |GeneSymbol=='Slc66A3' |GeneSymbol=='Sncg' |GeneSymbol=='Sod1' |GeneSymbol=='Sorbs1' |GeneSymbol=='Sowahc' |GeneSymbol=='Sparcl1' |GeneSymbol=='Sqor' |GeneSymbol=='Sspn' |GeneSymbol=='Stat5A' |GeneSymbol=='Stom' |GeneSymbol=='Suclg1' |GeneSymbol=='Sult1A1' |GeneSymbol=='Taldo1' |GeneSymbol=='Tank' |GeneSymbol=='Tkt' |GeneSymbol=='Tob1' |GeneSymbol=='Tst' |GeneSymbol=='Ubc' |GeneSymbol=='Ubqln1' |GeneSymbol=='Uck1' |GeneSymbol=='Ucp2' |GeneSymbol=='Uqcr10' |GeneSymbol=='Uqcr11' |GeneSymbol=='Uqcrc1' |GeneSymbol=='Uqcrq' |GeneSymbol=='Vegfb' |GeneSymbol=='Ywhag')

hm_tab_hall_adip <- rbind(hm_tab_hall_adip1, hm_tab_hall_adip2)

hm_tab_hall_adip <- hm_tab_hall_adip %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_adip) = hm_tab_hall_adip$GeneSymbol
hm_hall_adip_annot = data.frame("Sig" = hm_tab_hall_adip$sig2)
rownames(hm_hall_adip_annot) = rownames(hm_tab_hall_adip)

hm_hall_adip <- pheatmap(hm_tab_hall_adip[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_adip$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_adip_annot, legend_labels = "Relative expression", main = "HALLMARK_ADIPOGENESIS genes")

pdf(file="BAT_hm_hall_adip.pdf",width=6,height=12)
hm_hall_adip
dev.off()


##### hm of hallmark oxphos genes

hm_tab_hall_oxphos1 = subset(hm_tab, GeneSymbol=='Abcb7' |GeneSymbol=='Acaa1' |GeneSymbol=='Acaa2' |GeneSymbol=='Acadm' |GeneSymbol=='Acadsb' |GeneSymbol=='Acadvl' |GeneSymbol=='Acat1' |GeneSymbol=='Aco2' |GeneSymbol=='Afg3L2' |GeneSymbol=='Aifm1' |GeneSymbol=='Alas1' |GeneSymbol=='Aldh6A1' |GeneSymbol=='Atp1B1' |GeneSymbol=='Atp5F1A' |GeneSymbol=='Atp5F1B' |GeneSymbol=='Atp5F1C' |GeneSymbol=='Atp5F1D' |GeneSymbol=='Atp5F1E' |GeneSymbol=='Atp5Mc1' |GeneSymbol=='Atp5Mc2' |GeneSymbol=='Atp5Mc3' |GeneSymbol=='Atp5Me' |GeneSymbol=='Atp5Mf' |GeneSymbol=='Atp5Mg' |GeneSymbol=='Atp5Pb' |GeneSymbol=='Atp5Pd' |GeneSymbol=='Atp5Pf' |GeneSymbol=='Atp5Po' |GeneSymbol=='Atp6Ap1' |GeneSymbol=='Atp6V0B' |GeneSymbol=='Atp6V0C' |GeneSymbol=='Atp6V0E1' |GeneSymbol=='Atp6V1C1' |GeneSymbol=='Atp6V1D' |GeneSymbol=='Atp6V1E1' |GeneSymbol=='Atp6V1F' |GeneSymbol=='Atp6V1G1' |GeneSymbol=='Atp6V1H' |GeneSymbol=='Bax' |GeneSymbol=='Bckdha' |GeneSymbol=='Bdh2' |GeneSymbol=='Casp7' |GeneSymbol=='Cox10' |GeneSymbol=='Cox11' |GeneSymbol=='Cox15' |GeneSymbol=='Cox17' |GeneSymbol=='Cox4I1' |GeneSymbol=='Cox5A' |GeneSymbol=='Cox5B' |GeneSymbol=='Cox6A1' |GeneSymbol=='Cox6B1' |GeneSymbol=='Cox6C' |GeneSymbol=='Cox7A2' |GeneSymbol=='Cox7A2L' |GeneSymbol=='Cox7B' |GeneSymbol=='Cox7C' |GeneSymbol=='Cox8A' |GeneSymbol=='Cpt1A' |GeneSymbol=='Cs' |GeneSymbol=='Cyb5A' |GeneSymbol=='Cyb5R3' |GeneSymbol=='Cyc1' |GeneSymbol=='Cycs' |GeneSymbol=='Decr1' |GeneSymbol=='Dlat' |GeneSymbol=='Dld' |GeneSymbol=='Dlst' |GeneSymbol=='Ech1' |GeneSymbol=='Echs1' |GeneSymbol=='Eci1' |GeneSymbol=='Etfa' |GeneSymbol=='Etfb' |GeneSymbol=='Etfdh' |GeneSymbol=='Fdx1' |GeneSymbol=='Fh' |GeneSymbol=='Fxn' |GeneSymbol=='Glud1' |GeneSymbol=='Got2' |GeneSymbol=='Gpi' |GeneSymbol=='Gpx4' |GeneSymbol=='Grpel1' |GeneSymbol=='Hadha' |GeneSymbol=='Hadhb' |GeneSymbol=='Hccs' |GeneSymbol=='Hsd17B10' |GeneSymbol=='Hspa9' |GeneSymbol=='Htra2' |GeneSymbol=='Idh1' |GeneSymbol=='Idh2' |GeneSymbol=='Idh3A' |GeneSymbol=='Idh3B' |GeneSymbol=='Idh3G' |GeneSymbol=='Immt' |GeneSymbol=='Isca1' |GeneSymbol=='Iscu' |GeneSymbol=='Ldha' |GeneSymbol=='Ldhb' |GeneSymbol=='Lrpprc' |GeneSymbol=='Maob' |GeneSymbol=='Mdh1' |GeneSymbol=='Mdh2' |GeneSymbol=='Mfn2' |GeneSymbol=='Mgst3' |GeneSymbol=='Mpc1' |GeneSymbol=='Mrpl11' |GeneSymbol=='Mrpl15' |GeneSymbol=='Mrpl34' |GeneSymbol=='Mrpl35' |GeneSymbol=='Mrps11' |GeneSymbol=='Mrps12' |GeneSymbol=='Mrps15' |GeneSymbol=='Mrps22' |GeneSymbol=='Mrps30' |GeneSymbol=='Mtrf1')

hm_tab_hall_oxphos2 = subset(hm_tab, GeneSymbol=='Mtrr' |GeneSymbol=='Mtx2' |GeneSymbol=='Ndufa1' |GeneSymbol=='Ndufa2' |GeneSymbol=='Ndufa3' |GeneSymbol=='Ndufa4' |GeneSymbol=='Ndufa5' |GeneSymbol=='Ndufa6' |GeneSymbol=='Ndufa7' |GeneSymbol=='Ndufa8' |GeneSymbol=='Ndufa9' |GeneSymbol=='Ndufab1' |GeneSymbol=='Ndufb1' |GeneSymbol=='Ndufb2' |GeneSymbol=='Ndufb3' |GeneSymbol=='Ndufb4' |GeneSymbol=='Ndufb5' |GeneSymbol=='Ndufb6' |GeneSymbol=='Ndufb7' |GeneSymbol=='Ndufb8' |GeneSymbol=='Ndufc1' |GeneSymbol=='Ndufc2' |GeneSymbol=='Ndufs1' |GeneSymbol=='Ndufs2' |GeneSymbol=='Ndufs3' |GeneSymbol=='Ndufs4' |GeneSymbol=='Ndufs6' |GeneSymbol=='Ndufs7' |GeneSymbol=='Ndufs8' |GeneSymbol=='Ndufv1' |GeneSymbol=='Ndufv2' |GeneSymbol=='Nnt' |GeneSymbol=='Nqo2' |GeneSymbol=='Oat' |GeneSymbol=='Ogdh' |GeneSymbol=='Opa1' |GeneSymbol=='Oxa1L' |GeneSymbol=='Pdha1' |GeneSymbol=='Pdhb' |GeneSymbol=='Pdhx' |GeneSymbol=='Pdk4' |GeneSymbol=='Pdp1' |GeneSymbol=='Phb2' |GeneSymbol=='Phyh' |GeneSymbol=='Pmpca' |GeneSymbol=='Polr2F' |GeneSymbol=='Por' |GeneSymbol=='Prdx3' |GeneSymbol=='Retsat' |GeneSymbol=='Rhot1' |GeneSymbol=='Rhot2' |GeneSymbol=='Sdha' |GeneSymbol=='Sdhb' |GeneSymbol=='Sdhc' |GeneSymbol=='Sdhd' |GeneSymbol=='Slc25A11' |GeneSymbol=='Slc25A12' |GeneSymbol=='Slc25A20' |GeneSymbol=='Slc25A3' |GeneSymbol=='Slc25A4' |GeneSymbol=='Slc25A5' |GeneSymbol=='Slc25A6' |GeneSymbol=='Sucla2' |GeneSymbol=='Suclg1' |GeneSymbol=='Supv3L1' |GeneSymbol=='Surf1' |GeneSymbol=='Tcirg1' |GeneSymbol=='Timm10' |GeneSymbol=='Timm13' |GeneSymbol=='Timm17A' |GeneSymbol=='Timm50' |GeneSymbol=='Timm8B' |GeneSymbol=='Timm9' |GeneSymbol=='Tomm22' |GeneSymbol=='Tomm70' |GeneSymbol=='Uqcr10' |GeneSymbol=='Uqcr11' |GeneSymbol=='Uqcrb' |GeneSymbol=='Uqcrc1' |GeneSymbol=='Uqcrc2' |GeneSymbol=='Uqcrfs1' |GeneSymbol=='Uqcrh' |GeneSymbol=='Uqcrq' |GeneSymbol=='Vdac1' |GeneSymbol=='Vdac2' |GeneSymbol=='Vdac3')

hm_tab_hall_oxphos <- rbind(hm_tab_hall_oxphos1, hm_tab_hall_oxphos2)

hm_tab_hall_oxphos <- hm_tab_hall_oxphos %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_oxphos) = hm_tab_hall_oxphos$GeneSymbol
hm_hall_oxphos_annot = data.frame("Sig" = hm_tab_hall_oxphos$sig2)
rownames(hm_hall_oxphos_annot) = rownames(hm_tab_hall_oxphos)

hm_hall_oxphos <- pheatmap(hm_tab_hall_oxphos[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_oxphos$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_oxphos_annot, legend_labels = "Relative expression", main = "HALLMARK_OXIDATIVE_PHOSPHORYLATION genes")

pdf(file="BAT_hm_hall_oxphos.pdf",width=7,height=12)
hm_hall_oxphos
dev.off()


##### hm of hallmark ROS genes

hm_tab_hall_ros = subset(hm_tab, GeneSymbol=='Abcc1' |GeneSymbol=='Atox1' |GeneSymbol=='Cat' |GeneSymbol=='Cdkn2D' |GeneSymbol=='Egln2' |GeneSymbol=='Ercc2' |GeneSymbol=='Fes' |GeneSymbol=='Ftl' |GeneSymbol=='G6Pd' |GeneSymbol=='Gclc' |GeneSymbol=='Gclm' |GeneSymbol=='Glrx' |GeneSymbol=='Glrx2' |GeneSymbol=='Gpx3' |GeneSymbol=='Gpx4' |GeneSymbol=='Gsr' |GeneSymbol=='Hhex' |GeneSymbol=='Hmox2' |GeneSymbol=='Ipcef1' |GeneSymbol=='Junb' |GeneSymbol=='Lamtor5' |GeneSymbol=='Lsp1' |GeneSymbol=='Mbp' |GeneSymbol=='Mgst1' |GeneSymbol=='Mpo' |GeneSymbol=='Msra' |GeneSymbol=='Ndufa6' |GeneSymbol=='Ndufb4' |GeneSymbol=='Ndufs2' |GeneSymbol=='Nqo1' |GeneSymbol=='Oxsr1' |GeneSymbol=='Pdlim1' |GeneSymbol=='Pfkp' |GeneSymbol=='Prdx1' |GeneSymbol=='Prdx2' |GeneSymbol=='Prdx4' |GeneSymbol=='Prdx6' |GeneSymbol=='Prnp' |GeneSymbol=='Ptpa' |GeneSymbol=='Sbno2' |GeneSymbol=='Scaf4' |GeneSymbol=='Selenos' |GeneSymbol=='Sod1' |GeneSymbol=='Sod2' |GeneSymbol=='Srxn1' |GeneSymbol=='Stk25' |GeneSymbol=='Txn' |GeneSymbol=='Txnrd1' |GeneSymbol=='Txnrd2')

hm_tab_hall_ros <- hm_tab_hall_ros %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_ros) = hm_tab_hall_ros$GeneSymbol
hm_hall_ros_annot = data.frame("Sig" = hm_tab_hall_ros$sig2)
rownames(hm_hall_ros_annot) = rownames(hm_tab_hall_ros)

hm_hall_ros <- pheatmap(hm_tab_hall_ros[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_ros$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_ros_annot, legend_labels = "Relative expression", main = "HALLMARK_REACTIVE_OXYGEN_SPECIES_PATHWAY genes")

pdf(file="BAT_hm_hall_ros.pdf",width=8,height=10)
hm_hall_ros
dev.off()


##### hm of hallmark UPR genes

hm_tab_hall_UPR = subset(hm_tab, GeneSymbol=='Aldh18A1' |GeneSymbol=='Arfgap1' |GeneSymbol=='Asns' |GeneSymbol=='Atf3' |GeneSymbol=='Atf4' |GeneSymbol=='Atf6' |GeneSymbol=='Atp6V0D1' |GeneSymbol=='Bag3' |GeneSymbol=='Banf1' |GeneSymbol=='Calr' |GeneSymbol=='Ccl2' |GeneSymbol=='Cebpb' |GeneSymbol=='Cebpg' |GeneSymbol=='Chac1' |GeneSymbol=='Cks1B' |GeneSymbol=='Cnot2' |GeneSymbol=='Cnot4' |GeneSymbol=='Cnot6' |GeneSymbol=='Cxxc1' |GeneSymbol=='Dcp1A' |GeneSymbol=='Dcp2' |GeneSymbol=='Dctn1' |GeneSymbol=='Ddit4' |GeneSymbol=='Ddx10' |GeneSymbol=='Dkc1' |GeneSymbol=='Dnaja4' |GeneSymbol=='Dnajb9' |GeneSymbol=='Dnajc3' |GeneSymbol=='Edc4' |GeneSymbol=='Edem1' |GeneSymbol=='Eef2' |GeneSymbol=='Eif2Ak3' |GeneSymbol=='Eif2S1' |GeneSymbol=='Eif4A1' |GeneSymbol=='Eif4A2' |GeneSymbol=='Eif4A3' |GeneSymbol=='Eif4E' |GeneSymbol=='Eif4Ebp1' |GeneSymbol=='Eif4G1' |GeneSymbol=='Ern1' |GeneSymbol=='Ero1A' |GeneSymbol=='Exoc2' |GeneSymbol=='Exosc1' |GeneSymbol=='Exosc10' |GeneSymbol=='Exosc2' |GeneSymbol=='Exosc4' |GeneSymbol=='Exosc5' |GeneSymbol=='Exosc9' |GeneSymbol=='Fkbp14' |GeneSymbol=='Fus' |GeneSymbol=='Gemin4' |GeneSymbol=='Gosr2' |GeneSymbol=='H2Ax' |GeneSymbol=='Herpud1' |GeneSymbol=='Hsp90B1' |GeneSymbol=='Hspa5' |GeneSymbol=='Hspa9' |GeneSymbol=='Hyou1' |GeneSymbol=='Iars1' |GeneSymbol=='Ifit1' |GeneSymbol=='Igfbp1' |GeneSymbol=='Imp3' |GeneSymbol=='Kdelr3' |GeneSymbol=='Khsrp' |GeneSymbol=='Kif5B' |GeneSymbol=='Lsm1' |GeneSymbol=='Lsm4' |GeneSymbol=='Mthfd2' |GeneSymbol=='Mtrex' |GeneSymbol=='Nabp1' |GeneSymbol=='Nfya' |GeneSymbol=='Nfyb' |GeneSymbol=='Nhp2' |GeneSymbol=='Nolc1' |GeneSymbol=='Nop14' |GeneSymbol=='Nop56' |GeneSymbol=='Npm1' |GeneSymbol=='Paip1' |GeneSymbol=='Parn' |GeneSymbol=='Pdia5' |GeneSymbol=='Pdia6' |GeneSymbol=='Pop4' |GeneSymbol=='Preb' |GeneSymbol=='Psat1' |GeneSymbol=='Rps14' |GeneSymbol=='Rrp9' |GeneSymbol=='Sdad1' |GeneSymbol=='Sec11A' |GeneSymbol=='Sec31A' |GeneSymbol=='Serp1' |GeneSymbol=='Shc1' |GeneSymbol=='Slc1A4' |GeneSymbol=='Slc30A5' |GeneSymbol=='Slc7A5' |GeneSymbol=='Spcs1' |GeneSymbol=='Spcs3' |GeneSymbol=='Srpra' |GeneSymbol=='Srprb' |GeneSymbol=='Ssr1' |GeneSymbol=='Stc2' |GeneSymbol=='Tars1' |GeneSymbol=='Tatdn2' |GeneSymbol=='Tspyl2' |GeneSymbol=='Ttc37' |GeneSymbol=='Tubb2A' |GeneSymbol=='Vegfa' |GeneSymbol=='Wfs1' |GeneSymbol=='Wipi1' |GeneSymbol=='Xbp1' |GeneSymbol=='Xpot' |GeneSymbol=='Yif1A' |GeneSymbol=='Ywhaz' |GeneSymbol=='Zbtb17')

hm_tab_hall_UPR <- hm_tab_hall_UPR %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_UPR) = hm_tab_hall_UPR$GeneSymbol
hm_hall_UPR_annot = data.frame("Sig" = hm_tab_hall_UPR$sig2)
rownames(hm_hall_UPR_annot) = rownames(hm_tab_hall_UPR)

hm_hall_UPR <- pheatmap(hm_tab_hall_UPR[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_UPR$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_UPR_annot, legend_labels = "Relative expression", main = "HALLMARK_UNFOLDED_PROTEIN_RESPONSE genes")

pdf(file="BAT_hm_hall_UPR.pdf",width=7,height=10)
hm_hall_UPR
dev.off()

##### hm of GO BAT genes

hm_tab_GO_BAT = subset(hm_tab, GeneSymbol=='Adig' |GeneSymbol=='Adipoq' |GeneSymbol=='Adrb1' |GeneSymbol=='Adrb2' |GeneSymbol=='Aldh6A1' |GeneSymbol=='Arl4A' |GeneSymbol=='Bmp7' |GeneSymbol=='Bnip3' |GeneSymbol=='Cebpa' |GeneSymbol=='Cebpb' |GeneSymbol=='Dio2' |GeneSymbol=='Dusp10' |GeneSymbol=='Ebf2' |GeneSymbol=='Ero1A' |GeneSymbol=='Fabp3' |GeneSymbol=='Fabp4' |GeneSymbol=='Ffar4' |GeneSymbol=='Flcn' |GeneSymbol=='Fndc5' |GeneSymbol=='Fto' |GeneSymbol=='Hnrnpu' |GeneSymbol=='Ins' |GeneSymbol=='Itga6' |GeneSymbol=='Lamb3' |GeneSymbol=='Lep' |GeneSymbol=='Lrg1' |GeneSymbol=='Mapk14' |GeneSymbol=='Mb' |GeneSymbol=='Metrnl' |GeneSymbol=='Mtor' |GeneSymbol=='Napepld' |GeneSymbol=='Nudt7' |GeneSymbol=='Pex11A' |GeneSymbol=='Pim1' |GeneSymbol=='Plac8' |GeneSymbol=='Ppargc1A' |GeneSymbol=='Prdm16' |GeneSymbol=='Ptgs2' |GeneSymbol=='Rgs2' |GeneSymbol=='Rreb1' |GeneSymbol=='Sirt1' |GeneSymbol=='Six1' |GeneSymbol=='Slc2A4' |GeneSymbol=='Sox13' |GeneSymbol=='Tfe3' |GeneSymbol=='Trpv4' |GeneSymbol=='Ucp1' |GeneSymbol=='Vstm2A' |GeneSymbol=='Zbtb7B' |GeneSymbol=='Znf516')

hm_tab_GO_BAT <- hm_tab_GO_BAT %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_GO_BAT) = hm_tab_GO_BAT$GeneSymbol
hm_GO_BAT_annot = data.frame("Sig" = hm_tab_GO_BAT$sig2)
rownames(hm_GO_BAT_annot) = rownames(hm_tab_GO_BAT)

hm_GO_BAT <- pheatmap(hm_tab_GO_BAT[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_GO_BAT$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_GO_BAT_annot, legend_labels = "Relative expression", main = "GO_BROWN_FAT_CELL_DIFFERENTIATION genes")

pdf(file="BAT_hm_GO_BAT.pdf",width=7,height=10)
hm_GO_BAT
dev.off()


##### hm of myc-TF genes

hm_tab_myc = subset(hm_tab, GeneSymbol=='Abcd2' |GeneSymbol=='Steap4' |GeneSymbol=='Nnmt' |GeneSymbol=='Pde3b' |GeneSymbol=='Hp' |GeneSymbol=='Lrp3' |GeneSymbol=='Slc1a5' |GeneSymbol=='Retn' |GeneSymbol=='Apcdd1' |GeneSymbol=='Adcy5' |GeneSymbol=='C4B' |GeneSymbol=='Gys2' |GeneSymbol=='Hcar2' |GeneSymbol=='Dock11' |GeneSymbol=='Mc2r' |GeneSymbol=='Hcar1' |GeneSymbol=='Dram1' |GeneSymbol=='B3galt2' |GeneSymbol=='Nnat' |GeneSymbol=='Ffar4' |GeneSymbol=='Slc16a7' |GeneSymbol=='Ffar2' |GeneSymbol=='Aoc3' |GeneSymbol=='Rarres2' |GeneSymbol=='Adipoq' |GeneSymbol=='Mmp3' |GeneSymbol=='Sctr' |GeneSymbol=='Klhl2' |GeneSymbol=='Igf1' |GeneSymbol=='Podn' |GeneSymbol=='Cidec' |GeneSymbol=='Tshr' |GeneSymbol=='Por' |GeneSymbol=='Rbp4' |GeneSymbol=='Ccdc80' |GeneSymbol=='Lrg1' |GeneSymbol=='Vnn3' |GeneSymbol=='Chdh' |GeneSymbol=='Lgals12' |GeneSymbol=='Chst1' |GeneSymbol=='St6galnac5')

hm_tab_myc <- hm_tab_myc %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_myc) = hm_tab_myc$GeneSymbol
hm_myc_annot = data.frame("Sig" = hm_tab_myc$sig2)
rownames(hm_myc_annot) = rownames(hm_tab_myc)

hm_myc <- pheatmap(hm_tab_myc[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_myc$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_myc_annot, legend_labels = "Relative expression", main = "Myc-related genes")

pdf(file="BAT_hm_myc.pdf",width=7,height=10)
hm_myc
dev.off()


#### make hm of mitochondrial and nuclear encoded mitochondrial genes, using same genes to the figure in eLife paper

hm_tab_mt_mito = subset(hm_tab, GeneSymbol=='mt-Atp6' | GeneSymbol=='mt-Atp8' | GeneSymbol=='mt-Co1' | GeneSymbol=='mt-Co2' | GeneSymbol=='mt-Co3' | GeneSymbol=='mt-Cytb' | GeneSymbol=='mt-Nd1' | GeneSymbol=='mt-Nd2' | GeneSymbol=='mt-Nd3' | GeneSymbol=='mt-Nd4' | GeneSymbol=='mt-Nd4l' | GeneSymbol=='mt-Nd5' | GeneSymbol=='mt-Nd6' | GeneSymbol=='mt-Rnr1' | GeneSymbol=='mt-Rnr2' | GeneSymbol=='mt-Ta' | GeneSymbol=='mt-Tc' | GeneSymbol=='mt-Td' | GeneSymbol=='mt-Te' | GeneSymbol=='mt-Tf' | GeneSymbol=='mt-Tg' | GeneSymbol=='mt-Th' | GeneSymbol=='mt-Ti' | GeneSymbol=='mt-Tk' | GeneSymbol=='mt-Tl1' | GeneSymbol=='mt-Tl2' | GeneSymbol=='mt-Tm' | GeneSymbol=='mt-Tn' | GeneSymbol=='mt-Tp' | GeneSymbol=='mt-Tq' | GeneSymbol=='mt-Tr' | GeneSymbol=='mt-Ts1' | GeneSymbol=='mt-Ts2' | GeneSymbol=='mt-Tt' | GeneSymbol=='mt-Tv' | GeneSymbol=='mt-Tw' | GeneSymbol=='mt-Ty')

hm_tab_mt_mito <- hm_tab_mt_mito %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_mt_mito) = hm_tab_mt_mito$GeneSymbol
hm_mt_mito_annot = data.frame("Sig" = hm_tab_mt_mito$sig2)
rownames(hm_mt_mito_annot) = rownames(hm_tab_mt_mito)

hm_mt_mito <- pheatmap(hm_tab_mt_mito[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_mt_mito$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_mt_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial-encoded mito genes")

pdf(file="BAT_hm_mt_mito.pdf",width=7,height=10)
hm_mt_mito
dev.off()

hm_tab_nucl_mito = subset(hm_tab, GeneSymbol=='Ndufb10' |GeneSymbol=='Ndufa3' |GeneSymbol=='Dmac2l' |GeneSymbol=='Atp5o' |GeneSymbol=='Uqcrfs1' |GeneSymbol=='Ndufa8' |GeneSymbol=='Uqcrq' |GeneSymbol=='Surf1' |GeneSymbol=='Atp5b' |GeneSymbol=='Uqcrh' |GeneSymbol=='Ndufa2' |GeneSymbol=='Ndufs7' |GeneSymbol=='Ndufb9' |GeneSymbol=='Ndufb6' |GeneSymbol=='Cox6b1' |GeneSymbol=='Cox6a2' |GeneSymbol=='Ndufa13' |GeneSymbol=='Ndufa9' |GeneSymbol=='Ndufs3' |GeneSymbol=='Uqcrc2' |GeneSymbol=='Ndufa4' |GeneSymbol=='Cycs' |GeneSymbol=='Cyc1' |GeneSymbol=='Ndufs5' |GeneSymbol=='Ndufs4' |GeneSymbol=='Ecsit' |GeneSymbol=='Cox10' |GeneSymbol=='Ndufs8' |GeneSymbol=='Ndufc2' |GeneSymbol=='Atp5a1' |GeneSymbol=='Ndufa7' |GeneSymbol=='Ndufb3' |GeneSymbol=='Ndufa5' |GeneSymbol=='Atp5k' |GeneSymbol=='Cox5b-ps' |GeneSymbol=='Cox18' |GeneSymbol=='Ndufa10' |GeneSymbol=='Atp5j2' |GeneSymbol=='Ndufaf1' |GeneSymbol=='Atp5pb' |GeneSymbol=='Cox11' |GeneSymbol=='Atpaf1' |GeneSymbol=='Sdhb' |GeneSymbol=='Atp5c1' |GeneSymbol=='Cox6b2' |GeneSymbol=='Gm10053' |GeneSymbol=='Phb' |GeneSymbol=='Cox7c' |GeneSymbol=='Sdhd' |GeneSymbol=='Sdhc' |GeneSymbol=='Sdha' |GeneSymbol=='Ndufa6' |GeneSymbol=='Ndufa12' |GeneSymbol=='Ndufa11' |GeneSymbol=='Cox6a1' |GeneSymbol=='Ndufb2' |GeneSymbol=='Cox5a' |GeneSymbol=='Atp5j' |GeneSymbol=='Atp5g3' |GeneSymbol=='Ndufv2' |GeneSymbol=='Ndufb8' |GeneSymbol=='Cox4i1' |GeneSymbol=='Uqcrc1' |GeneSymbol=='Atpaf2' |GeneSymbol=='Ndufb7' |GeneSymbol=='Atp5h' |GeneSymbol=='Cox5b' |GeneSymbol=='Ndufv1' |GeneSymbol=='Ndufv3' |GeneSymbol=='Ndufs1' |GeneSymbol=='Atp5d' |GeneSymbol=='Ndufb4' |GeneSymbol=='Cox7a1' |GeneSymbol=='Cox4i2' |GeneSymbol=='Ndufs6' |GeneSymbol=='Ndufs2' |GeneSymbol=='Ndufc1' |GeneSymbol=='Ndufb5' |GeneSymbol=='Gm21987' |GeneSymbol=='Cox17' |GeneSymbol=='Cox8a' |GeneSymbol=='Cox7a2' |GeneSymbol=='Cox6c' |GeneSymbol=='Nubpl' |GeneSymbol=='Ndufab1')

hm_tab_nucl_mito <- hm_tab_nucl_mito %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_nucl_mito) = hm_tab_nucl_mito$GeneSymbol
hm_nucl_mito_annot = data.frame("Sig" = hm_tab_nucl_mito$sig2)
rownames(hm_nucl_mito_annot) = rownames(hm_tab_nucl_mito)

hm_nucl_mito <- pheatmap(hm_tab_nucl_mito[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_nucl_mito$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_nucl_mito_annot, legend_labels = "Relative expression", main = "Nuclear-encoded mito genes")

pdf(file="BAT_hm_nucl_mito.pdf",width=7,height=10)
hm_nucl_mito
dev.off()

#### make side-by-side hm of mitochondrial and nuclear encoded mitochondrial genes, analagous to eLife paper

library(RColorBrewer)
breaksList = seq(-2, 2, by = 0.1)

hm_tab_mt_mito2 <- as.data.frame(hm_tab_mt_mito$log2FC)
rownames(hm_tab_mt_mito2) = hm_tab_mt_mito$GeneSymbol
hm_tab_mt_mito2$log2FCdup <- hm_tab_mt_mito$log2FC

hm_mt_mito2 <- pheatmap(hm_tab_mt_mito2, cluster_rows = TRUE, cluster_cols = FALSE, cutree_rows = 2, legend = FALSE, cellwidth=30, angle_col=45, fontsize_col=6, annotation_row=hm_mt_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial-encoded", show_colnames = FALSE, show_rownames = FALSE, border_color = NA, scale = "none", color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList)

hm_tab_nucl_mito2 <- as.data.frame(hm_tab_nucl_mito$log2FC)
rownames(hm_tab_nucl_mito2) = hm_tab_nucl_mito$GeneSymbol
hm_tab_nucl_mito2$log2FCdup <- hm_tab_nucl_mito$log2FC

hm_nucl_mito2 <- pheatmap(hm_tab_nucl_mito2, cluster_rows = TRUE, cluster_cols = FALSE, cutree_rows = 3, legend = TRUE, cellwidth=30, angle_col=45, fontsize_col=6, annotation_row=hm_nucl_mito_annot, legend_labels = "Relative expression", main = "Nuclear-encoded", show_colnames = FALSE, , show_rownames = FALSE, border_color = NA, color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList)

require(cowplot)
require(ggplotify)

pdf(file="mito_genes_sumfig.pdf",width=8,height=3)
plot_grid(as.grob(hm_mt_mito2), as.grob(hm_nucl_mito2), ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()



############### Pathway analysis using enrichr =====================================================

require(enrichR)
require(tidyr)
require(cowplot)
require(viridis)

## look at sig up & down genes using enrichR
dbs_option <- listEnrichrDbs()

####### use upregulated genes

up_dge = subset(hm_tab, sig2=='sig' & log2FC>0)
write.table(up_dge,file="BAT_up_dge.csv",sep=",")
up_dge <- up_dge[!is.na(up_dge$GeneSymbol), ]
up_genes <- as.vector(up_dge$GeneSymbol)


dbs_search <- c("GO_Biological_Process_2018","KEGG_2019_Mouse", "MSigDB_Hallmark_2020","GO_Cellular_Component_2018","GTEx_Tissue_Sample_Gene_Expression_Profiles_up","TF_Perturbations_Followed_by_Expression","GO_Molecular_Function_2018", "HMDB_Metabolites")

up_genes_enrichr <- enrichr(up_genes, databases = dbs_search)

## make figure from enrichr analyses

GO_biol_data_up <- up_genes_enrichr[["GO_Biological_Process_2018"]]
View(GO_biol_data_up)
GO_biol_data_up = subset(GO_biol_data_up, Adjusted.P.value<.05)
GO_biol_data_up <- GO_biol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_biol_data_up$db <- "GO_biol_2019_Human"
GO_biol_fig_up <-ggplot(data=GO_biol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Biological_Process_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_biol_fig_up

KEGG_data_up <- up_genes_enrichr[["KEGG_2019_Mouse"]]
View(KEGG_data_up)
KEGG_data_up = subset(KEGG_data_up, Adjusted.P.value<.05)
KEGG_data_up <- KEGG_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
KEGG_data_up$db <- "KEGG_2019_Mouse"
KEGG_fig_up <-ggplot(data=KEGG_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("KEGG_2019_Mouse") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
KEGG_fig_up

Hall_data_up <- up_genes_enrichr[["MSigDB_Hallmark_2020"]]
View(Hall_data_up)
Hall_data_up = subset(Hall_data_up, Adjusted.P.value<.05)
Hall_data_up <- Hall_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Hall_data_up$db <- "MSigDB_Hallmark_2020"
Hall_fig_up <-ggplot(data=Hall_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("MSigDB_Hallmark_2020") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
Hall_fig_up

GO_cell_data_up <- up_genes_enrichr[["GO_Cellular_Component_2018"]]
View(GO_cell_data_up)
GO_cell_data_up = subset(GO_cell_data_up, Adjusted.P.value<.05)
GO_cell_data_up <- GO_cell_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_cell_data_up$db <- "GO_Cellular_Component_2018"
GO_cell_fig_up <-ggplot(data=GO_cell_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Cellular_Component_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_cell_fig_up

GTEx_data_up <- up_genes_enrichr[["GTEx_Tissue_Sample_Gene_Expression_Profiles_up"]]
View(GTEx_data_up)
GTEx_data_up = subset(GTEx_data_up, Adjusted.P.value<.05)
GTEx_data_up <- GTEx_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GTEx_data_up$db <- "GTEx_Tissue_Sample_Gene_Expression_Profiles_up"
GTEx_fig_up <-ggplot(data=GTEx_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GTEx_Tissue_Sample_Gene_Expression_Profiles_up") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GTEx_fig_up

TF_data_up <- up_genes_enrichr[["TF_Perturbations_Followed_by_Expression"]]
View(TF_data_up)
TF_data_up = subset(TF_data_up, Adjusted.P.value<.05)
TF_data_up <- TF_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
TF_data_up$db <- "TF_Perturbations_Followed_by_Expression"
TF_fig_up <-ggplot(data=TF_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("TF_Perturbations_Followed_by_Expression") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
TF_fig_up

GO_mol_data_up <- up_genes_enrichr[["GO_Molecular_Function_2018"]]
View(GO_mol_data_up)
GO_mol_data_up = subset(GO_mol_data_up, Adjusted.P.value<.05)
GO_mol_data_up <- GO_mol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_mol_data_up$db <- "GO_Molecular_Function_2018"
GO_mol_fig_up <-ggplot(data=GO_mol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Molecular_Function_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_mol_fig_up

Metabol_data_up <- up_genes_enrichr[["HMDB_Metabolites"]]
View(Metabol_data_up)
Metabol_data_up = subset(Metabol_data_up, Adjusted.P.value<.05)
Metabol_data_up <- Metabol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Metabol_data_up$db <- "HMDB_Metabolites"
Metabol_fig_up <-ggplot(data=Metabol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("HMDB_Metabolites") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
Metabol_fig_up

up_path_summary <- rbind(GO_biol_data_up, KEGG_data_up, Hall_data_up, GO_cell_data_up, GTEx_data_up, TF_data_up, GO_mol_data_up, Metabol_data_up)
up_path_summary$dir <- "Up"  

####### use upregulated genes

down_dge = subset(hm_tab, sig2=='sig' & log2FC<0)
write.table(down_dge,file="BAT_down_dge.csv",sep=",")
down_list <- as.data.frame(down_dge$GeneSymbol)
down_list <- down_list %>% rename("genes" = "down_dge$GeneSymbol")
down_list <- down_list %>% drop_na()
down_list <- distinct(down_list)

dbs_search <- c("GO_Biological_Process_2018","KEGG_2019_Mouse", "MSigDB_Hallmark_2020","GO_Cellular_Component_2018","GTEx_Tissue_Sample_Gene_Expression_Profiles_up","TF_Perturbations_Followed_by_Expression","GO_Molecular_Function_2018", "HMDB_Metabolites")

down_genes_enrichr <- enrichr(down_list$genes, databases = dbs_search)

## make figure from enrichr analyses

GO_biol_data_down <- down_genes_enrichr[["GO_Biological_Process_2018"]]
View(GO_biol_data_down)
GO_biol_data_down = subset(GO_biol_data_down, Adjusted.P.value<.05)
GO_biol_data_down <- GO_biol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_biol_data_down$db <- "GO_biol_2019_Human"
GO_biol_fig_down <-ggplot(data=GO_biol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Biological_Process_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_biol_fig_down

KEGG_data_down <- down_genes_enrichr[["KEGG_2019_Mouse"]]
View(KEGG_data_down)
KEGG_data_down = subset(KEGG_data_down, Adjusted.P.value<.05)
KEGG_data_down <- KEGG_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
KEGG_data_down$db <- "KEGG_2019_Mouse"
KEGG_fig_down <-ggplot(data=KEGG_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("KEGG_2019_Mouse") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
KEGG_fig_down

Hall_data_down <- down_genes_enrichr[["MSigDB_Hallmark_2020"]]
View(Hall_data_down)
Hall_data_down = subset(Hall_data_down, Adjusted.P.value<.05)
Hall_data_down <- Hall_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Hall_data_down$db <- "MSigDB_Hallmark_2020"
Hall_fig_down <-ggplot(data=Hall_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("MSigDB_Hallmark_2020") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
Hall_fig_down

GO_cell_data_down <- down_genes_enrichr[["GO_Cellular_Component_2018"]]
View(GO_cell_data_down)
GO_cell_data_down = subset(GO_cell_data_down, Adjusted.P.value<.05)
GO_cell_data_down <- GO_cell_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_cell_data_down$db <- "GO_Cellular_Component_2018"
GO_cell_fig_down <-ggplot(data=GO_cell_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Cellular_Component_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_cell_fig_down

GTEx_data_down <- down_genes_enrichr[["GTEx_Tissue_Sample_Gene_Expression_Profiles_up"]]
View(GTEx_data_down)
GTEx_data_down = subset(GTEx_data_down, Adjusted.P.value<.05)
GTEx_data_down <- GTEx_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GTEx_data_down$db <- "GTEx_Tissue_Sample_Gene_Expression_Profiles_down"
GTEx_fig_down <-ggplot(data=GTEx_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GTEx_Tissue_Sample_Gene_Expression_Profiles_up") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GTEx_fig_down

TF_data_down <- down_genes_enrichr[["TF_Perturbations_Followed_by_Expression"]]
View(TF_data_down)
TF_data_down = subset(TF_data_down, Adjusted.P.value<.05)
TF_data_down <- TF_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
TF_data_down$db <- "TF_Perturbations_Followed_by_Expression"
TF_fig_down <-ggplot(data=TF_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("TF_Perturbations_Followed_by_Expression") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
TF_fig_down

GO_mol_data_down <- down_genes_enrichr[["GO_Molecular_Function_2018"]]
View(GO_mol_data_down)
GO_mol_data_down = subset(GO_mol_data_down, Adjusted.P.value<.05)
GO_mol_data_down <- GO_mol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_mol_data_down$db <- "GO_Molecular_Function_2018"
GO_mol_fig_down <-ggplot(data=GO_mol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Molecular_Function_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_mol_fig_down

Metabol_data_down <- down_genes_enrichr[["HMDB_Metabolites"]]
View(Metabol_data_down)
Metabol_data_down = subset(Metabol_data_down, Adjusted.P.value<.05)
Metabol_data_down <- Metabol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Metabol_data_down$db <- "HMDB_Metabolites"
Metabol_fig_down <-ggplot(data=Metabol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("HMDB_Metabolites") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
Metabol_fig_down

down_path_summary <- rbind(GO_biol_data_down, KEGG_data_down, Hall_data_down, GO_cell_data_down, GTEx_data_down, TF_data_down, GO_mol_data_down, Metabol_data_down)
down_path_summary$dir <- "down"  

path_summary <- rbind(up_path_summary, down_path_summary)
path_summary <- path_summary %>% arrange(desc(-Adjusted.P.value))               
write.table(path_summary,file="path_summary.csv",sep=",")

up_path_col1 <- plot_grid(GO_biol_fig_up, KEGG_fig_up, Hall_fig_up, GO_cell_fig_up, ncol = 1, labels = c('A', 'C', 'E', 'G', 'I', 'K', 'M', 'O'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))
up_path_col2 <- plot_grid(GTEx_fig_up, TF_fig_up, GO_mol_fig_up, Metabol_fig_up, ncol = 1, labels = c('B', 'D', 'F', 'H'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))

pdf(file="up_path_sumfig.pdf",width=16,height=12)
plot_grid(up_path_col1, up_path_col2, ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()

down_path_col1 <- plot_grid(GO_biol_fig_down, KEGG_fig_down, Hall_fig_down, GO_cell_fig_down, ncol = 1, labels = c('A', 'C', 'E', 'G', 'I', 'K', 'M', 'O'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))
down_path_col2 <- plot_grid(GTEx_fig_down, TF_fig_down, GO_mol_fig_down, Metabol_fig_down, ncol = 1, labels = c('B', 'D', 'F', 'H'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))

pdf(file="down_path_sumfig.pdf",width=16,height=12)
plot_grid(down_path_col1, down_path_col2, ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()


############### Compare differentially expressed genes to human adipose RNAseq data ====================


library(eulerr)

## load human data

Hum_up_genes <- read.delim(header = TRUE,  dec = ".", file = "Hum_up_genes.txt", sep = "\t")
Hum_up_vect <- as.vector(Hum_up_genes$Mouse.gene.name)
Hum_down_genes <- read.delim(header = TRUE,  dec = ".", file = "Hum_down_genes.txt", sep = "\t")
Hum_down_vect <- as.vector(Hum_down_genes$Mouse.gene.name)
down_genes <- as.vector(down_list$genes)

## up regulated genes
## calculate intersection

up_both <- intersect(Hum_up_vect,up_genes)
hum_up_count <- length(Hum_up_vect)
up_count <- length(up_genes)
up_both_count <- length(up_both)

up_total <- hum_up_count + up_count

## make venn diagrams
up_venn_data <- euler(c("A" = hum_up_count, "B" = up_count, "A&B" = up_both_count))
up_venn_fig <- plot(up_venn_data, quantities = TRUE, fill = list(fill=c("#FDE725FF", "#29AF7FFF"), alpha=0.7), labels=list(labels=c("Huamn \n White adipose\n ","Mouse \n Brown adipose\n "), cex=.8))


## down regulated genes
## calculate intersection

down_both <- intersect(Hum_down_vect,down_genes)
hum_down_count <- length(Hum_down_vect)
down_count <- length(down_genes)
down_both_count <- length(down_both)

down_total <- hum_down_count + down_count
venn_total <- up_total + down_total

## make venn diagrams
down_venn_data <- euler(c("A" = hum_down_count, "B" = down_count, "A&B" = down_both_count))
down_venn_fig <- plot(down_venn_data, quantities = TRUE, fill=list(fill = c("#F7CB44FF", "#B8627DFF"), alpha=0.7), labels=list(labels=c("Huamn \n White adipose\n ","Mouse \n Brown adipose\n "), cex=.8))
down_venn_fig

up_venn_rat <- up_total / venn_total
down_venn_rat <- down_total / venn_total


pdf(file="BAT_venn_sumfig.pdf",width=6,height=6)
plot_grid(as.grob(up_venn_fig), as.grob(down_venn_fig), labels = c('A: Up-regulated', 'B: Down-regulated'), ncol = 1, rel_heights = c(1, 1))
dev.off()


####### --------- 
####### --------- 
####### --------- further figures for paper
####### --------- 

## 2:ncol(norm_counts) --> change to
## 2:((ncol(norm_counts))+1)


BAT_vol <- ggplot(data=vplot_tab, aes(x=log2FC, y=neglog_p, colour=significant)) + geom_point(alpha=0.8, size=1.75) + xlab("Log2 Fold change") + ylab("-log10 p-value") + theme_classic() + theme(legend.position="none") + geom_text_repel(data = vplot_tab_label_final, aes(label = GeneSymbol.x), color="black",size = 3, key_glyph = "point") + theme(plot.title = element_text(hjust = 0.2)) + ggtitle("BAT") + scale_colour_manual(values = c("#999999", "#009E73")) + scale_y_continuous(labels = scales::comma, expand = c(0,1), breaks = seq(0, 40, 10), limits=c(0, 40))
pdf(file="BAT_vol.pdf",width=7,height=9)
BAT_vol
dev.off()


pdf(file="BAT_Hall_fig_up.pdf",width=8,height=3.5)
Hall_fig_up
dev.off()

pdf(file="BAT_Hall_fig_down.pdf",width=8,height=3.5)
Hall_fig_down
dev.off()

pdf(file="BAT_KEGG_fig_up.pdf",width=8,height=3.5)
KEGG_fig_up
dev.off()


############ make specific heatmaps following on enriched genesets ---------


ann_colors = list(Sig = c(sig = "#009E73", not = "#999999"))

hm_hall_UPR <- pheatmap(hm_tab_hall_UPR[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = F, scale = "row", labels_row = hm_tab_hall_UPR$GeneSymbol, fontsize_row = 8, cutree_rows = 3, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_UPR_annot, legend_labels = "Relative expression", main = "HALLMARK_UNFOLDED_PROTEIN_RESPONSE genes", annotation_colors = ann_colors, gaps_col=c(6), treeheight_row = 10)

pdf(file="BAT_hm_hall_UPR.pdf",width=7,height=10)
hm_hall_UPR
dev.off()


##### hm of hallmark CholHomeo genes

hm_tab_hall_CholHomeo = subset(hm_tab, GeneSymbol=='Abca2' | GeneSymbol=='Acat2' | GeneSymbol=='Acss2' | GeneSymbol=='Actg1' | GeneSymbol=='Adh4' | GeneSymbol=='Alcam' | GeneSymbol=='Aldoc' | GeneSymbol=='Antxr2' | GeneSymbol=='Anxa13' | GeneSymbol=='Anxa5' | GeneSymbol=='Atf3' | GeneSymbol=='Atf5' | GeneSymbol=='Atxn2' | GeneSymbol=='Avpr1A' | GeneSymbol=='Cbs' | GeneSymbol=='Cd9' | GeneSymbol=='Chka' | GeneSymbol=='Clu' | GeneSymbol=='Cpeb2' | GeneSymbol=='Ctnnb1' | GeneSymbol=='Cxcl16' | GeneSymbol=='Cyp51A1' | GeneSymbol=='Dhcr7' | GeneSymbol=='Ebp' | GeneSymbol=='Ech1' | GeneSymbol=='Errfi1' | GeneSymbol=='Ethe1' | GeneSymbol=='Fabp5' | GeneSymbol=='Fads2' | GeneSymbol=='Fasn' | GeneSymbol=='Fbxo6' | GeneSymbol=='Fdft1' | GeneSymbol=='Fdps' | GeneSymbol=='Gldc' | GeneSymbol=='Gnai1' | GeneSymbol=='Gpx8' | GeneSymbol=='Gstm2' | GeneSymbol=='Gusb' | GeneSymbol=='Hmgcr' | GeneSymbol=='Hmgcs1' | GeneSymbol=='Hsd17B7' | GeneSymbol=='Idi1' | GeneSymbol=='Jag1' | GeneSymbol=='Ldlr' | GeneSymbol=='Lgals3' | GeneSymbol=='Lgmn' | GeneSymbol=='Lpl' | GeneSymbol=='Lss' | GeneSymbol=='Mal2' | GeneSymbol=='Mvd' | GeneSymbol=='Mvk' | GeneSymbol=='Nfil3' | GeneSymbol=='Niban1' | GeneSymbol=='Nsdhl' | GeneSymbol=='Pcyt2' | GeneSymbol=='Pdk3' | GeneSymbol=='Plaur' | GeneSymbol=='Plscr1' | GeneSymbol=='Pmvk' | GeneSymbol=='Pnrc1' | GeneSymbol=='Pparg' | GeneSymbol=='S100A11' | GeneSymbol=='Sc5D' | GeneSymbol=='Scd' | GeneSymbol=='Sema3B' | GeneSymbol=='Sqle' | GeneSymbol=='Srebf2' | GeneSymbol=='Stard4' | GeneSymbol=='Stx5' | GeneSymbol=='Tm7Sf2' | GeneSymbol=='Tmem97' | GeneSymbol=='Tnfrsf12A' | GeneSymbol=='Tp53Inp1' | GeneSymbol=='Trib3')

hm_tab_hall_CholHomeo <- hm_tab_hall_CholHomeo %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_CholHomeo) = hm_tab_hall_CholHomeo$GeneSymbol
hm_hall_CholHomeo_annot = data.frame("Sig" = hm_tab_hall_CholHomeo$sig2)
rownames(hm_hall_CholHomeo_annot) = rownames(hm_tab_hall_CholHomeo)

hm_hall_CholHomeo <- pheatmap(hm_tab_hall_CholHomeo[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_CholHomeo$GeneSymbol, fontsize_row = 8, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_CholHomeo_annot, legend_labels = "Relative expression", gaps_col=c(6), treeheight_row = 10, main="CholHomeo", annotation_colors = ann_colors)

pdf(file="BAT_hm_hall_CholHomeo.pdf",width=7,height=10)
hm_hall_CholHomeo
dev.off()


##### hm of hallmark FAmetab genes

hm_tab_hall_FAmetab = subset(hm_tab, GeneSymbol=='Aadat' | GeneSymbol=='Acaa1' | GeneSymbol=='Acaa2' | GeneSymbol=='Acadl' | GeneSymbol=='Acadm' | GeneSymbol=='Acads' | GeneSymbol=='Acadvl' | GeneSymbol=='Acat2' | GeneSymbol=='Aco2' | GeneSymbol=='Acot2' | GeneSymbol=='Acot8' | GeneSymbol=='Acox1' | GeneSymbol=='Acsl1' | GeneSymbol=='Acsl4' | GeneSymbol=='Acsl5' | GeneSymbol=='Acsm3' | GeneSymbol=='Acss1' | GeneSymbol=='Adh1C' | GeneSymbol=='Adh7' | GeneSymbol=='Adipor2' | GeneSymbol=='Adsl' | GeneSymbol=='Alad' | GeneSymbol=='Aldh1A1' | GeneSymbol=='Aldh3A1' | GeneSymbol=='Aldh3A2' | GeneSymbol=='Aldh9A1' | GeneSymbol=='Aldoa' | GeneSymbol=='Aoc3' | GeneSymbol=='Apex1' | GeneSymbol=='Aqp7' | GeneSymbol=='Auh' | GeneSymbol=='Bckdhb' | GeneSymbol=='Blvra' | GeneSymbol=='Bmpr1B' | GeneSymbol=='Bphl' | GeneSymbol=='Ca2' | GeneSymbol=='Ca4' | GeneSymbol=='Ca6' | GeneSymbol=='Cbr1' | GeneSymbol=='Cbr3' | GeneSymbol=='Ccdc58' | GeneSymbol=='Cd1D' | GeneSymbol=='Cd36' | GeneSymbol=='Cel' | GeneSymbol=='Cidea' | GeneSymbol=='Cpox' | GeneSymbol=='Cpt1A' | GeneSymbol=='Cpt2' | GeneSymbol=='Crat' | GeneSymbol=='Cryz' | GeneSymbol=='Cyp1A1' | GeneSymbol=='Cyp4A11' | GeneSymbol=='Cyp4A22' | GeneSymbol=='D2Hgdh' | GeneSymbol=='Decr1' | GeneSymbol=='Dhcr24' | GeneSymbol=='Dld' | GeneSymbol=='Dlst' | GeneSymbol=='Ech1' | GeneSymbol=='Echs1' | GeneSymbol=='Eci1' | GeneSymbol=='Eci2' | GeneSymbol=='Ehhadh' | GeneSymbol=='Elovl5' | GeneSymbol=='Eno2' | GeneSymbol=='Eno3' | GeneSymbol=='Ephx1' | GeneSymbol=='Erp29' | GeneSymbol=='Etfdh' | GeneSymbol=='Fabp1' | GeneSymbol=='Fabp2' | GeneSymbol=='Fasn' | GeneSymbol=='Fh' | GeneSymbol=='Fmo1' | GeneSymbol=='G0S2' | GeneSymbol=='Gabarapl1' | GeneSymbol=='Gad2' | GeneSymbol=='Gapdhs' | GeneSymbol=='Gcdh' | GeneSymbol=='Glul' | GeneSymbol=='Gpd1' | GeneSymbol=='Gpd2' | GeneSymbol=='Grhpr' | GeneSymbol=='Gstz1' | GeneSymbol=='H2Az1' | GeneSymbol=='Hadh' | GeneSymbol=='Hadhb' | GeneSymbol=='Hao2' | GeneSymbol=='Hccs' | GeneSymbol=='Hibch' | GeneSymbol=='Hmgcl' | GeneSymbol=='Hmgcs1' | GeneSymbol=='Hmgcs2' | GeneSymbol=='Hpgd' | GeneSymbol=='Hsd17B10' | GeneSymbol=='Hsd17B11' | GeneSymbol=='Hsd17B4' | GeneSymbol=='Hsd17B7' | GeneSymbol=='Hsdl2' | GeneSymbol=='Hsp90Aa1' | GeneSymbol=='Hsph1' | GeneSymbol=='Idh1' | GeneSymbol=='Idh3B' | GeneSymbol=='Idh3G' | GeneSymbol=='Idi1' | GeneSymbol=='Il4I1' | GeneSymbol=='Inmt' | GeneSymbol=='Kmt5A' | GeneSymbol=='Ldha' | GeneSymbol=='Lgals1' | GeneSymbol=='Ltc4S' | GeneSymbol=='Maoa' | GeneSymbol=='Mcee' | GeneSymbol=='Mdh1' | GeneSymbol=='Mdh2' | GeneSymbol=='Me1' | GeneSymbol=='Metap1' | GeneSymbol=='Mgll' | GeneSymbol=='Mif' | GeneSymbol=='Mlycd' | GeneSymbol=='Nbn' | GeneSymbol=='Ncaph2' | GeneSymbol=='Nsdhl' | GeneSymbol=='Nthl1' | GeneSymbol=='Odc1' | GeneSymbol=='Ostc' | GeneSymbol=='Pcbd1' | GeneSymbol=='Pdha1' | GeneSymbol=='Pdhb' | GeneSymbol=='Ppara' | GeneSymbol=='Prdx6' | GeneSymbol=='Psme1' | GeneSymbol=='Ptprg' | GeneSymbol=='Pts' | GeneSymbol=='Rap1Gds1' | GeneSymbol=='Rdh11' | GeneSymbol=='Rdh16' | GeneSymbol=='Reep6' | GeneSymbol=='Retsat' | GeneSymbol=='S100A10' | GeneSymbol=='Sdha' | GeneSymbol=='Sdhc' | GeneSymbol=='Sdhd' | GeneSymbol=='Serinc1' | GeneSymbol=='Slc22A5' | GeneSymbol=='Sms' | GeneSymbol=='Sucla2' | GeneSymbol=='Suclg1' | GeneSymbol=='Suclg2' | GeneSymbol=='Tdo2' | GeneSymbol=='Tp53Inp2' | GeneSymbol=='Ube2L6' | GeneSymbol=='Ugdh' | GeneSymbol=='Urod' | GeneSymbol=='Uros' | GeneSymbol=='Vnn1' | GeneSymbol=='Xist' | GeneSymbol=='Ywhah')

hm_tab_hall_FAmetab <- hm_tab_hall_FAmetab %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_FAmetab) = hm_tab_hall_FAmetab$GeneSymbol
hm_hall_FAmetab_annot = data.frame("Sig" = hm_tab_hall_FAmetab$sig2)
rownames(hm_hall_FAmetab_annot) = rownames(hm_tab_hall_FAmetab)

hm_hall_FAmetab <- pheatmap(hm_tab_hall_FAmetab[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_FAmetab$GeneSymbol, fontsize_row = 7, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_FAmetab_annot, legend_labels = "Relative expression", gaps_col=c(6), treeheight_row = 10, main="FAmetab", annotation_colors = ann_colors)

pdf(file="BAT_hm_hall_FAmetab.pdf",width=7,height=10)
hm_hall_FAmetab
dev.off()


##### hm of hallmark mtorc genes

hm_tab_hall_mtorc1 = subset(hm_tab, GeneSymbol=='Abcf2' | GeneSymbol=='Acaca' | GeneSymbol=='Acly' | GeneSymbol=='Acsl3' | GeneSymbol=='Actr2' | GeneSymbol=='Actr3' | GeneSymbol=='Add3' | GeneSymbol=='Adipor2' | GeneSymbol=='Ak4' | GeneSymbol=='Aldoa' | GeneSymbol=='Arpc5L' | GeneSymbol=='Asns' | GeneSymbol=='Atp2A2' | GeneSymbol=='Atp5Mc1' | GeneSymbol=='Atp6V1D' | GeneSymbol=='Aurka' | GeneSymbol=='Bcat1' | GeneSymbol=='Bhlhe40' | GeneSymbol=='Btg2' | GeneSymbol=='Bub1' | GeneSymbol=='Cacybp' | GeneSymbol=='Calr' | GeneSymbol=='Canx' | GeneSymbol=='Ccnf' | GeneSymbol=='Ccng1' | GeneSymbol=='Cct6A' | GeneSymbol=='Cd9' | GeneSymbol=='Cdc25A' | GeneSymbol=='Cdkn1A' | GeneSymbol=='Cfp' | GeneSymbol=='Cops5' | GeneSymbol=='Coro1A' | GeneSymbol=='Cth' | GeneSymbol=='Ctsc' | GeneSymbol=='Cxcr4' | GeneSymbol=='Cyb5B' | GeneSymbol=='Cyp51A1' | GeneSymbol=='Dapp1' | GeneSymbol=='Ddit3' | GeneSymbol=='Ddit4' | GeneSymbol=='Ddx39A' | GeneSymbol=='Dhcr24' | GeneSymbol=='Dhcr7' | GeneSymbol=='Dhfr' | GeneSymbol=='Ebp' | GeneSymbol=='Edem1' | GeneSymbol=='Eef1E1' | GeneSymbol=='Egln3' | GeneSymbol=='Eif2S2' | GeneSymbol=='Elovl5' | GeneSymbol=='Elovl6' | GeneSymbol=='Eno1' | GeneSymbol=='Eprs1' | GeneSymbol=='Ero1A' | GeneSymbol=='Etf1' | GeneSymbol=='Fads1' | GeneSymbol=='Fads2' | GeneSymbol=='Fdxr' | GeneSymbol=='Fgl2' | GeneSymbol=='Fkbp2' | GeneSymbol=='G6Pd' | GeneSymbol=='Gapdh' | GeneSymbol=='Gbe1' | GeneSymbol=='Gclc' | GeneSymbol=='Gga2' | GeneSymbol=='Gla' | GeneSymbol=='Glrx' | GeneSymbol=='Gmps' | GeneSymbol=='Got1' | GeneSymbol=='Gpi' | GeneSymbol=='Gsk3B' | GeneSymbol=='Gsr' | GeneSymbol=='Gtf2H1' | GeneSymbol=='Hk2' | GeneSymbol=='Hmbs' | GeneSymbol=='Hmgcr' | GeneSymbol=='Hmgcs1' | GeneSymbol=='Hprt1' | GeneSymbol=='Hsp90B1' | GeneSymbol=='Hspa4' | GeneSymbol=='Hspa5' | GeneSymbol=='Hspa9' | GeneSymbol=='Hspd1' | GeneSymbol=='Hspe1' | GeneSymbol=='Idh1' | GeneSymbol=='Idi1' | GeneSymbol=='Ifi30' | GeneSymbol=='Ifrd1' | GeneSymbol=='Igfbp5' | GeneSymbol=='Immt' | GeneSymbol=='Insig1' | GeneSymbol=='Itgb2' | GeneSymbol=='Ldha' | GeneSymbol=='Ldlr' | GeneSymbol=='Lgmn' | GeneSymbol=='Lta4H' | GeneSymbol=='M6Pr')

hm_tab_hall_mtorc2 = subset(hm_tab, GeneSymbol=='Map2K3' | GeneSymbol=='Mcm2' | GeneSymbol=='Mcm4' | GeneSymbol=='Me1' | GeneSymbol=='Mllt11' | GeneSymbol=='Mthfd2' | GeneSymbol=='Mthfd2L' | GeneSymbol=='Nampt' | GeneSymbol=='Nfil3' | GeneSymbol=='Nfkbib' | GeneSymbol=='Nfyc' | GeneSymbol=='Niban1' | GeneSymbol=='Nmt1' | GeneSymbol=='Nufip1' | GeneSymbol=='Nup205' | GeneSymbol=='Nupr1' | GeneSymbol=='P4Ha1' | GeneSymbol=='Pdap1' | GeneSymbol=='Pdk1' | GeneSymbol=='Pfkl' | GeneSymbol=='Pgk1' | GeneSymbol=='Pgm1' | GeneSymbol=='Phgdh' | GeneSymbol=='Pik3R3' | GeneSymbol=='Pitpnb' | GeneSymbol=='Plk1' | GeneSymbol=='Plod2' | GeneSymbol=='Pno1' | GeneSymbol=='Pnp' | GeneSymbol=='Polr3G' | GeneSymbol=='Ppa1' | GeneSymbol=='Ppia' | GeneSymbol=='Ppp1R15A' | GeneSymbol=='Prdx1' | GeneSymbol=='Psat1' | GeneSymbol=='Psma3' | GeneSymbol=='Psma4' | GeneSymbol=='Psmb5' | GeneSymbol=='Psmc2' | GeneSymbol=='Psmc4' | GeneSymbol=='Psmc6' | GeneSymbol=='Psmd12' | GeneSymbol=='Psmd13' | GeneSymbol=='Psmd14' | GeneSymbol=='Psme3' | GeneSymbol=='Psmg1' | GeneSymbol=='Psph' | GeneSymbol=='Qdpr' | GeneSymbol=='Rab1A' | GeneSymbol=='Rdh11' | GeneSymbol=='Rit1' | GeneSymbol=='Rpa1' | GeneSymbol=='Rpn1' | GeneSymbol=='Rrm2' | GeneSymbol=='Rrp9' | GeneSymbol=='Sc5D' | GeneSymbol=='Scd' | GeneSymbol=='Sdf2L1' | GeneSymbol=='Sec11A' | GeneSymbol=='Serp1' | GeneSymbol=='Serpinh1' | GeneSymbol=='Shmt2' | GeneSymbol=='Skap2' | GeneSymbol=='Sla' | GeneSymbol=='Slc1A4' | GeneSymbol=='Slc1A5' | GeneSymbol=='Slc2A1' | GeneSymbol=='Slc2A3' | GeneSymbol=='Slc37A4' | GeneSymbol=='Slc6A6' | GeneSymbol=='Slc7A11' | GeneSymbol=='Slc7A5' | GeneSymbol=='Slc9A3R1' | GeneSymbol=='Sord' | GeneSymbol=='Sqle' | GeneSymbol=='Sqstm1' | GeneSymbol=='Srd5A1' | GeneSymbol=='Ssr1' | GeneSymbol=='Stard4' | GeneSymbol=='Stc1' | GeneSymbol=='Stip1' | GeneSymbol=='Sytl2' | GeneSymbol=='Tbk1' | GeneSymbol=='Tcea1' | GeneSymbol=='Tes' | GeneSymbol=='Tfrc' | GeneSymbol=='Tm7Sf2' | GeneSymbol=='Tmem97' | GeneSymbol=='Tomm40' | GeneSymbol=='Tpi1' | GeneSymbol=='Trib3' | GeneSymbol=='Tuba4A' | GeneSymbol=='Tubg1' | GeneSymbol=='Txnrd1' | GeneSymbol=='Ube2D3' | GeneSymbol=='Uchl5' | GeneSymbol=='Ufm1' | GeneSymbol=='Ung' | GeneSymbol=='Uso1' | GeneSymbol=='Vldlr' | GeneSymbol=='Wars1' | GeneSymbol=='Xbp1' | GeneSymbol=='Ykt6')

hm_tab_hall_mtorc <- rbind(hm_tab_hall_mtorc1, hm_tab_hall_mtorc2)

hm_tab_hall_mtorc <- hm_tab_hall_mtorc %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_mtorc) = hm_tab_hall_mtorc$GeneSymbol
hm_hall_mtorc_annot = data.frame("Sig" = hm_tab_hall_mtorc$sig2)
rownames(hm_hall_mtorc_annot) = rownames(hm_tab_hall_mtorc)

hm_hall_mtorc <- pheatmap(hm_tab_hall_mtorc[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_mtorc$GeneSymbol, fontsize_row = 5, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row= hm_hall_mtorc_annot, legend_labels = "Relative expression", gaps_col=c(6), treeheight_row = 10, annotation_colors = ann_colors, main = "HALLMARK_mtorc_signalling genes")

pdf(file="BAT_hm_hall_mtorc.pdf",width=7,height=10)
hm_hall_mtorc
dev.off()



##### hm of hallmark EpiMesenchym genes

hm_tab_hall_EpiMesenchym1 = subset(hm_tab, GeneSymbol=='Abi3Bp' | GeneSymbol=='Acta2' | GeneSymbol=='Adam12' | GeneSymbol=='Anpep' | GeneSymbol=='Aplp1' | GeneSymbol=='Areg' | GeneSymbol=='Basp1' | GeneSymbol=='Bdnf' | GeneSymbol=='Bgn' | GeneSymbol=='Bmp1' | GeneSymbol=='Cadm1' | GeneSymbol=='Cald1' | GeneSymbol=='Calu' | GeneSymbol=='Cap2' | GeneSymbol=='Capg' | GeneSymbol=='Ccn1' | GeneSymbol=='Ccn2' | GeneSymbol=='Cd44' | GeneSymbol=='Cd59' | GeneSymbol=='Cdh11' | GeneSymbol=='Cdh2' | GeneSymbol=='Cdh6' | GeneSymbol=='Col11A1' | GeneSymbol=='Col12A1' | GeneSymbol=='Col16A1' | GeneSymbol=='Col1A1' | GeneSymbol=='Col1A2' | GeneSymbol=='Col3A1' | GeneSymbol=='Col4A1' | GeneSymbol=='Col4A2' | GeneSymbol=='Col5A1' | GeneSymbol=='Col5A2' | GeneSymbol=='Col5A3' | GeneSymbol=='Col6A2' | GeneSymbol=='Col6A3' | GeneSymbol=='Col7A1' | GeneSymbol=='Col8A2' | GeneSymbol=='Colgalt1' | GeneSymbol=='Comp' | GeneSymbol=='Copa' | GeneSymbol=='Crlf1' | GeneSymbol=='Cthrc1' | GeneSymbol=='Cxcl1' | GeneSymbol=='Cxcl12' | GeneSymbol=='Cxcl6' | GeneSymbol=='Cxcl8' | GeneSymbol=='Dab2' | GeneSymbol=='Dcn' | GeneSymbol=='Dkk1' | GeneSymbol=='Dpysl3' | GeneSymbol=='Dst' | GeneSymbol=='Ecm1' | GeneSymbol=='Ecm2' | GeneSymbol=='Edil3' | GeneSymbol=='Efemp2' | GeneSymbol=='Eln' | GeneSymbol=='Emp3' | GeneSymbol=='Eno2' | GeneSymbol=='Fap' | GeneSymbol=='Fas' | GeneSymbol=='Fbln1' | GeneSymbol=='Fbln2' | GeneSymbol=='Fbln5' | GeneSymbol=='Fbn1' | GeneSymbol=='Fbn2' | GeneSymbol=='Fermt2' | GeneSymbol=='Fgf2' | GeneSymbol=='Flna' | GeneSymbol=='Fmod' | GeneSymbol=='Fn1' | GeneSymbol=='Foxc2' | GeneSymbol=='Fstl1' | GeneSymbol=='Fstl3' | GeneSymbol=='Fuca1' | GeneSymbol=='Fzd8' | GeneSymbol=='Gadd45A' | GeneSymbol=='Gadd45B')


hm_tab_hall_EpiMesenchym2 = subset(hm_tab, GeneSymbol=='Gas1' | GeneSymbol=='Gem' | GeneSymbol=='Gja1' | GeneSymbol=='Glipr1' | GeneSymbol=='Gpc1' | GeneSymbol=='Gpx7' | GeneSymbol=='Grem1' | GeneSymbol=='Htra1' | GeneSymbol=='Id2' | GeneSymbol=='Igfbp2' | GeneSymbol=='Igfbp3' | GeneSymbol=='Igfbp4' | GeneSymbol=='Il15' | GeneSymbol=='Il32' | GeneSymbol=='Il6' | GeneSymbol=='Inhba' | GeneSymbol=='Itga2' | GeneSymbol=='Itga5' | GeneSymbol=='Itgav' | GeneSymbol=='Itgb1' | GeneSymbol=='Itgb3' | GeneSymbol=='Itgb5' | GeneSymbol=='Jun' | GeneSymbol=='Lama1' | GeneSymbol=='Lama2' | GeneSymbol=='Lama3' | GeneSymbol=='Lamc1' | GeneSymbol=='Lamc2' | GeneSymbol=='Lgals1' | GeneSymbol=='Lox' | GeneSymbol=='Loxl1' | GeneSymbol=='Loxl2' | GeneSymbol=='Lrp1' | GeneSymbol=='Lrrc15' | GeneSymbol=='Lum' | GeneSymbol=='Magee1' | GeneSymbol=='Matn2' | GeneSymbol=='Matn3' | GeneSymbol=='Mcm7' | GeneSymbol=='Mest' | GeneSymbol=='Mfap5' | GeneSymbol=='Mgp' | GeneSymbol=='Mmp1' | GeneSymbol=='Mmp14' | GeneSymbol=='Mmp2' | GeneSymbol=='Mmp3' | GeneSymbol=='Msx1' | GeneSymbol=='Mxra5' | GeneSymbol=='Myl9' | GeneSymbol=='Mylk' | GeneSymbol=='Nid2' | GeneSymbol=='Nnmt' | GeneSymbol=='Notch2' | GeneSymbol=='Nt5E' | GeneSymbol=='Ntm' | GeneSymbol=='Oxtr' | GeneSymbol=='P3H1' | GeneSymbol=='Pcolce' | GeneSymbol=='Pcolce2' | GeneSymbol=='Pdgfrb' | GeneSymbol=='Pdlim4' | GeneSymbol=='Pfn2' | GeneSymbol=='Plaur' | GeneSymbol=='Plod1' | GeneSymbol=='Plod2')


hm_tab_hall_EpiMesenchym3 = subset(hm_tab, GeneSymbol=='Plod3' | GeneSymbol=='Pmepa1' | GeneSymbol=='Pmp22' | GeneSymbol=='Postn' | GeneSymbol=='Ppib' | GeneSymbol=='Prrx1' | GeneSymbol=='Prss2' | GeneSymbol=='Pthlh' | GeneSymbol=='Ptx3' | GeneSymbol=='Pvr' | GeneSymbol=='Qsox1' | GeneSymbol=='Rgs4' | GeneSymbol=='Rhob' | GeneSymbol=='Sat1' | GeneSymbol=='Scg2' | GeneSymbol=='Sdc1' | GeneSymbol=='Sdc4' | GeneSymbol=='Serpine1' | GeneSymbol=='Serpine2' | GeneSymbol=='Serpinh1' | GeneSymbol=='Sfrp1' | GeneSymbol=='Sfrp4' | GeneSymbol=='Sgcb' | GeneSymbol=='Sgcd' | GeneSymbol=='Sgcg' | GeneSymbol=='Slc6A8' | GeneSymbol=='Slit2' | GeneSymbol=='Slit3' | GeneSymbol=='Snai2' | GeneSymbol=='Sntb1' | GeneSymbol=='Sparc' | GeneSymbol=='Spock1' | GeneSymbol=='Spp1' | GeneSymbol=='Tagln' | GeneSymbol=='Tfpi2' | GeneSymbol=='Tgfb1' | GeneSymbol=='Tgfbi' | GeneSymbol=='Tgfbr3' | GeneSymbol=='Tgm2' | GeneSymbol=='Thbs1' | GeneSymbol=='Thbs2' | GeneSymbol=='Thy1' | GeneSymbol=='Timp1' | GeneSymbol=='Timp3' | GeneSymbol=='Tnc' | GeneSymbol=='Tnfaip3' | GeneSymbol=='Tnfrsf11B' | GeneSymbol=='Tnfrsf12A' | GeneSymbol=='Tpm1' | GeneSymbol=='Tpm2' | GeneSymbol=='Tpm4' | GeneSymbol=='Vcam1' | GeneSymbol=='Vcan' | GeneSymbol=='Vegfa' | GeneSymbol=='Vegfc' | GeneSymbol=='Vim' | GeneSymbol=='Wipf1' | GeneSymbol=='Wnt5A')

hm_tab_hall_EpiMesenchym <-rbind(hm_tab_hall_EpiMesenchym1, hm_tab_hall_EpiMesenchym2, hm_tab_hall_EpiMesenchym3)

hm_tab_hall_EpiMesenchym <- hm_tab_hall_EpiMesenchym %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_EpiMesenchym) = hm_tab_hall_EpiMesenchym$GeneSymbol
hm_hall_EpiMesenchym_annot = data.frame("Sig" = hm_tab_hall_EpiMesenchym$sig2)
rownames(hm_hall_EpiMesenchym_annot) = rownames(hm_tab_hall_EpiMesenchym)

hm_hall_EpiMesenchym <- pheatmap(hm_tab_hall_EpiMesenchym[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_EpiMesenchym$GeneSymbol, fontsize_row = 5, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_EpiMesenchym_annot, legend_labels = "Relative expression", gaps_col=c(6), treeheight_row = 10, main="EpiMesenchym", annotation_colors = ann_colors)

pdf(file="BAT_hm_hall_EpiMesenchym.pdf",width=7,height=10)
hm_hall_EpiMesenchym
dev.off()

### hallmark adipogenesis

hm_hall_adip <- pheatmap(hm_tab_hall_adip[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_adip$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_adip_annot, legend_labels = "Relative expression", main = "HALLMARK_ADIPOGENESIS genes", annotation_colors = ann_colors, gaps_col=c(6), treeheight_row = 10)

pdf(file="BAT_hm_hall_adip.pdf",width=7,height=10)
hm_hall_adip
dev.off()

## hallmark oxidative phosphorylation

hm_hall_oxphos <- pheatmap(hm_tab_hall_oxphos[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_oxphos$GeneSymbol, fontsize_row = 6, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_oxphos_annot, legend_labels = "Relative expression", main = "HALLMARK_OXIDATIVE_PHOSPHORYLATION genes", annotation_colors = ann_colors, gaps_col=c(6), treeheight_row = 10, border_colour=NA)

pdf(file="BAT_hm_hall_oxphos.pdf",width=7,height=10)
hm_hall_oxphos
dev.off()


### re-colour mito genes sumfig

hm_mt_mito2 <- pheatmap(hm_tab_mt_mito2, cluster_rows = TRUE, cluster_cols = FALSE, cutree_rows = 2, legend = FALSE, cellwidth=30, angle_col=45, fontsize_col=6, annotation_row=hm_mt_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial-encoded", show_colnames = FALSE, show_rownames = FALSE, border_color = NA, scale = "none", color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList, annotation_colors = ann_colors)

hm_tab_nucl_mito2 <- as.data.frame(hm_tab_nucl_mito$log2FC)
rownames(hm_tab_nucl_mito2) = hm_tab_nucl_mito$GeneSymbol
hm_tab_nucl_mito2$log2FCdup <- hm_tab_nucl_mito$log2FC

hm_nucl_mito2 <- pheatmap(hm_tab_nucl_mito2, cluster_rows = TRUE, cluster_cols = FALSE, cutree_rows = 3, legend = TRUE, cellwidth=30, angle_col=45, fontsize_col=6, annotation_row=hm_nucl_mito_annot, legend_labels = "Relative expression", main = "Nuclear-encoded", show_colnames = FALSE, , show_rownames = FALSE, border_color = NA, color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList, annotation_colors = ann_colors)

require(cowplot)
require(ggplotify)

pdf(file="BAT_mito_genes_sumfig.pdf",width=8,height=3)
plot_grid(as.grob(hm_mt_mito2), as.grob(hm_nucl_mito2), ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()



##### hm of hallmark KEGG_pyruvate genes

hm_tab_hall_KEGG_pyruvate = subset(hm_tab, GeneSymbol=='Acaca' | GeneSymbol=='Acacb' | GeneSymbol=='Acat1' | GeneSymbol=='Acat2' | GeneSymbol=='Acot12' | GeneSymbol=='Acss1' | GeneSymbol=='Acss2' | GeneSymbol=='Acyp1' | GeneSymbol=='Acyp2' | GeneSymbol=='Akr1B1' | GeneSymbol=='Aldh1B1' | GeneSymbol=='Aldh2' | GeneSymbol=='Aldh3A2' | GeneSymbol=='Aldh7A1' | GeneSymbol=='Aldh9A1' | GeneSymbol=='Dlat' | GeneSymbol=='Dld' | GeneSymbol=='Glo1' | GeneSymbol=='Grhpr' | GeneSymbol=='Hagh' | GeneSymbol=='Haghl' | GeneSymbol=='Ldha' | GeneSymbol=='Ldhal6A' | GeneSymbol=='Ldhal6B' | GeneSymbol=='Ldhb' | GeneSymbol=='Ldhc' | GeneSymbol=='Ldhd' | GeneSymbol=='Mdh1' | GeneSymbol=='Mdh2' | GeneSymbol=='Me1' | GeneSymbol=='Me2' | GeneSymbol=='Me3' | GeneSymbol=='Pc' | GeneSymbol=='Pck1' | GeneSymbol=='Pck2' | GeneSymbol=='Pdha1' | GeneSymbol=='Pdha2' | GeneSymbol=='Pdhb' | GeneSymbol=='Pklr' | GeneSymbol=='Pkm')

hm_tab_hall_KEGG_pyruvate <- hm_tab_hall_KEGG_pyruvate %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_KEGG_pyruvate) = hm_tab_hall_KEGG_pyruvate$GeneSymbol
hm_hall_KEGG_pyruvate_annot = data.frame("Sig" = hm_tab_hall_KEGG_pyruvate$sig2)
rownames(hm_hall_KEGG_pyruvate_annot) = rownames(hm_tab_hall_KEGG_pyruvate)

hm_hall_KEGG_pyruvate <- pheatmap(hm_tab_hall_KEGG_pyruvate[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_KEGG_pyruvate$GeneSymbol, fontsize_row = 7, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_KEGG_pyruvate_annot, legend_labels = "Relative expression", gaps_col=c(6), treeheight_row = 10, main="KEGG_pyruvate", annotation_colors = ann_colors)

pdf(file="BAT_hm_hall_KEGG_pyruvate.pdf",width=7,height=7)
hm_hall_KEGG_pyruvate
dev.off()


##### hm of hallmark KEGG_TCA genes

hm_tab_hall_KEGG_TCA = subset(hm_tab, GeneSymbol=='Acly' | GeneSymbol=='Aco1' | GeneSymbol=='Aco2' | GeneSymbol=='Cs' | GeneSymbol=='Dlat' | GeneSymbol=='Dld' | GeneSymbol=='Dlst' | GeneSymbol=='Fh' | GeneSymbol=='Idh1' | GeneSymbol=='Idh2' | GeneSymbol=='Idh3A' | GeneSymbol=='Idh3B' | GeneSymbol=='Idh3G' | GeneSymbol=='Mdh1' | GeneSymbol=='Mdh2' | GeneSymbol=='Ogdh' | GeneSymbol=='Ogdhl' | GeneSymbol=='Pc' | GeneSymbol=='Pck1' | GeneSymbol=='Pck2' | GeneSymbol=='Pdha1' | GeneSymbol=='Pdha2' | GeneSymbol=='Pdhb' | GeneSymbol=='Sdha' | GeneSymbol=='Sdhb' | GeneSymbol=='Sdhc' | GeneSymbol=='Sdhd' | GeneSymbol=='Sucla2' | GeneSymbol=='Suclg1' | GeneSymbol=='Suclg2' | GeneSymbol=='Suclg2P2')

hm_tab_hall_KEGG_TCA <- hm_tab_hall_KEGG_TCA %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_KEGG_TCA) = hm_tab_hall_KEGG_TCA$GeneSymbol
hm_hall_KEGG_TCA_annot = data.frame("Sig" = hm_tab_hall_KEGG_TCA$sig2)
rownames(hm_hall_KEGG_TCA_annot) = rownames(hm_tab_hall_KEGG_TCA)

hm_hall_KEGG_TCA <- pheatmap(hm_tab_hall_KEGG_TCA[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_KEGG_TCA$GeneSymbol, fontsize_row = 7, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_KEGG_TCA_annot, legend_labels = "Relative expression", gaps_col=c(6), treeheight_row = 10, main="KEGG_TCA", annotation_colors = ann_colors)

pdf(file="BAT_hm_hall_KEGG_TCA.pdf",width=7,height=7)
hm_hall_KEGG_TCA
dev.off()


##### hm of hallmark KEGG_glycol genes

hm_tab_hall_KEGG_glycol = subset(hm_tab, GeneSymbol=='Acss1' | GeneSymbol=='Acss2' | GeneSymbol=='Adh1A' | GeneSymbol=='Adh1B' | GeneSymbol=='Adh1C' | GeneSymbol=='Adh4' | GeneSymbol=='Adh5' | GeneSymbol=='Adh6' | GeneSymbol=='Adh7' | GeneSymbol=='Akr1A1' | GeneSymbol=='Aldh1A3' | GeneSymbol=='Aldh1B1' | GeneSymbol=='Aldh2' | GeneSymbol=='Aldh3A1' | GeneSymbol=='Aldh3A2' | GeneSymbol=='Aldh3B1' | GeneSymbol=='Aldh3B2' | GeneSymbol=='Aldh7A1' | GeneSymbol=='Aldh9A1' | GeneSymbol=='Aldoa' | GeneSymbol=='Aldob' | GeneSymbol=='Aldoc' | GeneSymbol=='Bpgm' | GeneSymbol=='Dlat' | GeneSymbol=='Dld' | GeneSymbol=='Eno1' | GeneSymbol=='Eno2' | GeneSymbol=='Eno3' | GeneSymbol=='Fbp1' | GeneSymbol=='Fbp2' | GeneSymbol=='G6Pc' | GeneSymbol=='G6Pc2' | GeneSymbol=='Galm' | GeneSymbol=='Gapdh' | GeneSymbol=='Gck' | GeneSymbol=='Gpi' | GeneSymbol=='Hk1' | GeneSymbol=='Hk2' | GeneSymbol=='Hk3' | GeneSymbol=='Ldha' | GeneSymbol=='Ldhal6A' | GeneSymbol=='Ldhal6B' | GeneSymbol=='Ldhb' | GeneSymbol=='Ldhc' | GeneSymbol=='Pck1' | GeneSymbol=='Pck2' | GeneSymbol=='Pdha1' | GeneSymbol=='Pdha2' | GeneSymbol=='Pdhb' | GeneSymbol=='Pfkl' | GeneSymbol=='Pfkm' | GeneSymbol=='Pfkp' | GeneSymbol=='Pgam1' | GeneSymbol=='Pgam2' | GeneSymbol=='Pgam4' | GeneSymbol=='Pgk1' | GeneSymbol=='Pgk2' | GeneSymbol=='Pgm1' | GeneSymbol=='Pgm2' | GeneSymbol=='Pklr' | GeneSymbol=='Pkm' | GeneSymbol=='Tpi1')

hm_tab_hall_KEGG_glycol <- hm_tab_hall_KEGG_glycol %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_KEGG_glycol) = hm_tab_hall_KEGG_glycol$GeneSymbol
hm_hall_KEGG_glycol_annot = data.frame("Sig" = hm_tab_hall_KEGG_glycol$sig2)
rownames(hm_hall_KEGG_glycol_annot) = rownames(hm_tab_hall_KEGG_glycol)

hm_hall_KEGG_glycol <- pheatmap(hm_tab_hall_KEGG_glycol[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_KEGG_glycol$GeneSymbol, fontsize_row = 7, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_KEGG_glycol_annot, legend_labels = "Relative expression", gaps_col=c(6), treeheight_row = 10, main="KEGG_glycol", annotation_colors = ann_colors)

pdf(file="BAT_hm_hall_KEGG_glycol.pdf",width=7,height=7)
hm_hall_KEGG_glycol
dev.off()

##### hm of hallmark KEGG_aminoacyl genes

hm_tab_hall_KEGG_aminoacyl = subset(hm_tab, GeneSymbol=='Aars1' | GeneSymbol=='Aars2' | GeneSymbol=='Cars1' | GeneSymbol=='Cars2' | GeneSymbol=='Dars1' | GeneSymbol=='Dars2' | GeneSymbol=='Ears2' | GeneSymbol=='Eprs1' | GeneSymbol=='Fars2' | GeneSymbol=='Farsa' | GeneSymbol=='Farsb' | GeneSymbol=='Gars1' | GeneSymbol=='Hars1' | GeneSymbol=='Hars2' | GeneSymbol=='Iars1' | GeneSymbol=='Iars2' | GeneSymbol=='Kars1' | GeneSymbol=='Lars1' | GeneSymbol=='Lars2' | GeneSymbol=='Mars1' | GeneSymbol=='Mars2' | GeneSymbol=='Mtfmt' | GeneSymbol=='Nars1' | GeneSymbol=='Nars2' | GeneSymbol=='Pars2' | GeneSymbol=='Pstk' | GeneSymbol=='Qars1' | GeneSymbol=='Rars1' | GeneSymbol=='Rars2' | GeneSymbol=='Sars1' | GeneSymbol=='Sars2' | GeneSymbol=='Sepsecs' | GeneSymbol=='Tars1' | GeneSymbol=='Tars2' | GeneSymbol=='Tars3' | GeneSymbol=='Vars1' | GeneSymbol=='Vars2' | GeneSymbol=='Wars1' | GeneSymbol=='Wars2' | GeneSymbol=='Yars1' | GeneSymbol=='Yars2')

hm_tab_hall_KEGG_aminoacyl <- hm_tab_hall_KEGG_aminoacyl %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_KEGG_aminoacyl) = hm_tab_hall_KEGG_aminoacyl$GeneSymbol
hm_hall_KEGG_aminoacyl_annot = data.frame("Sig" = hm_tab_hall_KEGG_aminoacyl$sig2)
rownames(hm_hall_KEGG_aminoacyl_annot) = rownames(hm_tab_hall_KEGG_aminoacyl)

hm_hall_KEGG_aminoacyl <- pheatmap(hm_tab_hall_KEGG_aminoacyl[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_KEGG_aminoacyl$GeneSymbol, fontsize_row = 7, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_KEGG_aminoacyl_annot, legend_labels = "Relative expression", gaps_col=c(6), treeheight_row = 10, main="KEGG_aminoacyl", annotation_colors = ann_colors)

pdf(file="BAT_hm_hall_KEGG_aminoacyl.pdf",width=7,height=7)
hm_hall_KEGG_aminoacyl
dev.off()

## top sig genes

library(dplyr)
hm_tab_sig2_up = subset(hm_tab, log2FC > 0)
hm_tab_sig2_up <- hm_tab_sig2_up %>% arrange(-neglog_p) %>% slice(1:25)
hm_tab_sig2_down = subset(hm_tab, log2FC < 0)
hm_tab_sig2_down <- hm_tab_sig2_down %>% arrange(-neglog_p) %>% slice(1:25)
hm_tab_sig2 <- rbind(hm_tab_sig2_up, hm_tab_sig2_down)


hm_sig <- pheatmap(hm_tab_sig2[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_sig2$GeneSymbol, fontsize_row = 8, cutree_rows = 2, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, main = "Significantly differentially expressed genes", gaps_col=c(6), treeheight_row = 10)

pdf(file="BAT_hm_sig.pdf",width=7,height=7)
hm_sig
dev.off()



## use counts tables 


rm(list = ls())

#### PRELIMINARIES ############################################################################################# 

#*Uploads the needed libraries --------------------------------------------------------------------------------

require(DESeq2)

require(ggplot2)

require(data.table)

require(plotly)

require(DT)

require(htmlwidgets)

require(R2HTML)


soft_version <- packageVersion("DESeq2")

#*Set the number of significant digits for the output --------------------------
sig_dig = 4

## Analysis for brown adipose tissue

#*Set the working directory ---------------------------------------------------------------------------------

#get the default wd
default_wd <- getwd()

#Set the directory where all the saved outputs will be stored
setwd("/Users/jakemann/RNAseq_Dec20/output_v1/IngCD")

new_wd <- getwd()
#### DATA UPLOAD ###############################################################################################################

annotation_table <- read.csv("/Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.95_gene_annotation_table.txt", sep = "\t")

# inputs the list of the count files
input_files <- list.files(path = "/Users/jakemann/RNAseq_Dec20/counts_v1/", pattern = "*tab$", full.names = TRUE)
input_files <- input_files[grep(input_files, pattern="KI_IngCD|WT_IngCD")]

# inputs the list of the summary files
summary_files <-  list.files(path = "/Users/jakemann/RNAseq_Dec20/counts_v1/", pattern = "summary$", full.names = TRUE)
summary_files <- summary_files[grep(summary_files, pattern="KI_IngCD|WT_IngCD")]

#Reads the count files (input_files)
#create a list; each element of a list (named ''sample'' in the following) is a count table
counts_tables <- lapply(input_files, fread, header = FALSE, stringsAsFactors = FALSE, skip=2, select=c(1,7), col.names=c("GeneID","Counts"))

#Reads the summary files (summary_files)
#create a list; each element of a list is a summary table
summary_tables <- lapply(summary_files, read.delim, header = FALSE, stringsAsFactors = FALSE, skip=1, quote = "")

#takes the names of the genes from the counts_tables
genes_names <- counts_tables[[1]]$GeneID
genes_number = length(genes_names)

#take the names of each element (sample) of the list from the input files 
samples_names <- substr(noquote(unlist(lapply(basename(input_files), tools::file_path_sans_ext))) ,1,10)

#assign the names to the elements of the counts_tables list, composed by the counts tables; NOTE: each replicate has its ID
names(counts_tables) <- samples_names

#Creates a single data frame with all the samples as columns, for reporting and clustering purposes -- see heatmaps below
counts_tables_dataframe <- sapply(counts_tables, '[[', 2)
#assignes the genes names to the rows of the counts_tables_dataframe
rownames(counts_tables_dataframe) <- genes_names

#assign the names to the elements of the summary_tables list, composed by the summary tables; NOTE: each replicate has its ID
names(summary_tables) <- samples_names

#take the roots of the samples_names; replicates cannot be distinguished here -- set the name of the control 
name_control <- "WT_"
names_mutants <- setdiff(unique((substr(samples_names,1,3))), name_control)

#Creates the datasets_matrix, containing all the names of the datasets and replicates for reporting purposes
library(readxl)
datasets_matrix <- read_excel("datasets_matrix.xlsx")





####PAIRWISE COMPARISONS ####################################################################################################
# *Set the tresholds ----------------------------------------------------------------------------------------------------

lfc = 1.5 #treshold for the ADJUSTED fold changes
pval = 0.01 #treshold for the ADJUSTED pvalues

num_comparisons=1 #loop's counter initialisation

###COMPARISONS, PLOTS AND TABLES LOOP ======================================================================================

# *Start of the loop ------------------------------------------------------------------------------------------------------
while(num_comparisons <= length(names_mutants)){    

  # **Grabbing the data ----------------------------------------------------------------------------------------------------  
  name_mutant <- names_mutants[num_comparisons]  
  
  #extract the needed samples from the whole list
  assign( paste0("counts_tables_", name_control), counts_tables[grep(name_control, samples_names, value = TRUE)]) #extract the controls counts tables 

  assign( paste0("counts_tables_", name_mutant), counts_tables[grep(name_mutant, samples_names, value = TRUE)]) #extract the mutants counts tables 

  assign( paste0("counts_list_", name_control, "_", name_mutant) , c( get( paste0("counts_tables_", name_control)),  get(paste0("counts_tables_", name_mutant)) )) #merges the two counts tables above in one list

  # **Creating the counts matrix needed for DESeq2 AND ... ---------------------------------------------------------------------  

  #creates the counts matrix: each row is a gene, the first n columns are the counts coming from the control's replicates, the last p columns are the counts from the mutant replicates
  assign( paste0( "columns_list_", name_control, "_", name_mutant), sapply(get( paste0("counts_list_", name_control, "_", name_mutant) ), `[[` , 2) )  #takes one column each two (i.e. only the columns containing the counts) from the counts list

  assign( paste0( "counts_matrix_", name_control, "_", name_mutant),  matrix(unlist( get( paste0( "columns_list_", name_control, "_", name_mutant) ) , use.names = FALSE), ncol = length( get( paste0("counts_list_", name_control, "_", name_mutant) ) ) )  )#convert the list into a matrix, for convenience

  assign( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names"), get(  paste0( "counts_matrix_", name_control, "_", name_mutant) ) )  #the counts matrix with names is also created; at this stage is the same of the counts matrix

  # #filters out low counts
  
  # matrix_to_filter <- get(paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names"))
  # summing_rows <- apply(matrix_to_filter, 1, sum)
  # rows_to_keep <- which(summing_rows > 10)
  # matrix_filtered <- matrix_to_filter[rows_to_keep,]
  # genes_names <- names(matrix_filtered)
  # assign( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names"), matrix_filtered)

  #** ... AND Creating the summary matrix ---------------------------------------------------------------------
  #The summary matrix contains, for each comparison, the general information about the counts statistics
  
  #extracts the needed samples from the whole list
  assign( paste0("summary_tables_", name_control), summary_tables[grep(name_control, samples_names, value = TRUE)]) #extract the controls summary tables 
  
  assign( paste0("summary_tables_", name_mutant), summary_tables[grep(name_mutant, samples_names, value = TRUE)]) #extract the mutants summary tables 
  
  assign( paste0("summary_list_", name_control, "_", name_mutant) , c( get( paste0("summary_tables_", name_control)),  get(paste0("summary_tables_", name_mutant)) )) #merges the two summary tables above in one list
  
  #creates the summary matrix: each row is a gene, the first n columns are the counts coming from the control's replicates, the last p columns are the counts from the mutant replicates
  assign( paste0( "columns_list_", name_control, "_", name_mutant), sapply(get( paste0("summary_list_", name_control, "_", name_mutant) ), `[[` , 2) )  #takes one column each two (i.e. only the columns containing the counts) from the counts list
  
  assign( paste0( "summary_matrix_", name_control, "_", name_mutant),  matrix(unlist( get( paste0( "columns_list_", name_control, "_", name_mutant) ) , use.names = FALSE), ncol = length( get( paste0("summary_list_", name_control, "_", name_mutant) ) ) )  )#convert the list into a matrix, for convenience
  
  assign( paste0( "summary_matrix_", name_control, "_", name_mutant, "_with_names"), get(  paste0( "summary_matrix_", name_control, "_", name_mutant) ) )  #the counts matrix with names is also created; at this stage is the same of the counts matrix
  
  
  col_names <-c(grep(name_control, samples_names, value=TRUE),  grep(name_mutant, samples_names, value = TRUE))  # takes the right names for the columns of the counts matrix, from the sample names 

  dummy<- get( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names") )         #workaround for assigning dynamically colnames and rownames to the counts_matrix - START
  colnames(dummy) <- col_names
  assign(  paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names")  ,  dummy)

  dummy<- get( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names") )
  rownames(dummy) <- genes_names
  assign(  paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names")  ,  dummy)    #workaround for assigning dynamically colnames and rownames to the counts_matrix - END

  dummy<- get( paste0( "summary_matrix_", name_control, "_", name_mutant) )         #workaround for assigning dynamically colnames and rownames to the summary_matrix - START
  colnames(dummy) <- col_names
  rownames(dummy) <- summary_tables[[1]][,1]
  assign(  paste0( "summary_matrix_", name_control, "_", name_mutant)  ,  dummy) #workaround for assigning dynamically colnames and rownames to the summary_matrix - END

  # #Evaluating the number of the reads counted and uncounted by HTSEQ2
  total_uncounted <- apply(get(paste0( "summary_matrix_", name_control, "_", name_mutant))[-1,], 2, sum)
  total_counted <- get(paste0( "summary_matrix_", name_control, "_", name_mutant))[1,]
  total_number <- total_uncounted + total_counted
  fraction_counted <- signif(total_counted/total_number, digits=3)
  void_row<-rep(" ", length(total_counted))
  statistics_matrix <- rbind(total_number, total_counted, total_uncounted,fraction_counted,void_row)
  rownames(statistics_matrix)<-c("TOTAL READS MAPPED", "TOTAL READS COUNTED", "TOTAL READS NON COUNTED", "FRACTION COUNTED" , "DETAILS UNCOUNTED:")

    #merging summary matrix and statistics matrix
  dummy<- rbind(statistics_matrix, get( paste0( "summary_matrix_", name_control, "_", name_mutant) )) 
  assign(  paste0( "summary_matrix_", name_control, "_", name_mutant)  ,  dummy)
  
  #**Defining the "experimental design" -----------------------------------
  comparisons <- sapply(col_names, function(x) substr(x,1,3))  #takes only the first parts of the column names; these are the identifiers of the control and mutant's data, irrespectively of the replicates 

  experimental_design <- data.frame(row.names = col_names, comparisons=comparisons)
  experimental_design$correlated <- c(seq(1: length(grep(name_control, col_names)) ),  seq(1: length(grep(name_mutant, col_names)) ) )
  
  #experimental_design$comparisons<- relevel(experimental_design$comparisons, ref=name_control)
  experimental_design$comparisons<- factor(experimental_design$comparisons, levels=c(name_control, name_mutant))
  
  #**Calling DESeq2 ------------------------

  #Creating the dds data structure, needed from DESEQ2
  dds <- DESeqDataSetFromMatrix(countData= get( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names")) , colData=experimental_design, design=~comparisons)
  
  #Calls DEseq2 on dds and store the results in de
  de<-DESeq(dds)

  #Uses the built-in DESEQ2 results operator for creating a matrix-like structure storing the DE analysis results; the structure is stored in res_raw and subsequently converted in a data frame (res) 
  
  res_raw <-results(de)
  res <- signif(as.data.frame(res_raw), digits = sig_dig) #converts into data frame and sets the number of digits
  res <- cbind(rownames(res), res) #adds one column with the genes ID to the res dataframe (it will be useful later on)
  colnames(res) <- c("ID","Mean of norm counts", "log2 FC (MLE)", "lFC Std Err" , "Wald Stat", "Wald test pval", "BH pval") # sets the column names
  
  
  ##*Plots and Tables -----------------------------------------------------------------------------------------------------------------
  
  #**Assigns dynamic names to the table to export, taking the res data frame defined above ---------------------------------- 
  assign(paste0("results_table_",name_control,"_", name_mutant),  res ) #takes the whole res data frame
  dummy<-merge(annotation_table, get(paste0("results_table_",name_control,"_", name_mutant)), by.x="GeneSymbol", by.y="ID")
  assign(paste0("results_table_",name_control,"_", name_mutant), dummy)
  
  
  assign(paste0("results_table_topscore_",name_control,"_", name_mutant), res[which(abs(res$`log2 FC (MLE)`)>lfc & res$`BH pval` <pval),]) #takes only the rows of the res data frame that have the best log2FC and the best BH pval
  dummy<-merge(annotation_table, get(paste0("results_table_topscore_",name_control,"_", name_mutant)), by.x="GeneSymbol", by.y="ID")
  assign(paste0("results_table_topscore_",name_control,"_", name_mutant), dummy)
  
  
  #**Prints the tables above in .csv---------------------------------------------------------------------------------
  
  #write.table(get(paste0("results_table_topscore_",name_control,"_", name_mutant)), file=paste0("results_table_topscore_",name_control,"_", name_mutant, ".tsv"),quote=F,sep="\t", row.names = FALSE)
  
  #write.table(get(paste0("results_table_",name_control,"_", name_mutant)), file=paste0("results_table_",name_control,"_", name_mutant, ".tsv"), quote=F,sep="\t", row.names = FALSE)
  
  #write.table(get(paste0("counts_matrix_",name_control,"_", name_mutant, "_with_names")), file=paste0("counts_matrix_",name_control,"_", name_mutant, ".tsv"), quote=F,sep="\t", row.names = FALSE)
  
  #**Building the datatables ---------------------------------------------------------------------------------------------------------
  #The datatables are widgets created through the saveWidget function; this can "automatically" be sorted clicking on it --> Useful for having a general overview
  
  #***Summingup datatable ------------------------------------------
  #Builds the datatable containing all the resuls of the DE analysis
  
  #Creates the summingup_matrix, which includes only some columns of the correspondent results_table (more handy for visualisation) 
  assign(paste0("summingup_matrix_",name_control, "_", name_mutant), get(paste0("results_table_",name_control,"_", name_mutant))[, c(1:7,10,11)])
  dummy <- get(paste0("summingup_matrix_",name_control, "_", name_mutant))
  rownames(dummy) <- c()
  assign( paste0("summingup_matrix_",name_control, "_", name_mutant), dummy )
  #Creates a dynamic table (widget) of all the results
  assign(paste0("summingup_datatable_",name_control, "_", name_mutant) , datatable(get(paste0("summingup_matrix_",name_control, "_", name_mutant))) )
  #saves the datatable widget to in the working directory
  saveWidget( get(paste0("summingup_datatable_",name_control, "_", name_mutant)), file= paste0("summingup_datatable_",name_control, "_", name_mutant, ".html") )

  #***Topscores datatable ----------------------------------------- 
  #Builds the matrix containing only the top log2FC (adjusted) top scores (independently on the pvalues)
  assign(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant),  subset(get(paste0("summingup_matrix_",name_control, "_", name_mutant)),  (abs(get(paste0("summingup_matrix_",name_control, "_", name_mutant))[,"log2 FC (MLE)"]) >lfc &  get(paste0("summingup_matrix_",name_control, "_", name_mutant))[,"BH pval"] <pval )  ) ) 
  dummy <- get(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant))
  rownames(dummy) <- c()
  assign( paste0("summingup_matrix_topscores_",name_control, "_", name_mutant), dummy )
  #Creates a dynamic table (widget) of the topscores
  assign(paste0("topscores_datatable_",name_control, "_", name_mutant) , datatable(get(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant))) )
  #saves the datatable widget to in the working directory
  saveWidget( get(paste0("topscores_datatable_",name_control, "_", name_mutant)), file= paste0("topscores_datatable_",name_control, "_", name_mutant, ".html") )

  #**Dispersion plot---------------------------------------------------------------------------------------------
  #This will not be stored or printed; for sanity check purposes only
  plotDispEsts(de, main=paste(name_mutant, " vs ", name_control))

  #**MA plot -----------------------------------------------------------------------------------------------------
  #Plot of the mean of normalised (according to DESEq) counts of the control vs. the log2fold change "corrected as well"

  #***Plot static MA -------------------------------------------------------------------------------------------------- 

  #Creates the dataframe for ggplot
  MA_dataframe <- data.frame(Ln_mean=log(res$`Mean of norm counts`), foldchange = res$`log2 FC (MLE)`, pvaladj=res$`BH pval`)
  rownames(MA_dataframe) <- rownames(res)
  MA_dataframe <- MA_dataframe[which(!is.na(MA_dataframe$foldchange)), ]
  MA_dataframe$Diff_Exp <- rep(0, nrow(MA_dataframe))
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)>=lfc  )] <- "Relevant log2 FC" 
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)>=lfc & MA_dataframe$pvaladj<=pval)] <- "Relevant log2 FC and Pval" 
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)<lfc)] = "Non significant" 

  #Creates the ggplot
  r <-ggplot(MA_dataframe, aes(x=Ln_mean, y=foldchange, text=rownames(MA_dataframe)))+
    geom_point(aes(colour= Diff_Exp), size=.5)+
    geom_hline(yintercept=0, linetype=1, color="green") + geom_hline(yintercept=lfc,linetype=3, color="green") + geom_hline(yintercept=-lfc, linetype=3, color="green")+
    scale_colour_manual(values = c("Relevant log2 FC and Pval" ="red", "Non significant" = "black", "Relevant log2 FC" ="blue"))+
    xlab("ln mean of norm. counts") + ylab("log2 fold change")+ scale_x_continuous(labels = function(x)as.integer(exp(x)))+
    #+ylim(-4, 4)
    labs(aesthetic='custom text')+
    ggtitle(paste("MA plot", name_control, "vs.", name_mutant))

  #Saves the plot in a variable
  assign(paste("static", "MAplot", name_control, name_mutant, sep = "_"), r)

  #Saves the pdf of the plot in the OUTPUT directory
  pdf(file= paste("static", "MAplot", name_control, name_mutant, ".pdf", sep = "_"))
  print(r)
  dev.off()

  #***Plot dynamic MA -------------------------------------------------------------------------------------------------- 

  #Creates the plot
  s<- ggplotly(r, tooltip=c("text", "x", "y") )

  #SAves the plot in a variable
  assign(paste("dynamic", "MAplot", name_control, name_mutant, sep = "_"), s)

  #Saves the WIDGET of the plot in the OUTPUT directory
  print(s)
  saveWidget(s, file= paste0("dynamic_MAplot",name_control, "_", name_mutant, ".html") )

  #**Volcano Plots --------------------------------------------------------------

  #***Plot static volcano--------------------------------------------------------

  #creates a data frame with some of the columns taken from res which, in turn, summarises the DESEq2 results
  tab = data.frame(logFC = res$`log2 FC (MLE)`, negLogPval = -log10(res$`BH pval`))
  rownames(tab) <- rownames(res)

  #Identifies the DE genes
  candidate_results <- subset(res, (abs(res$`log2 FC (MLE)`) > lfc & res$`BH pval` < pval))
  assign( paste0("candidate_results_tab_",name_control,"_",name_mutant), subset(tab, (abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval))) )

  #Identifies the not DE genes
  non_candidate_results <- subset(res, (abs(res$`log2 FC (MLE)`) <= lfc | res$`BH pval` >= pval))
  assign(paste0("non_candidate_results_tab_",name_control,"_",name_mutant), subset(tab, (abs(tab$logFC) <= lfc | tab$negLogPval <= -log10(pval))) )

  #Mark DE and non DE genes in the dataframe 
  dummy <- get(paste0("non_candidate_results_tab_",name_control,"_",name_mutant))
  dummy$Diff_Exp <- "DE -"
  assign(paste0("non_candidate_results_tab_",name_control,"_",name_mutant), dummy)

  dummy <- get(paste0("candidate_results_tab_",name_control,"_",name_mutant))
  if(nrow(dummy)>0){dummy$Diff_Exp <- "DE +"}
  assign(paste0("candidate_results_tab_",name_control,"_",name_mutant), dummy)

  #merge the "candidate" and "non candidate" dataframes
  assign(paste0("results_tab_",name_control,"_",name_mutant), rbind(get(paste0("candidate_results_tab_",name_control,"_",name_mutant)), get(paste0("non_candidate_results_tab_",name_control,"_",name_mutant)) ))

  #builds the ggplot
  h<-ggplot( get(paste0("results_tab_",name_control,"_",name_mutant)), aes(x=logFC, y=negLogPval, text=rownames(get(paste0("results_tab_",name_control,"_",name_mutant))) ) )+
   geom_point(aes(colour= Diff_Exp), size=.5)+
   geom_hline(yintercept=-log10(pval), linetype=3, color="green") + geom_vline(xintercept=-c(-lfc, lfc), linetype=3, color="blue")+
   scale_colour_manual(values = c("DE +" ="red", "DE -" = "black"))+
   xlab("log2 fold change") + ylab("-log10 pvalue")+ 
   ggtitle(paste("Volcano plot", name_control, "vs.", name_mutant))

  #Saves the plot in a variable
  assign(paste("static", "Vplot", name_control, name_mutant, sep = "_"), h)

  #Saves the pdf of the plot in the OUTPUT directory
  pdf(file= paste("static", "Vplot", name_control, name_mutant, ".pdf", sep = "_"))
  print(h)
  dev.off()

  #***Plot dynamic volcano----------------------------------------------------------------------------------------------------------

  #Creates the plot
  k<- ggplotly(h, tooltip=c("text", "x", "y") )

  #Saves the plot in a variable
  assign(paste("dynamic", "Vplot", name_control, name_mutant, sep = "_"), k)

  print(k)

  #Saves the WIDGET of the plot in the OUTPUT directory
  saveWidget(k, file= paste0("dynamic_Vplot",name_control, "_", name_mutant, ".html") )

  #Updates the loop counter
  print(num_comparisons)
  num_comparisons= num_comparisons +1
} 
#*End of the loop --------------------------------------------


# #PRODUCES ADDITIONAL TABLES =================================================

#**Produces the genes_lenghts  ---------------------------------------------------------------
#takes the genes lengths from the first feature counts input file and creates the genes_lenghts table
feature_counts_table <- fread(input_files[[1]])
genes_lenghts <- as.matrix(feature_counts_table$Length)
rownames(genes_lenghts) <- feature_counts_table$Geneid
colnames(genes_lenghts) <- "Lenght"

#**Produces the annotation_table_with_length ---------------------------------------------------------------
annotation_table_with_length <- merge(annotation_table, genes_lenghts, all.x=T, by.x="GeneSymbol", by.y="row.names")

#** Raw counts, CPM, TPM  ---------------------------------------------------------------

# produces the raw_counts matrix
# merges the raw_counts matrix (all the raw counts for each sample) with the genes_lenghts_table
raw_counts <- (merge(annotation_table_with_length, counts(de), by.x="GeneSymbol", by.y="row.names", all.x=T))
write.csv(raw_counts, file="raw_counts.csv", row.names=FALSE)

# produces the Raw Counts Normalised (DESeq2 normalisation) table 
raw_counts_normalised <- (merge(annotation_table_with_length, counts(de, normalized=T), by.x="GeneSymbol", by.y="row.names", all.x=T))
write.csv(raw_counts_normalised, file="raw_counts_normalised.csv", row.names=FALSE)

# computes the CPM on the raw counts
CPM_working = subset(raw_counts, select = c(7:ncol(raw_counts)))
CPM_working$sum <- rowSums(CPM_working)
CPM <- apply(raw_counts[,c(7:ncol(raw_counts))],2, function(x){x*10^6/CPM_working$sum})
CPM <- cbind(raw_counts[,c(1:6)],CPM)
write.csv(CPM, file="raw_counts_CPM.csv", row.names=FALSE)

# computes the TPM
RPK <-  (raw_counts[,c(7:ncol(raw_counts))])/(raw_counts$Lenght/1000)  #<- Reads Per Kilobase (Normalises the counts for the genes length, expressed in kilobases)
Scaling_factor <- apply(RPK,2,sum)/10^6
TPM <- sweep(RPK, 2, Scaling_factor, FUN = '/')
TPM <- cbind(raw_counts[,c(1:6)],TPM)
write.csv(TPM, file="raw_counts_TPM.csv", row.names=FALSE)

#** Produces the results_tables  ---------------------------------------------------------------

#computes the average CPM for controls and mutants
assign(paste0("average_",name_control), apply(CPM[,grep(colnames(CPM), pattern=name_control)],1,mean ) )
dummy<-as.data.frame(get(paste0("average_",name_control)))
colnames(dummy) <- paste0("Average CPM ",name_control)
rownames(dummy) <- CPM$gene_id
assign(paste0("average_",name_control), dummy)
#
assign(paste0("average_",names_mutants), apply(CPM[,grep(colnames(CPM), pattern=names_mutants)],1,mean ) )
dummy<-as.data.frame(get(paste0("average_",names_mutants)))
colnames(dummy) <- paste0("Average CPM ",names_mutants)
rownames(dummy) <- CPM$gene_id
assign(paste0("average_",names_mutants), dummy)
#
#merges the averages CPMs tables with the results table and the genes_length table
dummy<- merge(get(paste0("average_",name_control)),  get(paste0("average_",names_mutants)), by="row.names") 
rownames(dummy) <- dummy$Row.names
dummy<- dummy[,-1]
#
assign(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM"), merge( get(paste0("results_table_",name_control,"_", names_mutants)), dummy, by.y="row.names", by.x="gene_id") ) 
assign(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM"), merge( get(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM")), genes_lenghts, by.x="GeneSymbol", by.y="row.names", all.x=T ) )
write.csv(get(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM")), file=paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM.csv"), row.names = FALSE)
#
assign(paste0("results_table_topscore_", name_control,"_", names_mutants, "_", "CPM"), merge( get(paste0("results_table_topscore_",name_control,"_", names_mutants)), dummy, by.y="row.names", by.x="gene_id") ) 
assign(paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM"), merge( get(paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM")), genes_lenghts, by.x="GeneSymbol", by.y="row.names", all.x=T ) )
write.csv(get(paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM")), file=paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM.csv"), row.names = FALSE)

#**Filters the counts matrix  according to the CPM ------------------------

# # Filters the counts matrix eliminating the rows where at least one element violates the condition (low countys threshold)

count_zeroes<- function(x){length(which(x<=.5))}
numberofzeroes <- apply(CPM[,c(7:ncol(CPM))], 1, count_zeroes)
CPM_filtered <- CPM[which(numberofzeroes<=5),]
# write.csv(counts_matrix_cpm_filtered, file="cpm_counts_filtered.csv")
# 
#Filters the results_mtrx with the same criteria above 
results_mtrx <- get(paste0("results_table_",name_control,"_", name_mutant, "_CPM"))
results_mtrx_filtered <- results_mtrx[which(results_mtrx$gene_id %in% CPM_filtered$gene_id), ]
#write.csv(results_mtrx, file="results_table.csv", row.names = FALSE)
write.csv(results_mtrx_filtered, file="results_table_CPM_filtered.csv", row.names = FALSE)
#Filters the results_mtrx with the same criteria above 
results_mtrx <- get(paste0("results_table_",name_control,"_", name_mutant, "_CPM"))
results_mtrx_filtered <- results_mtrx[which(results_mtrx$gene_id %in% CPM_filtered$gene_id), ]
#write.csv(results_mtrx, file="results_table.csv", row.names = FALSE)
write.csv(results_mtrx_filtered, file="results_table_CPM_filtered.csv", row.names = FALSE)

results_mtrx_topscore <- get(paste0("results_table_topscore_",name_control,"_", name_mutant, "_CPM"))
results_mtrx_topscore_filtered <- results_mtrx_topscore[which(results_mtrx_topscore$gene_id %in% CPM_filtered$gene_id), ]
write.csv(results_mtrx_topscore_filtered, file="results_table_CPM_topscore_filtered.csv", row.names = FALSE)

#CREATES A HEATMAP =================================================
library(gplots)
#class(CPM_filtered) <- "numeric"
#CPM_filtered_resorted <-CPM_filtered[order(CPM_filtered[,7], decreasing = TRUE),]
#class(CPM_filtered_resorted) <- "numeric"
CPM_filtered_heat <- as.matrix(CPM_filtered[,c(7:ncol(CPM))])
class(CPM_filtered_heat) <- "numeric"

CPM_filtered_heat_sorted <-CPM_filtered_heat[order(CPM_filtered_heat[,1], decreasing = TRUE),]

pdf(file="IngCD_hm.pdf")
heatmap.2(CPM_filtered_heat_sorted[c(1:7000),], distfun=function(x) dist(x, method="minkowski"), hclustfun=function(x) hclust(x, method="ward.D2"), scale="row", trace = 'none', labRow = FALSE, dendrogram="column", margins=c(8,1), cexCol = .75)
dev.off()


# #CREATES THE TABLE FOR GSEA =====================================================
# #The data are taken from the res_raw table.
GSEA_table <- data.frame(Sign= sign(res_raw$log2FoldChange), pval=(res_raw$padj),stringsAsFactors = FALSE)
GSEA_table$metric <- -log10(GSEA_table$pval)/GSEA_table$Sign
rownames(GSEA_table) <- rownames(res_raw)

GSEA_input_ranked_table <- cbind(rownames(GSEA_table), GSEA_table$metric)
colnames(GSEA_input_ranked_table) <- cbind("Gene name", "Metric")
GSEA_input_ranked_table<-GSEA_input_ranked_table[-which(is.na(GSEA_input_ranked_table[,"Metric"])),]

write.table(GSEA_input_ranked_table, file=paste0("GSEA_input_ranked_table_",name_control,"_", name_mutant, ".rnk"), quote=F,sep="\t", row.names = FALSE)



####################
##########
##########
##########
##########
####################

## further analysis, interpretation, and figures =====================================================
require(dplyr)


vplot_tab <- merge(results_table_WT__KI__CPM, annotation_table, by="gene_id")
vplot_tab <- vplot_tab %>% rename("BH_pval" = "BH pval")
vplot_tab <- vplot_tab %>% rename("log2FC" = "log2 FC (MLE)")

########## make volcano plot 
library(ggplot2)
library(ggrepel)
library(dplyr)
library(pheatmap)

pdf(file="IngCD_RNAseq_v1.pdf",width=5,height=6)

vplot_tab$neglog_p = -log10(vplot_tab$BH_pval)
vplot_tab <- vplot_tab[complete.cases(vplot_tab), ]

############  edit formatting of signficance for labelleing

vplot_tab$significant = ifelse(vplot_tab$neglog_p > 2 & vplot_tab$log2FC <=-1.5 | vplot_tab$neglog_p > 2 & vplot_tab$log2FC>=1.5, "sig", "not")
vplot_tab_label1 = subset(vplot_tab, neglog_p > 19)
vplot_tab_label2 = subset(vplot_tab, neglog_p > 6)
vplot_tab_label2 <- subset(vplot_tab_label2, log2FC <=-5 | log2FC>=5)
vplot_tab_label3 = subset(vplot_tab_label2, log2FC <=-5)
vplot_tab_label4 = subset(vplot_tab, neglog_p > 2 & vplot_tab$log2FC <=-5 | vplot_tab$neglog_p > 2 & vplot_tab$log2FC>=5)
vplot_tab_label_final <- rbind(vplot_tab_label1, vplot_tab_label2)
vplot_tab_label_final <- rbind(vplot_tab_label_final, vplot_tab_label3)
vplot_tab_label_final <- rbind(vplot_tab_label_final, vplot_tab_label4)
vplot_tab_label_final <- vplot_tab_label_final %>% distinct(GeneSymbol.x, .keep_all = TRUE)

############

IngCD_vol <- ggplot(data=vplot_tab, aes(x=log2FC, y=neglog_p, colour=significant)) + geom_point(alpha=0.4, size=1.75) + xlab("Log2 Fold change") + ylab("-log10 p-value") + theme_bw() + theme(legend.position="right") + geom_text_repel(data = vplot_tab_label_final, aes(label = GeneSymbol.x), size = 3, key_glyph = "point")
IngCD_vol

pdf(file="IngCD_vol.pdf",width=9,height=6)
IngCD_vol
dev.off()

############

######################## make heatmaps

##### hm of significantly differentially expressed genes

vplot_tab_hm <- vplot_tab
vplot_tab_hm$significant = ifelse(vplot_tab$BH_pval <=.0001 & vplot_tab$log2FC <=-3 | vplot_tab$log2FC>=2.2, "sig", "not")
vplot_tab_hm$sig2 = ifelse(vplot_tab$BH_pval <=.01, "sig", "not")


norm_counts <- as.data.frame(counts(de, normalized=T))
numberofzeroes <- apply(norm_counts[,c(1:ncol(norm_counts))], 1, count_zeroes)
norm_counts_filtered <- norm_counts[which(numberofzeroes<=5),]
norm_counts_filtered$GeneSymbol.x <- rownames(norm_counts_filtered)

hm_tab <- merge(norm_counts_filtered, vplot_tab_hm, by="GeneSymbol.x")
hm_tab <- hm_tab %>% rename("GeneSymbol" = "GeneSymbol.x")
write.table(hm_tab, file="norm_counts_gsea.csv",sep=",")

hm_tab_sig = subset(hm_tab, significant=="sig")

hm_sig <- pheatmap(hm_tab_sig[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_sig$GeneSymbol, fontsize_row = 4.5, cutree_rows = 7, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, main = "Significantly differentially expressed genes")

pdf(file="IngCD_hm_sig.pdf",width=8,height=10)
hm_sig
dev.off()


##### hm of adipogenesis-related genes

hm_tab_adip = subset(hm_tab, GeneSymbol=="Lep" | GeneSymbol=="Adipoq" | GeneSymbol=="Cd36" | GeneSymbol=="Pparg" | GeneSymbol=="Glut4" | GeneSymbol=="Fasn"| GeneSymbol=="Plin1"| GeneSymbol=="Plin2"| GeneSymbol=="Plin4"| GeneSymbol=="Fabp4"| GeneSymbol=="Isnr"| GeneSymbol=="Lpl"| GeneSymbol=="Agpat2"| GeneSymbol=="Bscl2"| GeneSymbol=="Cidec"| GeneSymbol=="Cebpa"| GeneSymbol=="Acaca"| GeneSymbol=="Ppargc1a"| GeneSymbol=="Ppargc1b"| GeneSymbol=="Slc2a4" )

rownames(hm_tab_adip) = hm_tab_adip$GeneSymbol
hm_adip_annot = data.frame("Sig" = hm_tab_adip$sig2)
rownames(hm_adip_annot) = rownames(hm_tab_adip)

hm_adip <- pheatmap(hm_tab_adip[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_adip$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_adip_annot, legend_labels = "Relative expression", main = "Adipogenesis-related genes")

pdf(file="IngCD_hm_adip.pdf",width=5,height=6)
hm_adip
dev.off()

##### hm of ISR-related genes

hm_tab_ISR = subset(hm_tab, GeneSymbol=="Atf4" | GeneSymbol=="Atf5" |GeneSymbol=="Atf6" | GeneSymbol=="Xbp1" | GeneSymbol=="Gdf15" | GeneSymbol=="Fgf21" | GeneSymbol=="Trib3"| GeneSymbol=="Eif2ak4"| GeneSymbol=="Ddit3"| GeneSymbol=="Gadd34"| GeneSymbol=="Perk"| GeneSymbol=="Eif2ak1"| GeneSymbol=="Hif1a")
hm_tab_ISR <- hm_tab_ISR %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_ISR) = hm_tab_ISR$GeneSymbol
hm_ISR_annot = data.frame("Sig" = hm_tab_ISR$sig2)
rownames(hm_ISR_annot) = rownames(hm_tab_ISR)

hm_ISR <- pheatmap(hm_tab_ISR[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_ISR$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_ISR_annot, main = "ISR genes")

pdf(file="IngCD_hm_ISR.pdf",width=5,height=6)
hm_ISR
dev.off()

##### hm of mitochondrial-related genes

hm_tab_mito = subset(hm_tab, GeneSymbol=="Mfn1" | GeneSymbol=="Mfn2" | GeneSymbol=="Opa1" | GeneSymbol=="Fis1" | GeneSymbol=="Tomm20" | GeneSymbol=="Ppargc1a"| GeneSymbol=="Ppargc1b"| GeneSymbol=="Cs" | GeneSymbol=='mt-Rnr1' | GeneSymbol=='mt-Rnr2' | GeneSymbol=='mt-Tl1' | GeneSymbol=='mt-Nd1' | GeneSymbol=='mt-Ti' | GeneSymbol=='mt-Tq' | GeneSymbol=='mt-Tm' | GeneSymbol=='mt-Nd2' | GeneSymbol=='mt-Tw' | GeneSymbol=='mt-Ta' | GeneSymbol=='mt-Tn' | GeneSymbol=='mt-Tc' | GeneSymbol=='mt-Ty' | GeneSymbol=='mt-Co1' | GeneSymbol=='mt-Ts1' | GeneSymbol=='mt-Td' | GeneSymbol=='mt-Co2' | GeneSymbol=='mt-Atp8' | GeneSymbol=='mt-Atp6' | GeneSymbol=='mt-Co3' | GeneSymbol=='mt-Tg' | GeneSymbol=='mt-Nd3' | GeneSymbol=='mt-Tr' | GeneSymbol=='mt-Nd4' | GeneSymbol=='mt-Th' | GeneSymbol=='mt-Ts2' | GeneSymbol=='mt-Tl2' | GeneSymbol=='mt-Nd5' | GeneSymbol=='mt-Nd6' | GeneSymbol=='mt-Te' | GeneSymbol=='mt-Cytb' | GeneSymbol=='mt-Tt' | GeneSymbol=='mt-Tp' | GeneSymbol=='mt-Nd4l' | GeneSymbol=='Sdha' | GeneSymbol=="Prkn" | GeneSymbol=="Pink1" | GeneSymbol=="Bnip3" | GeneSymbol=="Nrf1" | GeneSymbol==""| GeneSymbol=="Mff"| GeneSymbol=="Cycs")
hm_tab_mito <- hm_tab_mito %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_mito) = hm_tab_mito$GeneSymbol
hm_mito_annot = data.frame("Sig" = hm_tab_mito$sig2)
rownames(hm_mito_annot) = rownames(hm_tab_mito)

hm_mito <- pheatmap(hm_tab_mito[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_mito$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial function-related genes")

pdf(file="IngCD_hm_mito.pdf",width=5,height=6)
hm_mito
dev.off()

##### hm of inflammation-related genes

hm_tab_inflam = subset(hm_tab, GeneSymbol=='Ifng' |GeneSymbol=='Cd68' |GeneSymbol=='Cd11b' |GeneSymbol=='Itgam' |GeneSymbol=='Ccl2' |GeneSymbol=='Cd4' |GeneSymbol=='Cd3g' |GeneSymbol=='Cd8a' |GeneSymbol=='Tnf' |GeneSymbol=='Il1b' |GeneSymbol=='Il4' |GeneSymbol=='Il13' |GeneSymbol=='Il10' |GeneSymbol=='Ptprc' |GeneSymbol=='Adgre1' |GeneSymbol=='Il6' |GeneSymbol=='Mif' |GeneSymbol=='Tlr4')
hm_tab_inflam <- hm_tab_inflam %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_inflam) = hm_tab_inflam$GeneSymbol
hm_inflam_annot = data.frame("Sig" = hm_tab_inflam$sig2)
rownames(hm_inflam_annot) = rownames(hm_tab_inflam)

hm_inflam <- pheatmap(hm_tab_inflam[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_inflam$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_inflam_annot, legend_labels = "Relative expression", main = "Inflammatory genes")

pdf(file="IngCD_hm_inflam.pdf",width=5,height=6)
hm_inflam
dev.off()


##### hm of fibrosis-related genes

hm_tab_fibros = subset(hm_tab, GeneSymbol=='Tgfb1' |GeneSymbol=='Sod1' |GeneSymbol=='Hif1a' |GeneSymbol=='Pdgfa' |GeneSymbol=='Gtf2ird1' |GeneSymbol=='Inhba' |GeneSymbol=='Rock1')
hm_tab_fibros <- hm_tab_fibros %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_fibros) = hm_tab_fibros$GeneSymbol
hm_fibros_annot = data.frame("Sig" = hm_tab_fibros$sig2)
rownames(hm_fibros_annot) = rownames(hm_tab_fibros)

hm_fibros <- pheatmap(hm_tab_fibros[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_fibros$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_fibros_annot, legend_labels = "Relative expression", main = "Fibrosis-related genes")

pdf(file="IngCD_hm_fibros.pdf",width=5,height=6)
hm_fibros
dev.off()



##### hm of hallmark adipogenesis genes

hm_tab_hall_adip1 = subset(hm_tab, GeneSymbol=='Abca1' |GeneSymbol=='Abcb8' |GeneSymbol=='Acaa2' |GeneSymbol=='Acadl' |GeneSymbol=='Acadm' |GeneSymbol=='Acads' |GeneSymbol=='Acly' |GeneSymbol=='Aco2' |GeneSymbol=='Acox1' |GeneSymbol=='Adcy6' |GeneSymbol=='Adig' |GeneSymbol=='Adipoq' |GeneSymbol=='Adipor2' |GeneSymbol=='Agpat3' |GeneSymbol=='Aifm1' |GeneSymbol=='Ak2' |GeneSymbol=='Aldh2' |GeneSymbol=='Aldoa' |GeneSymbol=='Angpt1' |GeneSymbol=='Angptl4' |GeneSymbol=='Aplp2' |GeneSymbol=='Apoe' |GeneSymbol=='Araf' |GeneSymbol=='Arl4A' |GeneSymbol=='Atl2' |GeneSymbol=='Atp1B3' |GeneSymbol=='Atp5Po' |GeneSymbol=='Baz2A' |GeneSymbol=='Bckdha' |GeneSymbol=='Bcl2L13' |GeneSymbol=='Bcl6' |GeneSymbol=='C3' |GeneSymbol=='Cat' |GeneSymbol=='Cavin1' |GeneSymbol=='Cavin2' |GeneSymbol=='Ccng2' |GeneSymbol=='Cd151' |GeneSymbol=='Cd302' |GeneSymbol=='Cd36' |GeneSymbol=='Cdkn2C' |GeneSymbol=='Chchd10' |GeneSymbol=='Chuk' |GeneSymbol=='Cidea' |GeneSymbol=='Cmbl' |GeneSymbol=='Cmpk1' |GeneSymbol=='Col15A1' |GeneSymbol=='Col4A1' |GeneSymbol=='Coq3' |GeneSymbol=='Coq5' |GeneSymbol=='Coq9' |GeneSymbol=='Cox6A1' |GeneSymbol=='Cox7B' |GeneSymbol=='Cox8A' |GeneSymbol=='Cpt2' |GeneSymbol=='Crat' |GeneSymbol=='Cs' |GeneSymbol=='Cyc1' |GeneSymbol=='Cyp4B1' |GeneSymbol=='Dbt' |GeneSymbol=='Ddt' |GeneSymbol=='Decr1' |GeneSymbol=='Dgat1' |GeneSymbol=='Dhcr7' |GeneSymbol=='Dhrs7' |GeneSymbol=='Dhrs7B' |GeneSymbol=='Dlat' |GeneSymbol=='Dld' |GeneSymbol=='Dnajb9' |GeneSymbol=='Dnajc15' |GeneSymbol=='Dram2' |GeneSymbol=='Ech1' |GeneSymbol=='Echs1' |GeneSymbol=='Elmod3' |GeneSymbol=='Elovl6' |GeneSymbol=='Enpp2' |GeneSymbol=='Ephx2' |GeneSymbol=='Esrra' |GeneSymbol=='Esyt1' |GeneSymbol=='Etfb' |GeneSymbol=='Fabp4' |GeneSymbol=='Fah' |GeneSymbol=='Fzd4' |GeneSymbol=='G3Bp2' |GeneSymbol=='Gadd45A' |GeneSymbol=='Gbe1' |GeneSymbol=='Ghitm' |GeneSymbol=='Gpam' |GeneSymbol=='Gpat4' |GeneSymbol=='Gpd2' |GeneSymbol=='Gphn' |GeneSymbol=='Gpx3' |GeneSymbol=='Gpx4' |GeneSymbol=='Grpel1' |GeneSymbol=='Hadh' |GeneSymbol=='Hibch' |GeneSymbol=='Hspb8' |GeneSymbol=='Idh1' |GeneSymbol=='Idh3A' |GeneSymbol=='Idh3G' |GeneSymbol=='Ifngr1' |GeneSymbol=='Immt' |GeneSymbol=='Itga7' |GeneSymbol=='Itih5' |GeneSymbol=='Itsn1' |GeneSymbol=='Jagn1' |GeneSymbol=='Lama4' |GeneSymbol=='Lep' |GeneSymbol=='Lifr' |GeneSymbol=='Lipe' |GeneSymbol=='Lpcat3' |GeneSymbol=='Lpl' |GeneSymbol=='Ltc4S' |GeneSymbol=='Map4K3' |GeneSymbol=='Mccc1' |GeneSymbol=='Mdh2' |GeneSymbol=='Me1' |GeneSymbol=='Mgll' |GeneSymbol=='Mgst3' |GeneSymbol=='Miga2' |GeneSymbol=='Mrap' |GeneSymbol=='Mrpl15' |GeneSymbol=='Mtarc2')

hm_tab_hall_adip2 = subset(hm_tab, GeneSymbol=='Mtch2' |GeneSymbol=='Mylk' |GeneSymbol=='Nabp1' |GeneSymbol=='Ndufa5' |GeneSymbol=='Ndufab1' |GeneSymbol=='Ndufb7' |GeneSymbol=='Ndufs3' |GeneSymbol=='Nkiras1' |GeneSymbol=='Nmt1' |GeneSymbol=='Omd' |GeneSymbol=='Orm1' |GeneSymbol=='Pdcd4' |GeneSymbol=='Pemt' |GeneSymbol=='Pex14' |GeneSymbol=='Pfkfb3' |GeneSymbol=='Pfkl' |GeneSymbol=='Pgm1' |GeneSymbol=='Phldb1' |GeneSymbol=='Phyh' |GeneSymbol=='Pim3' |GeneSymbol=='Plin2' |GeneSymbol=='Por' |GeneSymbol=='Pparg' |GeneSymbol=='Ppm1B' |GeneSymbol=='Ppp1R15B' |GeneSymbol=='Prdx3' |GeneSymbol=='Preb' |GeneSymbol=='Ptcd3' |GeneSymbol=='Ptger3' |GeneSymbol=='Qdpr' |GeneSymbol=='Rab34' |GeneSymbol=='Reep5' |GeneSymbol=='Reep6' |GeneSymbol=='Retn' |GeneSymbol=='Retsat' |GeneSymbol=='Riok3' |GeneSymbol=='Rmdn3' |GeneSymbol=='Rnf11' |GeneSymbol=='Rreb1' |GeneSymbol=='Rtn3' |GeneSymbol=='Samm50' |GeneSymbol=='Scarb1' |GeneSymbol=='Scp2' |GeneSymbol=='Sdhb' |GeneSymbol=='Sdhc' |GeneSymbol=='Slc19A1' |GeneSymbol=='Slc1A5' |GeneSymbol=='Slc25A1' |GeneSymbol=='Slc25A10' |GeneSymbol=='Slc27A1' |GeneSymbol=='Slc5A6' |GeneSymbol=='Slc66A3' |GeneSymbol=='Sncg' |GeneSymbol=='Sod1' |GeneSymbol=='Sorbs1' |GeneSymbol=='Sowahc' |GeneSymbol=='Sparcl1' |GeneSymbol=='Sqor' |GeneSymbol=='Sspn' |GeneSymbol=='Stat5A' |GeneSymbol=='Stom' |GeneSymbol=='Suclg1' |GeneSymbol=='Sult1A1' |GeneSymbol=='Taldo1' |GeneSymbol=='Tank' |GeneSymbol=='Tkt' |GeneSymbol=='Tob1' |GeneSymbol=='Tst' |GeneSymbol=='Ubc' |GeneSymbol=='Ubqln1' |GeneSymbol=='Uck1' |GeneSymbol=='Ucp2' |GeneSymbol=='Uqcr10' |GeneSymbol=='Uqcr11' |GeneSymbol=='Uqcrc1' |GeneSymbol=='Uqcrq' |GeneSymbol=='Vegfb' |GeneSymbol=='Ywhag')

hm_tab_hall_adip <- rbind(hm_tab_hall_adip1, hm_tab_hall_adip2)

hm_tab_hall_adip <- hm_tab_hall_adip %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_adip) = hm_tab_hall_adip$GeneSymbol
hm_hall_adip_annot = data.frame("Sig" = hm_tab_hall_adip$sig2)
rownames(hm_hall_adip_annot) = rownames(hm_tab_hall_adip)

hm_hall_adip <- pheatmap(hm_tab_hall_adip[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_adip$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_adip_annot, legend_labels = "Relative expression", main = "HALLMARK_ADIPOGENESIS genes")

pdf(file="IngCD_hm_hall_adip.pdf",width=6,height=12)
hm_hall_adip
dev.off()


##### hm of hallmark oxphos genes

hm_tab_hall_oxphos1 = subset(hm_tab, GeneSymbol=='Abcb7' |GeneSymbol=='Acaa1' |GeneSymbol=='Acaa2' |GeneSymbol=='Acadm' |GeneSymbol=='Acadsb' |GeneSymbol=='Acadvl' |GeneSymbol=='Acat1' |GeneSymbol=='Aco2' |GeneSymbol=='Afg3L2' |GeneSymbol=='Aifm1' |GeneSymbol=='Alas1' |GeneSymbol=='Aldh6A1' |GeneSymbol=='Atp1B1' |GeneSymbol=='Atp5F1A' |GeneSymbol=='Atp5F1B' |GeneSymbol=='Atp5F1C' |GeneSymbol=='Atp5F1D' |GeneSymbol=='Atp5F1E' |GeneSymbol=='Atp5Mc1' |GeneSymbol=='Atp5Mc2' |GeneSymbol=='Atp5Mc3' |GeneSymbol=='Atp5Me' |GeneSymbol=='Atp5Mf' |GeneSymbol=='Atp5Mg' |GeneSymbol=='Atp5Pb' |GeneSymbol=='Atp5Pd' |GeneSymbol=='Atp5Pf' |GeneSymbol=='Atp5Po' |GeneSymbol=='Atp6Ap1' |GeneSymbol=='Atp6V0B' |GeneSymbol=='Atp6V0C' |GeneSymbol=='Atp6V0E1' |GeneSymbol=='Atp6V1C1' |GeneSymbol=='Atp6V1D' |GeneSymbol=='Atp6V1E1' |GeneSymbol=='Atp6V1F' |GeneSymbol=='Atp6V1G1' |GeneSymbol=='Atp6V1H' |GeneSymbol=='Bax' |GeneSymbol=='Bckdha' |GeneSymbol=='Bdh2' |GeneSymbol=='Casp7' |GeneSymbol=='Cox10' |GeneSymbol=='Cox11' |GeneSymbol=='Cox15' |GeneSymbol=='Cox17' |GeneSymbol=='Cox4I1' |GeneSymbol=='Cox5A' |GeneSymbol=='Cox5B' |GeneSymbol=='Cox6A1' |GeneSymbol=='Cox6B1' |GeneSymbol=='Cox6C' |GeneSymbol=='Cox7A2' |GeneSymbol=='Cox7A2L' |GeneSymbol=='Cox7B' |GeneSymbol=='Cox7C' |GeneSymbol=='Cox8A' |GeneSymbol=='Cpt1A' |GeneSymbol=='Cs' |GeneSymbol=='Cyb5A' |GeneSymbol=='Cyb5R3' |GeneSymbol=='Cyc1' |GeneSymbol=='Cycs' |GeneSymbol=='Decr1' |GeneSymbol=='Dlat' |GeneSymbol=='Dld' |GeneSymbol=='Dlst' |GeneSymbol=='Ech1' |GeneSymbol=='Echs1' |GeneSymbol=='Eci1' |GeneSymbol=='Etfa' |GeneSymbol=='Etfb' |GeneSymbol=='Etfdh' |GeneSymbol=='Fdx1' |GeneSymbol=='Fh' |GeneSymbol=='Fxn' |GeneSymbol=='Glud1' |GeneSymbol=='Got2' |GeneSymbol=='Gpi' |GeneSymbol=='Gpx4' |GeneSymbol=='Grpel1' |GeneSymbol=='Hadha' |GeneSymbol=='Hadhb' |GeneSymbol=='Hccs' |GeneSymbol=='Hsd17B10' |GeneSymbol=='Hspa9' |GeneSymbol=='Htra2' |GeneSymbol=='Idh1' |GeneSymbol=='Idh2' |GeneSymbol=='Idh3A' |GeneSymbol=='Idh3B' |GeneSymbol=='Idh3G' |GeneSymbol=='Immt' |GeneSymbol=='Isca1' |GeneSymbol=='Iscu' |GeneSymbol=='Ldha' |GeneSymbol=='Ldhb' |GeneSymbol=='Lrpprc' |GeneSymbol=='Maob' |GeneSymbol=='Mdh1' |GeneSymbol=='Mdh2' |GeneSymbol=='Mfn2' |GeneSymbol=='Mgst3' |GeneSymbol=='Mpc1' |GeneSymbol=='Mrpl11' |GeneSymbol=='Mrpl15' |GeneSymbol=='Mrpl34' |GeneSymbol=='Mrpl35' |GeneSymbol=='Mrps11' |GeneSymbol=='Mrps12' |GeneSymbol=='Mrps15' |GeneSymbol=='Mrps22' |GeneSymbol=='Mrps30' |GeneSymbol=='Mtrf1')

hm_tab_hall_oxphos2 = subset(hm_tab, GeneSymbol=='Mtrr' |GeneSymbol=='Mtx2' |GeneSymbol=='Ndufa1' |GeneSymbol=='Ndufa2' |GeneSymbol=='Ndufa3' |GeneSymbol=='Ndufa4' |GeneSymbol=='Ndufa5' |GeneSymbol=='Ndufa6' |GeneSymbol=='Ndufa7' |GeneSymbol=='Ndufa8' |GeneSymbol=='Ndufa9' |GeneSymbol=='Ndufab1' |GeneSymbol=='Ndufb1' |GeneSymbol=='Ndufb2' |GeneSymbol=='Ndufb3' |GeneSymbol=='Ndufb4' |GeneSymbol=='Ndufb5' |GeneSymbol=='Ndufb6' |GeneSymbol=='Ndufb7' |GeneSymbol=='Ndufb8' |GeneSymbol=='Ndufc1' |GeneSymbol=='Ndufc2' |GeneSymbol=='Ndufs1' |GeneSymbol=='Ndufs2' |GeneSymbol=='Ndufs3' |GeneSymbol=='Ndufs4' |GeneSymbol=='Ndufs6' |GeneSymbol=='Ndufs7' |GeneSymbol=='Ndufs8' |GeneSymbol=='Ndufv1' |GeneSymbol=='Ndufv2' |GeneSymbol=='Nnt' |GeneSymbol=='Nqo2' |GeneSymbol=='Oat' |GeneSymbol=='Ogdh' |GeneSymbol=='Opa1' |GeneSymbol=='Oxa1L' |GeneSymbol=='Pdha1' |GeneSymbol=='Pdhb' |GeneSymbol=='Pdhx' |GeneSymbol=='Pdk4' |GeneSymbol=='Pdp1' |GeneSymbol=='Phb2' |GeneSymbol=='Phyh' |GeneSymbol=='Pmpca' |GeneSymbol=='Polr2F' |GeneSymbol=='Por' |GeneSymbol=='Prdx3' |GeneSymbol=='Retsat' |GeneSymbol=='Rhot1' |GeneSymbol=='Rhot2' |GeneSymbol=='Sdha' |GeneSymbol=='Sdhb' |GeneSymbol=='Sdhc' |GeneSymbol=='Sdhd' |GeneSymbol=='Slc25A11' |GeneSymbol=='Slc25A12' |GeneSymbol=='Slc25A20' |GeneSymbol=='Slc25A3' |GeneSymbol=='Slc25A4' |GeneSymbol=='Slc25A5' |GeneSymbol=='Slc25A6' |GeneSymbol=='Sucla2' |GeneSymbol=='Suclg1' |GeneSymbol=='Supv3L1' |GeneSymbol=='Surf1' |GeneSymbol=='Tcirg1' |GeneSymbol=='Timm10' |GeneSymbol=='Timm13' |GeneSymbol=='Timm17A' |GeneSymbol=='Timm50' |GeneSymbol=='Timm8B' |GeneSymbol=='Timm9' |GeneSymbol=='Tomm22' |GeneSymbol=='Tomm70' |GeneSymbol=='Uqcr10' |GeneSymbol=='Uqcr11' |GeneSymbol=='Uqcrb' |GeneSymbol=='Uqcrc1' |GeneSymbol=='Uqcrc2' |GeneSymbol=='Uqcrfs1' |GeneSymbol=='Uqcrh' |GeneSymbol=='Uqcrq' |GeneSymbol=='Vdac1' |GeneSymbol=='Vdac2' |GeneSymbol=='Vdac3')

hm_tab_hall_oxphos <- rbind(hm_tab_hall_oxphos1, hm_tab_hall_oxphos2)

hm_tab_hall_oxphos <- hm_tab_hall_oxphos %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_oxphos) = hm_tab_hall_oxphos$GeneSymbol
hm_hall_oxphos_annot = data.frame("Sig" = hm_tab_hall_oxphos$sig2)
rownames(hm_hall_oxphos_annot) = rownames(hm_tab_hall_oxphos)

hm_hall_oxphos <- pheatmap(hm_tab_hall_oxphos[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_oxphos$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_oxphos_annot, legend_labels = "Relative expression", main = "HALLMARK_OXIDATIVE_PHOSPHORYLATION genes")

pdf(file="IngCD_hm_hall_oxphos.pdf",width=7,height=12)
hm_hall_oxphos
dev.off()


##### hm of hallmark ROS genes

hm_tab_hall_ros = subset(hm_tab, GeneSymbol=='Abcc1' |GeneSymbol=='Atox1' |GeneSymbol=='Cat' |GeneSymbol=='Cdkn2D' |GeneSymbol=='Egln2' |GeneSymbol=='Ercc2' |GeneSymbol=='Fes' |GeneSymbol=='Ftl' |GeneSymbol=='G6Pd' |GeneSymbol=='Gclc' |GeneSymbol=='Gclm' |GeneSymbol=='Glrx' |GeneSymbol=='Glrx2' |GeneSymbol=='Gpx3' |GeneSymbol=='Gpx4' |GeneSymbol=='Gsr' |GeneSymbol=='Hhex' |GeneSymbol=='Hmox2' |GeneSymbol=='Ipcef1' |GeneSymbol=='Junb' |GeneSymbol=='Lamtor5' |GeneSymbol=='Lsp1' |GeneSymbol=='Mbp' |GeneSymbol=='Mgst1' |GeneSymbol=='Mpo' |GeneSymbol=='Msra' |GeneSymbol=='Ndufa6' |GeneSymbol=='Ndufb4' |GeneSymbol=='Ndufs2' |GeneSymbol=='Nqo1' |GeneSymbol=='Oxsr1' |GeneSymbol=='Pdlim1' |GeneSymbol=='Pfkp' |GeneSymbol=='Prdx1' |GeneSymbol=='Prdx2' |GeneSymbol=='Prdx4' |GeneSymbol=='Prdx6' |GeneSymbol=='Prnp' |GeneSymbol=='Ptpa' |GeneSymbol=='Sbno2' |GeneSymbol=='Scaf4' |GeneSymbol=='Selenos' |GeneSymbol=='Sod1' |GeneSymbol=='Sod2' |GeneSymbol=='Srxn1' |GeneSymbol=='Stk25' |GeneSymbol=='Txn' |GeneSymbol=='Txnrd1' |GeneSymbol=='Txnrd2')

hm_tab_hall_ros <- hm_tab_hall_ros %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_ros) = hm_tab_hall_ros$GeneSymbol
hm_hall_ros_annot = data.frame("Sig" = hm_tab_hall_ros$sig2)
rownames(hm_hall_ros_annot) = rownames(hm_tab_hall_ros)

hm_hall_ros <- pheatmap(hm_tab_hall_ros[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_ros$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_ros_annot, legend_labels = "Relative expression", main = "HALLMARK_REACTIVE_OXYGEN_SPECIES_PATHWAY genes")

pdf(file="IngCD_hm_hall_ros.pdf",width=8,height=10)
hm_hall_ros
dev.off()


##### hm of hallmark UPR genes

hm_tab_hall_UPR = subset(hm_tab, GeneSymbol=='Aldh18A1' |GeneSymbol=='Arfgap1' |GeneSymbol=='Asns' |GeneSymbol=='Atf3' |GeneSymbol=='Atf4' |GeneSymbol=='Atf6' |GeneSymbol=='Atp6V0D1' |GeneSymbol=='Bag3' |GeneSymbol=='Banf1' |GeneSymbol=='Calr' |GeneSymbol=='Ccl2' |GeneSymbol=='Cebpb' |GeneSymbol=='Cebpg' |GeneSymbol=='Chac1' |GeneSymbol=='Cks1B' |GeneSymbol=='Cnot2' |GeneSymbol=='Cnot4' |GeneSymbol=='Cnot6' |GeneSymbol=='Cxxc1' |GeneSymbol=='Dcp1A' |GeneSymbol=='Dcp2' |GeneSymbol=='Dctn1' |GeneSymbol=='Ddit4' |GeneSymbol=='Ddx10' |GeneSymbol=='Dkc1' |GeneSymbol=='Dnaja4' |GeneSymbol=='Dnajb9' |GeneSymbol=='Dnajc3' |GeneSymbol=='Edc4' |GeneSymbol=='Edem1' |GeneSymbol=='Eef2' |GeneSymbol=='Eif2Ak3' |GeneSymbol=='Eif2S1' |GeneSymbol=='Eif4A1' |GeneSymbol=='Eif4A2' |GeneSymbol=='Eif4A3' |GeneSymbol=='Eif4E' |GeneSymbol=='Eif4Ebp1' |GeneSymbol=='Eif4G1' |GeneSymbol=='Ern1' |GeneSymbol=='Ero1A' |GeneSymbol=='Exoc2' |GeneSymbol=='Exosc1' |GeneSymbol=='Exosc10' |GeneSymbol=='Exosc2' |GeneSymbol=='Exosc4' |GeneSymbol=='Exosc5' |GeneSymbol=='Exosc9' |GeneSymbol=='Fkbp14' |GeneSymbol=='Fus' |GeneSymbol=='Gemin4' |GeneSymbol=='Gosr2' |GeneSymbol=='H2Ax' |GeneSymbol=='Herpud1' |GeneSymbol=='Hsp90B1' |GeneSymbol=='Hspa5' |GeneSymbol=='Hspa9' |GeneSymbol=='Hyou1' |GeneSymbol=='Iars1' |GeneSymbol=='Ifit1' |GeneSymbol=='Igfbp1' |GeneSymbol=='Imp3' |GeneSymbol=='Kdelr3' |GeneSymbol=='Khsrp' |GeneSymbol=='Kif5B' |GeneSymbol=='Lsm1' |GeneSymbol=='Lsm4' |GeneSymbol=='Mthfd2' |GeneSymbol=='Mtrex' |GeneSymbol=='Nabp1' |GeneSymbol=='Nfya' |GeneSymbol=='Nfyb' |GeneSymbol=='Nhp2' |GeneSymbol=='Nolc1' |GeneSymbol=='Nop14' |GeneSymbol=='Nop56' |GeneSymbol=='Npm1' |GeneSymbol=='Paip1' |GeneSymbol=='Parn' |GeneSymbol=='Pdia5' |GeneSymbol=='Pdia6' |GeneSymbol=='Pop4' |GeneSymbol=='Preb' |GeneSymbol=='Psat1' |GeneSymbol=='Rps14' |GeneSymbol=='Rrp9' |GeneSymbol=='Sdad1' |GeneSymbol=='Sec11A' |GeneSymbol=='Sec31A' |GeneSymbol=='Serp1' |GeneSymbol=='Shc1' |GeneSymbol=='Slc1A4' |GeneSymbol=='Slc30A5' |GeneSymbol=='Slc7A5' |GeneSymbol=='Spcs1' |GeneSymbol=='Spcs3' |GeneSymbol=='Srpra' |GeneSymbol=='Srprb' |GeneSymbol=='Ssr1' |GeneSymbol=='Stc2' |GeneSymbol=='Tars1' |GeneSymbol=='Tatdn2' |GeneSymbol=='Tspyl2' |GeneSymbol=='Ttc37' |GeneSymbol=='Tubb2A' |GeneSymbol=='Vegfa' |GeneSymbol=='Wfs1' |GeneSymbol=='Wipi1' |GeneSymbol=='Xbp1' |GeneSymbol=='Xpot' |GeneSymbol=='Yif1A' |GeneSymbol=='Ywhaz' |GeneSymbol=='Zbtb17')

hm_tab_hall_UPR <- hm_tab_hall_UPR %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_UPR) = hm_tab_hall_UPR$GeneSymbol
hm_hall_UPR_annot = data.frame("Sig" = hm_tab_hall_UPR$sig2)
rownames(hm_hall_UPR_annot) = rownames(hm_tab_hall_UPR)

hm_hall_UPR <- pheatmap(hm_tab_hall_UPR[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_UPR$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_UPR_annot, legend_labels = "Relative expression", main = "HALLMARK_UNFOLDED_PROTEIN_RESPONSE genes")

pdf(file="IngCD_hm_hall_UPR.pdf",width=7,height=10)
hm_hall_UPR
dev.off()

##### hm of GO BAT genes

hm_tab_GO_BAT = subset(hm_tab, GeneSymbol=='Adig' |GeneSymbol=='Adipoq' |GeneSymbol=='Adrb1' |GeneSymbol=='Adrb2' |GeneSymbol=='Aldh6A1' |GeneSymbol=='Arl4A' |GeneSymbol=='Bmp7' |GeneSymbol=='Bnip3' |GeneSymbol=='Cebpa' |GeneSymbol=='Cebpb' |GeneSymbol=='Dio2' |GeneSymbol=='Dusp10' |GeneSymbol=='Ebf2' |GeneSymbol=='Ero1A' |GeneSymbol=='Fabp3' |GeneSymbol=='Fabp4' |GeneSymbol=='Ffar4' |GeneSymbol=='Flcn' |GeneSymbol=='Fndc5' |GeneSymbol=='Fto' |GeneSymbol=='Hnrnpu' |GeneSymbol=='Ins' |GeneSymbol=='Itga6' |GeneSymbol=='Lamb3' |GeneSymbol=='Lep' |GeneSymbol=='Lrg1' |GeneSymbol=='Mapk14' |GeneSymbol=='Mb' |GeneSymbol=='Metrnl' |GeneSymbol=='Mtor' |GeneSymbol=='Napepld' |GeneSymbol=='Nudt7' |GeneSymbol=='Pex11A' |GeneSymbol=='Pim1' |GeneSymbol=='Plac8' |GeneSymbol=='Ppargc1A' |GeneSymbol=='Prdm16' |GeneSymbol=='Ptgs2' |GeneSymbol=='Rgs2' |GeneSymbol=='Rreb1' |GeneSymbol=='Sirt1' |GeneSymbol=='Six1' |GeneSymbol=='Slc2A4' |GeneSymbol=='Sox13' |GeneSymbol=='Tfe3' |GeneSymbol=='Trpv4' |GeneSymbol=='Ucp1' |GeneSymbol=='Vstm2A' |GeneSymbol=='Zbtb7B' |GeneSymbol=='Znf516')

hm_tab_GO_BAT <- hm_tab_GO_BAT %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_GO_BAT) = hm_tab_GO_BAT$GeneSymbol
hm_GO_IngCD_annot = data.frame("Sig" = hm_tab_GO_BAT$sig2)
rownames(hm_GO_IngCD_annot) = rownames(hm_tab_GO_BAT)

hm_GO_BAT <- pheatmap(hm_tab_GO_BAT[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_GO_BAT$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_GO_IngCD_annot, legend_labels = "Relative expression", main = "GO_BROWN_FAT_CELL_DIFFERENTIATION genes")

pdf(file="IngCD_hm_GO_BAT.pdf",width=7,height=10)
hm_GO_BAT
dev.off()


##### hm of myc-TF genes

hm_tab_myc = subset(hm_tab, GeneSymbol=='Abcd2' |GeneSymbol=='Steap4' |GeneSymbol=='Nnmt' |GeneSymbol=='Pde3b' |GeneSymbol=='Hp' |GeneSymbol=='Lrp3' |GeneSymbol=='Slc1a5' |GeneSymbol=='Retn' |GeneSymbol=='Apcdd1' |GeneSymbol=='Adcy5' |GeneSymbol=='C4B' |GeneSymbol=='Gys2' |GeneSymbol=='Hcar2' |GeneSymbol=='Dock11' |GeneSymbol=='Mc2r' |GeneSymbol=='Hcar1' |GeneSymbol=='Dram1' |GeneSymbol=='B3galt2' |GeneSymbol=='Nnat' |GeneSymbol=='Ffar4' |GeneSymbol=='Slc16a7' |GeneSymbol=='Ffar2' |GeneSymbol=='Aoc3' |GeneSymbol=='Rarres2' |GeneSymbol=='Adipoq' |GeneSymbol=='Mmp3' |GeneSymbol=='Sctr' |GeneSymbol=='Klhl2' |GeneSymbol=='Igf1' |GeneSymbol=='Podn' |GeneSymbol=='Cidec' |GeneSymbol=='Tshr' |GeneSymbol=='Por' |GeneSymbol=='Rbp4' |GeneSymbol=='Ccdc80' |GeneSymbol=='Lrg1' |GeneSymbol=='Vnn3' |GeneSymbol=='Chdh' |GeneSymbol=='Lgals12' |GeneSymbol=='Chst1' |GeneSymbol=='St6galnac5')

hm_tab_myc <- hm_tab_myc %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_myc) = hm_tab_myc$GeneSymbol
hm_myc_annot = data.frame("Sig" = hm_tab_myc$sig2)
rownames(hm_myc_annot) = rownames(hm_tab_myc)

hm_myc <- pheatmap(hm_tab_myc[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_myc$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_myc_annot, legend_labels = "Relative expression", main = "Myc-related genes")

pdf(file="IngCD_hm_myc.pdf",width=7,height=10)
hm_myc
dev.off()


#### make hm of mitochondrial and nuclear encoded mitochondrial genes, using same genes to the figure in eLife paper

hm_tab_mt_mito = subset(hm_tab, GeneSymbol=='mt-Atp6' | GeneSymbol=='mt-Atp8' | GeneSymbol=='mt-Co1' | GeneSymbol=='mt-Co2' | GeneSymbol=='mt-Co3' | GeneSymbol=='mt-Cytb' | GeneSymbol=='mt-Nd1' | GeneSymbol=='mt-Nd2' | GeneSymbol=='mt-Nd3' | GeneSymbol=='mt-Nd4' | GeneSymbol=='mt-Nd4l' | GeneSymbol=='mt-Nd5' | GeneSymbol=='mt-Nd6' | GeneSymbol=='mt-Rnr1' | GeneSymbol=='mt-Rnr2' | GeneSymbol=='mt-Ta' | GeneSymbol=='mt-Tc' | GeneSymbol=='mt-Td' | GeneSymbol=='mt-Te' | GeneSymbol=='mt-Tf' | GeneSymbol=='mt-Tg' | GeneSymbol=='mt-Th' | GeneSymbol=='mt-Ti' | GeneSymbol=='mt-Tk' | GeneSymbol=='mt-Tl1' | GeneSymbol=='mt-Tl2' | GeneSymbol=='mt-Tm' | GeneSymbol=='mt-Tn' | GeneSymbol=='mt-Tp' | GeneSymbol=='mt-Tq' | GeneSymbol=='mt-Tr' | GeneSymbol=='mt-Ts1' | GeneSymbol=='mt-Ts2' | GeneSymbol=='mt-Tt' | GeneSymbol=='mt-Tv' | GeneSymbol=='mt-Tw' | GeneSymbol=='mt-Ty')

hm_tab_mt_mito <- hm_tab_mt_mito %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_mt_mito) = hm_tab_mt_mito$GeneSymbol
hm_mt_mito_annot = data.frame("Sig" = hm_tab_mt_mito$sig2)
rownames(hm_mt_mito_annot) = rownames(hm_tab_mt_mito)

hm_mt_mito <- pheatmap(hm_tab_mt_mito[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_mt_mito$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_mt_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial-encoded mito genes")

pdf(file="IngCD_hm_mt_mito.pdf",width=7,height=10)
hm_mt_mito
dev.off()

hm_tab_nucl_mito = subset(hm_tab, GeneSymbol=='Ndufb10' |GeneSymbol=='Ndufa3' |GeneSymbol=='Dmac2l' |GeneSymbol=='Atp5o' |GeneSymbol=='Uqcrfs1' |GeneSymbol=='Ndufa8' |GeneSymbol=='Uqcrq' |GeneSymbol=='Surf1' |GeneSymbol=='Atp5b' |GeneSymbol=='Uqcrh' |GeneSymbol=='Ndufa2' |GeneSymbol=='Ndufs7' |GeneSymbol=='Ndufb9' |GeneSymbol=='Ndufb6' |GeneSymbol=='Cox6b1' |GeneSymbol=='Cox6a2' |GeneSymbol=='Ndufa13' |GeneSymbol=='Ndufa9' |GeneSymbol=='Ndufs3' |GeneSymbol=='Uqcrc2' |GeneSymbol=='Ndufa4' |GeneSymbol=='Cycs' |GeneSymbol=='Cyc1' |GeneSymbol=='Ndufs5' |GeneSymbol=='Ndufs4' |GeneSymbol=='Ecsit' |GeneSymbol=='Cox10' |GeneSymbol=='Ndufs8' |GeneSymbol=='Ndufc2' |GeneSymbol=='Atp5a1' |GeneSymbol=='Ndufa7' |GeneSymbol=='Ndufb3' |GeneSymbol=='Ndufa5' |GeneSymbol=='Atp5k' |GeneSymbol=='Cox5b-ps' |GeneSymbol=='Cox18' |GeneSymbol=='Ndufa10' |GeneSymbol=='Atp5j2' |GeneSymbol=='Ndufaf1' |GeneSymbol=='Atp5pb' |GeneSymbol=='Cox11' |GeneSymbol=='Atpaf1' |GeneSymbol=='Sdhb' |GeneSymbol=='Atp5c1' |GeneSymbol=='Cox6b2' |GeneSymbol=='Gm10053' |GeneSymbol=='Phb' |GeneSymbol=='Cox7c' |GeneSymbol=='Sdhd' |GeneSymbol=='Sdhc' |GeneSymbol=='Sdha' |GeneSymbol=='Ndufa6' |GeneSymbol=='Ndufa12' |GeneSymbol=='Ndufa11' |GeneSymbol=='Cox6a1' |GeneSymbol=='Ndufb2' |GeneSymbol=='Cox5a' |GeneSymbol=='Atp5j' |GeneSymbol=='Atp5g3' |GeneSymbol=='Ndufv2' |GeneSymbol=='Ndufb8' |GeneSymbol=='Cox4i1' |GeneSymbol=='Uqcrc1' |GeneSymbol=='Atpaf2' |GeneSymbol=='Ndufb7' |GeneSymbol=='Atp5h' |GeneSymbol=='Cox5b' |GeneSymbol=='Ndufv1' |GeneSymbol=='Ndufv3' |GeneSymbol=='Ndufs1' |GeneSymbol=='Atp5d' |GeneSymbol=='Ndufb4' |GeneSymbol=='Cox7a1' |GeneSymbol=='Cox4i2' |GeneSymbol=='Ndufs6' |GeneSymbol=='Ndufs2' |GeneSymbol=='Ndufc1' |GeneSymbol=='Ndufb5' |GeneSymbol=='Gm21987' |GeneSymbol=='Cox17' |GeneSymbol=='Cox8a' |GeneSymbol=='Cox7a2' |GeneSymbol=='Cox6c' |GeneSymbol=='Nubpl' |GeneSymbol=='Ndufab1')

hm_tab_nucl_mito <- hm_tab_nucl_mito %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_nucl_mito) = hm_tab_nucl_mito$GeneSymbol
hm_nucl_mito_annot = data.frame("Sig" = hm_tab_nucl_mito$sig2)
rownames(hm_nucl_mito_annot) = rownames(hm_tab_nucl_mito)

hm_nucl_mito <- pheatmap(hm_tab_nucl_mito[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_nucl_mito$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_nucl_mito_annot, legend_labels = "Relative expression", main = "Nuclear-encoded mito genes")

pdf(file="IngCD_hm_nucl_mito.pdf",width=7,height=10)
hm_nucl_mito
dev.off()

#### make side-by-side hm of mitochondrial and nuclear encoded mitochondrial genes, analagous to eLife paper

library(RColorBrewer)
breaksList = seq(-2, 2, by = 0.1)

hm_tab_mt_mito2 <- as.data.frame(hm_tab_mt_mito$log2FC)
rownames(hm_tab_mt_mito2) = hm_tab_mt_mito$GeneSymbol
hm_tab_mt_mito2$log2FCdup <- hm_tab_mt_mito$log2FC

hm_mt_mito2 <- pheatmap(hm_tab_mt_mito2, cluster_rows = TRUE, cluster_cols = FALSE, cutree_rows = 2, legend = FALSE, cellwidth=30, angle_col=45, fontsize_col=6, annotation_row=hm_mt_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial-encoded", show_colnames = FALSE, show_rownames = FALSE, border_color = NA, scale = "none", color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList)

hm_tab_nucl_mito2 <- as.data.frame(hm_tab_nucl_mito$log2FC)
rownames(hm_tab_nucl_mito2) = hm_tab_nucl_mito$GeneSymbol
hm_tab_nucl_mito2$log2FCdup <- hm_tab_nucl_mito$log2FC

hm_nucl_mito2 <- pheatmap(hm_tab_nucl_mito2, cluster_rows = TRUE, cluster_cols = FALSE, cutree_rows = 3, legend = TRUE, cellwidth=30, angle_col=45, fontsize_col=6, annotation_row=hm_nucl_mito_annot, legend_labels = "Relative expression", main = "Nuclear-encoded", show_colnames = FALSE, , show_rownames = FALSE, border_color = NA, color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList)

require(cowplot)
require(ggplotify)

pdf(file="mito_genes_sumfig.pdf",width=8,height=3)
plot_grid(as.grob(hm_mt_mito2), as.grob(hm_nucl_mito2), ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()



############### Pathway analysis using enrichr =====================================================

require(enrichR)
require(tidyr)
require(cowplot)
require(viridis)

## look at sig up & down genes using enrichR
dbs_option <- listEnrichrDbs()

####### use upregulated genes

up_dge = subset(hm_tab, sig2=='sig' & log2FC>0)
write.table(up_dge,file="IngCD_up_dge.csv",sep=",")
up_dge <- up_dge[!is.na(up_dge$GeneSymbol), ]
up_genes <- as.vector(up_dge$GeneSymbol)


dbs_search <- c("GO_Biological_Process_2018","KEGG_2019_Mouse", "MSigDB_Hallmark_2020","GO_Cellular_Component_2018","GTEx_Tissue_Sample_Gene_Expression_Profiles_up","TF_Perturbations_Followed_by_Expression","GO_Molecular_Function_2018", "HMDB_Metabolites")

up_genes_enrichr <- enrichr(up_genes, databases = dbs_search)

## make figure from enrichr analyses

GO_biol_data_up <- up_genes_enrichr[["GO_Biological_Process_2018"]]
View(GO_biol_data_up)
GO_biol_data_up = subset(GO_biol_data_up, Adjusted.P.value<.05)
GO_biol_data_up <- GO_biol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_biol_data_up$db <- "GO_biol_2019_Human"
GO_biol_fig_up <-ggplot(data=GO_biol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Biological_Process_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_biol_fig_up

KEGG_data_up <- up_genes_enrichr[["KEGG_2019_Mouse"]]
View(KEGG_data_up)
KEGG_data_up = subset(KEGG_data_up, Adjusted.P.value<.05)
KEGG_data_up <- KEGG_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
KEGG_data_up$db <- "KEGG_2019_Mouse"
KEGG_fig_up <-ggplot(data=KEGG_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("KEGG_2019_Mouse") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
KEGG_fig_up

Hall_data_up <- up_genes_enrichr[["MSigDB_Hallmark_2020"]]
View(Hall_data_up)
Hall_data_up = subset(Hall_data_up, Adjusted.P.value<.05)
Hall_data_up <- Hall_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Hall_data_up$db <- "MSigDB_Hallmark_2020"
Hall_fig_up <-ggplot(data=Hall_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("MSigDB_Hallmark_2020") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
Hall_fig_up

GO_cell_data_up <- up_genes_enrichr[["GO_Cellular_Component_2018"]]
View(GO_cell_data_up)
GO_cell_data_up = subset(GO_cell_data_up, Adjusted.P.value<.05)
GO_cell_data_up <- GO_cell_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_cell_data_up$db <- "GO_Cellular_Component_2018"
GO_cell_fig_up <-ggplot(data=GO_cell_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Cellular_Component_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_cell_fig_up

GTEx_data_up <- up_genes_enrichr[["GTEx_Tissue_Sample_Gene_Expression_Profiles_up"]]
View(GTEx_data_up)
GTEx_data_up = subset(GTEx_data_up, Adjusted.P.value<.05)
GTEx_data_up <- GTEx_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GTEx_data_up$db <- "GTEx_Tissue_Sample_Gene_Expression_Profiles_up"
GTEx_fig_up <-ggplot(data=GTEx_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GTEx_Tissue_Sample_Gene_Expression_Profiles_up") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GTEx_fig_up

TF_data_up <- up_genes_enrichr[["TF_Perturbations_Followed_by_Expression"]]
View(TF_data_up)
TF_data_up = subset(TF_data_up, Adjusted.P.value<.05)
TF_data_up <- TF_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
TF_data_up$db <- "TF_Perturbations_Followed_by_Expression"
TF_fig_up <-ggplot(data=TF_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("TF_Perturbations_Followed_by_Expression") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
TF_fig_up

GO_mol_data_up <- up_genes_enrichr[["GO_Molecular_Function_2018"]]
View(GO_mol_data_up)
GO_mol_data_up = subset(GO_mol_data_up, Adjusted.P.value<.05)
GO_mol_data_up <- GO_mol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_mol_data_up$db <- "GO_Molecular_Function_2018"
GO_mol_fig_up <-ggplot(data=GO_mol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Molecular_Function_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_mol_fig_up

Metabol_data_up <- up_genes_enrichr[["HMDB_Metabolites"]]
View(Metabol_data_up)
Metabol_data_up = subset(Metabol_data_up, Adjusted.P.value<.05)
Metabol_data_up <- Metabol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Metabol_data_up$db <- "HMDB_Metabolites"
Metabol_fig_up <-ggplot(data=Metabol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("HMDB_Metabolites") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
Metabol_fig_up

up_path_summary <- rbind(GO_biol_data_up, KEGG_data_up, Hall_data_up, GO_cell_data_up, GTEx_data_up, TF_data_up, GO_mol_data_up, Metabol_data_up)
up_path_summary$dir <- "Up"  

####### use downregulated genes

down_dge = subset(hm_tab, sig2=='sig' & log2FC<0)
write.table(down_dge,file="IngCD_down_dge.csv",sep=",")
down_list <- as.data.frame(down_dge$GeneSymbol)
down_list <- down_list %>% rename("genes" = "down_dge$GeneSymbol")
down_list <- down_list %>% drop_na()
down_list <- distinct(down_list)

dbs_search <- c("GO_Biological_Process_2018","KEGG_2019_Mouse", "MSigDB_Hallmark_2020","GO_Cellular_Component_2018","GTEx_Tissue_Sample_Gene_Expression_Profiles_up","TF_Perturbations_Followed_by_Expression","GO_Molecular_Function_2018", "HMDB_Metabolites")

down_genes_enrichr <- enrichr(down_list$genes, databases = dbs_search)

## make figure from enrichr analyses

GO_biol_data_down <- down_genes_enrichr[["GO_Biological_Process_2018"]]
View(GO_biol_data_down)
GO_biol_data_down = subset(GO_biol_data_down, Adjusted.P.value<.05)
GO_biol_data_down <- GO_biol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_biol_data_down$db <- "GO_biol_2019_Human"
GO_biol_fig_down <-ggplot(data=GO_biol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Biological_Process_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_biol_fig_down

KEGG_data_down <- down_genes_enrichr[["KEGG_2019_Mouse"]]
View(KEGG_data_down)
KEGG_data_down = subset(KEGG_data_down, Adjusted.P.value<.05)
KEGG_data_down <- KEGG_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
KEGG_data_down$db <- "KEGG_2019_Mouse"
KEGG_fig_down <-ggplot(data=KEGG_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("KEGG_2019_Mouse") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
KEGG_fig_down

Hall_data_down <- down_genes_enrichr[["MSigDB_Hallmark_2020"]]
View(Hall_data_down)
Hall_data_down = subset(Hall_data_down, Adjusted.P.value<.05)
Hall_data_down <- Hall_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Hall_data_down$db <- "MSigDB_Hallmark_2020"
Hall_fig_down <-ggplot(data=Hall_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("MSigDB_Hallmark_2020") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
Hall_fig_down

GO_cell_data_down <- down_genes_enrichr[["GO_Cellular_Component_2018"]]
View(GO_cell_data_down)
GO_cell_data_down = subset(GO_cell_data_down, Adjusted.P.value<.05)
GO_cell_data_down <- GO_cell_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_cell_data_down$db <- "GO_Cellular_Component_2018"
GO_cell_fig_down <-ggplot(data=GO_cell_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Cellular_Component_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_cell_fig_down

GTEx_data_down <- down_genes_enrichr[["GTEx_Tissue_Sample_Gene_Expression_Profiles_up"]]
View(GTEx_data_down)
GTEx_data_down = subset(GTEx_data_down, Adjusted.P.value<.05)
GTEx_data_down <- GTEx_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GTEx_data_down$db <- "GTEx_Tissue_Sample_Gene_Expression_Profiles_down"
GTEx_fig_down <-ggplot(data=GTEx_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GTEx_Tissue_Sample_Gene_Expression_Profiles_up") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GTEx_fig_down

TF_data_down <- down_genes_enrichr[["TF_Perturbations_Followed_by_Expression"]]
View(TF_data_down)
TF_data_down = subset(TF_data_down, Adjusted.P.value<.05)
TF_data_down <- TF_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
TF_data_down$db <- "TF_Perturbations_Followed_by_Expression"
TF_fig_down <-ggplot(data=TF_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("TF_Perturbations_Followed_by_Expression") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
TF_fig_down

GO_mol_data_down <- down_genes_enrichr[["GO_Molecular_Function_2018"]]
View(GO_mol_data_down)
GO_mol_data_down = subset(GO_mol_data_down, Adjusted.P.value<.05)
GO_mol_data_down <- GO_mol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_mol_data_down$db <- "GO_Molecular_Function_2018"
GO_mol_fig_down <-ggplot(data=GO_mol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Molecular_Function_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_mol_fig_down

Metabol_data_down <- down_genes_enrichr[["HMDB_Metabolites"]]
View(Metabol_data_down)
Metabol_data_down = subset(Metabol_data_down, Adjusted.P.value<.05)
Metabol_data_down <- Metabol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Metabol_data_down$db <- "HMDB_Metabolites"
Metabol_fig_down <-ggplot(data=Metabol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("HMDB_Metabolites") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
Metabol_fig_down

down_path_summary <- rbind(GO_biol_data_down, KEGG_data_down, Hall_data_down, GO_cell_data_down, GTEx_data_down, TF_data_down, GO_mol_data_down, Metabol_data_down)
down_path_summary$dir <- "down"  

path_summary <- rbind(up_path_summary, down_path_summary)
path_summary <- path_summary %>% arrange(desc(-Adjusted.P.value))               
write.table(path_summary,file="path_summary.csv",sep=",")

up_path_col1 <- plot_grid(GO_biol_fig_up, KEGG_fig_up, Hall_fig_up, GO_cell_fig_up, ncol = 1, labels = c('A', 'C', 'E', 'G', 'I', 'K', 'M', 'O'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))
up_path_col2 <- plot_grid(GTEx_fig_up, TF_fig_up, GO_mol_fig_up, Metabol_fig_up, ncol = 1, labels = c('B', 'D', 'F', 'H'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))

pdf(file="up_path_sumfig.pdf",width=16,height=12)
plot_grid(up_path_col1, up_path_col2, ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()

down_path_col1 <- plot_grid(GO_biol_fig_down, KEGG_fig_down, Hall_fig_down, GO_cell_fig_down, ncol = 1, labels = c('A', 'C', 'E', 'G', 'I', 'K', 'M', 'O'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))
down_path_col2 <- plot_grid(GTEx_fig_down, TF_fig_down, GO_mol_fig_down, Metabol_fig_down, ncol = 1, labels = c('B', 'D', 'F', 'H'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))

pdf(file="down_path_sumfig.pdf",width=16,height=12)
plot_grid(down_path_col1, down_path_col2, ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()


############### Compare differentially expressed genes to human adipose RNAseq data ====================


library(eulerr)

## load human data

Hum_up_genes <- read.delim(header = TRUE,  dec = ".", file = "Hum_up_genes.txt", sep = "\t")
Hum_up_vect <- as.vector(Hum_up_genes$Mouse.gene.name)
Hum_down_genes <- read.delim(header = TRUE,  dec = ".", file = "Hum_down_genes.txt", sep = "\t")
Hum_down_vect <- as.vector(Hum_down_genes$Mouse.gene.name)
down_genes <- as.vector(down_list$genes)

## up regulated genes
## calculate intersection

up_both <- intersect(Hum_up_vect,up_genes)
hum_up_count <- length(Hum_up_vect)
up_count <- length(up_genes)
up_both_count <- length(up_both)

up_total <- hum_up_count + up_count

## make venn diagrams
up_venn_data <- euler(c("A" = hum_up_count, "B" = up_count, "A&B" = up_both_count))
up_venn_fig <- plot(up_venn_data, quantities = TRUE, fill = list(fill=c("#FDE725FF", "#29AF7FFF"), alpha=0.7), labels=list(labels=c("Human \n White adipose\n ","Mouse \n White adipose\n "), cex=.8))


## down regulated genes
## calculate intersection

down_both <- intersect(Hum_down_vect,down_genes)
hum_down_count <- length(Hum_down_vect)
down_count <- length(down_genes)
down_both_count <- length(down_both)

down_total <- hum_down_count + down_count
venn_total <- up_total + down_total

## make venn diagrams
down_venn_data <- euler(c("A" = hum_down_count, "B" = down_count, "A&B" = down_both_count))
down_venn_fig <- plot(down_venn_data, quantities = TRUE, fill=list(fill = c("#F7CB44FF", "#B8627DFF"), alpha=0.7), labels=list(labels=c("Human \n White adipose\n ","Mouse \n White adipose\n "), cex=.8))
down_venn_fig

up_venn_rat <- up_total / venn_total
down_venn_rat <- down_total / venn_total


pdf(file="IngCD_venn_sumfig.pdf",width=6,height=6)
plot_grid(as.grob(up_venn_fig), as.grob(down_venn_fig), labels = c('A: Up-regulated', 'B: Down-regulated'), ncol = 1, rel_heights = c(1, 1))
dev.off()



####### --------- 
####### --------- 
####### --------- further figures for paper
####### --------- 

## 2:((ncol(norm_counts))+1) --> change to
## 2:((ncol(norm_counts))+1)


IngCD_vol <- ggplot(data=vplot_tab, aes(x=log2FC, y=neglog_p, colour=significant)) + geom_point(alpha=0.8, size=1.75) + xlab("Log2 Fold change") + ylab("-log10 p-value") + theme_classic() + theme(legend.position="none") + geom_text_repel(data = vplot_tab_label_final, aes(label = GeneSymbol.x), color="black",size = 3, key_glyph = "point") + theme(plot.title = element_text(hjust = 0.2)) + ggtitle("IngCD") + scale_colour_manual(values = c("#999999", "#D55E00")) + scale_y_continuous(labels = scales::comma, expand = c(0,1), breaks = seq(0, 70, 10), limits=c(0, 70))
IngCD_vol

pdf(file="IngCD_vol.pdf",width=7,height=9)
IngCD_vol
dev.off()


pdf(file="IngCD_Hall_fig_up.pdf",width=8,height=3.5)
Hall_fig_up
dev.off()

pdf(file="IngCD_Hall_fig_down.pdf",width=8,height=3.5)
Hall_fig_down
dev.off()

pdf(file="IngCD_KEGG_fig_up.pdf",width=8,height=3.5)
KEGG_fig_up
dev.off()


############ make specific heatmaps following on enriched genesets ---------


ann_colors = list(Sig = c(sig = "#D55E00", not = "#999999"))

hm_hall_UPR <- pheatmap(hm_tab_hall_UPR[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = F, scale = "row", labels_row = hm_tab_hall_UPR$GeneSymbol, fontsize_row = 8, cutree_rows = 3, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_UPR_annot, legend_labels = "Relative expression", main = "HALLMARK_UNFOLDED_PROTEIN_RESPONSE genes", annotation_colors = ann_colors, gaps_col=c(7), treeheight_row = 10)

pdf(file="IngCD_hm_hall_UPR.pdf",width=7,height=10)
hm_hall_UPR
dev.off()


##### hm of hallmark CholHomeo genes

hm_tab_hall_CholHomeo = subset(hm_tab, GeneSymbol=='Abca2' | GeneSymbol=='Acat2' | GeneSymbol=='Acss2' | GeneSymbol=='Actg1' | GeneSymbol=='Adh4' | GeneSymbol=='Alcam' | GeneSymbol=='Aldoc' | GeneSymbol=='Antxr2' | GeneSymbol=='Anxa13' | GeneSymbol=='Anxa5' | GeneSymbol=='Atf3' | GeneSymbol=='Atf5' | GeneSymbol=='Atxn2' | GeneSymbol=='Avpr1A' | GeneSymbol=='Cbs' | GeneSymbol=='Cd9' | GeneSymbol=='Chka' | GeneSymbol=='Clu' | GeneSymbol=='Cpeb2' | GeneSymbol=='Ctnnb1' | GeneSymbol=='Cxcl16' | GeneSymbol=='Cyp51A1' | GeneSymbol=='Dhcr7' | GeneSymbol=='Ebp' | GeneSymbol=='Ech1' | GeneSymbol=='Errfi1' | GeneSymbol=='Ethe1' | GeneSymbol=='Fabp5' | GeneSymbol=='Fads2' | GeneSymbol=='Fasn' | GeneSymbol=='Fbxo6' | GeneSymbol=='Fdft1' | GeneSymbol=='Fdps' | GeneSymbol=='Gldc' | GeneSymbol=='Gnai1' | GeneSymbol=='Gpx8' | GeneSymbol=='Gstm2' | GeneSymbol=='Gusb' | GeneSymbol=='Hmgcr' | GeneSymbol=='Hmgcs1' | GeneSymbol=='Hsd17B7' | GeneSymbol=='Idi1' | GeneSymbol=='Jag1' | GeneSymbol=='Ldlr' | GeneSymbol=='Lgals3' | GeneSymbol=='Lgmn' | GeneSymbol=='Lpl' | GeneSymbol=='Lss' | GeneSymbol=='Mal2' | GeneSymbol=='Mvd' | GeneSymbol=='Mvk' | GeneSymbol=='Nfil3' | GeneSymbol=='Niban1' | GeneSymbol=='Nsdhl' | GeneSymbol=='Pcyt2' | GeneSymbol=='Pdk3' | GeneSymbol=='Plaur' | GeneSymbol=='Plscr1' | GeneSymbol=='Pmvk' | GeneSymbol=='Pnrc1' | GeneSymbol=='Pparg' | GeneSymbol=='S100A11' | GeneSymbol=='Sc5D' | GeneSymbol=='Scd' | GeneSymbol=='Sema3B' | GeneSymbol=='Sqle' | GeneSymbol=='Srebf2' | GeneSymbol=='Stard4' | GeneSymbol=='Stx5' | GeneSymbol=='Tm7Sf2' | GeneSymbol=='Tmem97' | GeneSymbol=='Tnfrsf12A' | GeneSymbol=='Tp53Inp1' | GeneSymbol=='Trib3')

hm_tab_hall_CholHomeo <- hm_tab_hall_CholHomeo %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_CholHomeo) = hm_tab_hall_CholHomeo$GeneSymbol
hm_hall_CholHomeo_annot = data.frame("Sig" = hm_tab_hall_CholHomeo$sig2)
rownames(hm_hall_CholHomeo_annot) = rownames(hm_tab_hall_CholHomeo)

hm_hall_CholHomeo <- pheatmap(hm_tab_hall_CholHomeo[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_CholHomeo$GeneSymbol, fontsize_row = 8, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_CholHomeo_annot, legend_labels = "Relative expression", gaps_col=c(7), treeheight_row = 10, main="CholHomeo", annotation_colors = ann_colors)

pdf(file="IngCD_hm_hall_CholHomeo.pdf",width=7,height=10)
hm_hall_CholHomeo
dev.off()


##### hm of hallmark FAmetab genes

hm_tab_hall_FAmetab = subset(hm_tab, GeneSymbol=='Aadat' | GeneSymbol=='Acaa1' | GeneSymbol=='Acaa2' | GeneSymbol=='Acadl' | GeneSymbol=='Acadm' | GeneSymbol=='Acads' | GeneSymbol=='Acadvl' | GeneSymbol=='Acat2' | GeneSymbol=='Aco2' | GeneSymbol=='Acot2' | GeneSymbol=='Acot8' | GeneSymbol=='Acox1' | GeneSymbol=='Acsl1' | GeneSymbol=='Acsl4' | GeneSymbol=='Acsl5' | GeneSymbol=='Acsm3' | GeneSymbol=='Acss1' | GeneSymbol=='Adh1C' | GeneSymbol=='Adh7' | GeneSymbol=='Adipor2' | GeneSymbol=='Adsl' | GeneSymbol=='Alad' | GeneSymbol=='Aldh1A1' | GeneSymbol=='Aldh3A1' | GeneSymbol=='Aldh3A2' | GeneSymbol=='Aldh9A1' | GeneSymbol=='Aldoa' | GeneSymbol=='Aoc3' | GeneSymbol=='Apex1' | GeneSymbol=='Aqp7' | GeneSymbol=='Auh' | GeneSymbol=='Bckdhb' | GeneSymbol=='Blvra' | GeneSymbol=='Bmpr1B' | GeneSymbol=='Bphl' | GeneSymbol=='Ca2' | GeneSymbol=='Ca4' | GeneSymbol=='Ca6' | GeneSymbol=='Cbr1' | GeneSymbol=='Cbr3' | GeneSymbol=='Ccdc58' | GeneSymbol=='Cd1D' | GeneSymbol=='Cd36' | GeneSymbol=='Cel' | GeneSymbol=='Cidea' | GeneSymbol=='Cpox' | GeneSymbol=='Cpt1A' | GeneSymbol=='Cpt2' | GeneSymbol=='Crat' | GeneSymbol=='Cryz' | GeneSymbol=='Cyp1A1' | GeneSymbol=='Cyp4A11' | GeneSymbol=='Cyp4A22' | GeneSymbol=='D2Hgdh' | GeneSymbol=='Decr1' | GeneSymbol=='Dhcr24' | GeneSymbol=='Dld' | GeneSymbol=='Dlst' | GeneSymbol=='Ech1' | GeneSymbol=='Echs1' | GeneSymbol=='Eci1' | GeneSymbol=='Eci2' | GeneSymbol=='Ehhadh' | GeneSymbol=='Elovl5' | GeneSymbol=='Eno2' | GeneSymbol=='Eno3' | GeneSymbol=='Ephx1' | GeneSymbol=='Erp29' | GeneSymbol=='Etfdh' | GeneSymbol=='Fabp1' | GeneSymbol=='Fabp2' | GeneSymbol=='Fasn' | GeneSymbol=='Fh' | GeneSymbol=='Fmo1' | GeneSymbol=='G0S2' | GeneSymbol=='Gabarapl1' | GeneSymbol=='Gad2' | GeneSymbol=='Gapdhs' | GeneSymbol=='Gcdh' | GeneSymbol=='Glul' | GeneSymbol=='Gpd1' | GeneSymbol=='Gpd2' | GeneSymbol=='Grhpr' | GeneSymbol=='Gstz1' | GeneSymbol=='H2Az1' | GeneSymbol=='Hadh' | GeneSymbol=='Hadhb' | GeneSymbol=='Hao2' | GeneSymbol=='Hccs' | GeneSymbol=='Hibch' | GeneSymbol=='Hmgcl' | GeneSymbol=='Hmgcs1' | GeneSymbol=='Hmgcs2' | GeneSymbol=='Hpgd' | GeneSymbol=='Hsd17B10' | GeneSymbol=='Hsd17B11' | GeneSymbol=='Hsd17B4' | GeneSymbol=='Hsd17B7' | GeneSymbol=='Hsdl2' | GeneSymbol=='Hsp90Aa1' | GeneSymbol=='Hsph1' | GeneSymbol=='Idh1' | GeneSymbol=='Idh3B' | GeneSymbol=='Idh3G' | GeneSymbol=='Idi1' | GeneSymbol=='Il4I1' | GeneSymbol=='Inmt' | GeneSymbol=='Kmt5A' | GeneSymbol=='Ldha' | GeneSymbol=='Lgals1' | GeneSymbol=='Ltc4S' | GeneSymbol=='Maoa' | GeneSymbol=='Mcee' | GeneSymbol=='Mdh1' | GeneSymbol=='Mdh2' | GeneSymbol=='Me1' | GeneSymbol=='Metap1' | GeneSymbol=='Mgll' | GeneSymbol=='Mif' | GeneSymbol=='Mlycd' | GeneSymbol=='Nbn' | GeneSymbol=='Ncaph2' | GeneSymbol=='Nsdhl' | GeneSymbol=='Nthl1' | GeneSymbol=='Odc1' | GeneSymbol=='Ostc' | GeneSymbol=='Pcbd1' | GeneSymbol=='Pdha1' | GeneSymbol=='Pdhb' | GeneSymbol=='Ppara' | GeneSymbol=='Prdx6' | GeneSymbol=='Psme1' | GeneSymbol=='Ptprg' | GeneSymbol=='Pts' | GeneSymbol=='Rap1Gds1' | GeneSymbol=='Rdh11' | GeneSymbol=='Rdh16' | GeneSymbol=='Reep6' | GeneSymbol=='Retsat' | GeneSymbol=='S100A10' | GeneSymbol=='Sdha' | GeneSymbol=='Sdhc' | GeneSymbol=='Sdhd' | GeneSymbol=='Serinc1' | GeneSymbol=='Slc22A5' | GeneSymbol=='Sms' | GeneSymbol=='Sucla2' | GeneSymbol=='Suclg1' | GeneSymbol=='Suclg2' | GeneSymbol=='Tdo2' | GeneSymbol=='Tp53Inp2' | GeneSymbol=='Ube2L6' | GeneSymbol=='Ugdh' | GeneSymbol=='Urod' | GeneSymbol=='Uros' | GeneSymbol=='Vnn1' | GeneSymbol=='Xist' | GeneSymbol=='Ywhah')

hm_tab_hall_FAmetab <- hm_tab_hall_FAmetab %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_FAmetab) = hm_tab_hall_FAmetab$GeneSymbol
hm_hall_FAmetab_annot = data.frame("Sig" = hm_tab_hall_FAmetab$sig2)
rownames(hm_hall_FAmetab_annot) = rownames(hm_tab_hall_FAmetab)

hm_hall_FAmetab <- pheatmap(hm_tab_hall_FAmetab[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_FAmetab$GeneSymbol, fontsize_row = 7, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_FAmetab_annot, legend_labels = "Relative expression", gaps_col=c(7), treeheight_row = 10, main="FAmetab", annotation_colors = ann_colors)

pdf(file="IngCD_hm_hall_FAmetab.pdf",width=7,height=10)
hm_hall_FAmetab
dev.off()


##### hm of hallmark mtorc genes

hm_tab_hall_mtorc1 = subset(hm_tab, GeneSymbol=='Abcf2' | GeneSymbol=='Acaca' | GeneSymbol=='Acly' | GeneSymbol=='Acsl3' | GeneSymbol=='Actr2' | GeneSymbol=='Actr3' | GeneSymbol=='Add3' | GeneSymbol=='Adipor2' | GeneSymbol=='Ak4' | GeneSymbol=='Aldoa' | GeneSymbol=='Arpc5L' | GeneSymbol=='Asns' | GeneSymbol=='Atp2A2' | GeneSymbol=='Atp5Mc1' | GeneSymbol=='Atp6V1D' | GeneSymbol=='Aurka' | GeneSymbol=='Bcat1' | GeneSymbol=='Bhlhe40' | GeneSymbol=='Btg2' | GeneSymbol=='Bub1' | GeneSymbol=='Cacybp' | GeneSymbol=='Calr' | GeneSymbol=='Canx' | GeneSymbol=='Ccnf' | GeneSymbol=='Ccng1' | GeneSymbol=='Cct6A' | GeneSymbol=='Cd9' | GeneSymbol=='Cdc25A' | GeneSymbol=='Cdkn1A' | GeneSymbol=='Cfp' | GeneSymbol=='Cops5' | GeneSymbol=='Coro1A' | GeneSymbol=='Cth' | GeneSymbol=='Ctsc' | GeneSymbol=='Cxcr4' | GeneSymbol=='Cyb5B' | GeneSymbol=='Cyp51A1' | GeneSymbol=='Dapp1' | GeneSymbol=='Ddit3' | GeneSymbol=='Ddit4' | GeneSymbol=='Ddx39A' | GeneSymbol=='Dhcr24' | GeneSymbol=='Dhcr7' | GeneSymbol=='Dhfr' | GeneSymbol=='Ebp' | GeneSymbol=='Edem1' | GeneSymbol=='Eef1E1' | GeneSymbol=='Egln3' | GeneSymbol=='Eif2S2' | GeneSymbol=='Elovl5' | GeneSymbol=='Elovl6' | GeneSymbol=='Eno1' | GeneSymbol=='Eprs1' | GeneSymbol=='Ero1A' | GeneSymbol=='Etf1' | GeneSymbol=='Fads1' | GeneSymbol=='Fads2' | GeneSymbol=='Fdxr' | GeneSymbol=='Fgl2' | GeneSymbol=='Fkbp2' | GeneSymbol=='G6Pd' | GeneSymbol=='Gapdh' | GeneSymbol=='Gbe1' | GeneSymbol=='Gclc' | GeneSymbol=='Gga2' | GeneSymbol=='Gla' | GeneSymbol=='Glrx' | GeneSymbol=='Gmps' | GeneSymbol=='Got1' | GeneSymbol=='Gpi' | GeneSymbol=='Gsk3B' | GeneSymbol=='Gsr' | GeneSymbol=='Gtf2H1' | GeneSymbol=='Hk2' | GeneSymbol=='Hmbs' | GeneSymbol=='Hmgcr' | GeneSymbol=='Hmgcs1' | GeneSymbol=='Hprt1' | GeneSymbol=='Hsp90B1' | GeneSymbol=='Hspa4' | GeneSymbol=='Hspa5' | GeneSymbol=='Hspa9' | GeneSymbol=='Hspd1' | GeneSymbol=='Hspe1' | GeneSymbol=='Idh1' | GeneSymbol=='Idi1' | GeneSymbol=='Ifi30' | GeneSymbol=='Ifrd1' | GeneSymbol=='Igfbp5' | GeneSymbol=='Immt' | GeneSymbol=='Insig1' | GeneSymbol=='Itgb2' | GeneSymbol=='Ldha' | GeneSymbol=='Ldlr' | GeneSymbol=='Lgmn' | GeneSymbol=='Lta4H' | GeneSymbol=='M6Pr')

hm_tab_hall_mtorc2 = subset(hm_tab, GeneSymbol=='Map2K3' | GeneSymbol=='Mcm2' | GeneSymbol=='Mcm4' | GeneSymbol=='Me1' | GeneSymbol=='Mllt11' | GeneSymbol=='Mthfd2' | GeneSymbol=='Mthfd2L' | GeneSymbol=='Nampt' | GeneSymbol=='Nfil3' | GeneSymbol=='Nfkbib' | GeneSymbol=='Nfyc' | GeneSymbol=='Niban1' | GeneSymbol=='Nmt1' | GeneSymbol=='Nufip1' | GeneSymbol=='Nup205' | GeneSymbol=='Nupr1' | GeneSymbol=='P4Ha1' | GeneSymbol=='Pdap1' | GeneSymbol=='Pdk1' | GeneSymbol=='Pfkl' | GeneSymbol=='Pgk1' | GeneSymbol=='Pgm1' | GeneSymbol=='Phgdh' | GeneSymbol=='Pik3R3' | GeneSymbol=='Pitpnb' | GeneSymbol=='Plk1' | GeneSymbol=='Plod2' | GeneSymbol=='Pno1' | GeneSymbol=='Pnp' | GeneSymbol=='Polr3G' | GeneSymbol=='Ppa1' | GeneSymbol=='Ppia' | GeneSymbol=='Ppp1R15A' | GeneSymbol=='Prdx1' | GeneSymbol=='Psat1' | GeneSymbol=='Psma3' | GeneSymbol=='Psma4' | GeneSymbol=='Psmb5' | GeneSymbol=='Psmc2' | GeneSymbol=='Psmc4' | GeneSymbol=='Psmc6' | GeneSymbol=='Psmd12' | GeneSymbol=='Psmd13' | GeneSymbol=='Psmd14' | GeneSymbol=='Psme3' | GeneSymbol=='Psmg1' | GeneSymbol=='Psph' | GeneSymbol=='Qdpr' | GeneSymbol=='Rab1A' | GeneSymbol=='Rdh11' | GeneSymbol=='Rit1' | GeneSymbol=='Rpa1' | GeneSymbol=='Rpn1' | GeneSymbol=='Rrm2' | GeneSymbol=='Rrp9' | GeneSymbol=='Sc5D' | GeneSymbol=='Scd' | GeneSymbol=='Sdf2L1' | GeneSymbol=='Sec11A' | GeneSymbol=='Serp1' | GeneSymbol=='Serpinh1' | GeneSymbol=='Shmt2' | GeneSymbol=='Skap2' | GeneSymbol=='Sla' | GeneSymbol=='Slc1A4' | GeneSymbol=='Slc1A5' | GeneSymbol=='Slc2A1' | GeneSymbol=='Slc2A3' | GeneSymbol=='Slc37A4' | GeneSymbol=='Slc6A6' | GeneSymbol=='Slc7A11' | GeneSymbol=='Slc7A5' | GeneSymbol=='Slc9A3R1' | GeneSymbol=='Sord' | GeneSymbol=='Sqle' | GeneSymbol=='Sqstm1' | GeneSymbol=='Srd5A1' | GeneSymbol=='Ssr1' | GeneSymbol=='Stard4' | GeneSymbol=='Stc1' | GeneSymbol=='Stip1' | GeneSymbol=='Sytl2' | GeneSymbol=='Tbk1' | GeneSymbol=='Tcea1' | GeneSymbol=='Tes' | GeneSymbol=='Tfrc' | GeneSymbol=='Tm7Sf2' | GeneSymbol=='Tmem97' | GeneSymbol=='Tomm40' | GeneSymbol=='Tpi1' | GeneSymbol=='Trib3' | GeneSymbol=='Tuba4A' | GeneSymbol=='Tubg1' | GeneSymbol=='Txnrd1' | GeneSymbol=='Ube2D3' | GeneSymbol=='Uchl5' | GeneSymbol=='Ufm1' | GeneSymbol=='Ung' | GeneSymbol=='Uso1' | GeneSymbol=='Vldlr' | GeneSymbol=='Wars1' | GeneSymbol=='Xbp1' | GeneSymbol=='Ykt6')

hm_tab_hall_mtorc <- rbind(hm_tab_hall_mtorc1, hm_tab_hall_mtorc2)

hm_tab_hall_mtorc <- hm_tab_hall_mtorc %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_mtorc) = hm_tab_hall_mtorc$GeneSymbol
hm_hall_mtorc_annot = data.frame("Sig" = hm_tab_hall_mtorc$sig2)
rownames(hm_hall_mtorc_annot) = rownames(hm_tab_hall_mtorc)

hm_hall_mtorc <- pheatmap(hm_tab_hall_mtorc[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_mtorc$GeneSymbol, fontsize_row = 5, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row= hm_hall_mtorc_annot, legend_labels = "Relative expression", gaps_col=c(7), treeheight_row = 10, annotation_colors = ann_colors, main = "HALLMARK_mtorc_signalling genes")

pdf(file="IngCD_hm_hall_mtorc.pdf",width=7,height=10)
hm_hall_mtorc
dev.off()



##### hm of hallmark EpiMesenchym genes

hm_tab_hall_EpiMesenchym1 = subset(hm_tab, GeneSymbol=='Abi3Bp' | GeneSymbol=='Acta2' | GeneSymbol=='Adam12' | GeneSymbol=='Anpep' | GeneSymbol=='Aplp1' | GeneSymbol=='Areg' | GeneSymbol=='Basp1' | GeneSymbol=='Bdnf' | GeneSymbol=='Bgn' | GeneSymbol=='Bmp1' | GeneSymbol=='Cadm1' | GeneSymbol=='Cald1' | GeneSymbol=='Calu' | GeneSymbol=='Cap2' | GeneSymbol=='Capg' | GeneSymbol=='Ccn1' | GeneSymbol=='Ccn2' | GeneSymbol=='Cd44' | GeneSymbol=='Cd59' | GeneSymbol=='Cdh11' | GeneSymbol=='Cdh2' | GeneSymbol=='Cdh6' | GeneSymbol=='Col11A1' | GeneSymbol=='Col12A1' | GeneSymbol=='Col16A1' | GeneSymbol=='Col1A1' | GeneSymbol=='Col1A2' | GeneSymbol=='Col3A1' | GeneSymbol=='Col4A1' | GeneSymbol=='Col4A2' | GeneSymbol=='Col5A1' | GeneSymbol=='Col5A2' | GeneSymbol=='Col5A3' | GeneSymbol=='Col6A2' | GeneSymbol=='Col6A3' | GeneSymbol=='Col7A1' | GeneSymbol=='Col8A2' | GeneSymbol=='Colgalt1' | GeneSymbol=='Comp' | GeneSymbol=='Copa' | GeneSymbol=='Crlf1' | GeneSymbol=='Cthrc1' | GeneSymbol=='Cxcl1' | GeneSymbol=='Cxcl12' | GeneSymbol=='Cxcl6' | GeneSymbol=='Cxcl8' | GeneSymbol=='Dab2' | GeneSymbol=='Dcn' | GeneSymbol=='Dkk1' | GeneSymbol=='Dpysl3' | GeneSymbol=='Dst' | GeneSymbol=='Ecm1' | GeneSymbol=='Ecm2' | GeneSymbol=='Edil3' | GeneSymbol=='Efemp2' | GeneSymbol=='Eln' | GeneSymbol=='Emp3' | GeneSymbol=='Eno2' | GeneSymbol=='Fap' | GeneSymbol=='Fas' | GeneSymbol=='Fbln1' | GeneSymbol=='Fbln2' | GeneSymbol=='Fbln5' | GeneSymbol=='Fbn1' | GeneSymbol=='Fbn2' | GeneSymbol=='Fermt2' | GeneSymbol=='Fgf2' | GeneSymbol=='Flna' | GeneSymbol=='Fmod' | GeneSymbol=='Fn1' | GeneSymbol=='Foxc2' | GeneSymbol=='Fstl1' | GeneSymbol=='Fstl3' | GeneSymbol=='Fuca1' | GeneSymbol=='Fzd8' | GeneSymbol=='Gadd45A' | GeneSymbol=='Gadd45B')


hm_tab_hall_EpiMesenchym2 = subset(hm_tab, GeneSymbol=='Gas1' | GeneSymbol=='Gem' | GeneSymbol=='Gja1' | GeneSymbol=='Glipr1' | GeneSymbol=='Gpc1' | GeneSymbol=='Gpx7' | GeneSymbol=='Grem1' | GeneSymbol=='Htra1' | GeneSymbol=='Id2' | GeneSymbol=='Igfbp2' | GeneSymbol=='Igfbp3' | GeneSymbol=='Igfbp4' | GeneSymbol=='Il15' | GeneSymbol=='Il32' | GeneSymbol=='Il6' | GeneSymbol=='Inhba' | GeneSymbol=='Itga2' | GeneSymbol=='Itga5' | GeneSymbol=='Itgav' | GeneSymbol=='Itgb1' | GeneSymbol=='Itgb3' | GeneSymbol=='Itgb5' | GeneSymbol=='Jun' | GeneSymbol=='Lama1' | GeneSymbol=='Lama2' | GeneSymbol=='Lama3' | GeneSymbol=='Lamc1' | GeneSymbol=='Lamc2' | GeneSymbol=='Lgals1' | GeneSymbol=='Lox' | GeneSymbol=='Loxl1' | GeneSymbol=='Loxl2' | GeneSymbol=='Lrp1' | GeneSymbol=='Lrrc15' | GeneSymbol=='Lum' | GeneSymbol=='Magee1' | GeneSymbol=='Matn2' | GeneSymbol=='Matn3' | GeneSymbol=='Mcm7' | GeneSymbol=='Mest' | GeneSymbol=='Mfap5' | GeneSymbol=='Mgp' | GeneSymbol=='Mmp1' | GeneSymbol=='Mmp14' | GeneSymbol=='Mmp2' | GeneSymbol=='Mmp3' | GeneSymbol=='Msx1' | GeneSymbol=='Mxra5' | GeneSymbol=='Myl9' | GeneSymbol=='Mylk' | GeneSymbol=='Nid2' | GeneSymbol=='Nnmt' | GeneSymbol=='Notch2' | GeneSymbol=='Nt5E' | GeneSymbol=='Ntm' | GeneSymbol=='Oxtr' | GeneSymbol=='P3H1' | GeneSymbol=='Pcolce' | GeneSymbol=='Pcolce2' | GeneSymbol=='Pdgfrb' | GeneSymbol=='Pdlim4' | GeneSymbol=='Pfn2' | GeneSymbol=='Plaur' | GeneSymbol=='Plod1' | GeneSymbol=='Plod2')


hm_tab_hall_EpiMesenchym3 = subset(hm_tab, GeneSymbol=='Plod3' | GeneSymbol=='Pmepa1' | GeneSymbol=='Pmp22' | GeneSymbol=='Postn' | GeneSymbol=='Ppib' | GeneSymbol=='Prrx1' | GeneSymbol=='Prss2' | GeneSymbol=='Pthlh' | GeneSymbol=='Ptx3' | GeneSymbol=='Pvr' | GeneSymbol=='Qsox1' | GeneSymbol=='Rgs4' | GeneSymbol=='Rhob' | GeneSymbol=='Sat1' | GeneSymbol=='Scg2' | GeneSymbol=='Sdc1' | GeneSymbol=='Sdc4' | GeneSymbol=='Serpine1' | GeneSymbol=='Serpine2' | GeneSymbol=='Serpinh1' | GeneSymbol=='Sfrp1' | GeneSymbol=='Sfrp4' | GeneSymbol=='Sgcb' | GeneSymbol=='Sgcd' | GeneSymbol=='Sgcg' | GeneSymbol=='Slc6A8' | GeneSymbol=='Slit2' | GeneSymbol=='Slit3' | GeneSymbol=='Snai2' | GeneSymbol=='Sntb1' | GeneSymbol=='Sparc' | GeneSymbol=='Spock1' | GeneSymbol=='Spp1' | GeneSymbol=='Tagln' | GeneSymbol=='Tfpi2' | GeneSymbol=='Tgfb1' | GeneSymbol=='Tgfbi' | GeneSymbol=='Tgfbr3' | GeneSymbol=='Tgm2' | GeneSymbol=='Thbs1' | GeneSymbol=='Thbs2' | GeneSymbol=='Thy1' | GeneSymbol=='Timp1' | GeneSymbol=='Timp3' | GeneSymbol=='Tnc' | GeneSymbol=='Tnfaip3' | GeneSymbol=='Tnfrsf11B' | GeneSymbol=='Tnfrsf12A' | GeneSymbol=='Tpm1' | GeneSymbol=='Tpm2' | GeneSymbol=='Tpm4' | GeneSymbol=='Vcam1' | GeneSymbol=='Vcan' | GeneSymbol=='Vegfa' | GeneSymbol=='Vegfc' | GeneSymbol=='Vim' | GeneSymbol=='Wipf1' | GeneSymbol=='Wnt5A')

hm_tab_hall_EpiMesenchym <-rbind(hm_tab_hall_EpiMesenchym1, hm_tab_hall_EpiMesenchym2, hm_tab_hall_EpiMesenchym3)

hm_tab_hall_EpiMesenchym <- hm_tab_hall_EpiMesenchym %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_EpiMesenchym) = hm_tab_hall_EpiMesenchym$GeneSymbol
hm_hall_EpiMesenchym_annot = data.frame("Sig" = hm_tab_hall_EpiMesenchym$sig2)
rownames(hm_hall_EpiMesenchym_annot) = rownames(hm_tab_hall_EpiMesenchym)

hm_hall_EpiMesenchym <- pheatmap(hm_tab_hall_EpiMesenchym[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_EpiMesenchym$GeneSymbol, fontsize_row = 5, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_EpiMesenchym_annot, legend_labels = "Relative expression", gaps_col=c(7), treeheight_row = 10, main="EpiMesenchym", annotation_colors = ann_colors)

pdf(file="IngCD_hm_hall_EpiMesenchym.pdf",width=7,height=10)
hm_hall_EpiMesenchym
dev.off()

### hallmark adipogenesis

hm_hall_adip <- pheatmap(hm_tab_hall_adip[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_adip$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_adip_annot, legend_labels = "Relative expression", main = "HALLMARK_ADIPOGENESIS genes", annotation_colors = ann_colors, gaps_col=c(7), treeheight_row = 10)

pdf(file="IngCD_hm_hall_adip.pdf",width=7,height=10)
hm_hall_adip
dev.off()

## hallmark oxidative phosphorylation

hm_hall_oxphos <- pheatmap(hm_tab_hall_oxphos[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_oxphos$GeneSymbol, fontsize_row = 6, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_oxphos_annot, legend_labels = "Relative expression", main = "HALLMARK_OXIDATIVE_PHOSPHORYLATION genes", annotation_colors = ann_colors, gaps_col=c(7), treeheight_row = 10, border_colour=NA)

pdf(file="IngCD_hm_hall_oxphos.pdf",width=7,height=10)
hm_hall_oxphos
dev.off()


### re-colour mito genes sumfig

hm_mt_mito2 <- pheatmap(hm_tab_mt_mito2, cluster_rows = TRUE, cluster_cols = FALSE, cutree_rows = 2, legend = FALSE, cellwidth=30, angle_col=45, fontsize_col=6, annotation_row=hm_mt_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial-encoded", show_colnames = FALSE, show_rownames = FALSE, border_color = NA, scale = "none", color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList, annotation_colors = ann_colors)

hm_tab_nucl_mito2 <- as.data.frame(hm_tab_nucl_mito$log2FC)
rownames(hm_tab_nucl_mito2) = hm_tab_nucl_mito$GeneSymbol
hm_tab_nucl_mito2$log2FCdup <- hm_tab_nucl_mito$log2FC

hm_nucl_mito2 <- pheatmap(hm_tab_nucl_mito2, cluster_rows = TRUE, cluster_cols = FALSE, cutree_rows = 3, legend = TRUE, cellwidth=30, angle_col=45, fontsize_col=6, annotation_row=hm_nucl_mito_annot, legend_labels = "Relative expression", main = "Nuclear-encoded", show_colnames = FALSE, , show_rownames = FALSE, border_color = NA, color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList, annotation_colors = ann_colors)

require(cowplot)
require(ggplotify)

pdf(file="IngCD_mito_genes_sumfig.pdf",width=8,height=3)
plot_grid(as.grob(hm_mt_mito2), as.grob(hm_nucl_mito2), ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()



##### hm of hallmark KEGG_pyruvate genes

hm_tab_hall_KEGG_pyruvate = subset(hm_tab, GeneSymbol=='Acaca' | GeneSymbol=='Acacb' | GeneSymbol=='Acat1' | GeneSymbol=='Acat2' | GeneSymbol=='Acot12' | GeneSymbol=='Acss1' | GeneSymbol=='Acss2' | GeneSymbol=='Acyp1' | GeneSymbol=='Acyp2' | GeneSymbol=='Akr1B1' | GeneSymbol=='Aldh1B1' | GeneSymbol=='Aldh2' | GeneSymbol=='Aldh3A2' | GeneSymbol=='Aldh7A1' | GeneSymbol=='Aldh9A1' | GeneSymbol=='Dlat' | GeneSymbol=='Dld' | GeneSymbol=='Glo1' | GeneSymbol=='Grhpr' | GeneSymbol=='Hagh' | GeneSymbol=='Haghl' | GeneSymbol=='Ldha' | GeneSymbol=='Ldhal6A' | GeneSymbol=='Ldhal6B' | GeneSymbol=='Ldhb' | GeneSymbol=='Ldhc' | GeneSymbol=='Ldhd' | GeneSymbol=='Mdh1' | GeneSymbol=='Mdh2' | GeneSymbol=='Me1' | GeneSymbol=='Me2' | GeneSymbol=='Me3' | GeneSymbol=='Pc' | GeneSymbol=='Pck1' | GeneSymbol=='Pck2' | GeneSymbol=='Pdha1' | GeneSymbol=='Pdha2' | GeneSymbol=='Pdhb' | GeneSymbol=='Pklr' | GeneSymbol=='Pkm')

hm_tab_hall_KEGG_pyruvate <- hm_tab_hall_KEGG_pyruvate %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_KEGG_pyruvate) = hm_tab_hall_KEGG_pyruvate$GeneSymbol
hm_hall_KEGG_pyruvate_annot = data.frame("Sig" = hm_tab_hall_KEGG_pyruvate$sig2)
rownames(hm_hall_KEGG_pyruvate_annot) = rownames(hm_tab_hall_KEGG_pyruvate)

hm_hall_KEGG_pyruvate <- pheatmap(hm_tab_hall_KEGG_pyruvate[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_KEGG_pyruvate$GeneSymbol, fontsize_row = 7, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_KEGG_pyruvate_annot, legend_labels = "Relative expression", gaps_col=c(7), treeheight_row = 10, main="KEGG_pyruvate", annotation_colors = ann_colors)

pdf(file="IngCD_hm_hall_KEGG_pyruvate.pdf",width=7,height=7)
hm_hall_KEGG_pyruvate
dev.off()


##### hm of hallmark KEGG_TCA genes

hm_tab_hall_KEGG_TCA = subset(hm_tab, GeneSymbol=='Acly' | GeneSymbol=='Aco1' | GeneSymbol=='Aco2' | GeneSymbol=='Cs' | GeneSymbol=='Dlat' | GeneSymbol=='Dld' | GeneSymbol=='Dlst' | GeneSymbol=='Fh' | GeneSymbol=='Idh1' | GeneSymbol=='Idh2' | GeneSymbol=='Idh3A' | GeneSymbol=='Idh3B' | GeneSymbol=='Idh3G' | GeneSymbol=='Mdh1' | GeneSymbol=='Mdh2' | GeneSymbol=='Ogdh' | GeneSymbol=='Ogdhl' | GeneSymbol=='Pc' | GeneSymbol=='Pck1' | GeneSymbol=='Pck2' | GeneSymbol=='Pdha1' | GeneSymbol=='Pdha2' | GeneSymbol=='Pdhb' | GeneSymbol=='Sdha' | GeneSymbol=='Sdhb' | GeneSymbol=='Sdhc' | GeneSymbol=='Sdhd' | GeneSymbol=='Sucla2' | GeneSymbol=='Suclg1' | GeneSymbol=='Suclg2' | GeneSymbol=='Suclg2P2')

hm_tab_hall_KEGG_TCA <- hm_tab_hall_KEGG_TCA %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_KEGG_TCA) = hm_tab_hall_KEGG_TCA$GeneSymbol
hm_hall_KEGG_TCA_annot = data.frame("Sig" = hm_tab_hall_KEGG_TCA$sig2)
rownames(hm_hall_KEGG_TCA_annot) = rownames(hm_tab_hall_KEGG_TCA)

hm_hall_KEGG_TCA <- pheatmap(hm_tab_hall_KEGG_TCA[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_KEGG_TCA$GeneSymbol, fontsize_row = 7, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_KEGG_TCA_annot, legend_labels = "Relative expression", gaps_col=c(7), treeheight_row = 10, main="KEGG_TCA", annotation_colors = ann_colors)

pdf(file="IngCD_hm_hall_KEGG_TCA.pdf",width=7,height=7)
hm_hall_KEGG_TCA
dev.off()


##### hm of hallmark KEGG_glycol genes

hm_tab_hall_KEGG_glycol = subset(hm_tab, GeneSymbol=='Acss1' | GeneSymbol=='Acss2' | GeneSymbol=='Adh1A' | GeneSymbol=='Adh1B' | GeneSymbol=='Adh1C' | GeneSymbol=='Adh4' | GeneSymbol=='Adh5' | GeneSymbol=='Adh6' | GeneSymbol=='Adh7' | GeneSymbol=='Akr1A1' | GeneSymbol=='Aldh1A3' | GeneSymbol=='Aldh1B1' | GeneSymbol=='Aldh2' | GeneSymbol=='Aldh3A1' | GeneSymbol=='Aldh3A2' | GeneSymbol=='Aldh3B1' | GeneSymbol=='Aldh3B2' | GeneSymbol=='Aldh7A1' | GeneSymbol=='Aldh9A1' | GeneSymbol=='Aldoa' | GeneSymbol=='Aldob' | GeneSymbol=='Aldoc' | GeneSymbol=='Bpgm' | GeneSymbol=='Dlat' | GeneSymbol=='Dld' | GeneSymbol=='Eno1' | GeneSymbol=='Eno2' | GeneSymbol=='Eno3' | GeneSymbol=='Fbp1' | GeneSymbol=='Fbp2' | GeneSymbol=='G6Pc' | GeneSymbol=='G6Pc2' | GeneSymbol=='Galm' | GeneSymbol=='Gapdh' | GeneSymbol=='Gck' | GeneSymbol=='Gpi' | GeneSymbol=='Hk1' | GeneSymbol=='Hk2' | GeneSymbol=='Hk3' | GeneSymbol=='Ldha' | GeneSymbol=='Ldhal6A' | GeneSymbol=='Ldhal6B' | GeneSymbol=='Ldhb' | GeneSymbol=='Ldhc' | GeneSymbol=='Pck1' | GeneSymbol=='Pck2' | GeneSymbol=='Pdha1' | GeneSymbol=='Pdha2' | GeneSymbol=='Pdhb' | GeneSymbol=='Pfkl' | GeneSymbol=='Pfkm' | GeneSymbol=='Pfkp' | GeneSymbol=='Pgam1' | GeneSymbol=='Pgam2' | GeneSymbol=='Pgam4' | GeneSymbol=='Pgk1' | GeneSymbol=='Pgk2' | GeneSymbol=='Pgm1' | GeneSymbol=='Pgm2' | GeneSymbol=='Pklr' | GeneSymbol=='Pkm' | GeneSymbol=='Tpi1')

hm_tab_hall_KEGG_glycol <- hm_tab_hall_KEGG_glycol %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_KEGG_glycol) = hm_tab_hall_KEGG_glycol$GeneSymbol
hm_hall_KEGG_glycol_annot = data.frame("Sig" = hm_tab_hall_KEGG_glycol$sig2)
rownames(hm_hall_KEGG_glycol_annot) = rownames(hm_tab_hall_KEGG_glycol)

hm_hall_KEGG_glycol <- pheatmap(hm_tab_hall_KEGG_glycol[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_KEGG_glycol$GeneSymbol, fontsize_row = 7, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_KEGG_glycol_annot, legend_labels = "Relative expression", gaps_col=c(7), treeheight_row = 10, main="KEGG_glycol", annotation_colors = ann_colors)

pdf(file="IngCD_hm_hall_KEGG_glycol.pdf",width=7,height=7)
hm_hall_KEGG_glycol
dev.off()

##### hm of hallmark KEGG_aminoacyl genes

hm_tab_hall_KEGG_aminoacyl = subset(hm_tab, GeneSymbol=='Aars1' | GeneSymbol=='Aars2' | GeneSymbol=='Cars1' | GeneSymbol=='Cars2' | GeneSymbol=='Dars1' | GeneSymbol=='Dars2' | GeneSymbol=='Ears2' | GeneSymbol=='Eprs1' | GeneSymbol=='Fars2' | GeneSymbol=='Farsa' | GeneSymbol=='Farsb' | GeneSymbol=='Gars1' | GeneSymbol=='Hars1' | GeneSymbol=='Hars2' | GeneSymbol=='Iars1' | GeneSymbol=='Iars2' | GeneSymbol=='Kars1' | GeneSymbol=='Lars1' | GeneSymbol=='Lars2' | GeneSymbol=='Mars1' | GeneSymbol=='Mars2' | GeneSymbol=='Mtfmt' | GeneSymbol=='Nars1' | GeneSymbol=='Nars2' | GeneSymbol=='Pars2' | GeneSymbol=='Pstk' | GeneSymbol=='Qars1' | GeneSymbol=='Rars1' | GeneSymbol=='Rars2' | GeneSymbol=='Sars1' | GeneSymbol=='Sars2' | GeneSymbol=='Sepsecs' | GeneSymbol=='Tars1' | GeneSymbol=='Tars2' | GeneSymbol=='Tars3' | GeneSymbol=='Vars1' | GeneSymbol=='Vars2' | GeneSymbol=='Wars1' | GeneSymbol=='Wars2' | GeneSymbol=='Yars1' | GeneSymbol=='Yars2')

hm_tab_hall_KEGG_aminoacyl <- hm_tab_hall_KEGG_aminoacyl %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_KEGG_aminoacyl) = hm_tab_hall_KEGG_aminoacyl$GeneSymbol
hm_hall_KEGG_aminoacyl_annot = data.frame("Sig" = hm_tab_hall_KEGG_aminoacyl$sig2)
rownames(hm_hall_KEGG_aminoacyl_annot) = rownames(hm_tab_hall_KEGG_aminoacyl)

hm_hall_KEGG_aminoacyl <- pheatmap(hm_tab_hall_KEGG_aminoacyl[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_KEGG_aminoacyl$GeneSymbol, fontsize_row = 7, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_KEGG_aminoacyl_annot, legend_labels = "Relative expression", gaps_col=c(7), treeheight_row = 10, main="KEGG_aminoacyl", annotation_colors = ann_colors)

pdf(file="IngCD_hm_hall_KEGG_aminoacyl.pdf",width=7,height=7)
hm_hall_KEGG_aminoacyl
dev.off()

## top sig genes

library(dplyr)
hm_tab_sig2_up = subset(hm_tab, log2FC > 0)
hm_tab_sig2_up <- hm_tab_sig2_up %>% dplyr::distinct(GeneSymbol, .keep_all=T)
hm_tab_sig2_up <- hm_tab_sig2_up %>% arrange(-neglog_p) %>% slice(1:25)
hm_tab_sig2_down = subset(hm_tab, log2FC < 0)
hm_tab_sig2_down <- hm_tab_sig2_down %>% arrange(-neglog_p) %>% slice(1:25)
hm_tab_sig2 <- rbind(hm_tab_sig2_up, hm_tab_sig2_down)

hm_sig <- pheatmap(hm_tab_sig2[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_sig2$GeneSymbol, fontsize_row = 8, cutree_rows = 2, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, main = "Significantly differentially expressed genes", gaps_col=c(7), treeheight_row = 10)

pdf(file="IngCD_hm_sig.pdf",width=7,height=7)
hm_sig
dev.off()


## use counts tables 


rm(list = ls())

#### PRELIMINARIES ############################################################################################# 

#*Uploads the needed libraries --------------------------------------------------------------------------------

require(DESeq2)

require(ggplot2)

require(data.table)

require(plotly)

require(DT)

require(htmlwidgets)

require(R2HTML)


soft_version <- packageVersion("DESeq2")

#*Set the number of significant digits for the output --------------------------
sig_dig = 4

## Analysis for mfn2 MEFs at dm2

#*Set the working directory ---------------------------------------------------------------------------------

#get the default wd
default_wd <- getwd()

#Set the directory where all the saved outputs will be stored
setwd("/Users/jakemann/RNAseq_Dec20/output_v1/m2_dm2")

new_wd <- getwd()
#### DATA UPLOAD ###############################################################################################################

annotation_table <- read.csv("/Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.95_gene_annotation_table.txt", sep = "\t")

# inputs the list of the count files
input_files <- list.files(path = "/Users/jakemann/RNAseq_Dec20/counts_v1/", pattern = "*tab$", full.names = TRUE)
input_files <- input_files[grep(input_files, pattern="m2_dm2|WT_dm2")]

# inputs the list of the summary files
summary_files <-  list.files(path = "/Users/jakemann/RNAseq_Dec20/counts_v1/", pattern = "summary$", full.names = TRUE)
summary_files <- summary_files[grep(summary_files, pattern="m2_dm2|WT_dm2")]

#Reads the count files (input_files)
#create a list; each element of a list (named ''sample'' in the following) is a count table
counts_tables <- lapply(input_files, fread, header = FALSE, stringsAsFactors = FALSE, skip=2, select=c(1,7), col.names=c("GeneID","Counts"))

#Reads the summary files (summary_files)
#create a list; each element of a list is a summary table
summary_tables <- lapply(summary_files, read.delim, header = FALSE, stringsAsFactors = FALSE, skip=1, quote = "")

#takes the names of the genes from the counts_tables
genes_names <- counts_tables[[1]]$GeneID
genes_number = length(genes_names)

#take the names of each element (sample) of the list from the input files 
samples_names <- substr(noquote(unlist(lapply(basename(input_files), tools::file_path_sans_ext))) ,1,8)

#assign the names to the elements of the counts_tables list, composed by the counts tables; NOTE: each replicate has its ID
names(counts_tables) <- samples_names

#Creates a single data frame with all the samples as columns, for reporting and clustering purposes -- see heatmaps below
counts_tables_dataframe <- sapply(counts_tables, '[[', 2)
#assignes the genes names to the rows of the counts_tables_dataframe
rownames(counts_tables_dataframe) <- genes_names

#assign the names to the elements of the summary_tables list, composed by the summary tables; NOTE: each replicate has its ID
names(summary_tables) <- samples_names

#take the roots of the samples_names; replicates cannot be distinguished here -- set the name of the control 
name_control <- "WT_dm2"
names_mutants <- setdiff(unique((substr(samples_names,1,6))), name_control)

#Creates the datasets_matrix, containing all the names of the datasets and replicates for reporting purposes
datasets_matrix <- matrix(samples_names, nrow=length(grep(name_control, samples_names)), ncol=length(names_mutants)+1)
colnames(datasets_matrix) <- c(names_mutants, name_control)





####PAIRWISE COMPARISONS ####################################################################################################
# *Set the tresholds ----------------------------------------------------------------------------------------------------

lfc = 1.5 #treshold for the ADJUSTED fold changes
pval = 0.01 #treshold for the ADJUSTED pvalues

num_comparisons=1 #loop's counter initialisation

###COMPARISONS, PLOTS AND TABLES LOOP ======================================================================================

# *Start of the loop ------------------------------------------------------------------------------------------------------
while(num_comparisons <= length(names_mutants)){    

  # **Grabbing the data ----------------------------------------------------------------------------------------------------  
  name_mutant <- names_mutants[num_comparisons]  
  
  #extract the needed samples from the whole list
  assign( paste0("counts_tables_", name_control), counts_tables[grep(name_control, samples_names, value = TRUE)]) #extract the controls counts tables 

  assign( paste0("counts_tables_", name_mutant), counts_tables[grep(name_mutant, samples_names, value = TRUE)]) #extract the mutants counts tables 

  assign( paste0("counts_list_", name_control, "_", name_mutant) , c( get( paste0("counts_tables_", name_control)),  get(paste0("counts_tables_", name_mutant)) )) #merges the two counts tables above in one list

  # **Creating the counts matrix needed for DESeq2 AND ... ---------------------------------------------------------------------  

  #creates the counts matrix: each row is a gene, the first n columns are the counts coming from the control's replicates, the last p columns are the counts from the mutant replicates
  assign( paste0( "columns_list_", name_control, "_", name_mutant), sapply(get( paste0("counts_list_", name_control, "_", name_mutant) ), `[[` , 2) )  #takes one column each two (i.e. only the columns containing the counts) from the counts list

  assign( paste0( "counts_matrix_", name_control, "_", name_mutant),  matrix(unlist( get( paste0( "columns_list_", name_control, "_", name_mutant) ) , use.names = FALSE), ncol = length( get( paste0("counts_list_", name_control, "_", name_mutant) ) ) )  )#convert the list into a matrix, for convenience

  assign( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names"), get(  paste0( "counts_matrix_", name_control, "_", name_mutant) ) )  #the counts matrix with names is also created; at this stage is the same of the counts matrix

  # #filters out low counts
  
  # matrix_to_filter <- get(paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names"))
  # summing_rows <- apply(matrix_to_filter, 1, sum)
  # rows_to_keep <- which(summing_rows > 10)
  # matrix_filtered <- matrix_to_filter[rows_to_keep,]
  # genes_names <- names(matrix_filtered)
  # assign( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names"), matrix_filtered)

  #** ... AND Creating the summary matrix ---------------------------------------------------------------------
  #The summary matrix contains, for each comparison, the general information about the counts statistics
  
  #extracts the needed samples from the whole list
  assign( paste0("summary_tables_", name_control), summary_tables[grep(name_control, samples_names, value = TRUE)]) #extract the controls summary tables 
  
  assign( paste0("summary_tables_", name_mutant), summary_tables[grep(name_mutant, samples_names, value = TRUE)]) #extract the mutants summary tables 
  
  assign( paste0("summary_list_", name_control, "_", name_mutant) , c( get( paste0("summary_tables_", name_control)),  get(paste0("summary_tables_", name_mutant)) )) #merges the two summary tables above in one list
  
  #creates the summary matrix: each row is a gene, the first n columns are the counts coming from the control's replicates, the last p columns are the counts from the mutant replicates
  assign( paste0( "columns_list_", name_control, "_", name_mutant), sapply(get( paste0("summary_list_", name_control, "_", name_mutant) ), `[[` , 2) )  #takes one column each two (i.e. only the columns containing the counts) from the counts list
  
  assign( paste0( "summary_matrix_", name_control, "_", name_mutant),  matrix(unlist( get( paste0( "columns_list_", name_control, "_", name_mutant) ) , use.names = FALSE), ncol = length( get( paste0("summary_list_", name_control, "_", name_mutant) ) ) )  )#convert the list into a matrix, for convenience
  
  assign( paste0( "summary_matrix_", name_control, "_", name_mutant, "_with_names"), get(  paste0( "summary_matrix_", name_control, "_", name_mutant) ) )  #the counts matrix with names is also created; at this stage is the same of the counts matrix
  
  
  col_names <-c(grep(name_control, samples_names, value=TRUE),  grep(name_mutant, samples_names, value = TRUE))  # takes the right names for the columns of the counts matrix, from the sample names 

  dummy<- get( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names") )         #workaround for assigning dynamically colnames and rownames to the counts_matrix - START
  colnames(dummy) <- col_names
  assign(  paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names")  ,  dummy)

  dummy<- get( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names") )
  rownames(dummy) <- genes_names
  assign(  paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names")  ,  dummy)    #workaround for assigning dynamically colnames and rownames to the counts_matrix - END

  dummy<- get( paste0( "summary_matrix_", name_control, "_", name_mutant) )         #workaround for assigning dynamically colnames and rownames to the summary_matrix - START
  colnames(dummy) <- col_names
  rownames(dummy) <- summary_tables[[1]][,1]
  assign(  paste0( "summary_matrix_", name_control, "_", name_mutant)  ,  dummy) #workaround for assigning dynamically colnames and rownames to the summary_matrix - END

  # #Evaluating the number of the reads counted and uncounted by HTSEQ2
  total_uncounted <- apply(get(paste0( "summary_matrix_", name_control, "_", name_mutant))[-1,], 2, sum)
  total_counted <- get(paste0( "summary_matrix_", name_control, "_", name_mutant))[1,]
  total_number <- total_uncounted + total_counted
  fraction_counted <- signif(total_counted/total_number, digits=3)
  void_row<-rep(" ", length(total_counted))
  statistics_matrix <- rbind(total_number, total_counted, total_uncounted,fraction_counted,void_row)
  rownames(statistics_matrix)<-c("TOTAL READS MAPPED", "TOTAL READS COUNTED", "TOTAL READS NON COUNTED", "FRACTION COUNTED" , "DETAILS UNCOUNTED:")

    #merging summary matrix and statistics matrix
  dummy<- rbind(statistics_matrix, get( paste0( "summary_matrix_", name_control, "_", name_mutant) )) 
  assign(  paste0( "summary_matrix_", name_control, "_", name_mutant)  ,  dummy)
  
  #**Defining the "experimental design" -----------------------------------
  comparisons <- sapply(col_names, function(x) substr(x,1,6))  #takes only the first parts of the column names; these are the identifiers of the control and mutant's data, irrespectively of the replicates 

  experimental_design <- data.frame(row.names = col_names, comparisons=comparisons)
  experimental_design$correlated <- c(seq(1: length(grep(name_control, col_names)) ),  seq(1: length(grep(name_mutant, col_names)) ) )
  
  #experimental_design$comparisons<- relevel(experimental_design$comparisons, ref=name_control)
  experimental_design$comparisons<- factor(experimental_design$comparisons, levels=c(name_control, name_mutant))
  
  #**Calling DESeq2 ------------------------

  #Creating the dds data structure, needed from DESEQ2
  dds <- DESeqDataSetFromMatrix(countData= get( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names")) , colData=experimental_design, design=~comparisons)
  
  #Calls DEseq2 on dds and store the results in de
  de<-DESeq(dds)

  #Uses the built-in DESEQ2 results operator for creating a matrix-like structure storing the DE analysis results; the structure is stored in res_raw and subsequently converted in a data frame (res) 
  
  res_raw <-results(de)
  res <- signif(as.data.frame(res_raw), digits = sig_dig) #converts into data frame and sets the number of digits
  res <- cbind(rownames(res), res) #adds one column with the genes ID to the res dataframe (it will be useful later on)
  colnames(res) <- c("ID","Mean of norm counts", "log2 FC (MLE)", "lFC Std Err" , "Wald Stat", "Wald test pval", "BH pval") # sets the column names
  
  
  ##*Plots and Tables -----------------------------------------------------------------------------------------------------------------
  
  #**Assigns dynamic names to the table to export, taking the res data frame defined above ---------------------------------- 
  assign(paste0("results_table_",name_control,"_", name_mutant),  res ) #takes the whole res data frame
  dummy<-merge(annotation_table, get(paste0("results_table_",name_control,"_", name_mutant)), by.x="GeneSymbol", by.y="ID")
  assign(paste0("results_table_",name_control,"_", name_mutant), dummy)
  
  
  assign(paste0("results_table_topscore_",name_control,"_", name_mutant), res[which(abs(res$`log2 FC (MLE)`)>lfc & res$`BH pval` <pval),]) #takes only the rows of the res data frame that have the best log2FC and the best BH pval
  dummy<-merge(annotation_table, get(paste0("results_table_topscore_",name_control,"_", name_mutant)), by.x="GeneSymbol", by.y="ID")
  assign(paste0("results_table_topscore_",name_control,"_", name_mutant), dummy)
  
  
  #**Prints the tables above in .csv---------------------------------------------------------------------------------
  
  #write.table(get(paste0("results_table_topscore_",name_control,"_", name_mutant)), file=paste0("results_table_topscore_",name_control,"_", name_mutant, ".tsv"),quote=F,sep="\t", row.names = FALSE)
  
  #write.table(get(paste0("results_table_",name_control,"_", name_mutant)), file=paste0("results_table_",name_control,"_", name_mutant, ".tsv"), quote=F,sep="\t", row.names = FALSE)
  
  #write.table(get(paste0("counts_matrix_",name_control,"_", name_mutant, "_with_names")), file=paste0("counts_matrix_",name_control,"_", name_mutant, ".tsv"), quote=F,sep="\t", row.names = FALSE)
  
  #**Building the datatables ---------------------------------------------------------------------------------------------------------
  #The datatables are widgets created through the saveWidget function; this can "automatically" be sorted clicking on it --> Useful for having a general overview
  
  #***Summingup datatable ------------------------------------------
  #Builds the datatable containing all the resuls of the DE analysis
  
  #Creates the summingup_matrix, which includes only some columns of the correspondent results_table (more handy for visualisation) 
  assign(paste0("summingup_matrix_",name_control, "_", name_mutant), get(paste0("results_table_",name_control,"_", name_mutant))[, c(1:7,10,11)])
  dummy <- get(paste0("summingup_matrix_",name_control, "_", name_mutant))
  rownames(dummy) <- c()
  assign( paste0("summingup_matrix_",name_control, "_", name_mutant), dummy )
  #Creates a dynamic table (widget) of all the results
  assign(paste0("summingup_datatable_",name_control, "_", name_mutant) , datatable(get(paste0("summingup_matrix_",name_control, "_", name_mutant))) )
  #saves the datatable widget to in the working directory
  saveWidget( get(paste0("summingup_datatable_",name_control, "_", name_mutant)), file= paste0("summingup_datatable_",name_control, "_", name_mutant, ".html") )

  #***Topscores datatable ----------------------------------------- 
  #Builds the matrix containing only the top log2FC (adjusted) top scores (independently on the pvalues)
  assign(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant),  subset(get(paste0("summingup_matrix_",name_control, "_", name_mutant)),  (abs(get(paste0("summingup_matrix_",name_control, "_", name_mutant))[,"log2 FC (MLE)"]) >lfc &  get(paste0("summingup_matrix_",name_control, "_", name_mutant))[,"BH pval"] <pval )  ) ) 
  dummy <- get(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant))
  rownames(dummy) <- c()
  assign( paste0("summingup_matrix_topscores_",name_control, "_", name_mutant), dummy )
  #Creates a dynamic table (widget) of the topscores
  assign(paste0("topscores_datatable_",name_control, "_", name_mutant) , datatable(get(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant))) )
  #saves the datatable widget to in the working directory
  saveWidget( get(paste0("topscores_datatable_",name_control, "_", name_mutant)), file= paste0("topscores_datatable_",name_control, "_", name_mutant, ".html") )

  #**Dispersion plot---------------------------------------------------------------------------------------------
  #This will not be stored or printed; for sanity check purposes only
  plotDispEsts(de, main=paste(name_mutant, " vs ", name_control))

  #**MA plot -----------------------------------------------------------------------------------------------------
  #Plot of the mean of normalised (according to DESEq) counts of the control vs. the log2fold change "corrected as well"
  #***Plot static MA -------------------------------------------------------------------------------------------------- 

  #Creates the dataframe for ggplot
  MA_dataframe <- data.frame(Ln_mean=log(res$`Mean of norm counts`), foldchange = res$`log2 FC (MLE)`, pvaladj=res$`BH pval`)
  rownames(MA_dataframe) <- rownames(res)
  MA_dataframe <- MA_dataframe[which(!is.na(MA_dataframe$foldchange)), ]
  MA_dataframe$Diff_Exp <- rep(0, nrow(MA_dataframe))
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)>=lfc  )] <- "Relevant log2 FC" 
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)>=lfc & MA_dataframe$pvaladj<=pval)] <- "Relevant log2 FC and Pval" 
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)<lfc)] = "Non significant" 

  #Creates the ggplot
  r <-ggplot(MA_dataframe, aes(x=Ln_mean, y=foldchange, text=rownames(MA_dataframe)))+
    geom_point(aes(colour= Diff_Exp), size=.5)+
    geom_hline(yintercept=0, linetype=1, color="green") + geom_hline(yintercept=lfc,linetype=3, color="green") + geom_hline(yintercept=-lfc, linetype=3, color="green")+
    scale_colour_manual(values = c("Relevant log2 FC and Pval" ="red", "Non significant" = "black", "Relevant log2 FC" ="blue"))+
    xlab("ln mean of norm. counts") + ylab("log2 fold change")+ scale_x_continuous(labels = function(x)as.integer(exp(x)))+
    #+ylim(-4, 4)
    labs(aesthetic='custom text')+
    ggtitle(paste("MA plot", name_control, "vs.", name_mutant))

  #Saves the plot in a variable
  assign(paste("static", "MAplot", name_control, name_mutant, sep = "_"), r)

  #Saves the pdf of the plot in the OUTPUT directory
  pdf(file= paste("static", "MAplot", name_control, name_mutant, ".pdf", sep = "_"))
  print(r)
  dev.off()

  #***Plot dynamic MA -------------------------------------------------------------------------------------------------- 

  #Creates the plot
  s<- ggplotly(r, tooltip=c("text", "x", "y") )

  #SAves the plot in a variable
  assign(paste("dynamic", "MAplot", name_control, name_mutant, sep = "_"), s)

  #Saves the WIDGET of the plot in the OUTPUT directory
  print(s)
  saveWidget(s, file= paste0("dynamic_MAplot",name_control, "_", name_mutant, ".html") )

  #**Volcano Plots --------------------------------------------------------------

  #***Plot static volcano--------------------------------------------------------

  #creates a data frame with some of the columns taken from res which, in turn, summarises the DESEq2 results
  tab = data.frame(logFC = res$`log2 FC (MLE)`, negLogPval = -log10(res$`BH pval`))
  rownames(tab) <- rownames(res)

  #Identifies the DE genes
  candidate_results <- subset(res, (abs(res$`log2 FC (MLE)`) > lfc & res$`BH pval` < pval))
  assign( paste0("candidate_results_tab_",name_control,"_",name_mutant), subset(tab, (abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval))) )

  #Identifies the not DE genes
  non_candidate_results <- subset(res, (abs(res$`log2 FC (MLE)`) <= lfc | res$`BH pval` >= pval))
  assign(paste0("non_candidate_results_tab_",name_control,"_",name_mutant), subset(tab, (abs(tab$logFC) <= lfc | tab$negLogPval <= -log10(pval))) )

  #Mark DE and non DE genes in the dataframe 
  dummy <- get(paste0("non_candidate_results_tab_",name_control,"_",name_mutant))
  dummy$Diff_Exp <- "DE -"
  assign(paste0("non_candidate_results_tab_",name_control,"_",name_mutant), dummy)

  dummy <- get(paste0("candidate_results_tab_",name_control,"_",name_mutant))
  if(nrow(dummy)>0){dummy$Diff_Exp <- "DE +"}
  assign(paste0("candidate_results_tab_",name_control,"_",name_mutant), dummy)

  #merge the "candidate" and "non candidate" dataframes
  assign(paste0("results_tab_",name_control,"_",name_mutant), rbind(get(paste0("candidate_results_tab_",name_control,"_",name_mutant)), get(paste0("non_candidate_results_tab_",name_control,"_",name_mutant)) ))

  #builds the ggplot
  h<-ggplot( get(paste0("results_tab_",name_control,"_",name_mutant)), aes(x=logFC, y=negLogPval, text=rownames(get(paste0("results_tab_",name_control,"_",name_mutant))) ) )+
   geom_point(aes(colour= Diff_Exp), size=.5)+
   geom_hline(yintercept=-log10(pval), linetype=3, color="green") + geom_vline(xintercept=-c(-lfc, lfc), linetype=3, color="blue")+
   scale_colour_manual(values = c("DE +" ="red", "DE -" = "black"))+
   xlab("log2 fold change") + ylab("-log10 pvalue")+ 
   ggtitle(paste("Volcano plot", name_control, "vs.", name_mutant))

  #Saves the plot in a variable
  assign(paste("static", "Vplot", name_control, name_mutant, sep = "_"), h)

  #Saves the pdf of the plot in the OUTPUT directory
  pdf(file= paste("static", "Vplot", name_control, name_mutant, ".pdf", sep = "_"))
  print(h)
  dev.off()

  #***Plot dynamic volcano----------------------------------------------------------------------------------------------------------

  #Creates the plot
  k<- ggplotly(h, tooltip=c("text", "x", "y") )

  #Saves the plot in a variable
  assign(paste("dynamic", "Vplot", name_control, name_mutant, sep = "_"), k)

  print(k)

  #Saves the WIDGET of the plot in the OUTPUT directory
  saveWidget(k, file= paste0("dynamic_Vplot",name_control, "_", name_mutant, ".html") )

  #Updates the loop counter
  print(num_comparisons)
  num_comparisons= num_comparisons +1
} 
#*End of the loop --------------------------------------------


# #PRODUCES ADDITIONAL TABLES =================================================

#**Produces the genes_lenghts  ---------------------------------------------------------------
#takes the genes lengths from the first feature counts input file and creates the genes_lenghts table
feature_counts_table <- fread(input_files[[1]])
genes_lenghts <- as.matrix(feature_counts_table$Length)
rownames(genes_lenghts) <- feature_counts_table$Geneid
colnames(genes_lenghts) <- "Lenght"

#**Produces the annotation_table_with_length ---------------------------------------------------------------
annotation_table_with_length <- merge(annotation_table, genes_lenghts, all.x=T, by.x="GeneSymbol", by.y="row.names")

#** Raw counts, CPM, TPM  ---------------------------------------------------------------

# produces the raw_counts matrix
# merges the raw_counts matrix (all the raw counts for each sample) with the genes_lenghts_table
raw_counts <- (merge(annotation_table_with_length, counts(de), by.x="GeneSymbol", by.y="row.names", all.x=T))
write.csv(raw_counts, file="raw_counts.csv", row.names=FALSE)

# produces the Raw Counts Normalised (DESeq2 normalisation) table 
raw_counts_normalised <- (merge(annotation_table_with_length, counts(de, normalized=T), by.x="GeneSymbol", by.y="row.names", all.x=T))
write.csv(raw_counts_normalised, file="raw_counts_normalised.csv", row.names=FALSE)

# computes the CPM on the raw counts
CPM_working = subset(raw_counts, select = c(7:ncol(raw_counts)))
CPM_working$sum <- rowSums(CPM_working)
CPM <- apply(raw_counts[,c(7:ncol(raw_counts))],2, function(x){x*10^6/CPM_working$sum})
CPM <- cbind(raw_counts[,c(1:6)],CPM)
write.csv(CPM, file="raw_counts_CPM.csv", row.names=FALSE)

# computes the TPM
RPK <-  (raw_counts[,c(7:ncol(raw_counts))])/(raw_counts$Lenght/1000)  #<- Reads Per Kilobase (Normalises the counts for the genes length, expressed in kilobases)
Scaling_factor <- apply(RPK,2,sum)/10^6
TPM <- sweep(RPK, 2, Scaling_factor, FUN = '/')
TPM <- cbind(raw_counts[,c(1:6)],TPM)
write.csv(TPM, file="raw_counts_TPM.csv", row.names=FALSE)

#** Produces the results_tables  ---------------------------------------------------------------

#computes the average CPM for controls and mutants
assign(paste0("average_",name_control), apply(CPM[,grep(colnames(CPM), pattern=name_control)],1,mean ) )
dummy<-as.data.frame(get(paste0("average_",name_control)))
colnames(dummy) <- paste0("Average CPM ",name_control)
rownames(dummy) <- CPM$gene_id
assign(paste0("average_",name_control), dummy)
#
assign(paste0("average_",names_mutants), apply(CPM[,grep(colnames(CPM), pattern=names_mutants)],1,mean ) )
dummy<-as.data.frame(get(paste0("average_",names_mutants)))
colnames(dummy) <- paste0("Average CPM ",names_mutants)
rownames(dummy) <- CPM$gene_id
assign(paste0("average_",names_mutants), dummy)
#
#merges the averages CPMs tables with the results table and the genes_length table
dummy<- merge(get(paste0("average_",name_control)),  get(paste0("average_",names_mutants)), by="row.names") 
rownames(dummy) <- dummy$Row.names
dummy<- dummy[,-1]
#
assign(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM"), merge( get(paste0("results_table_",name_control,"_", names_mutants)), dummy, by.y="row.names", by.x="gene_id") ) 
assign(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM"), merge( get(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM")), genes_lenghts, by.x="GeneSymbol", by.y="row.names", all.x=T ) )
write.csv(get(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM")), file=paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM.csv"), row.names = FALSE)
#
assign(paste0("results_table_topscore_", name_control,"_", names_mutants, "_", "CPM"), merge( get(paste0("results_table_topscore_",name_control,"_", names_mutants)), dummy, by.y="row.names", by.x="gene_id") ) 
assign(paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM"), merge( get(paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM")), genes_lenghts, by.x="GeneSymbol", by.y="row.names", all.x=T ) )
write.csv(get(paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM")), file=paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM.csv"), row.names = FALSE)

#**Filters the counts matrix  according to the CPM ------------------------

# # Filters the counts matrix eliminating the rows where at least one element violates the condition (low counts threshold)

count_zeroes<- function(x){length(which(x<=.5))}
numberofzeroes <- apply(CPM[,c(7:ncol(CPM))], 1, count_zeroes)
CPM_filtered <- CPM[which(numberofzeroes<=5),]
# write.csv(counts_matrix_cpm_filtered, file="cpm_counts_filtered.csv")
# 
#Filters the results_mtrx with the same criteria above 
results_mtrx <- get(paste0("results_table_",name_control,"_", name_mutant, "_CPM"))
results_mtrx_filtered <- results_mtrx[which(results_mtrx$gene_id %in% CPM_filtered$gene_id), ]
#write.csv(results_mtrx, file="results_table.csv", row.names = FALSE)
write.csv(results_mtrx_filtered, file="results_table_CPM_filtered.csv", row.names = FALSE)
#Filters the results_mtrx with the same criteria above 
results_mtrx <- get(paste0("results_table_",name_control,"_", name_mutant, "_CPM"))
results_mtrx_filtered <- results_mtrx[which(results_mtrx$gene_id %in% CPM_filtered$gene_id), ]
#write.csv(results_mtrx, file="results_table.csv", row.names = FALSE)
write.csv(results_mtrx_filtered, file="results_table_CPM_filtered.csv", row.names = FALSE)

results_mtrx_topscore <- get(paste0("results_table_topscore_",name_control,"_", name_mutant, "_CPM"))
results_mtrx_topscore_filtered <- results_mtrx_topscore[which(results_mtrx_topscore$gene_id %in% CPM_filtered$gene_id), ]
write.csv(results_mtrx_topscore_filtered, file="results_table_CPM_topscore_filtered.csv", row.names = FALSE)

#CREATES A HEATMAP =================================================
library(gplots)
#class(CPM_filtered) <- "numeric"
#CPM_filtered_resorted <-CPM_filtered[order(CPM_filtered[,7], decreasing = TRUE),]
#class(CPM_filtered_resorted) <- "numeric"
CPM_filtered_heat <- as.matrix(CPM_filtered[,c(7:ncol(CPM))])
class(CPM_filtered_heat) <- "numeric"

CPM_filtered_heat_sorted <-CPM_filtered_heat[order(CPM_filtered_heat[,1], decreasing = TRUE),]

pdf(file="m2_dm2_hm.pdf")
heatmap.2(CPM_filtered_heat_sorted[c(1:7000),], distfun=function(x) dist(x, method="minkowski"), hclustfun=function(x) hclust(x, method="ward.D2"), scale="row", trace = 'none', labRow = FALSE, dendrogram="column", margins=c(8,1), cexCol = .75)
dev.off()



# #CREATES THE TABLE FOR GSEA =====================================================
# #The data are taken from the res_raw table.
GSEA_table <- data.frame(Sign= sign(res_raw$log2FoldChange), pval=(res_raw$padj),stringsAsFactors = FALSE)
GSEA_table$metric <- -log10(GSEA_table$pval)/GSEA_table$Sign
rownames(GSEA_table) <- rownames(res_raw)

GSEA_input_ranked_table <- cbind(rownames(GSEA_table), GSEA_table$metric)
colnames(GSEA_input_ranked_table) <- cbind("Gene name", "Metric")
GSEA_input_ranked_table<-GSEA_input_ranked_table[-which(is.na(GSEA_input_ranked_table[,"Metric"])),]

write.table(GSEA_input_ranked_table, file=paste0("GSEA_input_ranked_table_",name_control,"_", name_mutant, ".rnk"), quote=F,sep="\t", row.names = FALSE)




## further analysis, interpretation, and figures =====================================================
require(dplyr)


vplot_tab <- merge(results_table_WT_dm2_m2_dm2_CPM, annotation_table, by="gene_id")
vplot_tab <- vplot_tab %>% rename("BH_pval" = "BH pval")
vplot_tab <- vplot_tab %>% rename("log2FC" = "log2 FC (MLE)")

########## make volcano plot 
library(ggplot2)
library(ggrepel)
library(dplyr)
library(pheatmap)

vplot_tab$neglog_p = -log10(vplot_tab$BH_pval)
vplot_tab <- vplot_tab[complete.cases(vplot_tab), ]

############  edit formatting of signficance for labelleing

vplot_tab$significant = ifelse(vplot_tab$neglog_p > 2 & vplot_tab$log2FC <=-1.5 | vplot_tab$neglog_p > 2 & vplot_tab$log2FC>=1.5, "sig", "not")
vplot_tab_label1 = subset(vplot_tab, neglog_p > 250)
vplot_tab_label2 = subset(vplot_tab, neglog_p > 150)
vplot_tab_label2 <- subset(vplot_tab_label2, log2FC <=-5 | log2FC>=5)
vplot_tab_label3 = subset(vplot_tab_label2, log2FC <=-5)
vplot_tab_label4 = subset(vplot_tab, neglog_p > 50 & vplot_tab$log2FC <=-7 | vplot_tab$neglog_p > 50 & vplot_tab$log2FC>=8)
vplot_tab_label_final <- rbind(vplot_tab_label1, vplot_tab_label2)
vplot_tab_label_final <- rbind(vplot_tab_label_final, vplot_tab_label3)
vplot_tab_label_final <- rbind(vplot_tab_label_final, vplot_tab_label4)
vplot_tab_label_final <- vplot_tab_label_final %>% distinct(GeneSymbol.x, .keep_all = TRUE)

############

m2_dm2_vol <- ggplot(data=vplot_tab, aes(x=log2FC, y=neglog_p, colour=significant)) + geom_point(alpha=0.7, size=1.75) + xlab("Log2 Fold change") + ylab("-log10 p-value") + theme_classic() + theme(legend.position="none") + geom_text_repel(data = vplot_tab_label_final, aes(label = GeneSymbol.x), color="black",size = 3, key_glyph = "point") + theme(plot.title = element_text(hjust = 0.2)) + ggtitle("m1_dm2") + scale_colour_manual(values = c("#999999", "#009E73")) + scale_y_continuous(labels = scales::comma, expand = c(0,5), breaks = seq(0, 300, 50), limits=c(0, 300))

pdf(file="m2_dm2_vol.pdf",width=4,height=4.5)
m2_dm2_vol
dev.off()

############

######################## make heatmaps

##### hm of significantly differentially expressed genes

vplot_tab_hm <- vplot_tab
vplot_tab_hm$significant = ifelse(vplot_tab$BH_pval <=.0001 & vplot_tab$log2FC <=-3 | vplot_tab$log2FC>=2.2, "sig", "not")
vplot_tab_hm$sig2 = ifelse(vplot_tab$BH_pval <=.01, "sig", "not")


norm_counts <- as.data.frame(counts(de, normalized=T))
norm_counts$GeneSymbol <- rownames(norm_counts)
numberofzeroes <- apply(norm_counts[,c(1:ncol(norm_counts))], 1, count_zeroes)
norm_counts_filtered <- norm_counts[which(numberofzeroes<=5),]
norm_counts_filtered$GeneSymbol.x <- rownames(norm_counts_filtered)

hm_tab <- merge(norm_counts_filtered, vplot_tab_hm, by="GeneSymbol.x")
hm_tab <- hm_tab %>% rename("GeneSymbol.x" = "GeneSymbol")
hm_tab <- hm_tab[complete.cases(hm_tab), ]
write.table(hm_tab, file="norm_counts_gsea.csv",sep=",")

hm_tab_sig = subset(hm_tab, significant=="sig")

hm_sig <- pheatmap(hm_tab_sig[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", cutree_rows = 7, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, main = "Significantly differentially expressed genes")

pdf(file="m2_dm2_hm_sig.pdf",width=8,height=10)
hm_sig
dev.off()


##### hm of adipogenesis-related genes

hm_tab_adip = subset(hm_tab, GeneSymbol=="Lep" | GeneSymbol=="Adipoq" | GeneSymbol=="Cd36" | GeneSymbol=="Pparg" | GeneSymbol=="Glut4" | GeneSymbol=="Fasn"| GeneSymbol=="Plin1"| GeneSymbol=="Plin2"| GeneSymbol=="Plin4"| GeneSymbol=="Fabp4"| GeneSymbol=="Isnr"| GeneSymbol=="Lpl"| GeneSymbol=="Agpat2"| GeneSymbol=="Bscl2"| GeneSymbol=="Cidec"| GeneSymbol=="Cebpa"| GeneSymbol=="Acaca"| GeneSymbol=="Ppargc1a"| GeneSymbol=="Ppargc1b"| GeneSymbol=="Slc2a4" )

rownames(hm_tab_adip) = hm_tab_adip$GeneSymbol
hm_adip_annot = data.frame("Sig" = hm_tab_adip$sig2)
rownames(hm_adip_annot) = rownames(hm_tab_adip)

hm_adip <- pheatmap(hm_tab_adip[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_adip$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_adip_annot, legend_labels = "Relative expression", main = "Adipogenesis-related genes")

pdf(file="m2_dm2_hm_adip.pdf",width=5,height=6)
hm_adip
dev.off()

##### hm of ISR-related genes

hm_tab_ISR = subset(hm_tab, GeneSymbol=="Atf4" | GeneSymbol=="Atf5" |GeneSymbol=="Atf6" | GeneSymbol=="Xbp1" | GeneSymbol=="Gdf15" | GeneSymbol=="Fgf21" | GeneSymbol=="Trib3"| GeneSymbol=="Eif2ak4"| GeneSymbol=="Ddit3"| GeneSymbol=="Gadd34"| GeneSymbol=="Perk"| GeneSymbol=="Eif2ak1"| GeneSymbol=="Hif1a")
hm_tab_ISR <- hm_tab_ISR %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_ISR) = hm_tab_ISR$GeneSymbol
hm_ISR_annot = data.frame("Sig" = hm_tab_ISR$sig2)
rownames(hm_ISR_annot) = rownames(hm_tab_ISR)

hm_ISR <- pheatmap(hm_tab_ISR[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_ISR$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_ISR_annot, main = "ISR genes")

pdf(file="m2_dm2_hm_ISR.pdf",width=5,height=6)
hm_ISR
dev.off()

##### hm of mitochondrial-related genes

hm_tab_mito = subset(hm_tab, GeneSymbol=="Mfn1" | GeneSymbol=="Mfn2" | GeneSymbol=="Opa1" | GeneSymbol=="Fis1" | GeneSymbol=="Tomm20" | GeneSymbol=="Ppargc1a"| GeneSymbol=="Ppargc1b"| GeneSymbol=="Cs" | GeneSymbol=='mt-Rnr1' | GeneSymbol=='mt-Rnr2' | GeneSymbol=='mt-Tl1' | GeneSymbol=='mt-Nd1' | GeneSymbol=='mt-Ti' | GeneSymbol=='mt-Tq' | GeneSymbol=='mt-Tm' | GeneSymbol=='mt-Nd2' | GeneSymbol=='mt-Tw' | GeneSymbol=='mt-Ta' | GeneSymbol=='mt-Tn' | GeneSymbol=='mt-Tc' | GeneSymbol=='mt-Ty' | GeneSymbol=='mt-Co1' | GeneSymbol=='mt-Ts1' | GeneSymbol=='mt-Td' | GeneSymbol=='mt-Co2' | GeneSymbol=='mt-Atp8' | GeneSymbol=='mt-Atp6' | GeneSymbol=='mt-Co3' | GeneSymbol=='mt-Tg' | GeneSymbol=='mt-Nd3' | GeneSymbol=='mt-Tr' | GeneSymbol=='mt-Nd4' | GeneSymbol=='mt-Th' | GeneSymbol=='mt-Ts2' | GeneSymbol=='mt-Tl2' | GeneSymbol=='mt-Nd5' | GeneSymbol=='mt-Nd6' | GeneSymbol=='mt-Te' | GeneSymbol=='mt-Cytb' | GeneSymbol=='mt-Tt' | GeneSymbol=='mt-Tp' | GeneSymbol=='mt-Nd4l' | GeneSymbol=='Sdha' | GeneSymbol=="Prkn" | GeneSymbol=="Pink1" | GeneSymbol=="Bnip3" | GeneSymbol=="Nrf1" | GeneSymbol==""| GeneSymbol=="Mff"| GeneSymbol=="Cycs")
hm_tab_mito <- hm_tab_mito %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_mito) = hm_tab_mito$GeneSymbol
hm_mito_annot = data.frame("Sig" = hm_tab_mito$sig2)
rownames(hm_mito_annot) = rownames(hm_tab_mito)

hm_mito <- pheatmap(hm_tab_mito[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_mito$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial function-related genes")

pdf(file="m2_dm2_hm_mito.pdf",width=5,height=6)
hm_mito
dev.off()

##### hm of inflammation-related genes

hm_tab_inflam = subset(hm_tab, GeneSymbol=='Ifng' |GeneSymbol=='Cd68' |GeneSymbol=='Cd11b' |GeneSymbol=='Itgam' |GeneSymbol=='Ccl2' |GeneSymbol=='Cd4' |GeneSymbol=='Cd3g' |GeneSymbol=='Cd8a' |GeneSymbol=='Tnf' |GeneSymbol=='Il1b' |GeneSymbol=='Il4' |GeneSymbol=='Il13' |GeneSymbol=='Il10' |GeneSymbol=='Ptprc' |GeneSymbol=='Adgre1' |GeneSymbol=='Il6' |GeneSymbol=='Mif' |GeneSymbol=='Tlr4')
hm_tab_inflam <- hm_tab_inflam %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_inflam) = hm_tab_inflam$GeneSymbol
hm_inflam_annot = data.frame("Sig" = hm_tab_inflam$sig2)
rownames(hm_inflam_annot) = rownames(hm_tab_inflam)

hm_inflam <- pheatmap(hm_tab_inflam[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_inflam$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_inflam_annot, legend_labels = "Relative expression", main = "Inflammatory genes")

pdf(file="m2_dm2_hm_inflam.pdf",width=5,height=6)
hm_inflam
dev.off()


##### hm of fibrosis-related genes

hm_tab_fibros = subset(hm_tab, GeneSymbol=='Tgfb1' |GeneSymbol=='Sod1' |GeneSymbol=='Hif1a' |GeneSymbol=='Pdgfa' |GeneSymbol=='Gtf2ird1' |GeneSymbol=='Inhba' |GeneSymbol=='Rock1')
hm_tab_fibros <- hm_tab_fibros %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_fibros) = hm_tab_fibros$GeneSymbol
hm_fibros_annot = data.frame("Sig" = hm_tab_fibros$sig2)
rownames(hm_fibros_annot) = rownames(hm_tab_fibros)

hm_fibros <- pheatmap(hm_tab_fibros[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_fibros$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_fibros_annot, legend_labels = "Relative expression", main = "Fibrosis-related genes")

pdf(file="m2_dm2_hm_fibros.pdf",width=5,height=6)
hm_fibros
dev.off()



##### hm of hallmark adipogenesis genes

hm_tab_hall_adip1 = subset(hm_tab, GeneSymbol=='Abca1' |GeneSymbol=='Abcb8' |GeneSymbol=='Acaa2' |GeneSymbol=='Acadl' |GeneSymbol=='Acadm' |GeneSymbol=='Acads' |GeneSymbol=='Acly' |GeneSymbol=='Aco2' |GeneSymbol=='Acox1' |GeneSymbol=='Adcy6' |GeneSymbol=='Adig' |GeneSymbol=='Adipoq' |GeneSymbol=='Adipor2' |GeneSymbol=='Agpat3' |GeneSymbol=='Aifm1' |GeneSymbol=='Ak2' |GeneSymbol=='Aldh2' |GeneSymbol=='Aldoa' |GeneSymbol=='Angpt1' |GeneSymbol=='Angptl4' |GeneSymbol=='Aplp2' |GeneSymbol=='Apoe' |GeneSymbol=='Araf' |GeneSymbol=='Arl4A' |GeneSymbol=='Atl2' |GeneSymbol=='Atp1B3' |GeneSymbol=='Atp5Po' |GeneSymbol=='Baz2A' |GeneSymbol=='Bckdha' |GeneSymbol=='Bcl2L13' |GeneSymbol=='Bcl6' |GeneSymbol=='C3' |GeneSymbol=='Cat' |GeneSymbol=='Cavin1' |GeneSymbol=='Cavin2' |GeneSymbol=='Ccng2' |GeneSymbol=='Cd151' |GeneSymbol=='Cd302' |GeneSymbol=='Cd36' |GeneSymbol=='Cdkn2C' |GeneSymbol=='Chchd10' |GeneSymbol=='Chuk' |GeneSymbol=='Cidea' |GeneSymbol=='Cmbl' |GeneSymbol=='Cmpk1' |GeneSymbol=='Col15A1' |GeneSymbol=='Col4A1' |GeneSymbol=='Coq3' |GeneSymbol=='Coq5' |GeneSymbol=='Coq9' |GeneSymbol=='Cox6A1' |GeneSymbol=='Cox7B' |GeneSymbol=='Cox8A' |GeneSymbol=='Cpt2' |GeneSymbol=='Crat' |GeneSymbol=='Cs' |GeneSymbol=='Cyc1' |GeneSymbol=='Cyp4B1' |GeneSymbol=='Dbt' |GeneSymbol=='Ddt' |GeneSymbol=='Decr1' |GeneSymbol=='Dgat1' |GeneSymbol=='Dhcr7' |GeneSymbol=='Dhrs7' |GeneSymbol=='Dhrs7B' |GeneSymbol=='Dlat' |GeneSymbol=='Dld' |GeneSymbol=='Dnajb9' |GeneSymbol=='Dnajc15' |GeneSymbol=='Dram2' |GeneSymbol=='Ech1' |GeneSymbol=='Echs1' |GeneSymbol=='Elmod3' |GeneSymbol=='Elovl6' |GeneSymbol=='Enpp2' |GeneSymbol=='Ephx2' |GeneSymbol=='Esrra' |GeneSymbol=='Esyt1' |GeneSymbol=='Etfb' |GeneSymbol=='Fabp4' |GeneSymbol=='Fah' |GeneSymbol=='Fzd4' |GeneSymbol=='G3Bp2' |GeneSymbol=='Gadd45A' |GeneSymbol=='Gbe1' |GeneSymbol=='Ghitm' |GeneSymbol=='Gpam' |GeneSymbol=='Gpat4' |GeneSymbol=='Gpd2' |GeneSymbol=='Gphn' |GeneSymbol=='Gpx3' |GeneSymbol=='Gpx4' |GeneSymbol=='Grpel1' |GeneSymbol=='Hadh' |GeneSymbol=='Hibch' |GeneSymbol=='Hspb8' |GeneSymbol=='Idh1' |GeneSymbol=='Idh3A' |GeneSymbol=='Idh3G' |GeneSymbol=='Ifngr1' |GeneSymbol=='Immt' |GeneSymbol=='Itga7' |GeneSymbol=='Itih5' |GeneSymbol=='Itsn1' |GeneSymbol=='Jagn1' |GeneSymbol=='Lama4' |GeneSymbol=='Lep' |GeneSymbol=='Lifr' |GeneSymbol=='Lipe' |GeneSymbol=='Lpcat3' |GeneSymbol=='Lpl' |GeneSymbol=='Ltc4S' |GeneSymbol=='Map4K3' |GeneSymbol=='Mccc1' |GeneSymbol=='Mdh2' |GeneSymbol=='Me1' |GeneSymbol=='Mgll' |GeneSymbol=='Mgst3' |GeneSymbol=='Miga2' |GeneSymbol=='Mrap' |GeneSymbol=='Mrpl15' |GeneSymbol=='Mtarc2')

hm_tab_hall_adip2 = subset(hm_tab, GeneSymbol=='Mtch2' |GeneSymbol=='Mylk' |GeneSymbol=='Nabp1' |GeneSymbol=='Ndufa5' |GeneSymbol=='Ndufab1' |GeneSymbol=='Ndufb7' |GeneSymbol=='Ndufs3' |GeneSymbol=='Nkiras1' |GeneSymbol=='Nmt1' |GeneSymbol=='Omd' |GeneSymbol=='Orm1' |GeneSymbol=='Pdcd4' |GeneSymbol=='Pemt' |GeneSymbol=='Pex14' |GeneSymbol=='Pfkfb3' |GeneSymbol=='Pfkl' |GeneSymbol=='Pgm1' |GeneSymbol=='Phldb1' |GeneSymbol=='Phyh' |GeneSymbol=='Pim3' |GeneSymbol=='Plin2' |GeneSymbol=='Por' |GeneSymbol=='Pparg' |GeneSymbol=='Ppm1B' |GeneSymbol=='Ppp1R15B' |GeneSymbol=='Prdx3' |GeneSymbol=='Preb' |GeneSymbol=='Ptcd3' |GeneSymbol=='Ptger3' |GeneSymbol=='Qdpr' |GeneSymbol=='Rab34' |GeneSymbol=='Reep5' |GeneSymbol=='Reep6' |GeneSymbol=='Retn' |GeneSymbol=='Retsat' |GeneSymbol=='Riok3' |GeneSymbol=='Rmdn3' |GeneSymbol=='Rnf11' |GeneSymbol=='Rreb1' |GeneSymbol=='Rtn3' |GeneSymbol=='Samm50' |GeneSymbol=='Scarb1' |GeneSymbol=='Scp2' |GeneSymbol=='Sdhb' |GeneSymbol=='Sdhc' |GeneSymbol=='Slc19A1' |GeneSymbol=='Slc1A5' |GeneSymbol=='Slc25A1' |GeneSymbol=='Slc25A10' |GeneSymbol=='Slc27A1' |GeneSymbol=='Slc5A6' |GeneSymbol=='Slc66A3' |GeneSymbol=='Sncg' |GeneSymbol=='Sod1' |GeneSymbol=='Sorbs1' |GeneSymbol=='Sowahc' |GeneSymbol=='Sparcl1' |GeneSymbol=='Sqor' |GeneSymbol=='Sspn' |GeneSymbol=='Stat5A' |GeneSymbol=='Stom' |GeneSymbol=='Suclg1' |GeneSymbol=='Sult1A1' |GeneSymbol=='Taldo1' |GeneSymbol=='Tank' |GeneSymbol=='Tkt' |GeneSymbol=='Tob1' |GeneSymbol=='Tst' |GeneSymbol=='Ubc' |GeneSymbol=='Ubqln1' |GeneSymbol=='Uck1' |GeneSymbol=='Ucp2' |GeneSymbol=='Uqcr10' |GeneSymbol=='Uqcr11' |GeneSymbol=='Uqcrc1' |GeneSymbol=='Uqcrq' |GeneSymbol=='Vegfb' |GeneSymbol=='Ywhag')

hm_tab_hall_adip <- rbind(hm_tab_hall_adip1, hm_tab_hall_adip2)

hm_tab_hall_adip <- hm_tab_hall_adip %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_adip) = hm_tab_hall_adip$GeneSymbol
hm_hall_adip_annot = data.frame("Sig" = hm_tab_hall_adip$sig2)
rownames(hm_hall_adip_annot) = rownames(hm_tab_hall_adip)

hm_hall_adip <- pheatmap(hm_tab_hall_adip[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_adip$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_adip_annot, legend_labels = "Relative expression", main = "HALLMARK_ADIPOGENESIS genes")

pdf(file="m2_dm2_hm_hall_adip.pdf",width=6,height=12)
hm_hall_adip
dev.off()


##### hm of hallmark oxphos genes

hm_tab_hall_oxphos1 = subset(hm_tab, GeneSymbol=='Abcb7' |GeneSymbol=='Acaa1' |GeneSymbol=='Acaa2' |GeneSymbol=='Acadm' |GeneSymbol=='Acadsb' |GeneSymbol=='Acadvl' |GeneSymbol=='Acat1' |GeneSymbol=='Aco2' |GeneSymbol=='Afg3L2' |GeneSymbol=='Aifm1' |GeneSymbol=='Alas1' |GeneSymbol=='Aldh6A1' |GeneSymbol=='Atp1B1' |GeneSymbol=='Atp5F1A' |GeneSymbol=='Atp5F1B' |GeneSymbol=='Atp5F1C' |GeneSymbol=='Atp5F1D' |GeneSymbol=='Atp5F1E' |GeneSymbol=='Atp5Mc1' |GeneSymbol=='Atp5Mc2' |GeneSymbol=='Atp5Mc3' |GeneSymbol=='Atp5Me' |GeneSymbol=='Atp5Mf' |GeneSymbol=='Atp5Mg' |GeneSymbol=='Atp5Pb' |GeneSymbol=='Atp5Pd' |GeneSymbol=='Atp5Pf' |GeneSymbol=='Atp5Po' |GeneSymbol=='Atp6Ap1' |GeneSymbol=='Atp6V0B' |GeneSymbol=='Atp6V0C' |GeneSymbol=='Atp6V0E1' |GeneSymbol=='Atp6V1C1' |GeneSymbol=='Atp6V1D' |GeneSymbol=='Atp6V1E1' |GeneSymbol=='Atp6V1F' |GeneSymbol=='Atp6V1G1' |GeneSymbol=='Atp6V1H' |GeneSymbol=='Bax' |GeneSymbol=='Bckdha' |GeneSymbol=='Bdh2' |GeneSymbol=='Casp7' |GeneSymbol=='Cox10' |GeneSymbol=='Cox11' |GeneSymbol=='Cox15' |GeneSymbol=='Cox17' |GeneSymbol=='Cox4I1' |GeneSymbol=='Cox5A' |GeneSymbol=='Cox5B' |GeneSymbol=='Cox6A1' |GeneSymbol=='Cox6B1' |GeneSymbol=='Cox6C' |GeneSymbol=='Cox7A2' |GeneSymbol=='Cox7A2L' |GeneSymbol=='Cox7B' |GeneSymbol=='Cox7C' |GeneSymbol=='Cox8A' |GeneSymbol=='Cpt1A' |GeneSymbol=='Cs' |GeneSymbol=='Cyb5A' |GeneSymbol=='Cyb5R3' |GeneSymbol=='Cyc1' |GeneSymbol=='Cycs' |GeneSymbol=='Decr1' |GeneSymbol=='Dlat' |GeneSymbol=='Dld' |GeneSymbol=='Dlst' |GeneSymbol=='Ech1' |GeneSymbol=='Echs1' |GeneSymbol=='Eci1' |GeneSymbol=='Etfa' |GeneSymbol=='Etfb' |GeneSymbol=='Etfdh' |GeneSymbol=='Fdx1' |GeneSymbol=='Fh' |GeneSymbol=='Fxn' |GeneSymbol=='Glud1' |GeneSymbol=='Got2' |GeneSymbol=='Gpi' |GeneSymbol=='Gpx4' |GeneSymbol=='Grpel1' |GeneSymbol=='Hadha' |GeneSymbol=='Hadhb' |GeneSymbol=='Hccs' |GeneSymbol=='Hsd17B10' |GeneSymbol=='Hspa9' |GeneSymbol=='Htra2' |GeneSymbol=='Idh1' |GeneSymbol=='Idh2' |GeneSymbol=='Idh3A' |GeneSymbol=='Idh3B' |GeneSymbol=='Idh3G' |GeneSymbol=='Immt' |GeneSymbol=='Isca1' |GeneSymbol=='Iscu' |GeneSymbol=='Ldha' |GeneSymbol=='Ldhb' |GeneSymbol=='Lrpprc' |GeneSymbol=='Maob' |GeneSymbol=='Mdh1' |GeneSymbol=='Mdh2' |GeneSymbol=='Mfn2' |GeneSymbol=='Mgst3' |GeneSymbol=='Mpc1' |GeneSymbol=='Mrpl11' |GeneSymbol=='Mrpl15' |GeneSymbol=='Mrpl34' |GeneSymbol=='Mrpl35' |GeneSymbol=='Mrps11' |GeneSymbol=='Mrps12' |GeneSymbol=='Mrps15' |GeneSymbol=='Mrps22' |GeneSymbol=='Mrps30' |GeneSymbol=='Mtrf1')

hm_tab_hall_oxphos2 = subset(hm_tab, GeneSymbol=='Mtrr' |GeneSymbol=='Mtx2' |GeneSymbol=='Ndufa1' |GeneSymbol=='Ndufa2' |GeneSymbol=='Ndufa3' |GeneSymbol=='Ndufa4' |GeneSymbol=='Ndufa5' |GeneSymbol=='Ndufa6' |GeneSymbol=='Ndufa7' |GeneSymbol=='Ndufa8' |GeneSymbol=='Ndufa9' |GeneSymbol=='Ndufab1' |GeneSymbol=='Ndufb1' |GeneSymbol=='Ndufb2' |GeneSymbol=='Ndufb3' |GeneSymbol=='Ndufb4' |GeneSymbol=='Ndufb5' |GeneSymbol=='Ndufb6' |GeneSymbol=='Ndufb7' |GeneSymbol=='Ndufb8' |GeneSymbol=='Ndufc1' |GeneSymbol=='Ndufc2' |GeneSymbol=='Ndufs1' |GeneSymbol=='Ndufs2' |GeneSymbol=='Ndufs3' |GeneSymbol=='Ndufs4' |GeneSymbol=='Ndufs6' |GeneSymbol=='Ndufs7' |GeneSymbol=='Ndufs8' |GeneSymbol=='Ndufv1' |GeneSymbol=='Ndufv2' |GeneSymbol=='Nnt' |GeneSymbol=='Nqo2' |GeneSymbol=='Oat' |GeneSymbol=='Ogdh' |GeneSymbol=='Opa1' |GeneSymbol=='Oxa1L' |GeneSymbol=='Pdha1' |GeneSymbol=='Pdhb' |GeneSymbol=='Pdhx' |GeneSymbol=='Pdk4' |GeneSymbol=='Pdp1' |GeneSymbol=='Phb2' |GeneSymbol=='Phyh' |GeneSymbol=='Pmpca' |GeneSymbol=='Polr2F' |GeneSymbol=='Por' |GeneSymbol=='Prdx3' |GeneSymbol=='Retsat' |GeneSymbol=='Rhot1' |GeneSymbol=='Rhot2' |GeneSymbol=='Sdha' |GeneSymbol=='Sdhb' |GeneSymbol=='Sdhc' |GeneSymbol=='Sdhd' |GeneSymbol=='Slc25A11' |GeneSymbol=='Slc25A12' |GeneSymbol=='Slc25A20' |GeneSymbol=='Slc25A3' |GeneSymbol=='Slc25A4' |GeneSymbol=='Slc25A5' |GeneSymbol=='Slc25A6' |GeneSymbol=='Sucla2' |GeneSymbol=='Suclg1' |GeneSymbol=='Supv3L1' |GeneSymbol=='Surf1' |GeneSymbol=='Tcirg1' |GeneSymbol=='Timm10' |GeneSymbol=='Timm13' |GeneSymbol=='Timm17A' |GeneSymbol=='Timm50' |GeneSymbol=='Timm8B' |GeneSymbol=='Timm9' |GeneSymbol=='Tomm22' |GeneSymbol=='Tomm70' |GeneSymbol=='Uqcr10' |GeneSymbol=='Uqcr11' |GeneSymbol=='Uqcrb' |GeneSymbol=='Uqcrc1' |GeneSymbol=='Uqcrc2' |GeneSymbol=='Uqcrfs1' |GeneSymbol=='Uqcrh' |GeneSymbol=='Uqcrq' |GeneSymbol=='Vdac1' |GeneSymbol=='Vdac2' |GeneSymbol=='Vdac3')

hm_tab_hall_oxphos <- rbind(hm_tab_hall_oxphos1, hm_tab_hall_oxphos2)

hm_tab_hall_oxphos <- hm_tab_hall_oxphos %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_oxphos) = hm_tab_hall_oxphos$GeneSymbol
hm_hall_oxphos_annot = data.frame("Sig" = hm_tab_hall_oxphos$sig2)
rownames(hm_hall_oxphos_annot) = rownames(hm_tab_hall_oxphos)

hm_hall_oxphos <- pheatmap(hm_tab_hall_oxphos[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_oxphos$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_oxphos_annot, legend_labels = "Relative expression", main = "HALLMARK_OXIDATIVE_PHOSPHORYLATION genes")

pdf(file="m2_dm2_hm_hall_oxphos.pdf",width=7,height=12)
hm_hall_oxphos
dev.off()


##### hm of hallmark ROS genes

hm_tab_hall_ros = subset(hm_tab, GeneSymbol=='Abcc1' |GeneSymbol=='Atox1' |GeneSymbol=='Cat' |GeneSymbol=='Cdkn2D' |GeneSymbol=='Egln2' |GeneSymbol=='Ercc2' |GeneSymbol=='Fes' |GeneSymbol=='Ftl' |GeneSymbol=='G6Pd' |GeneSymbol=='Gclc' |GeneSymbol=='Gclm' |GeneSymbol=='Glrx' |GeneSymbol=='Glrx2' |GeneSymbol=='Gpx3' |GeneSymbol=='Gpx4' |GeneSymbol=='Gsr' |GeneSymbol=='Hhex' |GeneSymbol=='Hmox2' |GeneSymbol=='Ipcef1' |GeneSymbol=='Junb' |GeneSymbol=='Lamtor5' |GeneSymbol=='Lsp1' |GeneSymbol=='Mbp' |GeneSymbol=='Mgst1' |GeneSymbol=='Mpo' |GeneSymbol=='Msra' |GeneSymbol=='Ndufa6' |GeneSymbol=='Ndufb4' |GeneSymbol=='Ndufs2' |GeneSymbol=='Nqo1' |GeneSymbol=='Oxsr1' |GeneSymbol=='Pdlim1' |GeneSymbol=='Pfkp' |GeneSymbol=='Prdx1' |GeneSymbol=='Prdx2' |GeneSymbol=='Prdx4' |GeneSymbol=='Prdx6' |GeneSymbol=='Prnp' |GeneSymbol=='Ptpa' |GeneSymbol=='Sbno2' |GeneSymbol=='Scaf4' |GeneSymbol=='Selenos' |GeneSymbol=='Sod1' |GeneSymbol=='Sod2' |GeneSymbol=='Srxn1' |GeneSymbol=='Stk25' |GeneSymbol=='Txn' |GeneSymbol=='Txnrd1' |GeneSymbol=='Txnrd2')

hm_tab_hall_ros <- hm_tab_hall_ros %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_ros) = hm_tab_hall_ros$GeneSymbol
hm_hall_ros_annot = data.frame("Sig" = hm_tab_hall_ros$sig2)
rownames(hm_hall_ros_annot) = rownames(hm_tab_hall_ros)

hm_hall_ros <- pheatmap(hm_tab_hall_ros[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_ros$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_ros_annot, legend_labels = "Relative expression", main = "HALLMARK_REACTIVE_OXYGEN_SPECIES_PATHWAY genes")

pdf(file="m2_dm2_hm_hall_ros.pdf",width=8,height=10)
hm_hall_ros
dev.off()


##### hm of hallmark UPR genes

hm_tab_hall_UPR = subset(hm_tab, GeneSymbol=='Aldh18A1' |GeneSymbol=='Arfgap1' |GeneSymbol=='Asns' |GeneSymbol=='Atf3' |GeneSymbol=='Atf4' |GeneSymbol=='Atf6' |GeneSymbol=='Atp6V0D1' |GeneSymbol=='Bag3' |GeneSymbol=='Banf1' |GeneSymbol=='Calr' |GeneSymbol=='Ccl2' |GeneSymbol=='Cebpb' |GeneSymbol=='Cebpg' |GeneSymbol=='Chac1' |GeneSymbol=='Cks1B' |GeneSymbol=='Cnot2' |GeneSymbol=='Cnot4' |GeneSymbol=='Cnot6' |GeneSymbol=='Cxxc1' |GeneSymbol=='Dcp1A' |GeneSymbol=='Dcp2' |GeneSymbol=='Dctn1' |GeneSymbol=='Ddit4' |GeneSymbol=='Ddx10' |GeneSymbol=='Dkc1' |GeneSymbol=='Dnaja4' |GeneSymbol=='Dnajb9' |GeneSymbol=='Dnajc3' |GeneSymbol=='Edc4' |GeneSymbol=='Edem1' |GeneSymbol=='Eef2' |GeneSymbol=='Eif2Ak3' |GeneSymbol=='Eif2S1' |GeneSymbol=='Eif4A1' |GeneSymbol=='Eif4A2' |GeneSymbol=='Eif4A3' |GeneSymbol=='Eif4E' |GeneSymbol=='Eif4Ebp1' |GeneSymbol=='Eif4G1' |GeneSymbol=='Ern1' |GeneSymbol=='Ero1A' |GeneSymbol=='Exoc2' |GeneSymbol=='Exosc1' |GeneSymbol=='Exosc10' |GeneSymbol=='Exosc2' |GeneSymbol=='Exosc4' |GeneSymbol=='Exosc5' |GeneSymbol=='Exosc9' |GeneSymbol=='Fkbp14' |GeneSymbol=='Fus' |GeneSymbol=='Gemin4' |GeneSymbol=='Gosr2' |GeneSymbol=='H2Ax' |GeneSymbol=='Herpud1' |GeneSymbol=='Hsp90B1' |GeneSymbol=='Hspa5' |GeneSymbol=='Hspa9' |GeneSymbol=='Hyou1' |GeneSymbol=='Iars1' |GeneSymbol=='Ifit1' |GeneSymbol=='Igfbp1' |GeneSymbol=='Imp3' |GeneSymbol=='Kdelr3' |GeneSymbol=='Khsrp' |GeneSymbol=='Kif5B' |GeneSymbol=='Lsm1' |GeneSymbol=='Lsm4' |GeneSymbol=='Mthfd2' |GeneSymbol=='Mtrex' |GeneSymbol=='Nabp1' |GeneSymbol=='Nfya' |GeneSymbol=='Nfyb' |GeneSymbol=='Nhp2' |GeneSymbol=='Nolc1' |GeneSymbol=='Nop14' |GeneSymbol=='Nop56' |GeneSymbol=='Npm1' |GeneSymbol=='Paip1' |GeneSymbol=='Parn' |GeneSymbol=='Pdia5' |GeneSymbol=='Pdia6' |GeneSymbol=='Pop4' |GeneSymbol=='Preb' |GeneSymbol=='Psat1' |GeneSymbol=='Rps14' |GeneSymbol=='Rrp9' |GeneSymbol=='Sdad1' |GeneSymbol=='Sec11A' |GeneSymbol=='Sec31A' |GeneSymbol=='Serp1' |GeneSymbol=='Shc1' |GeneSymbol=='Slc1A4' |GeneSymbol=='Slc30A5' |GeneSymbol=='Slc7A5' |GeneSymbol=='Spcs1' |GeneSymbol=='Spcs3' |GeneSymbol=='Srpra' |GeneSymbol=='Srprb' |GeneSymbol=='Ssr1' |GeneSymbol=='Stc2' |GeneSymbol=='Tars1' |GeneSymbol=='Tatdn2' |GeneSymbol=='Tspyl2' |GeneSymbol=='Ttc37' |GeneSymbol=='Tubb2A' |GeneSymbol=='Vegfa' |GeneSymbol=='Wfs1' |GeneSymbol=='Wipi1' |GeneSymbol=='Xbp1' |GeneSymbol=='Xpot' |GeneSymbol=='Yif1A' |GeneSymbol=='Ywhaz' |GeneSymbol=='Zbtb17')

hm_tab_hall_UPR <- hm_tab_hall_UPR %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_UPR) = hm_tab_hall_UPR$GeneSymbol
hm_hall_UPR_annot = data.frame("Sig" = hm_tab_hall_UPR$sig2)
rownames(hm_hall_UPR_annot) = rownames(hm_tab_hall_UPR)

hm_hall_UPR <- pheatmap(hm_tab_hall_UPR[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_UPR$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_UPR_annot, legend_labels = "Relative expression", main = "HALLMARK_UNFOLDED_PROTEIN_RESPONSE genes")

pdf(file="m2_dm2_hm_hall_UPR.pdf",width=7,height=10)
hm_hall_UPR
dev.off()

##### hm of GO BAT genes

hm_tab_GO_BAT = subset(hm_tab, GeneSymbol=='Adig' |GeneSymbol=='Adipoq' |GeneSymbol=='Adrb1' |GeneSymbol=='Adrb2' |GeneSymbol=='Aldh6A1' |GeneSymbol=='Arl4A' |GeneSymbol=='Bmp7' |GeneSymbol=='Bnip3' |GeneSymbol=='Cebpa' |GeneSymbol=='Cebpb' |GeneSymbol=='Dio2' |GeneSymbol=='Dusp10' |GeneSymbol=='Ebf2' |GeneSymbol=='Ero1A' |GeneSymbol=='Fabp3' |GeneSymbol=='Fabp4' |GeneSymbol=='Ffar4' |GeneSymbol=='Flcn' |GeneSymbol=='Fndc5' |GeneSymbol=='Fto' |GeneSymbol=='Hnrnpu' |GeneSymbol=='Ins' |GeneSymbol=='Itga6' |GeneSymbol=='Lamb3' |GeneSymbol=='Lep' |GeneSymbol=='Lrg1' |GeneSymbol=='Mapk14' |GeneSymbol=='Mb' |GeneSymbol=='Metrnl' |GeneSymbol=='Mtor' |GeneSymbol=='Napepld' |GeneSymbol=='Nudt7' |GeneSymbol=='Pex11A' |GeneSymbol=='Pim1' |GeneSymbol=='Plac8' |GeneSymbol=='Ppargc1A' |GeneSymbol=='Prdm16' |GeneSymbol=='Ptgs2' |GeneSymbol=='Rgs2' |GeneSymbol=='Rreb1' |GeneSymbol=='Sirt1' |GeneSymbol=='Six1' |GeneSymbol=='Slc2A4' |GeneSymbol=='Sox13' |GeneSymbol=='Tfe3' |GeneSymbol=='Trpv4' |GeneSymbol=='Ucp1' |GeneSymbol=='Vstm2A' |GeneSymbol=='Zbtb7B' |GeneSymbol=='Znf516')

hm_tab_GO_BAT <- hm_tab_GO_BAT %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_GO_BAT) = hm_tab_GO_BAT$GeneSymbol
hm_GO_m2_dm2_annot = data.frame("Sig" = hm_tab_GO_BAT$sig2)
rownames(hm_GO_m2_dm2_annot) = rownames(hm_tab_GO_BAT)

hm_GO_BAT <- pheatmap(hm_tab_GO_BAT[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_GO_BAT$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_GO_m2_dm2_annot, legend_labels = "Relative expression", main = "GO_BROWN_FAT_CELL_DIFFERENTIATION genes")

pdf(file="m2_dm2_hm_GO_BAT.pdf",width=7,height=10)
hm_GO_BAT
dev.off()


##### hm of myc-TF genes

hm_tab_myc = subset(hm_tab, GeneSymbol=='Abcd2' |GeneSymbol=='Steap4' |GeneSymbol=='Nnmt' |GeneSymbol=='Pde3b' |GeneSymbol=='Hp' |GeneSymbol=='Lrp3' |GeneSymbol=='Slc1a5' |GeneSymbol=='Retn' |GeneSymbol=='Apcdd1' |GeneSymbol=='Adcy5' |GeneSymbol=='C4B' |GeneSymbol=='Gys2' |GeneSymbol=='Hcar2' |GeneSymbol=='Dock11' |GeneSymbol=='Mc2r' |GeneSymbol=='Hcar1' |GeneSymbol=='Dram1' |GeneSymbol=='B3galt2' |GeneSymbol=='Nnat' |GeneSymbol=='Ffar4' |GeneSymbol=='Slc16a7' |GeneSymbol=='Ffar2' |GeneSymbol=='Aoc3' |GeneSymbol=='Rarres2' |GeneSymbol=='Adipoq' |GeneSymbol=='Mmp3' |GeneSymbol=='Sctr' |GeneSymbol=='Klhl2' |GeneSymbol=='Igf1' |GeneSymbol=='Podn' |GeneSymbol=='Cidec' |GeneSymbol=='Tshr' |GeneSymbol=='Por' |GeneSymbol=='Rbp4' |GeneSymbol=='Ccdc80' |GeneSymbol=='Lrg1' |GeneSymbol=='Vnn3' |GeneSymbol=='Chdh' |GeneSymbol=='Lgals12' |GeneSymbol=='Chst1' |GeneSymbol=='St6galnac5')

hm_tab_myc <- hm_tab_myc %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_myc) = hm_tab_myc$GeneSymbol
hm_myc_annot = data.frame("Sig" = hm_tab_myc$sig2)
rownames(hm_myc_annot) = rownames(hm_tab_myc)

hm_myc <- pheatmap(hm_tab_myc[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_myc$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_myc_annot, legend_labels = "Relative expression", main = "Myc-related genes")

pdf(file="m2_dm2_hm_myc.pdf",width=7,height=10)
hm_myc
dev.off()


#### make hm of mitochondrial and nuclear encoded mitochondrial genes, using same genes to the figure in eLife paper

hm_tab_mt_mito = subset(hm_tab, GeneSymbol=='mt-Atp6' | GeneSymbol=='mt-Atp8' | GeneSymbol=='mt-Co1' | GeneSymbol=='mt-Co2' | GeneSymbol=='mt-Co3' | GeneSymbol=='mt-Cytb' | GeneSymbol=='mt-Nd1' | GeneSymbol=='mt-Nd2' | GeneSymbol=='mt-Nd3' | GeneSymbol=='mt-Nd4' | GeneSymbol=='mt-Nd4l' | GeneSymbol=='mt-Nd5' | GeneSymbol=='mt-Nd6' | GeneSymbol=='mt-Rnr1' | GeneSymbol=='mt-Rnr2' | GeneSymbol=='mt-Ta' | GeneSymbol=='mt-Tc' | GeneSymbol=='mt-Td' | GeneSymbol=='mt-Te' | GeneSymbol=='mt-Tf' | GeneSymbol=='mt-Tg' | GeneSymbol=='mt-Th' | GeneSymbol=='mt-Ti' | GeneSymbol=='mt-Tk' | GeneSymbol=='mt-Tl1' | GeneSymbol=='mt-Tl2' | GeneSymbol=='mt-Tm' | GeneSymbol=='mt-Tn' | GeneSymbol=='mt-Tp' | GeneSymbol=='mt-Tq' | GeneSymbol=='mt-Tr' | GeneSymbol=='mt-Ts1' | GeneSymbol=='mt-Ts2' | GeneSymbol=='mt-Tt' | GeneSymbol=='mt-Tv' | GeneSymbol=='mt-Tw' | GeneSymbol=='mt-Ty')

hm_tab_mt_mito <- hm_tab_mt_mito %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_mt_mito) = hm_tab_mt_mito$GeneSymbol
hm_mt_mito_annot = data.frame("Sig" = hm_tab_mt_mito$sig2)
rownames(hm_mt_mito_annot) = rownames(hm_tab_mt_mito)

hm_mt_mito <- pheatmap(hm_tab_mt_mito[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_mt_mito$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_mt_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial-encoded mito genes")

pdf(file="m2_dm2_hm_mt_mito.pdf",width=7,height=10)
hm_mt_mito
dev.off()

hm_tab_nucl_mito = subset(hm_tab, GeneSymbol=='Ndufb10' |GeneSymbol=='Ndufa3' |GeneSymbol=='Dmac2l' |GeneSymbol=='Atp5o' |GeneSymbol=='Uqcrfs1' |GeneSymbol=='Ndufa8' |GeneSymbol=='Uqcrq' |GeneSymbol=='Surf1' |GeneSymbol=='Atp5b' |GeneSymbol=='Uqcrh' |GeneSymbol=='Ndufa2' |GeneSymbol=='Ndufs7' |GeneSymbol=='Ndufb9' |GeneSymbol=='Ndufb6' |GeneSymbol=='Cox6b1' |GeneSymbol=='Cox6a2' |GeneSymbol=='Ndufa13' |GeneSymbol=='Ndufa9' |GeneSymbol=='Ndufs3' |GeneSymbol=='Uqcrc2' |GeneSymbol=='Ndufa4' |GeneSymbol=='Cycs' |GeneSymbol=='Cyc1' |GeneSymbol=='Ndufs5' |GeneSymbol=='Ndufs4' |GeneSymbol=='Ecsit' |GeneSymbol=='Cox10' |GeneSymbol=='Ndufs8' |GeneSymbol=='Ndufc2' |GeneSymbol=='Atp5a1' |GeneSymbol=='Ndufa7' |GeneSymbol=='Ndufb3' |GeneSymbol=='Ndufa5' |GeneSymbol=='Atp5k' |GeneSymbol=='Cox5b-ps' |GeneSymbol=='Cox18' |GeneSymbol=='Ndufa10' |GeneSymbol=='Atp5j2' |GeneSymbol=='Ndufaf1' |GeneSymbol=='Atp5pb' |GeneSymbol=='Cox11' |GeneSymbol=='Atpaf1' |GeneSymbol=='Sdhb' |GeneSymbol=='Atp5c1' |GeneSymbol=='Cox6b2' |GeneSymbol=='Gm10053' |GeneSymbol=='Phb' |GeneSymbol=='Cox7c' |GeneSymbol=='Sdhd' |GeneSymbol=='Sdhc' |GeneSymbol=='Sdha' |GeneSymbol=='Ndufa6' |GeneSymbol=='Ndufa12' |GeneSymbol=='Ndufa11' |GeneSymbol=='Cox6a1' |GeneSymbol=='Ndufb2' |GeneSymbol=='Cox5a' |GeneSymbol=='Atp5j' |GeneSymbol=='Atp5g3' |GeneSymbol=='Ndufv2' |GeneSymbol=='Ndufb8' |GeneSymbol=='Cox4i1' |GeneSymbol=='Uqcrc1' |GeneSymbol=='Atpaf2' |GeneSymbol=='Ndufb7' |GeneSymbol=='Atp5h' |GeneSymbol=='Cox5b' |GeneSymbol=='Ndufv1' |GeneSymbol=='Ndufv3' |GeneSymbol=='Ndufs1' |GeneSymbol=='Atp5d' |GeneSymbol=='Ndufb4' |GeneSymbol=='Cox7a1' |GeneSymbol=='Cox4i2' |GeneSymbol=='Ndufs6' |GeneSymbol=='Ndufs2' |GeneSymbol=='Ndufc1' |GeneSymbol=='Ndufb5' |GeneSymbol=='Gm21987' |GeneSymbol=='Cox17' |GeneSymbol=='Cox8a' |GeneSymbol=='Cox7a2' |GeneSymbol=='Cox6c' |GeneSymbol=='Nubpl' |GeneSymbol=='Ndufab1')

hm_tab_nucl_mito <- hm_tab_nucl_mito %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_nucl_mito) = hm_tab_nucl_mito$GeneSymbol
hm_nucl_mito_annot = data.frame("Sig" = hm_tab_nucl_mito$sig2)
rownames(hm_nucl_mito_annot) = rownames(hm_tab_nucl_mito)

hm_nucl_mito <- pheatmap(hm_tab_nucl_mito[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_nucl_mito$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_nucl_mito_annot, legend_labels = "Relative expression", main = "Nuclear-encoded mito genes")

pdf(file="m2_dm2_hm_nucl_mito.pdf",width=7,height=10)
hm_nucl_mito
dev.off()

#### make side-by-side hm of mitochondrial and nuclear encoded mitochondrial genes, analagous to eLife paper

library(RColorBrewer)
breaksList = seq(-2, 2, by = 0.1)

hm_tab_mt_mito2 <- as.data.frame(hm_tab_mt_mito$log2FC)
rownames(hm_tab_mt_mito2) = hm_tab_mt_mito$GeneSymbol
hm_tab_mt_mito2$log2FCdup <- hm_tab_mt_mito$log2FC

hm_mt_mito2 <- pheatmap(hm_tab_mt_mito2, cluster_rows = TRUE, cluster_cols = FALSE, cutree_rows = 2, legend = FALSE, cellwidth=30, angle_col=45, fontsize_col=6, annotation_row=hm_mt_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial-encoded", show_colnames = FALSE, show_rownames = FALSE, border_color = NA, scale = "none", color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList)

hm_tab_nucl_mito2 <- as.data.frame(hm_tab_nucl_mito$log2FC)
rownames(hm_tab_nucl_mito2) = hm_tab_nucl_mito$GeneSymbol
hm_tab_nucl_mito2$log2FCdup <- hm_tab_nucl_mito$log2FC

hm_nucl_mito2 <- pheatmap(hm_tab_nucl_mito2, cluster_rows = TRUE, cluster_cols = FALSE, cutree_rows = 3, legend = TRUE, cellwidth=30, angle_col=45, fontsize_col=6, annotation_row=hm_nucl_mito_annot, legend_labels = "Relative expression", main = "Nuclear-encoded", show_colnames = FALSE, , show_rownames = FALSE, border_color = NA, color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList)

require(cowplot)
require(ggplotify)

pdf(file="mito_genes_sumfig.pdf",width=8,height=3)
plot_grid(as.grob(hm_mt_mito2), as.grob(hm_nucl_mito2), ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()



############### Pathway analysis using enrichr =====================================================

require(enrichR)
require(tidyr)
require(cowplot)
require(viridis)

## look at sig up & down genes using enrichR
dbs_option <- listEnrichrDbs()

####### use upregulated genes

up_dge = subset(hm_tab, sig2=='sig' & log2FC>0)
write.table(up_dge,file="m2_dm2_up_dge.csv",sep=",")
up_dge <- up_dge[!is.na(up_dge$GeneSymbol), ]
up_genes <- as.vector(up_dge$GeneSymbol)


dbs_search <- c("GO_Biological_Process_2018","KEGG_2019_Mouse", "MSigDB_Hallmark_2020","GO_Cellular_Component_2018","GTEx_Tissue_Sample_Gene_Expression_Profiles_up","TF_Perturbations_Followed_by_Expression","GO_Molecular_Function_2018", "HMDB_Metabolites")

up_genes_enrichr <- enrichr(up_genes, databases = dbs_search)

## make figure from enrichr analyses
library(dplyr)
library(ggplot2)


GO_biol_data_up <- up_genes_enrichr[["GO_Biological_Process_2018"]]
View(GO_biol_data_up)
GO_biol_data_up = subset(GO_biol_data_up, Adjusted.P.value<.05)
GO_biol_data_up <- GO_biol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_biol_data_up$db <- "GO_biol_2019_Human"
GO_biol_fig_up <-ggplot(data=GO_biol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Biological_Process_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_biol_fig_up

KEGG_data_up <- up_genes_enrichr[["KEGG_2019_Mouse"]]
View(KEGG_data_up)
KEGG_data_up = subset(KEGG_data_up, Adjusted.P.value<.05)
KEGG_data_up <- KEGG_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
KEGG_data_up$db <- "KEGG_2019_Mouse"
KEGG_fig_up <-ggplot(data=KEGG_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("KEGG_2019_Mouse") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
KEGG_fig_up

Hall_data_up <- up_genes_enrichr[["MSigDB_Hallmark_2020"]]
View(Hall_data_up)
Hall_data_up = subset(Hall_data_up, Adjusted.P.value<.05)
Hall_data_up <- Hall_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Hall_data_up$db <- "MSigDB_Hallmark_2020"
Hall_fig_up <-ggplot(data=Hall_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("MSigDB_Hallmark_2020") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
Hall_fig_up

GO_cell_data_up <- up_genes_enrichr[["GO_Cellular_Component_2018"]]
View(GO_cell_data_up)
GO_cell_data_up = subset(GO_cell_data_up, Adjusted.P.value<.05)
GO_cell_data_up <- GO_cell_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_cell_data_up$db <- "GO_Cellular_Component_2018"
GO_cell_fig_up <-ggplot(data=GO_cell_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Cellular_Component_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_cell_fig_up

GTEx_data_up <- up_genes_enrichr[["GTEx_Tissue_Sample_Gene_Expression_Profiles_up"]]
View(GTEx_data_up)
GTEx_data_up = subset(GTEx_data_up, Adjusted.P.value<.05)
GTEx_data_up <- GTEx_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GTEx_data_up$db <- "GTEx_Tissue_Sample_Gene_Expression_Profiles_up"
GTEx_fig_up <-ggplot(data=GTEx_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GTEx_Tissue_Sample_Gene_Expression_Profiles_up") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GTEx_fig_up

TF_data_up <- up_genes_enrichr[["TF_Perturbations_Followed_by_Expression"]]
View(TF_data_up)
TF_data_up = subset(TF_data_up, Adjusted.P.value<.05)
TF_data_up <- TF_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
TF_data_up$db <- "TF_Perturbations_Followed_by_Expression"
TF_fig_up <-ggplot(data=TF_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("TF_Perturbations_Followed_by_Expression") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
TF_fig_up

GO_mol_data_up <- up_genes_enrichr[["GO_Molecular_Function_2018"]]
View(GO_mol_data_up)
GO_mol_data_up = subset(GO_mol_data_up, Adjusted.P.value<.05)
GO_mol_data_up <- GO_mol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_mol_data_up$db <- "GO_Molecular_Function_2018"
GO_mol_fig_up <-ggplot(data=GO_mol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Molecular_Function_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_mol_fig_up

Metabol_data_up <- up_genes_enrichr[["HMDB_Metabolites"]]
View(Metabol_data_up)
Metabol_data_up = subset(Metabol_data_up, Adjusted.P.value<.05)
Metabol_data_up <- Metabol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Metabol_data_up$db <- "HMDB_Metabolites"
Metabol_fig_up <-ggplot(data=Metabol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("HMDB_Metabolites") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
Metabol_fig_up

up_path_summary <- rbind(GO_biol_data_up, KEGG_data_up, Hall_data_up, GO_cell_data_up, GTEx_data_up, TF_data_up, GO_mol_data_up, Metabol_data_up)
up_path_summary$dir <- "Up"  

####### use downregulated genes

down_dge = subset(hm_tab, sig2=='sig' & log2FC<0)
write.table(down_dge,file="m2_dm2_down_dge.csv",sep=",")
down_list <- as.data.frame(down_dge$GeneSymbol)
down_list <- down_list %>% rename("genes" = "down_dge$GeneSymbol")
down_list <- down_list %>% drop_na()
down_list <- distinct(down_list)

dbs_search <- c("GO_Biological_Process_2018","KEGG_2019_Mouse", "MSigDB_Hallmark_2020","GO_Cellular_Component_2018","GTEx_Tissue_Sample_Gene_Expression_Profiles_up","TF_Perturbations_Followed_by_Expression","GO_Molecular_Function_2018", "HMDB_Metabolites")

down_genes_enrichr <- enrichr(down_list$genes, databases = dbs_search)

## make figure from enrichr analyses

GO_biol_data_down <- down_genes_enrichr[["GO_Biological_Process_2018"]]
View(GO_biol_data_down)
GO_biol_data_down = subset(GO_biol_data_down, Adjusted.P.value<.05)
GO_biol_data_down <- GO_biol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_biol_data_down$db <- "GO_biol_2019_Human"
GO_biol_fig_down <-ggplot(data=GO_biol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Biological_Process_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_biol_fig_down

KEGG_data_down <- down_genes_enrichr[["KEGG_2019_Mouse"]]
View(KEGG_data_down)
KEGG_data_down = subset(KEGG_data_down, Adjusted.P.value<.05)
KEGG_data_down <- KEGG_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
KEGG_data_down$db <- "KEGG_2019_Mouse"
KEGG_fig_down <-ggplot(data=KEGG_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("KEGG_2019_Mouse") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
KEGG_fig_down

Hall_data_down <- down_genes_enrichr[["MSigDB_Hallmark_2020"]]
View(Hall_data_down)
Hall_data_down = subset(Hall_data_down, Adjusted.P.value<.05)
Hall_data_down <- Hall_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Hall_data_down$db <- "MSigDB_Hallmark_2020"
Hall_fig_down <-ggplot(data=Hall_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("MSigDB_Hallmark_2020") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
Hall_fig_down

GO_cell_data_down <- down_genes_enrichr[["GO_Cellular_Component_2018"]]
View(GO_cell_data_down)
GO_cell_data_down = subset(GO_cell_data_down, Adjusted.P.value<.05)
GO_cell_data_down <- GO_cell_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_cell_data_down$db <- "GO_Cellular_Component_2018"
GO_cell_fig_down <-ggplot(data=GO_cell_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Cellular_Component_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_cell_fig_down

GTEx_data_down <- down_genes_enrichr[["GTEx_Tissue_Sample_Gene_Expression_Profiles_up"]]
View(GTEx_data_down)
GTEx_data_down = subset(GTEx_data_down, Adjusted.P.value<.05)
GTEx_data_down <- GTEx_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GTEx_data_down$db <- "GTEx_Tissue_Sample_Gene_Expression_Profiles_down"
GTEx_fig_down <-ggplot(data=GTEx_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GTEx_Tissue_Sample_Gene_Expression_Profiles_up") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GTEx_fig_down

TF_data_down <- down_genes_enrichr[["TF_Perturbations_Followed_by_Expression"]]
View(TF_data_down)
TF_data_down = subset(TF_data_down, Adjusted.P.value<.05)
TF_data_down <- TF_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
TF_data_down$db <- "TF_Perturbations_Followed_by_Expression"
TF_fig_down <-ggplot(data=TF_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("TF_Perturbations_Followed_by_Expression") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
TF_fig_down

GO_mol_data_down <- down_genes_enrichr[["GO_Molecular_Function_2018"]]
View(GO_mol_data_down)
GO_mol_data_down = subset(GO_mol_data_down, Adjusted.P.value<.05)
GO_mol_data_down <- GO_mol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_mol_data_down$db <- "GO_Molecular_Function_2018"
GO_mol_fig_down <-ggplot(data=GO_mol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Molecular_Function_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_mol_fig_down

Metabol_data_down <- down_genes_enrichr[["HMDB_Metabolites"]]
View(Metabol_data_down)
Metabol_data_down = subset(Metabol_data_down, Adjusted.P.value<.05)
Metabol_data_down <- Metabol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Metabol_data_down$db <- "HMDB_Metabolites"
Metabol_fig_down <-ggplot(data=Metabol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("HMDB_Metabolites") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
Metabol_fig_down

down_path_summary <- rbind(GO_biol_data_down, KEGG_data_down, Hall_data_down, GO_cell_data_down, GTEx_data_down, TF_data_down, GO_mol_data_down, Metabol_data_down)
down_path_summary$dir <- "down"  

path_summary <- rbind(up_path_summary, down_path_summary)
path_summary <- path_summary %>% arrange(desc(-Adjusted.P.value))               
write.table(path_summary,file="path_summary.csv",sep=",")

up_path_col1 <- plot_grid(GO_biol_fig_up, KEGG_fig_up, Hall_fig_up, GO_cell_fig_up, ncol = 1, labels = c('A', 'C', 'E', 'G', 'I', 'K', 'M', 'O'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))
up_path_col2 <- plot_grid(GTEx_fig_up, TF_fig_up, GO_mol_fig_up, Metabol_fig_up, ncol = 1, labels = c('B', 'D', 'F', 'H'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))

pdf(file="up_path_sumfig.pdf",width=16,height=12)
plot_grid(up_path_col1, up_path_col2, ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()

down_path_col1 <- plot_grid(GO_biol_fig_down, KEGG_fig_down, Hall_fig_down, GO_cell_fig_down, ncol = 1, labels = c('A', 'C', 'E', 'G', 'I', 'K', 'M', 'O'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))
down_path_col2 <- plot_grid(GTEx_fig_down, TF_fig_down, GO_mol_fig_down, Metabol_fig_down, ncol = 1, labels = c('B', 'D', 'F', 'H'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))

pdf(file="down_path_sumfig.pdf",width=16,height=12)
plot_grid(down_path_col1, down_path_col2, ncol = 2, rel_heights = c(1.0, 1.0))

pdf(file="m2_dm2_Hall_fig_up.pdf",width=8,height=3.5)
Hall_fig_up
dev.off()

pdf(file="m2_dm2_Hall_fig_down.pdf",width=8,height=3.5)
Hall_fig_down
dev.off()

############ summarise enriched GO terms using revigo ---------

library(rrvgo)
library(stringr)
GO_BP_up_revigo <- up_genes_enrichr[["GO_Biological_Process_2018"]]
GO_BP_up_revigo = subset(GO_BP_up_revigo, Adjusted.P.value<.05)
GO_BP_up_revigo$ID <- str_extract(GO_BP_up_revigo$Term, "GO:.......")
GO_BP_up_simMatrix <- calculateSimMatrix(GO_BP_up_revigo$ID, orgdb="org.Mm.eg.db", ont="BP", method="Rel")
GO_BP_up_scores <- setNames(-log10(GO_BP_up_revigo$Adjusted.P.value), GO_BP_up_revigo$ID)
GO_BP_up_reducedTerms <- reduceSimMatrix(GO_BP_up_simMatrix, GO_BP_up_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_BP_up_simMatrix, GO_BP_up_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_BP_up_scatter_m2_dm2.pdf",width=14,height=8)
GO_BP_up_scatter <- scatterPlot(GO_BP_up_simMatrix, GO_BP_up_reducedTerms, labelSize=3)
GO_BP_up_scatter
dev.off()
pdf(file="GO_BP_up_tree_m2_dm2.pdf",width=14,height=8)
GO_BP_up_tree <- treemapPlot(GO_BP_up_reducedTerms)
dev.off()

GO_CC_up_revigo <- up_genes_enrichr[["GO_Cellular_Component_2018"]]
GO_CC_up_revigo = subset(GO_CC_up_revigo, Adjusted.P.value<.05)
GO_CC_up_revigo$ID <- str_extract(GO_CC_up_revigo$Term, "GO:.......")
GO_CC_up_simMatrix <- calculateSimMatrix(GO_CC_up_revigo$ID, orgdb="org.Mm.eg.db", ont="CC", method="Rel")
GO_CC_up_scores <- setNames(-log10(GO_CC_up_revigo$Adjusted.P.value), GO_CC_up_revigo$ID)
GO_CC_up_reducedTerms <- reduceSimMatrix(GO_CC_up_simMatrix, GO_CC_up_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_CC_up_simMatrix, GO_CC_up_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_CC_up_scatter_m2_dm2.pdf",width=14,height=8)
GO_CC_up_scatter <- scatterPlot(GO_CC_up_simMatrix, GO_CC_up_reducedTerms, labelSize=3)
GO_CC_up_scatter
dev.off()
pdf(file="GO_CC_up_tree_m2_dm2.pdf",width=14,height=8)
GO_CC_up_tree <- treemapPlot(GO_CC_up_reducedTerms)
dev.off()

GO_MF_up_revigo <- up_genes_enrichr[["GO_Molecular_Function_2018"]]
GO_MF_up_revigo = subset(GO_MF_up_revigo, Adjusted.P.value<.05)
GO_MF_up_revigo$ID <- str_extract(GO_MF_up_revigo$Term, "GO:.......")
GO_MF_up_simMatrix <- calculateSimMatrix(GO_MF_up_revigo$ID, orgdb="org.Mm.eg.db", ont="MF", method="Rel")
GO_MF_up_scores <- setNames(-log10(GO_MF_up_revigo$Adjusted.P.value), GO_MF_up_revigo$ID)
GO_MF_up_reducedTerms <- reduceSimMatrix(GO_MF_up_simMatrix, GO_MF_up_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_MF_up_simMatrix, GO_MF_up_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_MF_up_scatter_m2_dm2.pdf",width=14,height=8)
GO_MF_up_scatter <- scatterPlot(GO_MF_up_simMatrix, GO_MF_up_reducedTerms, labelSize=3)
GO_MF_up_scatter
dev.off()
pdf(file="GO_MF_up_tree_m2_dm2.pdf",width=14,height=8)
GO_MF_up_tree <- treemapPlot(GO_MF_up_reducedTerms)
dev.off()

GO_BP_down_revigo <- down_genes_enrichr[["GO_Biological_Process_2018"]]
GO_BP_down_revigo = subset(GO_BP_down_revigo, Adjusted.P.value<.05)
GO_BP_down_revigo$ID <- str_extract(GO_BP_down_revigo$Term, "GO:.......")
GO_BP_down_simMatrix <- calculateSimMatrix(GO_BP_down_revigo$ID, orgdb="org.Mm.eg.db", ont="BP", method="Rel")
GO_BP_down_scores <- setNames(-log10(GO_BP_down_revigo$Adjusted.P.value), GO_BP_down_revigo$ID)
GO_BP_down_reducedTerms <- reduceSimMatrix(GO_BP_down_simMatrix, GO_BP_down_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_BP_down_simMatrix, GO_BP_down_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_BP_down_scatter_m2_dm2.pdf",width=14,height=8)
GO_BP_down_scatter <- scatterPlot(GO_BP_down_simMatrix, GO_BP_down_reducedTerms, labelSize=3)
GO_BP_down_scatter
dev.off()
pdf(file="GO_BP_down_tree_m2_dm2.pdf",width=14,height=8)
GO_BP_down_tree <- treemapPlot(GO_BP_down_reducedTerms)
dev.off()

GO_CC_down_revigo <- down_genes_enrichr[["GO_Cellular_Component_2018"]]
GO_CC_down_revigo = subset(GO_CC_down_revigo, Adjusted.P.value<.05)
GO_CC_down_revigo$ID <- str_extract(GO_CC_down_revigo$Term, "GO:.......")
GO_CC_down_simMatrix <- calculateSimMatrix(GO_CC_down_revigo$ID, orgdb="org.Mm.eg.db", ont="CC", method="Rel")
GO_CC_down_scores <- setNames(-log10(GO_CC_down_revigo$Adjusted.P.value), GO_CC_down_revigo$ID)
GO_CC_down_reducedTerms <- reduceSimMatrix(GO_CC_down_simMatrix, GO_CC_down_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_CC_down_simMatrix, GO_CC_down_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_CC_down_scatter_m2_dm2.pdf",width=14,height=8)
GO_CC_down_scatter <- scatterPlot(GO_CC_down_simMatrix, GO_CC_down_reducedTerms, labelSize=3)
GO_CC_down_scatter
dev.off()
pdf(file="GO_CC_down_tree_m2_dm2.pdf",width=14,height=8)
GO_CC_down_tree <- treemapPlot(GO_CC_down_reducedTerms)
dev.off()

GO_MF_down_revigo <- down_genes_enrichr[["GO_Molecular_Function_2018"]]
GO_MF_down_revigo = subset(GO_MF_down_revigo, Adjusted.P.value<.05)
GO_MF_down_revigo$ID <- str_extract(GO_MF_down_revigo$Term, "GO:.......")
GO_MF_down_simMatrix <- calculateSimMatrix(GO_MF_down_revigo$ID, orgdb="org.Mm.eg.db", ont="MF", method="Rel")
GO_MF_down_scores <- setNames(-log10(GO_MF_down_revigo$Adjusted.P.value), GO_MF_down_revigo$ID)
GO_MF_down_reducedTerms <- reduceSimMatrix(GO_MF_down_simMatrix, GO_MF_down_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_MF_down_simMatrix, GO_MF_down_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_MF_down_scatter_m2_dm2.pdf",width=14,height=8)
GO_MF_down_scatter <- scatterPlot(GO_MF_down_simMatrix, GO_MF_down_reducedTerms, labelSize=3)
GO_MF_down_scatter
dev.off()
pdf(file="GO_MF_down_tree_m2_dm2.pdf",width=14,height=8)
GO_MF_down_tree <- treemapPlot(GO_MF_down_reducedTerms)
dev.off()

### make table for comparison hm
hm_tab_m2_dm2 = subset(hm_tab, select=c("gene_id","WT_dm2_D","WT_dm2_E","WT_dm2_F","m2_dm2_D","m2_dm2_E","m2_dm2_F","log2FC","BH_pval","neglog_p","significant","sig2","GeneSymbol"))
hm_tab_m2_dm2 <- hm_tab_m2_dm2 %>% rename("WT_dm2_D_m2" = "WT_dm2_D")
hm_tab_m2_dm2 <- hm_tab_m2_dm2 %>% rename("WT_dm2_E_m2" = "WT_dm2_E")
hm_tab_m2_dm2 <- hm_tab_m2_dm2 %>% rename("WT_dm2_F_m2" = "WT_dm2_F")
hm_tab_m2_dm2 <- hm_tab_m2_dm2 %>% rename("log2FC_m2dm2" = "log2FC")
hm_tab_m2_dm2 <- hm_tab_m2_dm2 %>% rename("BH_pval_m2dm2" = "BH_pval")
hm_tab_m2_dm2 <- hm_tab_m2_dm2 %>% rename("neglog_p_m2dm2" = "neglog_p")
hm_tab_m2_dm2 <- hm_tab_m2_dm2 %>% rename("significant_m2dm2" = "significant")
hm_tab_m2_dm2 <- hm_tab_m2_dm2 %>% rename("sig2_m2dm2" = "sig2")
write.table(hm_tab_m2_dm2, file="hm_tab_m2_dm2.csv",sep=",")


############ make specific heatmaps following on enriched genesets ---------



##### hm of hallmark EpiMesenchym genes

hm_tab_hall_EpiMesenchym1 = subset(hm_tab, GeneSymbol=='Abi3Bp' | GeneSymbol=='Acta2' | GeneSymbol=='Adam12' | GeneSymbol=='Anpep' | GeneSymbol=='Aplp1' | GeneSymbol=='Areg' | GeneSymbol=='Basp1' | GeneSymbol=='Bdnf' | GeneSymbol=='Bgn' | GeneSymbol=='Bmp1' | GeneSymbol=='Cadm1' | GeneSymbol=='Cald1' | GeneSymbol=='Calu' | GeneSymbol=='Cap2' | GeneSymbol=='Capg' | GeneSymbol=='Ccn1' | GeneSymbol=='Ccn2' | GeneSymbol=='Cd44' | GeneSymbol=='Cd59' | GeneSymbol=='Cdh11' | GeneSymbol=='Cdh2' | GeneSymbol=='Cdh6' | GeneSymbol=='Col11A1' | GeneSymbol=='Col12A1' | GeneSymbol=='Col16A1' | GeneSymbol=='Col1A1' | GeneSymbol=='Col1A2' | GeneSymbol=='Col3A1' | GeneSymbol=='Col4A1' | GeneSymbol=='Col4A2' | GeneSymbol=='Col5A1' | GeneSymbol=='Col5A2' | GeneSymbol=='Col5A3' | GeneSymbol=='Col6A2' | GeneSymbol=='Col6A3' | GeneSymbol=='Col7A1' | GeneSymbol=='Col8A2' | GeneSymbol=='Colgalt1' | GeneSymbol=='Comp' | GeneSymbol=='Copa' | GeneSymbol=='Crlf1' | GeneSymbol=='Cthrc1' | GeneSymbol=='Cxcl1' | GeneSymbol=='Cxcl12' | GeneSymbol=='Cxcl6' | GeneSymbol=='Cxcl8' | GeneSymbol=='Dab2' | GeneSymbol=='Dcn' | GeneSymbol=='Dkk1' | GeneSymbol=='Dpysl3' | GeneSymbol=='Dst' | GeneSymbol=='Ecm1' | GeneSymbol=='Ecm2' | GeneSymbol=='Edil3' | GeneSymbol=='Efemp2' | GeneSymbol=='Eln' | GeneSymbol=='Emp3' | GeneSymbol=='Eno2' | GeneSymbol=='Fap' | GeneSymbol=='Fas' | GeneSymbol=='Fbln1' | GeneSymbol=='Fbln2' | GeneSymbol=='Fbln5' | GeneSymbol=='Fbn1' | GeneSymbol=='Fbn2' | GeneSymbol=='Fermt2' | GeneSymbol=='Fgf2' | GeneSymbol=='Flna' | GeneSymbol=='Fmod' | GeneSymbol=='Fn1' | GeneSymbol=='Foxc2' | GeneSymbol=='Fstl1' | GeneSymbol=='Fstl3' | GeneSymbol=='Fuca1' | GeneSymbol=='Fzd8' | GeneSymbol=='Gadd45A' | GeneSymbol=='Gadd45B')


hm_tab_hall_EpiMesenchym2 = subset(hm_tab, GeneSymbol=='Gas1' | GeneSymbol=='Gem' | GeneSymbol=='Gja1' | GeneSymbol=='Glipr1' | GeneSymbol=='Gpc1' | GeneSymbol=='Gpx7' | GeneSymbol=='Grem1' | GeneSymbol=='Htra1' | GeneSymbol=='Id2' | GeneSymbol=='Igfbp2' | GeneSymbol=='Igfbp3' | GeneSymbol=='Igfbp4' | GeneSymbol=='Il15' | GeneSymbol=='Il32' | GeneSymbol=='Il6' | GeneSymbol=='Inhba' | GeneSymbol=='Itga2' | GeneSymbol=='Itga5' | GeneSymbol=='Itgav' | GeneSymbol=='Itgb1' | GeneSymbol=='Itgb3' | GeneSymbol=='Itgb5' | GeneSymbol=='Jun' | GeneSymbol=='Lama1' | GeneSymbol=='Lama2' | GeneSymbol=='Lama3' | GeneSymbol=='Lamc1' | GeneSymbol=='Lamc2' | GeneSymbol=='Lgals1' | GeneSymbol=='Lox' | GeneSymbol=='Loxl1' | GeneSymbol=='Loxl2' | GeneSymbol=='Lrp1' | GeneSymbol=='Lrrc15' | GeneSymbol=='Lum' | GeneSymbol=='Magee1' | GeneSymbol=='Matn2' | GeneSymbol=='Matn3' | GeneSymbol=='Mcm7' | GeneSymbol=='Mest' | GeneSymbol=='Mfap5' | GeneSymbol=='Mgp' | GeneSymbol=='Mmp1' | GeneSymbol=='Mmp14' | GeneSymbol=='Mmp2' | GeneSymbol=='Mmp3' | GeneSymbol=='Msx1' | GeneSymbol=='Mxra5' | GeneSymbol=='Myl9' | GeneSymbol=='Mylk' | GeneSymbol=='Nid2' | GeneSymbol=='Nnmt' | GeneSymbol=='Notch2' | GeneSymbol=='Nt5E' | GeneSymbol=='Ntm' | GeneSymbol=='Oxtr' | GeneSymbol=='P3H1' | GeneSymbol=='Pcolce' | GeneSymbol=='Pcolce2' | GeneSymbol=='Pdgfrb' | GeneSymbol=='Pdlim4' | GeneSymbol=='Pfn2' | GeneSymbol=='Plaur' | GeneSymbol=='Plod1' | GeneSymbol=='Plod2')


hm_tab_hall_EpiMesenchym3 = subset(hm_tab, GeneSymbol=='Plod3' | GeneSymbol=='Pmepa1' | GeneSymbol=='Pmp22' | GeneSymbol=='Postn' | GeneSymbol=='Ppib' | GeneSymbol=='Prrx1' | GeneSymbol=='Prss2' | GeneSymbol=='Pthlh' | GeneSymbol=='Ptx3' | GeneSymbol=='Pvr' | GeneSymbol=='Qsox1' | GeneSymbol=='Rgs4' | GeneSymbol=='Rhob' | GeneSymbol=='Sat1' | GeneSymbol=='Scg2' | GeneSymbol=='Sdc1' | GeneSymbol=='Sdc4' | GeneSymbol=='Serpine1' | GeneSymbol=='Serpine2' | GeneSymbol=='Serpinh1' | GeneSymbol=='Sfrp1' | GeneSymbol=='Sfrp4' | GeneSymbol=='Sgcb' | GeneSymbol=='Sgcd' | GeneSymbol=='Sgcg' | GeneSymbol=='Slc6A8' | GeneSymbol=='Slit2' | GeneSymbol=='Slit3' | GeneSymbol=='Snai2' | GeneSymbol=='Sntb1' | GeneSymbol=='Sparc' | GeneSymbol=='Spock1' | GeneSymbol=='Spp1' | GeneSymbol=='Tagln' | GeneSymbol=='Tfpi2' | GeneSymbol=='Tgfb1' | GeneSymbol=='Tgfbi' | GeneSymbol=='Tgfbr3' | GeneSymbol=='Tgm2' | GeneSymbol=='Thbs1' | GeneSymbol=='Thbs2' | GeneSymbol=='Thy1' | GeneSymbol=='Timp1' | GeneSymbol=='Timp3' | GeneSymbol=='Tnc' | GeneSymbol=='Tnfaip3' | GeneSymbol=='Tnfrsf11B' | GeneSymbol=='Tnfrsf12A' | GeneSymbol=='Tpm1' | GeneSymbol=='Tpm2' | GeneSymbol=='Tpm4' | GeneSymbol=='Vcam1' | GeneSymbol=='Vcan' | GeneSymbol=='Vegfa' | GeneSymbol=='Vegfc' | GeneSymbol=='Vim' | GeneSymbol=='Wipf1' | GeneSymbol=='Wnt5A')

hm_tab_hall_EpiMesenchym <-rbind(hm_tab_hall_EpiMesenchym1, hm_tab_hall_EpiMesenchym2, hm_tab_hall_EpiMesenchym3)

hm_tab_hall_EpiMesenchym <- hm_tab_hall_EpiMesenchym %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_EpiMesenchym) = hm_tab_hall_EpiMesenchym$GeneSymbol
hm_hall_EpiMesenchym_annot = data.frame("Sig" = hm_tab_hall_EpiMesenchym$sig2)
rownames(hm_hall_EpiMesenchym_annot) = rownames(hm_tab_hall_EpiMesenchym)

ann_colors = list(Sig = c(sig = "#009E73", not = "#999999"))

hm_hall_EpiMesenchym <- pheatmap(hm_tab_hall_EpiMesenchym[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_EpiMesenchym$GeneSymbol, fontsize_row = 5, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_EpiMesenchym_annot, legend_labels = "Relative expression", gaps_col=c(3), treeheight_row = 10, main="EpiMesenchym", annotation_colors = ann_colors)

pdf(file="m1_dm2_hm_hall_EpiMesenchym.pdf",width=7,height=10)
hm_hall_EpiMesenchym
dev.off()


##### hm of hallmark EstrEarly genes

hm_tab_hall_EstrEarly1 = subset(hm_tab, GeneSymbol=='Abat' | GeneSymbol=='Abca3' | GeneSymbol=='Abhd2' | GeneSymbol=='Ablim1' | GeneSymbol=='Adcy1' | GeneSymbol=='Adcy9' | GeneSymbol=='Add3' | GeneSymbol=='Aff1' | GeneSymbol=='Akap1' | GeneSymbol=='Aldh3B1' | GeneSymbol=='Amfr' | GeneSymbol=='Anxa9' | GeneSymbol=='Aqp3' | GeneSymbol=='Ar' | GeneSymbol=='Areg' | GeneSymbol=='Arl3' | GeneSymbol=='Asb13' | GeneSymbol=='B4Galt1' | GeneSymbol=='Bag1' | GeneSymbol=='Bcl11B' | GeneSymbol=='Bcl2' | GeneSymbol=='Bhlhe40' | GeneSymbol=='Blvrb' | GeneSymbol=='Ca12' | GeneSymbol=='Calb2' | GeneSymbol=='Calcr' | GeneSymbol=='Cant1' | GeneSymbol=='Cbfa2T3' | GeneSymbol=='Ccn5' | GeneSymbol=='Ccnd1' | GeneSymbol=='Cd44' | GeneSymbol=='Celsr1' | GeneSymbol=='Celsr2' | GeneSymbol=='Chpt1' | GeneSymbol=='Cish' | GeneSymbol=='Cldn7' | GeneSymbol=='Clic3' | GeneSymbol=='Cxcl12' | GeneSymbol=='Cyp26B1' | GeneSymbol=='Deptor' | GeneSymbol=='Dhcr7' | GeneSymbol=='Dhrs2' | GeneSymbol=='Dhrs3' | GeneSymbol=='Dlc1' | GeneSymbol=='Dynlt3' | GeneSymbol=='Egr3' | GeneSymbol=='Elf1' | GeneSymbol=='Elf3' | GeneSymbol=='Elovl2' | GeneSymbol=='Elovl5' | GeneSymbol=='Endod1' | GeneSymbol=='Esrp2' | GeneSymbol=='Fam102A' | GeneSymbol=='Farp1' | GeneSymbol=='Fasn' | GeneSymbol=='Fcmr' | GeneSymbol=='Fdft1' | GeneSymbol=='Fhl2' | GeneSymbol=='Fkbp4' | GeneSymbol=='Fkbp5' | GeneSymbol=='Flnb' | GeneSymbol=='Fos' | GeneSymbol=='Foxc1' | GeneSymbol=='Frk' | GeneSymbol=='Gab2' | GeneSymbol=='Gfra1' | GeneSymbol=='Gja1' | GeneSymbol=='Gla' | GeneSymbol=='Greb1' | GeneSymbol=='Hes1' | GeneSymbol=='Hr' | GeneSymbol=='Hspb8' | GeneSymbol=='Igf1R' | GeneSymbol=='Igfbp4' | GeneSymbol=='Il17Rb' | GeneSymbol=='Il6St' | GeneSymbol=='Inhbb') 



hm_tab_hall_EstrEarly2 = subset(hm_tab, GeneSymbol=='Inpp5F' | GeneSymbol=='Isg20L2' | GeneSymbol=='Itpk1' | GeneSymbol=='Jak2' | GeneSymbol=='Kazn' | GeneSymbol=='Kcnk15' | GeneSymbol=='Kcnk5' | GeneSymbol=='Kdm4B' | GeneSymbol=='Klf10' | GeneSymbol=='Klf4' | GeneSymbol=='Klk10' | GeneSymbol=='Krt13' | GeneSymbol=='Krt15' | GeneSymbol=='Krt18' | GeneSymbol=='Krt19' | GeneSymbol=='Krt8' | GeneSymbol=='Lad1' | GeneSymbol=='Lrig1' | GeneSymbol=='Mapt' | GeneSymbol=='Mast4' | GeneSymbol=='Med13L' | GeneSymbol=='Med24' | GeneSymbol=='Micb' | GeneSymbol=='Mindy1' | GeneSymbol=='Mlph' | GeneSymbol=='Mpped2' | GeneSymbol=='Mreg' | GeneSymbol=='Msmb' | GeneSymbol=='Muc1' | GeneSymbol=='Myb' | GeneSymbol=='Mybbp1A' | GeneSymbol=='Mybl1' | GeneSymbol=='Myc' | GeneSymbol=='Myof' | GeneSymbol=='Nadsyn1' | GeneSymbol=='Nav2' | GeneSymbol=='Nbl1' | GeneSymbol=='Ncor2' | GeneSymbol=='Npy1R' | GeneSymbol=='Nrip1' | GeneSymbol=='Nxt1' | GeneSymbol=='Olfm1' | GeneSymbol=='Olfml3' | GeneSymbol=='Opn3' | GeneSymbol=='Ovol2' | GeneSymbol=='P2Ry2' | GeneSymbol=='Papss2' | GeneSymbol=='Pdlim3' | GeneSymbol=='Pdzk1' | GeneSymbol=='Pex11A' | GeneSymbol=='Pgr' | GeneSymbol=='Plaat3' | GeneSymbol=='Pmaip1' | GeneSymbol=='Podxl' | GeneSymbol=='Ppif' | GeneSymbol=='Prss23' | GeneSymbol=='Ptges' | GeneSymbol=='Rab17' | GeneSymbol=='Rab31' | GeneSymbol=='Rapgefl1' | GeneSymbol=='Rara' | GeneSymbol=='Rasgrp1' | GeneSymbol=='Rbbp8') 

hm_tab_hall_EstrEarly3 = subset(hm_tab, GeneSymbol=='Reep1' | GeneSymbol=='Ret' | GeneSymbol=='Retreg1' | GeneSymbol=='Rhobtb3' | GeneSymbol=='Rhod' | GeneSymbol=='Rps6Ka2' | GeneSymbol=='Rrp12' | GeneSymbol=='Scarb1' | GeneSymbol=='Scnn1A' | GeneSymbol=='Sec14L2' | GeneSymbol=='Sema3B' | GeneSymbol=='Sfn' | GeneSymbol=='Sh3Bp5' | GeneSymbol=='Siah2' | GeneSymbol=='Slc16A1' | GeneSymbol=='Slc19A2' | GeneSymbol=='Slc1A1' | GeneSymbol=='Slc1A4' | GeneSymbol=='Slc22A5' | GeneSymbol=='Slc24A3' | GeneSymbol=='Slc26A2' | GeneSymbol=='Slc27A2' | GeneSymbol=='Slc2A1' | GeneSymbol=='Slc37A1' | GeneSymbol=='Slc39A6' | GeneSymbol=='Slc7A2' | GeneSymbol=='Slc7A5' | GeneSymbol=='Slc9A3R1' | GeneSymbol=='Snx24' | GeneSymbol=='Sox3' | GeneSymbol=='Stc2' | GeneSymbol=='Sult2B1' | GeneSymbol=='Svil' | GeneSymbol=='Sybu' | GeneSymbol=='Syngr1' | GeneSymbol=='Syt12' | GeneSymbol=='Tbc1D30' | GeneSymbol=='Tfap2C' | GeneSymbol=='Tff1' | GeneSymbol=='Tff3' | GeneSymbol=='Tgif2' | GeneSymbol=='Tgm2' | GeneSymbol=='Thsd4' | GeneSymbol=='Tiam1' | GeneSymbol=='Tiparp' | GeneSymbol=='Tjp3' | GeneSymbol=='Tmem164' | GeneSymbol=='Tmprss3' | GeneSymbol=='Tob1' | GeneSymbol=='Tpbg' | GeneSymbol=='Tpd52L1' | GeneSymbol=='Tsku' | GeneSymbol=='Ttc39A' | GeneSymbol=='Tubb2B' | GeneSymbol=='Ugcg' | GeneSymbol=='Unc119' | GeneSymbol=='Wfs1' | GeneSymbol=='Wwc1' | GeneSymbol=='Xbp1' | GeneSymbol=='Znf185')

hm_tab_hall_EstrEarly <-rbind(hm_tab_hall_EstrEarly1, hm_tab_hall_EstrEarly2, hm_tab_hall_EstrEarly3)


hm_tab_hall_EstrEarly <- hm_tab_hall_EstrEarly %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_EstrEarly) = hm_tab_hall_EstrEarly$GeneSymbol
hm_hall_EstrEarly_annot = data.frame("Sig" = hm_tab_hall_EstrEarly$sig2)
rownames(hm_hall_EstrEarly_annot) = rownames(hm_tab_hall_EstrEarly)

hm_hall_EstrEarly <- pheatmap(hm_tab_hall_EstrEarly[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_EstrEarly$GeneSymbol, fontsize_row = 5, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_EstrEarly_annot, border_color=NA, legend_labels = "Relative expression", gaps_col=c(3), treeheight_row = 10, main="EstrEarly", annotation_colors = ann_colors)

pdf(file="m1_dm2_hm_hall_EstrEarly.pdf",width=7,height=10)
hm_hall_EstrEarly
dev.off()




## remove duplicates to make TF figure
library(stringr)
library(dplyr)
library(ggplot2)

TF_data_up <- up_genes_enrichr[["TF_Perturbations_Followed_by_Expression"]]
View(TF_data_up)
TF_data_up = subset(TF_data_up, Adjusted.P.value<.05)
TF_data_up$TF <- gsub("([A-Za-z]+).*", "\\1", TF_data_up$Term)
TF_data_up$dir <- tolower(word(TF_data_up$Term,-1))
TF_data_up$text <- paste(TF_data_up$TF, TF_data_up$dir, sep = " ", collapse = NULL)
TF_data_up <- TF_data_up %>% distinct(text, .keep_all = TRUE)

TF_data_up <- TF_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
TF_data_up$db <- "TF_Perturbations_Followed_by_Expression"
TF_fig_up <-ggplot(data=TF_data_up, aes(x= reorder(text, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("TF_Perturbations_Followed_by_Expression") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
TF_fig_up

pdf(file="m2_dm2_TF_fig_up.pdf",width=8,height=4)
TF_fig_up
dev.off()


TF_data_down <- down_genes_enrichr[["TF_Perturbations_Followed_by_Expression"]]
View(TF_data_down)
TF_data_down = subset(TF_data_down, Adjusted.P.value<.05)
TF_data_down$TF <- gsub("([A-Za-z]+).*", "\\1", TF_data_down$Term)
TF_data_down$dir <- tolower(word(TF_data_down$Term,-1))
TF_data_down$text <- paste(TF_data_down$TF, TF_data_down$dir, sep = " ", collapse = NULL)
TF_data_down <- TF_data_down %>% distinct(text, .keep_all = TRUE)

TF_data_down <- TF_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
TF_data_down$db <- "TF_Perturbations_Followed_by_Expression"
TF_fig_down <-ggplot(data=TF_data_down, aes(x= reorder(text, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("TF_Perturbations_Followed_by_Expression") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
TF_fig_down

pdf(file="m2_dm2_TF_fig_down.pdf",width=8,height=4)
TF_fig_down
dev.off()

BiocManager::install("org.Hs.eg.db")
BiocManager::install("org.Mm.eg.db")


rm(list = ls())

#### PRELIMINARIES ############################################################################################# 

#*Uploads the needed libraries --------------------------------------------------------------------------------

require(DESeq2)

require(ggplot2)

require(data.table)

require(plotly)

require(DT)

require(htmlwidgets)

require(R2HTML)


soft_version <- packageVersion("DESeq2")

#*Set the number of significant digits for the output --------------------------
sig_dig = 4

## Analysis for mfn2 MEFs at dp8

#*Set the working directory ---------------------------------------------------------------------------------

#get the default wd
default_wd <- getwd()

#Set the directory where all the saved outputs will be stored
setwd("/Users/jakemann/RNAseq_Dec20/output_v1/m2_dp8")

new_wd <- getwd()
#### DATA UPLOAD ###############################################################################################################

annotation_table <- read.csv("/Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.95_gene_annotation_table.txt", sep = "\t")

# inputs the list of the count files
input_files <- list.files(path = "/Users/jakemann/RNAseq_Dec20/counts_v1/", pattern = "*tab$", full.names = TRUE)
input_files <- input_files[grep(input_files, pattern="m2_dp8|WT_dp8")]

# inputs the list of the summary files
summary_files <-  list.files(path = "/Users/jakemann/RNAseq_Dec20/counts_v1/", pattern = "summary$", full.names = TRUE)
summary_files <- summary_files[grep(summary_files, pattern="m2_dp8|WT_dp8")]

#Reads the count files (input_files)
#create a list; each element of a list (named ''sample'' in the following) is a count table
counts_tables <- lapply(input_files, fread, header = FALSE, stringsAsFactors = FALSE, skip=2, select=c(1,7), col.names=c("GeneID","Counts"))

#Reads the summary files (summary_files)
#create a list; each element of a list is a summary table
summary_tables <- lapply(summary_files, read.delim, header = FALSE, stringsAsFactors = FALSE, skip=1, quote = "")

#takes the names of the genes from the counts_tables
genes_names <- counts_tables[[1]]$GeneID
genes_number = length(genes_names)

#take the names of each element (sample) of the list from the input files 
samples_names <- substr(noquote(unlist(lapply(basename(input_files), tools::file_path_sans_ext))) ,1,8)

#assign the names to the elements of the counts_tables list, composed by the counts tables; NOTE: each replicate has its ID
names(counts_tables) <- samples_names

#Creates a single data frame with all the samples as columns, for reporting and clustering purposes -- see heatmaps below
counts_tables_dataframe <- sapply(counts_tables, '[[', 2)
#assignes the genes names to the rows of the counts_tables_dataframe
rownames(counts_tables_dataframe) <- genes_names

#assign the names to the elements of the summary_tables list, composed by the summary tables; NOTE: each replicate has its ID
names(summary_tables) <- samples_names

#take the roots of the samples_names; replicates cannot be distinguished here -- set the name of the control 
name_control <- "WT_dp8"
names_mutants <- setdiff(unique((substr(samples_names,1,6))), name_control)

#Creates the datasets_matrix, containing all the names of the datasets and replicates for reporting purposes
datasets_matrix <- matrix(samples_names, nrow=length(grep(name_control, samples_names)), ncol=length(names_mutants)+1)
colnames(datasets_matrix) <- c(names_mutants, name_control)





####PAIRWISE COMPARISONS ####################################################################################################
# *Set the tresholds ----------------------------------------------------------------------------------------------------

lfc = 1.5 #treshold for the ADJUSTED fold changes
pval = 0.01 #treshold for the ADJUSTED pvalues

num_comparisons=1 #loop's counter initialisation

###COMPARISONS, PLOTS AND TABLES LOOP ======================================================================================

# *Start of the loop ------------------------------------------------------------------------------------------------------
while(num_comparisons <= length(names_mutants)){    

  # **Grabbing the data ----------------------------------------------------------------------------------------------------  
  name_mutant <- names_mutants[num_comparisons]  
  
  #extract the needed samples from the whole list
  assign( paste0("counts_tables_", name_control), counts_tables[grep(name_control, samples_names, value = TRUE)]) #extract the controls counts tables 

  assign( paste0("counts_tables_", name_mutant), counts_tables[grep(name_mutant, samples_names, value = TRUE)]) #extract the mutants counts tables 

  assign( paste0("counts_list_", name_control, "_", name_mutant) , c( get( paste0("counts_tables_", name_control)),  get(paste0("counts_tables_", name_mutant)) )) #merges the two counts tables above in one list

  # **Creating the counts matrix needed for DESeq2 AND ... ---------------------------------------------------------------------  

  #creates the counts matrix: each row is a gene, the first n columns are the counts coming from the control's replicates, the last p columns are the counts from the mutant replicates
  assign( paste0( "columns_list_", name_control, "_", name_mutant), sapply(get( paste0("counts_list_", name_control, "_", name_mutant) ), `[[` , 2) )  #takes one column each two (i.e. only the columns containing the counts) from the counts list

  assign( paste0( "counts_matrix_", name_control, "_", name_mutant),  matrix(unlist( get( paste0( "columns_list_", name_control, "_", name_mutant) ) , use.names = FALSE), ncol = length( get( paste0("counts_list_", name_control, "_", name_mutant) ) ) )  )#convert the list into a matrix, for convenience

  assign( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names"), get(  paste0( "counts_matrix_", name_control, "_", name_mutant) ) )  #the counts matrix with names is also created; at this stage is the same of the counts matrix

  # #filters out low counts
  
  # matrix_to_filter <- get(paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names"))
  # summing_rows <- apply(matrix_to_filter, 1, sum)
  # rows_to_keep <- which(summing_rows > 10)
  # matrix_filtered <- matrix_to_filter[rows_to_keep,]
  # genes_names <- names(matrix_filtered)
  # assign( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names"), matrix_filtered)

  #** ... AND Creating the summary matrix ---------------------------------------------------------------------
  #The summary matrix contains, for each comparison, the general information about the counts statistics
  
  #extracts the needed samples from the whole list
  assign( paste0("summary_tables_", name_control), summary_tables[grep(name_control, samples_names, value = TRUE)]) #extract the controls summary tables 
  
  assign( paste0("summary_tables_", name_mutant), summary_tables[grep(name_mutant, samples_names, value = TRUE)]) #extract the mutants summary tables 
  
  assign( paste0("summary_list_", name_control, "_", name_mutant) , c( get( paste0("summary_tables_", name_control)),  get(paste0("summary_tables_", name_mutant)) )) #merges the two summary tables above in one list
  
  #creates the summary matrix: each row is a gene, the first n columns are the counts coming from the control's replicates, the last p columns are the counts from the mutant replicates
  assign( paste0( "columns_list_", name_control, "_", name_mutant), sapply(get( paste0("summary_list_", name_control, "_", name_mutant) ), `[[` , 2) )  #takes one column each two (i.e. only the columns containing the counts) from the counts list
  
  assign( paste0( "summary_matrix_", name_control, "_", name_mutant),  matrix(unlist( get( paste0( "columns_list_", name_control, "_", name_mutant) ) , use.names = FALSE), ncol = length( get( paste0("summary_list_", name_control, "_", name_mutant) ) ) )  )#convert the list into a matrix, for convenience
  
  assign( paste0( "summary_matrix_", name_control, "_", name_mutant, "_with_names"), get(  paste0( "summary_matrix_", name_control, "_", name_mutant) ) )  #the counts matrix with names is also created; at this stage is the same of the counts matrix
  
  
  col_names <-c(grep(name_control, samples_names, value=TRUE),  grep(name_mutant, samples_names, value = TRUE))  # takes the right names for the columns of the counts matrix, from the sample names 

  dummy<- get( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names") )         #workaround for assigning dynamically colnames and rownames to the counts_matrix - START
  colnames(dummy) <- col_names
  assign(  paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names")  ,  dummy)

  dummy<- get( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names") )
  rownames(dummy) <- genes_names
  assign(  paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names")  ,  dummy)    #workaround for assigning dynamically colnames and rownames to the counts_matrix - END

  dummy<- get( paste0( "summary_matrix_", name_control, "_", name_mutant) )         #workaround for assigning dynamically colnames and rownames to the summary_matrix - START
  colnames(dummy) <- col_names
  rownames(dummy) <- summary_tables[[1]][,1]
  assign(  paste0( "summary_matrix_", name_control, "_", name_mutant)  ,  dummy) #workaround for assigning dynamically colnames and rownames to the summary_matrix - END

  # #Evaluating the number of the reads counted and uncounted by HTSEQ2
  total_uncounted <- apply(get(paste0( "summary_matrix_", name_control, "_", name_mutant))[-1,], 2, sum)
  total_counted <- get(paste0( "summary_matrix_", name_control, "_", name_mutant))[1,]
  total_number <- total_uncounted + total_counted
  fraction_counted <- signif(total_counted/total_number, digits=3)
  void_row<-rep(" ", length(total_counted))
  statistics_matrix <- rbind(total_number, total_counted, total_uncounted,fraction_counted,void_row)
  rownames(statistics_matrix)<-c("TOTAL READS MAPPED", "TOTAL READS COUNTED", "TOTAL READS NON COUNTED", "FRACTION COUNTED" , "DETAILS UNCOUNTED:")

    #merging summary matrix and statistics matrix
  dummy<- rbind(statistics_matrix, get( paste0( "summary_matrix_", name_control, "_", name_mutant) )) 
  assign(  paste0( "summary_matrix_", name_control, "_", name_mutant)  ,  dummy)
  
  #**Defining the "experimental design" -----------------------------------
  comparisons <- sapply(col_names, function(x) substr(x,1,6))  #takes only the first parts of the column names; these are the identifiers of the control and mutant's data, irrespectively of the replicates 

  experimental_design <- data.frame(row.names = col_names, comparisons=comparisons)
  experimental_design$correlated <- c(seq(1: length(grep(name_control, col_names)) ),  seq(1: length(grep(name_mutant, col_names)) ) )
  
  #experimental_design$comparisons<- relevel(experimental_design$comparisons, ref=name_control)
  experimental_design$comparisons<- factor(experimental_design$comparisons, levels=c(name_control, name_mutant))
  
  #**Calling DESeq2 ------------------------

  #Creating the dds data structure, needed from DESEQ2
  dds <- DESeqDataSetFromMatrix(countData= get( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names")) , colData=experimental_design, design=~comparisons)
  
  #Calls DEseq2 on dds and store the results in de
  de<-DESeq(dds)

  #Uses the built-in DESEQ2 results operator for creating a matrix-like structure storing the DE analysis results; the structure is stored in res_raw and subsequently converted in a data frame (res) 
  
  res_raw <-results(de)
  res <- signif(as.data.frame(res_raw), digits = sig_dig) #converts into data frame and sets the number of digits
  res <- cbind(rownames(res), res) #adds one column with the genes ID to the res dataframe (it will be useful later on)
  colnames(res) <- c("ID","Mean of norm counts", "log2 FC (MLE)", "lFC Std Err" , "Wald Stat", "Wald test pval", "BH pval") # sets the column names
  
  
  ##*Plots and Tables -----------------------------------------------------------------------------------------------------------------
  
  #**Assigns dynamic names to the table to export, taking the res data frame defined above ---------------------------------- 
  assign(paste0("results_table_",name_control,"_", name_mutant),  res ) #takes the whole res data frame
  dummy<-merge(annotation_table, get(paste0("results_table_",name_control,"_", name_mutant)), by.x="GeneSymbol", by.y="ID")
  assign(paste0("results_table_",name_control,"_", name_mutant), dummy)
  
  
  assign(paste0("results_table_topscore_",name_control,"_", name_mutant), res[which(abs(res$`log2 FC (MLE)`)>lfc & res$`BH pval` <pval),]) #takes only the rows of the res data frame that have the best log2FC and the best BH pval
  dummy<-merge(annotation_table, get(paste0("results_table_topscore_",name_control,"_", name_mutant)), by.x="GeneSymbol", by.y="ID")
  assign(paste0("results_table_topscore_",name_control,"_", name_mutant), dummy)
  
  
  #**Prints the tables above in .csv---------------------------------------------------------------------------------
  
  #write.table(get(paste0("results_table_topscore_",name_control,"_", name_mutant)), file=paste0("results_table_topscore_",name_control,"_", name_mutant, ".tsv"),quote=F,sep="\t", row.names = FALSE)
  
  #write.table(get(paste0("results_table_",name_control,"_", name_mutant)), file=paste0("results_table_",name_control,"_", name_mutant, ".tsv"), quote=F,sep="\t", row.names = FALSE)
  
  #write.table(get(paste0("counts_matrix_",name_control,"_", name_mutant, "_with_names")), file=paste0("counts_matrix_",name_control,"_", name_mutant, ".tsv"), quote=F,sep="\t", row.names = FALSE)
  
  #**Building the datatables ---------------------------------------------------------------------------------------------------------
  #The datatables are widgets created through the saveWidget function; this can "automatically" be sorted clicking on it --> Useful for having a general overview
  
  #***Summingup datatable ------------------------------------------
  #Builds the datatable containing all the resuls of the DE analysis
  
  #Creates the summingup_matrix, which includes only some columns of the correspondent results_table (more handy for visualisation) 
  assign(paste0("summingup_matrix_",name_control, "_", name_mutant), get(paste0("results_table_",name_control,"_", name_mutant))[, c(1:7,10,11)])
  dummy <- get(paste0("summingup_matrix_",name_control, "_", name_mutant))
  rownames(dummy) <- c()
  assign( paste0("summingup_matrix_",name_control, "_", name_mutant), dummy )
  #Creates a dynamic table (widget) of all the results
  assign(paste0("summingup_datatable_",name_control, "_", name_mutant) , datatable(get(paste0("summingup_matrix_",name_control, "_", name_mutant))) )
  #saves the datatable widget to in the working directory
  saveWidget( get(paste0("summingup_datatable_",name_control, "_", name_mutant)), file= paste0("summingup_datatable_",name_control, "_", name_mutant, ".html") )

  #***Topscores datatable ----------------------------------------- 
  #Builds the matrix containing only the top log2FC (adjusted) top scores (independently on the pvalues)
  assign(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant),  subset(get(paste0("summingup_matrix_",name_control, "_", name_mutant)),  (abs(get(paste0("summingup_matrix_",name_control, "_", name_mutant))[,"log2 FC (MLE)"]) >lfc &  get(paste0("summingup_matrix_",name_control, "_", name_mutant))[,"BH pval"] <pval )  ) ) 
  dummy <- get(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant))
  rownames(dummy) <- c()
  assign( paste0("summingup_matrix_topscores_",name_control, "_", name_mutant), dummy )
  #Creates a dynamic table (widget) of the topscores
  assign(paste0("topscores_datatable_",name_control, "_", name_mutant) , datatable(get(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant))) )
  #saves the datatable widget to in the working directory
  saveWidget( get(paste0("topscores_datatable_",name_control, "_", name_mutant)), file= paste0("topscores_datatable_",name_control, "_", name_mutant, ".html") )

  #**Dispersion plot---------------------------------------------------------------------------------------------
  #This will not be stored or printed; for sanity check purposes only
  plotDispEsts(de, main=paste(name_mutant, " vs ", name_control))

  #**MA plot -----------------------------------------------------------------------------------------------------
  #Plot of the mean of normalised (according to DESEq) counts of the control vs. the log2fold change "corrected as well"
  #***Plot static MA -------------------------------------------------------------------------------------------------- 

  #Creates the dataframe for ggplot
  MA_dataframe <- data.frame(Ln_mean=log(res$`Mean of norm counts`), foldchange = res$`log2 FC (MLE)`, pvaladj=res$`BH pval`)
  rownames(MA_dataframe) <- rownames(res)
  MA_dataframe <- MA_dataframe[which(!is.na(MA_dataframe$foldchange)), ]
  MA_dataframe$Diff_Exp <- rep(0, nrow(MA_dataframe))
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)>=lfc  )] <- "Relevant log2 FC" 
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)>=lfc & MA_dataframe$pvaladj<=pval)] <- "Relevant log2 FC and Pval" 
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)<lfc)] = "Non significant" 

  #Creates the ggplot
  r <-ggplot(MA_dataframe, aes(x=Ln_mean, y=foldchange, text=rownames(MA_dataframe)))+
    geom_point(aes(colour= Diff_Exp), size=.5)+
    geom_hline(yintercept=0, linetype=1, color="green") + geom_hline(yintercept=lfc,linetype=3, color="green") + geom_hline(yintercept=-lfc, linetype=3, color="green")+
    scale_colour_manual(values = c("Relevant log2 FC and Pval" ="red", "Non significant" = "black", "Relevant log2 FC" ="blue"))+
    xlab("ln mean of norm. counts") + ylab("log2 fold change")+ scale_x_continuous(labels = function(x)as.integer(exp(x)))+
    #+ylim(-4, 4)
    labs(aesthetic='custom text')+
    ggtitle(paste("MA plot", name_control, "vs.", name_mutant))

  #Saves the plot in a variable
  assign(paste("static", "MAplot", name_control, name_mutant, sep = "_"), r)

  #Saves the pdf of the plot in the OUTPUT directory
  pdf(file= paste("static", "MAplot", name_control, name_mutant, ".pdf", sep = "_"))
  print(r)
  dev.off()

  #***Plot dynamic MA -------------------------------------------------------------------------------------------------- 

  #Creates the plot
  s<- ggplotly(r, tooltip=c("text", "x", "y") )

  #SAves the plot in a variable
  assign(paste("dynamic", "MAplot", name_control, name_mutant, sep = "_"), s)

  #Saves the WIDGET of the plot in the OUTPUT directory
  print(s)
  saveWidget(s, file= paste0("dynamic_MAplot",name_control, "_", name_mutant, ".html") )

  #**Volcano Plots --------------------------------------------------------------

  #***Plot static volcano--------------------------------------------------------

  #creates a data frame with some of the columns taken from res which, in turn, summarises the DESEq2 results
  tab = data.frame(logFC = res$`log2 FC (MLE)`, negLogPval = -log10(res$`BH pval`))
  rownames(tab) <- rownames(res)

  #Identifies the DE genes
  candidate_results <- subset(res, (abs(res$`log2 FC (MLE)`) > lfc & res$`BH pval` < pval))
  assign( paste0("candidate_results_tab_",name_control,"_",name_mutant), subset(tab, (abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval))) )

  #Identifies the not DE genes
  non_candidate_results <- subset(res, (abs(res$`log2 FC (MLE)`) <= lfc | res$`BH pval` >= pval))
  assign(paste0("non_candidate_results_tab_",name_control,"_",name_mutant), subset(tab, (abs(tab$logFC) <= lfc | tab$negLogPval <= -log10(pval))) )

  #Mark DE and non DE genes in the dataframe 
  dummy <- get(paste0("non_candidate_results_tab_",name_control,"_",name_mutant))
  dummy$Diff_Exp <- "DE -"
  assign(paste0("non_candidate_results_tab_",name_control,"_",name_mutant), dummy)

  dummy <- get(paste0("candidate_results_tab_",name_control,"_",name_mutant))
  if(nrow(dummy)>0){dummy$Diff_Exp <- "DE +"}
  assign(paste0("candidate_results_tab_",name_control,"_",name_mutant), dummy)

  #merge the "candidate" and "non candidate" dataframes
  assign(paste0("results_tab_",name_control,"_",name_mutant), rbind(get(paste0("candidate_results_tab_",name_control,"_",name_mutant)), get(paste0("non_candidate_results_tab_",name_control,"_",name_mutant)) ))

  #builds the ggplot
  h<-ggplot( get(paste0("results_tab_",name_control,"_",name_mutant)), aes(x=logFC, y=negLogPval, text=rownames(get(paste0("results_tab_",name_control,"_",name_mutant))) ) )+
   geom_point(aes(colour= Diff_Exp), size=.5)+
   geom_hline(yintercept=-log10(pval), linetype=3, color="green") + geom_vline(xintercept=-c(-lfc, lfc), linetype=3, color="blue")+
   scale_colour_manual(values = c("DE +" ="red", "DE -" = "black"))+
   xlab("log2 fold change") + ylab("-log10 pvalue")+ 
   ggtitle(paste("Volcano plot", name_control, "vs.", name_mutant))

  #Saves the plot in a variable
  assign(paste("static", "Vplot", name_control, name_mutant, sep = "_"), h)

  #Saves the pdf of the plot in the OUTPUT directory
  pdf(file= paste("static", "Vplot", name_control, name_mutant, ".pdf", sep = "_"))
  print(h)
  dev.off()

  #***Plot dynamic volcano----------------------------------------------------------------------------------------------------------

  #Creates the plot
  k<- ggplotly(h, tooltip=c("text", "x", "y") )

  #Saves the plot in a variable
  assign(paste("dynamic", "Vplot", name_control, name_mutant, sep = "_"), k)

  print(k)

  #Saves the WIDGET of the plot in the OUTPUT directory
  saveWidget(k, file= paste0("dynamic_Vplot",name_control, "_", name_mutant, ".html") )

  #Updates the loop counter
  print(num_comparisons)
  num_comparisons= num_comparisons +1
} 
#*End of the loop --------------------------------------------


# #PRODUCES ADDITIONAL TABLES =================================================

#**Produces the genes_lenghts  ---------------------------------------------------------------
#takes the genes lengths from the first feature counts input file and creates the genes_lenghts table
feature_counts_table <- fread(input_files[[1]])
genes_lenghts <- as.matrix(feature_counts_table$Length)
rownames(genes_lenghts) <- feature_counts_table$Geneid
colnames(genes_lenghts) <- "Lenght"

#**Produces the annotation_table_with_length ---------------------------------------------------------------
annotation_table_with_length <- merge(annotation_table, genes_lenghts, all.x=T, by.x="GeneSymbol", by.y="row.names")

#** Raw counts, CPM, TPM  ---------------------------------------------------------------

# produces the raw_counts matrix
# merges the raw_counts matrix (all the raw counts for each sample) with the genes_lenghts_table
raw_counts <- (merge(annotation_table_with_length, counts(de), by.x="GeneSymbol", by.y="row.names", all.x=T))
write.csv(raw_counts, file="raw_counts.csv", row.names=FALSE)

# produces the Raw Counts Normalised (DESeq2 normalisation) table 
raw_counts_normalised <- (merge(annotation_table_with_length, counts(de, normalized=T), by.x="GeneSymbol", by.y="row.names", all.x=T))
write.csv(raw_counts_normalised, file="raw_counts_normalised.csv", row.names=FALSE)

# computes the CPM on the raw counts
CPM_working = subset(raw_counts, select = c(7:ncol(raw_counts)))
CPM_working$sum <- rowSums(CPM_working)
CPM <- apply(raw_counts[,c(7:ncol(raw_counts))],2, function(x){x*10^6/CPM_working$sum})
CPM <- cbind(raw_counts[,c(1:6)],CPM)
write.csv(CPM, file="raw_counts_CPM.csv", row.names=FALSE)

# computes the TPM
RPK <-  (raw_counts[,c(7:ncol(raw_counts))])/(raw_counts$Lenght/1000)  #<- Reads Per Kilobase (Normalises the counts for the genes length, expressed in kilobases)
Scaling_factor <- apply(RPK,2,sum)/10^6
TPM <- sweep(RPK, 2, Scaling_factor, FUN = '/')
TPM <- cbind(raw_counts[,c(1:6)],TPM)
write.csv(TPM, file="raw_counts_TPM.csv", row.names=FALSE)

#** Produces the results_tables  ---------------------------------------------------------------

#computes the average CPM for controls and mutants
assign(paste0("average_",name_control), apply(CPM[,grep(colnames(CPM), pattern=name_control)],1,mean ) )
dummy<-as.data.frame(get(paste0("average_",name_control)))
colnames(dummy) <- paste0("Average CPM ",name_control)
rownames(dummy) <- CPM$gene_id
assign(paste0("average_",name_control), dummy)
#
assign(paste0("average_",names_mutants), apply(CPM[,grep(colnames(CPM), pattern=names_mutants)],1,mean ) )
dummy<-as.data.frame(get(paste0("average_",names_mutants)))
colnames(dummy) <- paste0("Average CPM ",names_mutants)
rownames(dummy) <- CPM$gene_id
assign(paste0("average_",names_mutants), dummy)
#
#merges the averages CPMs tables with the results table and the genes_length table
dummy<- merge(get(paste0("average_",name_control)),  get(paste0("average_",names_mutants)), by="row.names") 
rownames(dummy) <- dummy$Row.names
dummy<- dummy[,-1]
#
assign(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM"), merge( get(paste0("results_table_",name_control,"_", names_mutants)), dummy, by.y="row.names", by.x="gene_id") ) 
assign(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM"), merge( get(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM")), genes_lenghts, by.x="GeneSymbol", by.y="row.names", all.x=T ) )
write.csv(get(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM")), file=paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM.csv"), row.names = FALSE)
#
assign(paste0("results_table_topscore_", name_control,"_", names_mutants, "_", "CPM"), merge( get(paste0("results_table_topscore_",name_control,"_", names_mutants)), dummy, by.y="row.names", by.x="gene_id") ) 
assign(paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM"), merge( get(paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM")), genes_lenghts, by.x="GeneSymbol", by.y="row.names", all.x=T ) )
write.csv(get(paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM")), file=paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM.csv"), row.names = FALSE)

#**Filters the counts matrix  according to the CPM ------------------------

# # Filters the counts matrix eliminating the rows where at least one element violates the condition (low counts threshold)

count_zeroes<- function(x){length(which(x<=.5))}
numberofzeroes <- apply(CPM[,c(7:ncol(CPM))], 1, count_zeroes)
CPM_filtered <- CPM[which(numberofzeroes<=5),]
# write.csv(counts_matrix_cpm_filtered, file="cpm_counts_filtered.csv")
# 
#Filters the results_mtrx with the same criteria above 
results_mtrx <- get(paste0("results_table_",name_control,"_", name_mutant, "_CPM"))
results_mtrx_filtered <- results_mtrx[which(results_mtrx$gene_id %in% CPM_filtered$gene_id), ]
#write.csv(results_mtrx, file="results_table.csv", row.names = FALSE)
write.csv(results_mtrx_filtered, file="results_table_CPM_filtered.csv", row.names = FALSE)
#Filters the results_mtrx with the same criteria above 
results_mtrx <- get(paste0("results_table_",name_control,"_", name_mutant, "_CPM"))
results_mtrx_filtered <- results_mtrx[which(results_mtrx$gene_id %in% CPM_filtered$gene_id), ]
#write.csv(results_mtrx, file="results_table.csv", row.names = FALSE)
write.csv(results_mtrx_filtered, file="results_table_CPM_filtered.csv", row.names = FALSE)

results_mtrx_topscore <- get(paste0("results_table_topscore_",name_control,"_", name_mutant, "_CPM"))
results_mtrx_topscore_filtered <- results_mtrx_topscore[which(results_mtrx_topscore$gene_id %in% CPM_filtered$gene_id), ]
write.csv(results_mtrx_topscore_filtered, file="results_table_CPM_topscore_filtered.csv", row.names = FALSE)

#CREATES A HEATMAP =================================================
library(gplots)
#class(CPM_filtered) <- "numeric"
#CPM_filtered_resorted <-CPM_filtered[order(CPM_filtered[,7], decreasing = TRUE),]
#class(CPM_filtered_resorted) <- "numeric"
CPM_filtered_heat <- as.matrix(CPM_filtered[,c(7:ncol(CPM))])
class(CPM_filtered_heat) <- "numeric"

CPM_filtered_heat_sorted <-CPM_filtered_heat[order(CPM_filtered_heat[,1], decreasing = TRUE),]

pdf(file="m2_dp8_hm.pdf")
heatmap.2(CPM_filtered_heat_sorted[c(1:7000),], distfun=function(x) dist(x, method="minkowski"), hclustfun=function(x) hclust(x, method="ward.D2"), scale="row", trace = 'none', labRow = FALSE, dendrogram="column", margins=c(8,1), cexCol = .75)
dev.off()



# #CREATES THE TABLE FOR GSEA =====================================================
# #The data are taken from the res_raw table.
GSEA_table <- data.frame(Sign= sign(res_raw$log2FoldChange), pval=(res_raw$padj),stringsAsFactors = FALSE)
GSEA_table$metric <- -log10(GSEA_table$pval)/GSEA_table$Sign
rownames(GSEA_table) <- rownames(res_raw)

GSEA_input_ranked_table <- cbind(rownames(GSEA_table), GSEA_table$metric)
colnames(GSEA_input_ranked_table) <- cbind("Gene name", "Metric")
GSEA_input_ranked_table<-GSEA_input_ranked_table[-which(is.na(GSEA_input_ranked_table[,"Metric"])),]

write.table(GSEA_input_ranked_table, file=paste0("GSEA_input_ranked_table_",name_control,"_", name_mutant, ".rnk"), quote=F,sep="\t", row.names = FALSE)





## further analysis, interpretation, and figures =====================================================
require(dplyr)


vplot_tab <- merge(results_table_WT_dp8_m2_dp8_CPM, annotation_table, by="gene_id")
vplot_tab <- vplot_tab %>% rename("BH_pval" = "BH pval")
vplot_tab <- vplot_tab %>% rename("log2FC" = "log2 FC (MLE)")

########## make volcano plot 
library(ggplot2)
library(ggrepel)
library(dplyr)
library(pheatmap)

vplot_tab$neglog_p = -log10(vplot_tab$BH_pval)
vplot_tab <- vplot_tab[complete.cases(vplot_tab), ]

############  edit formatting of signficance for labelleing

vplot_tab$significant = ifelse(vplot_tab$neglog_p > 2 & vplot_tab$log2FC <=-1.5 | vplot_tab$neglog_p > 2 & vplot_tab$log2FC>=1.5, "sig", "not")
vplot_tab_label1 = subset(vplot_tab, neglog_p > 250)
vplot_tab_label2 = subset(vplot_tab, neglog_p > 150)
vplot_tab_label2 <- subset(vplot_tab_label2, log2FC <=-5 | log2FC>=5)
vplot_tab_label3 = subset(vplot_tab_label2, log2FC <=-5)
vplot_tab_label4 = subset(vplot_tab, neglog_p > 50 & vplot_tab$log2FC <=-7 | vplot_tab$neglog_p > 50 & vplot_tab$log2FC>=8  | log2FC<=-12)
vplot_tab_label_final <- rbind(vplot_tab_label1, vplot_tab_label2)
vplot_tab_label_final <- rbind(vplot_tab_label_final, vplot_tab_label3)
vplot_tab_label_final <- rbind(vplot_tab_label_final, vplot_tab_label4)
vplot_tab_label_final <- vplot_tab_label_final %>% distinct(GeneSymbol.x, .keep_all = TRUE)

############

m2_dp8_vol <- ggplot(data=vplot_tab, aes(x=log2FC, y=neglog_p, colour=significant)) + geom_point(alpha=0.7, size=1.75) + xlab("Log2 Fold change") + ylab("-log10 p-value") + theme_classic() + theme(legend.position="none") + geom_text_repel(data = vplot_tab_label_final, aes(label = GeneSymbol.x), color="black",size = 3, key_glyph = "point") + theme(plot.title = element_text(hjust = 0.2)) + ggtitle("m2_dp8") + scale_colour_manual(values = c("#999999", "#0072B2")) + scale_y_continuous(labels = scales::comma, expand = c(0,5), breaks = seq(0, 300, 50), limits=c(0, 300))
m2_dp8_vol

pdf(file="m2_dp8_vol.pdf",width=4,height=6)
m2_dp8_vol
dev.off()

############

######################## make heatmaps

##### hm of significantly differentially expressed genes

vplot_tab_hm <- vplot_tab
vplot_tab_hm$significant = ifelse(vplot_tab$BH_pval <=.0001 & vplot_tab$log2FC <=-3 | vplot_tab$log2FC>=2.2, "sig", "not")
vplot_tab_hm$sig2 = ifelse(vplot_tab$BH_pval <=.01, "sig", "not")


norm_counts <- as.data.frame(counts(de, normalized=T))
norm_counts$GeneSymbol <- rownames(norm_counts)
numberofzeroes <- apply(norm_counts[,c(1:ncol(norm_counts))], 1, count_zeroes)
norm_counts_filtered <- norm_counts[which(numberofzeroes<=5),]
norm_counts_filtered$GeneSymbol.x <- rownames(norm_counts_filtered)

hm_tab <- merge(norm_counts_filtered, vplot_tab_hm, by="GeneSymbol.x")
hm_tab <- hm_tab[complete.cases(hm_tab), ]
write.table(hm_tab, file="norm_counts_gsea.csv",sep=",")

hm_tab_sig = subset(hm_tab, significant=="sig")

hm_sig <- pheatmap(hm_tab_sig[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", cutree_rows = 7, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, main = "Significantly differentially expressed genes")

pdf(file="m2_dp8_hm_sig.pdf",width=8,height=10)
hm_sig
dev.off()


### make table for comparison hm
hm_tab_m2_dp8 = subset(hm_tab, select=c("gene_id","WT_dp8_D","WT_dp8_E","WT_dp8_F","m2_dp8_D","m2_dp8_E","m2_dp8_F","log2FC","BH_pval","neglog_p","significant","sig2","GeneSymbol"))
hm_tab_m2_dp8 <- hm_tab_m2_dp8 %>% rename("WT_dp8_D_m2" = "WT_dp8_D")
hm_tab_m2_dp8 <- hm_tab_m2_dp8 %>% rename("WT_dp8_E_m2" = "WT_dp8_E")
hm_tab_m2_dp8 <- hm_tab_m2_dp8 %>% rename("WT_dp8_F_m2" = "WT_dp8_F")
hm_tab_m2_dp8 <- hm_tab_m2_dp8 %>% rename("log2FC_m2dp8" = "log2FC")
hm_tab_m2_dp8 <- hm_tab_m2_dp8 %>% rename("BH_pval_m2dp8" = "BH_pval")
hm_tab_m2_dp8 <- hm_tab_m2_dp8 %>% rename("neglog_p_m2dp8" = "neglog_p")
hm_tab_m2_dp8 <- hm_tab_m2_dp8 %>% rename("significant_m2dp8" = "significant")
hm_tab_m2_dp8 <- hm_tab_m2_dp8 %>% rename("sig2_m2dp8" = "sig2")
write.table(hm_tab_m2_dp8, file="hm_tab_m2_dp8.csv",sep=",")


##### hm of adipogenesis-related genes

hm_tab_adip = subset(hm_tab, GeneSymbol=="Lep" | GeneSymbol=="Adipoq" | GeneSymbol=="Cd36" | GeneSymbol=="Pparg" | GeneSymbol=="Glut4" | GeneSymbol=="Fasn"| GeneSymbol=="Plin1"| GeneSymbol=="Plin2"| GeneSymbol=="Plin4"| GeneSymbol=="Fabp4"| GeneSymbol=="Isnr"| GeneSymbol=="Lpl"| GeneSymbol=="Agpat2"| GeneSymbol=="Bscl2"| GeneSymbol=="Cidec"| GeneSymbol=="Cebpa"| GeneSymbol=="Acaca"| GeneSymbol=="Ppargc1a"| GeneSymbol=="Ppargc1b"| GeneSymbol=="Slc2a4" )

rownames(hm_tab_adip) = hm_tab_adip$GeneSymbol
hm_adip_annot = data.frame("Sig" = hm_tab_adip$sig2)
rownames(hm_adip_annot) = rownames(hm_tab_adip)

hm_adip <- pheatmap(hm_tab_adip[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_adip$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_adip_annot, legend_labels = "Relative expression", main = "Adipogenesis-related genes")

pdf(file="m2_dp8_hm_adip.pdf",width=5,height=6)
hm_adip
dev.off()

##### hm of ISR-related genes

hm_tab_ISR = subset(hm_tab, GeneSymbol=="Atf4" | GeneSymbol=="Atf5" |GeneSymbol=="Atf6" | GeneSymbol=="Xbp1" | GeneSymbol=="Gdf15" | GeneSymbol=="Fgf21" | GeneSymbol=="Trib3"| GeneSymbol=="Eif2ak4"| GeneSymbol=="Ddit3"| GeneSymbol=="Gadd34"| GeneSymbol=="Perk"| GeneSymbol=="Eif2ak1"| GeneSymbol=="Hif1a")
hm_tab_ISR <- hm_tab_ISR %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_ISR) = hm_tab_ISR$GeneSymbol
hm_ISR_annot = data.frame("Sig" = hm_tab_ISR$sig2)
rownames(hm_ISR_annot) = rownames(hm_tab_ISR)

hm_ISR <- pheatmap(hm_tab_ISR[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_ISR$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_ISR_annot, main = "ISR genes")

pdf(file="m2_dp8_hm_ISR.pdf",width=5,height=6)
hm_ISR
dev.off()

##### hm of mitochondrial-related genes

hm_tab_mito = subset(hm_tab, GeneSymbol=="Mfn1" | GeneSymbol=="Mfn2" | GeneSymbol=="Opa1" | GeneSymbol=="Fis1" | GeneSymbol=="Tomm20" | GeneSymbol=="Ppargc1a"| GeneSymbol=="Ppargc1b"| GeneSymbol=="Cs" | GeneSymbol=='mt-Rnr1' | GeneSymbol=='mt-Rnr2' | GeneSymbol=='mt-Tl1' | GeneSymbol=='mt-Nd1' | GeneSymbol=='mt-Ti' | GeneSymbol=='mt-Tq' | GeneSymbol=='mt-Tm' | GeneSymbol=='mt-Nd2' | GeneSymbol=='mt-Tw' | GeneSymbol=='mt-Ta' | GeneSymbol=='mt-Tn' | GeneSymbol=='mt-Tc' | GeneSymbol=='mt-Ty' | GeneSymbol=='mt-Co1' | GeneSymbol=='mt-Ts1' | GeneSymbol=='mt-Td' | GeneSymbol=='mt-Co2' | GeneSymbol=='mt-Atp8' | GeneSymbol=='mt-Atp6' | GeneSymbol=='mt-Co3' | GeneSymbol=='mt-Tg' | GeneSymbol=='mt-Nd3' | GeneSymbol=='mt-Tr' | GeneSymbol=='mt-Nd4' | GeneSymbol=='mt-Th' | GeneSymbol=='mt-Ts2' | GeneSymbol=='mt-Tl2' | GeneSymbol=='mt-Nd5' | GeneSymbol=='mt-Nd6' | GeneSymbol=='mt-Te' | GeneSymbol=='mt-Cytb' | GeneSymbol=='mt-Tt' | GeneSymbol=='mt-Tp' | GeneSymbol=='mt-Nd4l' | GeneSymbol=='Sdha' | GeneSymbol=="Prkn" | GeneSymbol=="Pink1" | GeneSymbol=="Bnip3" | GeneSymbol=="Nrf1" | GeneSymbol==""| GeneSymbol=="Mff"| GeneSymbol=="Cycs")
hm_tab_mito <- hm_tab_mito %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_mito) = hm_tab_mito$GeneSymbol
hm_mito_annot = data.frame("Sig" = hm_tab_mito$sig2)
rownames(hm_mito_annot) = rownames(hm_tab_mito)

hm_mito <- pheatmap(hm_tab_mito[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_mito$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial function-related genes")

pdf(file="m2_dp8_hm_mito.pdf",width=5,height=6)
hm_mito
dev.off()

##### hm of inflammation-related genes

hm_tab_inflam = subset(hm_tab, GeneSymbol=='Ifng' |GeneSymbol=='Cd68' |GeneSymbol=='Cd11b' |GeneSymbol=='Itgam' |GeneSymbol=='Ccl2' |GeneSymbol=='Cd4' |GeneSymbol=='Cd3g' |GeneSymbol=='Cd8a' |GeneSymbol=='Tnf' |GeneSymbol=='Il1b' |GeneSymbol=='Il4' |GeneSymbol=='Il13' |GeneSymbol=='Il10' |GeneSymbol=='Ptprc' |GeneSymbol=='Adgre1' |GeneSymbol=='Il6' |GeneSymbol=='Mif' |GeneSymbol=='Tlr4')
hm_tab_inflam <- hm_tab_inflam %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_inflam) = hm_tab_inflam$GeneSymbol
hm_inflam_annot = data.frame("Sig" = hm_tab_inflam$sig2)
rownames(hm_inflam_annot) = rownames(hm_tab_inflam)

hm_inflam <- pheatmap(hm_tab_inflam[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_inflam$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_inflam_annot, legend_labels = "Relative expression", main = "Inflammatory genes")

pdf(file="m2_dp8_hm_inflam.pdf",width=5,height=6)
hm_inflam
dev.off()


##### hm of fibrosis-related genes

hm_tab_fibros = subset(hm_tab, GeneSymbol=='Tgfb1' |GeneSymbol=='Sod1' |GeneSymbol=='Hif1a' |GeneSymbol=='Pdgfa' |GeneSymbol=='Gtf2ird1' |GeneSymbol=='Inhba' |GeneSymbol=='Rock1')
hm_tab_fibros <- hm_tab_fibros %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_fibros) = hm_tab_fibros$GeneSymbol
hm_fibros_annot = data.frame("Sig" = hm_tab_fibros$sig2)
rownames(hm_fibros_annot) = rownames(hm_tab_fibros)

hm_fibros <- pheatmap(hm_tab_fibros[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_fibros$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_fibros_annot, legend_labels = "Relative expression", main = "Fibrosis-related genes")

pdf(file="m2_dp8_hm_fibros.pdf",width=5,height=6)
hm_fibros
dev.off()



##### hm of hallmark adipogenesis genes

hm_tab_hall_adip1 = subset(hm_tab, GeneSymbol=='Abca1' |GeneSymbol=='Abcb8' |GeneSymbol=='Acaa2' |GeneSymbol=='Acadl' |GeneSymbol=='Acadm' |GeneSymbol=='Acads' |GeneSymbol=='Acly' |GeneSymbol=='Aco2' |GeneSymbol=='Acox1' |GeneSymbol=='Adcy6' |GeneSymbol=='Adig' |GeneSymbol=='Adipoq' |GeneSymbol=='Adipor2' |GeneSymbol=='Agpat3' |GeneSymbol=='Aifm1' |GeneSymbol=='Ak2' |GeneSymbol=='Aldh2' |GeneSymbol=='Aldoa' |GeneSymbol=='Angpt1' |GeneSymbol=='Angptl4' |GeneSymbol=='Aplp2' |GeneSymbol=='Apoe' |GeneSymbol=='Araf' |GeneSymbol=='Arl4A' |GeneSymbol=='Atl2' |GeneSymbol=='Atp1B3' |GeneSymbol=='Atp5Po' |GeneSymbol=='Baz2A' |GeneSymbol=='Bckdha' |GeneSymbol=='Bcl2L13' |GeneSymbol=='Bcl6' |GeneSymbol=='C3' |GeneSymbol=='Cat' |GeneSymbol=='Cavin1' |GeneSymbol=='Cavin2' |GeneSymbol=='Ccng2' |GeneSymbol=='Cd151' |GeneSymbol=='Cd302' |GeneSymbol=='Cd36' |GeneSymbol=='Cdkn2C' |GeneSymbol=='Chchd10' |GeneSymbol=='Chuk' |GeneSymbol=='Cidea' |GeneSymbol=='Cmbl' |GeneSymbol=='Cmpk1' |GeneSymbol=='Col15A1' |GeneSymbol=='Col4A1' |GeneSymbol=='Coq3' |GeneSymbol=='Coq5' |GeneSymbol=='Coq9' |GeneSymbol=='Cox6A1' |GeneSymbol=='Cox7B' |GeneSymbol=='Cox8A' |GeneSymbol=='Cpt2' |GeneSymbol=='Crat' |GeneSymbol=='Cs' |GeneSymbol=='Cyc1' |GeneSymbol=='Cyp4B1' |GeneSymbol=='Dbt' |GeneSymbol=='Ddt' |GeneSymbol=='Decr1' |GeneSymbol=='Dgat1' |GeneSymbol=='Dhcr7' |GeneSymbol=='Dhrs7' |GeneSymbol=='Dhrs7B' |GeneSymbol=='Dlat' |GeneSymbol=='Dld' |GeneSymbol=='Dnajb9' |GeneSymbol=='Dnajc15' |GeneSymbol=='Dram2' |GeneSymbol=='Ech1' |GeneSymbol=='Echs1' |GeneSymbol=='Elmod3' |GeneSymbol=='Elovl6' |GeneSymbol=='Enpp2' |GeneSymbol=='Ephx2' |GeneSymbol=='Esrra' |GeneSymbol=='Esyt1' |GeneSymbol=='Etfb' |GeneSymbol=='Fabp4' |GeneSymbol=='Fah' |GeneSymbol=='Fzd4' |GeneSymbol=='G3Bp2' |GeneSymbol=='Gadd45A' |GeneSymbol=='Gbe1' |GeneSymbol=='Ghitm' |GeneSymbol=='Gpam' |GeneSymbol=='Gpat4' |GeneSymbol=='Gpd2' |GeneSymbol=='Gphn' |GeneSymbol=='Gpx3' |GeneSymbol=='Gpx4' |GeneSymbol=='Grpel1' |GeneSymbol=='Hadh' |GeneSymbol=='Hibch' |GeneSymbol=='Hspb8' |GeneSymbol=='Idh1' |GeneSymbol=='Idh3A' |GeneSymbol=='Idh3G' |GeneSymbol=='Ifngr1' |GeneSymbol=='Immt' |GeneSymbol=='Itga7' |GeneSymbol=='Itih5' |GeneSymbol=='Itsn1' |GeneSymbol=='Jagn1' |GeneSymbol=='Lama4' |GeneSymbol=='Lep' |GeneSymbol=='Lifr' |GeneSymbol=='Lipe' |GeneSymbol=='Lpcat3' |GeneSymbol=='Lpl' |GeneSymbol=='Ltc4S' |GeneSymbol=='Map4K3' |GeneSymbol=='Mccc1' |GeneSymbol=='Mdh2' |GeneSymbol=='Me1' |GeneSymbol=='Mgll' |GeneSymbol=='Mgst3' |GeneSymbol=='Miga2' |GeneSymbol=='Mrap' |GeneSymbol=='Mrpl15' |GeneSymbol=='Mtarc2')

hm_tab_hall_adip2 = subset(hm_tab, GeneSymbol=='Mtch2' |GeneSymbol=='Mylk' |GeneSymbol=='Nabp1' |GeneSymbol=='Ndufa5' |GeneSymbol=='Ndufab1' |GeneSymbol=='Ndufb7' |GeneSymbol=='Ndufs3' |GeneSymbol=='Nkiras1' |GeneSymbol=='Nmt1' |GeneSymbol=='Omd' |GeneSymbol=='Orm1' |GeneSymbol=='Pdcd4' |GeneSymbol=='Pemt' |GeneSymbol=='Pex14' |GeneSymbol=='Pfkfb3' |GeneSymbol=='Pfkl' |GeneSymbol=='Pgm1' |GeneSymbol=='Phldb1' |GeneSymbol=='Phyh' |GeneSymbol=='Pim3' |GeneSymbol=='Plin2' |GeneSymbol=='Por' |GeneSymbol=='Pparg' |GeneSymbol=='Ppm1B' |GeneSymbol=='Ppp1R15B' |GeneSymbol=='Prdx3' |GeneSymbol=='Preb' |GeneSymbol=='Ptcd3' |GeneSymbol=='Ptger3' |GeneSymbol=='Qdpr' |GeneSymbol=='Rab34' |GeneSymbol=='Reep5' |GeneSymbol=='Reep6' |GeneSymbol=='Retn' |GeneSymbol=='Retsat' |GeneSymbol=='Riok3' |GeneSymbol=='Rmdn3' |GeneSymbol=='Rnf11' |GeneSymbol=='Rreb1' |GeneSymbol=='Rtn3' |GeneSymbol=='Samm50' |GeneSymbol=='Scarb1' |GeneSymbol=='Scp2' |GeneSymbol=='Sdhb' |GeneSymbol=='Sdhc' |GeneSymbol=='Slc19A1' |GeneSymbol=='Slc1A5' |GeneSymbol=='Slc25A1' |GeneSymbol=='Slc25A10' |GeneSymbol=='Slc27A1' |GeneSymbol=='Slc5A6' |GeneSymbol=='Slc66A3' |GeneSymbol=='Sncg' |GeneSymbol=='Sod1' |GeneSymbol=='Sorbs1' |GeneSymbol=='Sowahc' |GeneSymbol=='Sparcl1' |GeneSymbol=='Sqor' |GeneSymbol=='Sspn' |GeneSymbol=='Stat5A' |GeneSymbol=='Stom' |GeneSymbol=='Suclg1' |GeneSymbol=='Sult1A1' |GeneSymbol=='Taldo1' |GeneSymbol=='Tank' |GeneSymbol=='Tkt' |GeneSymbol=='Tob1' |GeneSymbol=='Tst' |GeneSymbol=='Ubc' |GeneSymbol=='Ubqln1' |GeneSymbol=='Uck1' |GeneSymbol=='Ucp2' |GeneSymbol=='Uqcr10' |GeneSymbol=='Uqcr11' |GeneSymbol=='Uqcrc1' |GeneSymbol=='Uqcrq' |GeneSymbol=='Vegfb' |GeneSymbol=='Ywhag')

hm_tab_hall_adip <- rbind(hm_tab_hall_adip1, hm_tab_hall_adip2)

hm_tab_hall_adip <- hm_tab_hall_adip %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_adip) = hm_tab_hall_adip$GeneSymbol
hm_hall_adip_annot = data.frame("Sig" = hm_tab_hall_adip$sig2)
rownames(hm_hall_adip_annot) = rownames(hm_tab_hall_adip)

hm_hall_adip <- pheatmap(hm_tab_hall_adip[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_adip$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_adip_annot, legend_labels = "Relative expression", main = "HALLMARK_ADIPOGENESIS genes")

pdf(file="m2_dp8_hm_hall_adip.pdf",width=6,height=12)
hm_hall_adip
dev.off()


##### hm of hallmark oxphos genes

hm_tab_hall_oxphos1 = subset(hm_tab, GeneSymbol=='Abcb7' |GeneSymbol=='Acaa1' |GeneSymbol=='Acaa2' |GeneSymbol=='Acadm' |GeneSymbol=='Acadsb' |GeneSymbol=='Acadvl' |GeneSymbol=='Acat1' |GeneSymbol=='Aco2' |GeneSymbol=='Afg3L2' |GeneSymbol=='Aifm1' |GeneSymbol=='Alas1' |GeneSymbol=='Aldh6A1' |GeneSymbol=='Atp1B1' |GeneSymbol=='Atp5F1A' |GeneSymbol=='Atp5F1B' |GeneSymbol=='Atp5F1C' |GeneSymbol=='Atp5F1D' |GeneSymbol=='Atp5F1E' |GeneSymbol=='Atp5Mc1' |GeneSymbol=='Atp5Mc2' |GeneSymbol=='Atp5Mc3' |GeneSymbol=='Atp5Me' |GeneSymbol=='Atp5Mf' |GeneSymbol=='Atp5Mg' |GeneSymbol=='Atp5Pb' |GeneSymbol=='Atp5Pd' |GeneSymbol=='Atp5Pf' |GeneSymbol=='Atp5Po' |GeneSymbol=='Atp6Ap1' |GeneSymbol=='Atp6V0B' |GeneSymbol=='Atp6V0C' |GeneSymbol=='Atp6V0E1' |GeneSymbol=='Atp6V1C1' |GeneSymbol=='Atp6V1D' |GeneSymbol=='Atp6V1E1' |GeneSymbol=='Atp6V1F' |GeneSymbol=='Atp6V1G1' |GeneSymbol=='Atp6V1H' |GeneSymbol=='Bax' |GeneSymbol=='Bckdha' |GeneSymbol=='Bdh2' |GeneSymbol=='Casp7' |GeneSymbol=='Cox10' |GeneSymbol=='Cox11' |GeneSymbol=='Cox15' |GeneSymbol=='Cox17' |GeneSymbol=='Cox4I1' |GeneSymbol=='Cox5A' |GeneSymbol=='Cox5B' |GeneSymbol=='Cox6A1' |GeneSymbol=='Cox6B1' |GeneSymbol=='Cox6C' |GeneSymbol=='Cox7A2' |GeneSymbol=='Cox7A2L' |GeneSymbol=='Cox7B' |GeneSymbol=='Cox7C' |GeneSymbol=='Cox8A' |GeneSymbol=='Cpt1A' |GeneSymbol=='Cs' |GeneSymbol=='Cyb5A' |GeneSymbol=='Cyb5R3' |GeneSymbol=='Cyc1' |GeneSymbol=='Cycs' |GeneSymbol=='Decr1' |GeneSymbol=='Dlat' |GeneSymbol=='Dld' |GeneSymbol=='Dlst' |GeneSymbol=='Ech1' |GeneSymbol=='Echs1' |GeneSymbol=='Eci1' |GeneSymbol=='Etfa' |GeneSymbol=='Etfb' |GeneSymbol=='Etfdh' |GeneSymbol=='Fdx1' |GeneSymbol=='Fh' |GeneSymbol=='Fxn' |GeneSymbol=='Glud1' |GeneSymbol=='Got2' |GeneSymbol=='Gpi' |GeneSymbol=='Gpx4' |GeneSymbol=='Grpel1' |GeneSymbol=='Hadha' |GeneSymbol=='Hadhb' |GeneSymbol=='Hccs' |GeneSymbol=='Hsd17B10' |GeneSymbol=='Hspa9' |GeneSymbol=='Htra2' |GeneSymbol=='Idh1' |GeneSymbol=='Idh2' |GeneSymbol=='Idh3A' |GeneSymbol=='Idh3B' |GeneSymbol=='Idh3G' |GeneSymbol=='Immt' |GeneSymbol=='Isca1' |GeneSymbol=='Iscu' |GeneSymbol=='Ldha' |GeneSymbol=='Ldhb' |GeneSymbol=='Lrpprc' |GeneSymbol=='Maob' |GeneSymbol=='Mdh1' |GeneSymbol=='Mdh2' |GeneSymbol=='Mfn2' |GeneSymbol=='Mgst3' |GeneSymbol=='Mpc1' |GeneSymbol=='Mrpl11' |GeneSymbol=='Mrpl15' |GeneSymbol=='Mrpl34' |GeneSymbol=='Mrpl35' |GeneSymbol=='Mrps11' |GeneSymbol=='Mrps12' |GeneSymbol=='Mrps15' |GeneSymbol=='Mrps22' |GeneSymbol=='Mrps30' |GeneSymbol=='Mtrf1')

hm_tab_hall_oxphos2 = subset(hm_tab, GeneSymbol=='Mtrr' |GeneSymbol=='Mtx2' |GeneSymbol=='Ndufa1' |GeneSymbol=='Ndufa2' |GeneSymbol=='Ndufa3' |GeneSymbol=='Ndufa4' |GeneSymbol=='Ndufa5' |GeneSymbol=='Ndufa6' |GeneSymbol=='Ndufa7' |GeneSymbol=='Ndufa8' |GeneSymbol=='Ndufa9' |GeneSymbol=='Ndufab1' |GeneSymbol=='Ndufb1' |GeneSymbol=='Ndufb2' |GeneSymbol=='Ndufb3' |GeneSymbol=='Ndufb4' |GeneSymbol=='Ndufb5' |GeneSymbol=='Ndufb6' |GeneSymbol=='Ndufb7' |GeneSymbol=='Ndufb8' |GeneSymbol=='Ndufc1' |GeneSymbol=='Ndufc2' |GeneSymbol=='Ndufs1' |GeneSymbol=='Ndufs2' |GeneSymbol=='Ndufs3' |GeneSymbol=='Ndufs4' |GeneSymbol=='Ndufs6' |GeneSymbol=='Ndufs7' |GeneSymbol=='Ndufs8' |GeneSymbol=='Ndufv1' |GeneSymbol=='Ndufv2' |GeneSymbol=='Nnt' |GeneSymbol=='Nqo2' |GeneSymbol=='Oat' |GeneSymbol=='Ogdh' |GeneSymbol=='Opa1' |GeneSymbol=='Oxa1L' |GeneSymbol=='Pdha1' |GeneSymbol=='Pdhb' |GeneSymbol=='Pdhx' |GeneSymbol=='Pdk4' |GeneSymbol=='Pdp1' |GeneSymbol=='Phb2' |GeneSymbol=='Phyh' |GeneSymbol=='Pmpca' |GeneSymbol=='Polr2F' |GeneSymbol=='Por' |GeneSymbol=='Prdx3' |GeneSymbol=='Retsat' |GeneSymbol=='Rhot1' |GeneSymbol=='Rhot2' |GeneSymbol=='Sdha' |GeneSymbol=='Sdhb' |GeneSymbol=='Sdhc' |GeneSymbol=='Sdhd' |GeneSymbol=='Slc25A11' |GeneSymbol=='Slc25A12' |GeneSymbol=='Slc25A20' |GeneSymbol=='Slc25A3' |GeneSymbol=='Slc25A4' |GeneSymbol=='Slc25A5' |GeneSymbol=='Slc25A6' |GeneSymbol=='Sucla2' |GeneSymbol=='Suclg1' |GeneSymbol=='Supv3L1' |GeneSymbol=='Surf1' |GeneSymbol=='Tcirg1' |GeneSymbol=='Timm10' |GeneSymbol=='Timm13' |GeneSymbol=='Timm17A' |GeneSymbol=='Timm50' |GeneSymbol=='Timm8B' |GeneSymbol=='Timm9' |GeneSymbol=='Tomm22' |GeneSymbol=='Tomm70' |GeneSymbol=='Uqcr10' |GeneSymbol=='Uqcr11' |GeneSymbol=='Uqcrb' |GeneSymbol=='Uqcrc1' |GeneSymbol=='Uqcrc2' |GeneSymbol=='Uqcrfs1' |GeneSymbol=='Uqcrh' |GeneSymbol=='Uqcrq' |GeneSymbol=='Vdac1' |GeneSymbol=='Vdac2' |GeneSymbol=='Vdac3')

hm_tab_hall_oxphos <- rbind(hm_tab_hall_oxphos1, hm_tab_hall_oxphos2)

hm_tab_hall_oxphos <- hm_tab_hall_oxphos %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_oxphos) = hm_tab_hall_oxphos$GeneSymbol
hm_hall_oxphos_annot = data.frame("Sig" = hm_tab_hall_oxphos$sig2)
rownames(hm_hall_oxphos_annot) = rownames(hm_tab_hall_oxphos)

hm_hall_oxphos <- pheatmap(hm_tab_hall_oxphos[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_oxphos$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_oxphos_annot, legend_labels = "Relative expression", main = "HALLMARK_OXIDATIVE_PHOSPHORYLATION genes")

pdf(file="m2_dp8_hm_hall_oxphos.pdf",width=7,height=12)
hm_hall_oxphos
dev.off()


##### hm of hallmark ROS genes

hm_tab_hall_ros = subset(hm_tab, GeneSymbol=='Abcc1' |GeneSymbol=='Atox1' |GeneSymbol=='Cat' |GeneSymbol=='Cdkn2D' |GeneSymbol=='Egln2' |GeneSymbol=='Ercc2' |GeneSymbol=='Fes' |GeneSymbol=='Ftl' |GeneSymbol=='G6Pd' |GeneSymbol=='Gclc' |GeneSymbol=='Gclm' |GeneSymbol=='Glrx' |GeneSymbol=='Glrx2' |GeneSymbol=='Gpx3' |GeneSymbol=='Gpx4' |GeneSymbol=='Gsr' |GeneSymbol=='Hhex' |GeneSymbol=='Hmox2' |GeneSymbol=='Ipcef1' |GeneSymbol=='Junb' |GeneSymbol=='Lamtor5' |GeneSymbol=='Lsp1' |GeneSymbol=='Mbp' |GeneSymbol=='Mgst1' |GeneSymbol=='Mpo' |GeneSymbol=='Msra' |GeneSymbol=='Ndufa6' |GeneSymbol=='Ndufb4' |GeneSymbol=='Ndufs2' |GeneSymbol=='Nqo1' |GeneSymbol=='Oxsr1' |GeneSymbol=='Pdlim1' |GeneSymbol=='Pfkp' |GeneSymbol=='Prdx1' |GeneSymbol=='Prdx2' |GeneSymbol=='Prdx4' |GeneSymbol=='Prdx6' |GeneSymbol=='Prnp' |GeneSymbol=='Ptpa' |GeneSymbol=='Sbno2' |GeneSymbol=='Scaf4' |GeneSymbol=='Selenos' |GeneSymbol=='Sod1' |GeneSymbol=='Sod2' |GeneSymbol=='Srxn1' |GeneSymbol=='Stk25' |GeneSymbol=='Txn' |GeneSymbol=='Txnrd1' |GeneSymbol=='Txnrd2')

hm_tab_hall_ros <- hm_tab_hall_ros %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_ros) = hm_tab_hall_ros$GeneSymbol
hm_hall_ros_annot = data.frame("Sig" = hm_tab_hall_ros$sig2)
rownames(hm_hall_ros_annot) = rownames(hm_tab_hall_ros)

hm_hall_ros <- pheatmap(hm_tab_hall_ros[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_ros$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_ros_annot, legend_labels = "Relative expression", main = "HALLMARK_REACTIVE_OXYGEN_SPECIES_PATHWAY genes")

pdf(file="m2_dp8_hm_hall_ros.pdf",width=8,height=10)
hm_hall_ros
dev.off()


##### hm of hallmark UPR genes

hm_tab_hall_UPR = subset(hm_tab, GeneSymbol=='Aldh18A1' |GeneSymbol=='Arfgap1' |GeneSymbol=='Asns' |GeneSymbol=='Atf3' |GeneSymbol=='Atf4' |GeneSymbol=='Atf6' |GeneSymbol=='Atp6V0D1' |GeneSymbol=='Bag3' |GeneSymbol=='Banf1' |GeneSymbol=='Calr' |GeneSymbol=='Ccl2' |GeneSymbol=='Cebpb' |GeneSymbol=='Cebpg' |GeneSymbol=='Chac1' |GeneSymbol=='Cks1B' |GeneSymbol=='Cnot2' |GeneSymbol=='Cnot4' |GeneSymbol=='Cnot6' |GeneSymbol=='Cxxc1' |GeneSymbol=='Dcp1A' |GeneSymbol=='Dcp2' |GeneSymbol=='Dctn1' |GeneSymbol=='Ddit4' |GeneSymbol=='Ddx10' |GeneSymbol=='Dkc1' |GeneSymbol=='Dnaja4' |GeneSymbol=='Dnajb9' |GeneSymbol=='Dnajc3' |GeneSymbol=='Edc4' |GeneSymbol=='Edem1' |GeneSymbol=='Eef2' |GeneSymbol=='Eif2Ak3' |GeneSymbol=='Eif2S1' |GeneSymbol=='Eif4A1' |GeneSymbol=='Eif4A2' |GeneSymbol=='Eif4A3' |GeneSymbol=='Eif4E' |GeneSymbol=='Eif4Ebp1' |GeneSymbol=='Eif4G1' |GeneSymbol=='Ern1' |GeneSymbol=='Ero1A' |GeneSymbol=='Exoc2' |GeneSymbol=='Exosc1' |GeneSymbol=='Exosc10' |GeneSymbol=='Exosc2' |GeneSymbol=='Exosc4' |GeneSymbol=='Exosc5' |GeneSymbol=='Exosc9' |GeneSymbol=='Fkbp14' |GeneSymbol=='Fus' |GeneSymbol=='Gemin4' |GeneSymbol=='Gosr2' |GeneSymbol=='H2Ax' |GeneSymbol=='Herpud1' |GeneSymbol=='Hsp90B1' |GeneSymbol=='Hspa5' |GeneSymbol=='Hspa9' |GeneSymbol=='Hyou1' |GeneSymbol=='Iars1' |GeneSymbol=='Ifit1' |GeneSymbol=='Igfbp1' |GeneSymbol=='Imp3' |GeneSymbol=='Kdelr3' |GeneSymbol=='Khsrp' |GeneSymbol=='Kif5B' |GeneSymbol=='Lsm1' |GeneSymbol=='Lsm4' |GeneSymbol=='Mthfd2' |GeneSymbol=='Mtrex' |GeneSymbol=='Nabp1' |GeneSymbol=='Nfya' |GeneSymbol=='Nfyb' |GeneSymbol=='Nhp2' |GeneSymbol=='Nolc1' |GeneSymbol=='Nop14' |GeneSymbol=='Nop56' |GeneSymbol=='Npm1' |GeneSymbol=='Paip1' |GeneSymbol=='Parn' |GeneSymbol=='Pdia5' |GeneSymbol=='Pdia6' |GeneSymbol=='Pop4' |GeneSymbol=='Preb' |GeneSymbol=='Psat1' |GeneSymbol=='Rps14' |GeneSymbol=='Rrp9' |GeneSymbol=='Sdad1' |GeneSymbol=='Sec11A' |GeneSymbol=='Sec31A' |GeneSymbol=='Serp1' |GeneSymbol=='Shc1' |GeneSymbol=='Slc1A4' |GeneSymbol=='Slc30A5' |GeneSymbol=='Slc7A5' |GeneSymbol=='Spcs1' |GeneSymbol=='Spcs3' |GeneSymbol=='Srpra' |GeneSymbol=='Srprb' |GeneSymbol=='Ssr1' |GeneSymbol=='Stc2' |GeneSymbol=='Tars1' |GeneSymbol=='Tatdn2' |GeneSymbol=='Tspyl2' |GeneSymbol=='Ttc37' |GeneSymbol=='Tubb2A' |GeneSymbol=='Vegfa' |GeneSymbol=='Wfs1' |GeneSymbol=='Wipi1' |GeneSymbol=='Xbp1' |GeneSymbol=='Xpot' |GeneSymbol=='Yif1A' |GeneSymbol=='Ywhaz' |GeneSymbol=='Zbtb17')

hm_tab_hall_UPR <- hm_tab_hall_UPR %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_UPR) = hm_tab_hall_UPR$GeneSymbol
hm_hall_UPR_annot = data.frame("Sig" = hm_tab_hall_UPR$sig2)
rownames(hm_hall_UPR_annot) = rownames(hm_tab_hall_UPR)

hm_hall_UPR <- pheatmap(hm_tab_hall_UPR[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_UPR$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_UPR_annot, legend_labels = "Relative expression", main = "HALLMARK_UNFOLDED_PROTEIN_RESPONSE genes")

pdf(file="m2_dp8_hm_hall_UPR.pdf",width=7,height=10)
hm_hall_UPR
dev.off()

##### hm of GO BAT genes

hm_tab_GO_BAT = subset(hm_tab, GeneSymbol=='Adig' |GeneSymbol=='Adipoq' |GeneSymbol=='Adrb1' |GeneSymbol=='Adrb2' |GeneSymbol=='Aldh6A1' |GeneSymbol=='Arl4A' |GeneSymbol=='Bmp7' |GeneSymbol=='Bnip3' |GeneSymbol=='Cebpa' |GeneSymbol=='Cebpb' |GeneSymbol=='Dio2' |GeneSymbol=='Dusp10' |GeneSymbol=='Ebf2' |GeneSymbol=='Ero1A' |GeneSymbol=='Fabp3' |GeneSymbol=='Fabp4' |GeneSymbol=='Ffar4' |GeneSymbol=='Flcn' |GeneSymbol=='Fndc5' |GeneSymbol=='Fto' |GeneSymbol=='Hnrnpu' |GeneSymbol=='Ins' |GeneSymbol=='Itga6' |GeneSymbol=='Lamb3' |GeneSymbol=='Lep' |GeneSymbol=='Lrg1' |GeneSymbol=='Mapk14' |GeneSymbol=='Mb' |GeneSymbol=='Metrnl' |GeneSymbol=='Mtor' |GeneSymbol=='Napepld' |GeneSymbol=='Nudt7' |GeneSymbol=='Pex11A' |GeneSymbol=='Pim1' |GeneSymbol=='Plac8' |GeneSymbol=='Ppargc1A' |GeneSymbol=='Prdm16' |GeneSymbol=='Ptgs2' |GeneSymbol=='Rgs2' |GeneSymbol=='Rreb1' |GeneSymbol=='Sirt1' |GeneSymbol=='Six1' |GeneSymbol=='Slc2A4' |GeneSymbol=='Sox13' |GeneSymbol=='Tfe3' |GeneSymbol=='Trpv4' |GeneSymbol=='Ucp1' |GeneSymbol=='Vstm2A' |GeneSymbol=='Zbtb7B' |GeneSymbol=='Znf516')

hm_tab_GO_BAT <- hm_tab_GO_BAT %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_GO_BAT) = hm_tab_GO_BAT$GeneSymbol
hm_GO_m2_dp8_annot = data.frame("Sig" = hm_tab_GO_BAT$sig2)
rownames(hm_GO_m2_dp8_annot) = rownames(hm_tab_GO_BAT)

hm_GO_BAT <- pheatmap(hm_tab_GO_BAT[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_GO_BAT$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_GO_m2_dp8_annot, legend_labels = "Relative expression", main = "GO_BROWN_FAT_CELL_DIFFERENTIATION genes")

pdf(file="m2_dp8_hm_GO_BAT.pdf",width=7,height=10)
hm_GO_BAT
dev.off()


##### hm of myc-TF genes

hm_tab_myc = subset(hm_tab, GeneSymbol=='Abcd2' |GeneSymbol=='Steap4' |GeneSymbol=='Nnmt' |GeneSymbol=='Pde3b' |GeneSymbol=='Hp' |GeneSymbol=='Lrp3' |GeneSymbol=='Slc1a5' |GeneSymbol=='Retn' |GeneSymbol=='Apcdd1' |GeneSymbol=='Adcy5' |GeneSymbol=='C4B' |GeneSymbol=='Gys2' |GeneSymbol=='Hcar2' |GeneSymbol=='Dock11' |GeneSymbol=='Mc2r' |GeneSymbol=='Hcar1' |GeneSymbol=='Dram1' |GeneSymbol=='B3galt2' |GeneSymbol=='Nnat' |GeneSymbol=='Ffar4' |GeneSymbol=='Slc16a7' |GeneSymbol=='Ffar2' |GeneSymbol=='Aoc3' |GeneSymbol=='Rarres2' |GeneSymbol=='Adipoq' |GeneSymbol=='Mmp3' |GeneSymbol=='Sctr' |GeneSymbol=='Klhl2' |GeneSymbol=='Igf1' |GeneSymbol=='Podn' |GeneSymbol=='Cidec' |GeneSymbol=='Tshr' |GeneSymbol=='Por' |GeneSymbol=='Rbp4' |GeneSymbol=='Ccdc80' |GeneSymbol=='Lrg1' |GeneSymbol=='Vnn3' |GeneSymbol=='Chdh' |GeneSymbol=='Lgals12' |GeneSymbol=='Chst1' |GeneSymbol=='St6galnac5')

hm_tab_myc <- hm_tab_myc %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_myc) = hm_tab_myc$GeneSymbol
hm_myc_annot = data.frame("Sig" = hm_tab_myc$sig2)
rownames(hm_myc_annot) = rownames(hm_tab_myc)

hm_myc <- pheatmap(hm_tab_myc[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_myc$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_myc_annot, legend_labels = "Relative expression", main = "Myc-related genes")

pdf(file="m2_dp8_hm_myc.pdf",width=7,height=10)
hm_myc
dev.off()


#### make hm of mitochondrial and nuclear encoded mitochondrial genes, using same genes to the figure in eLife paper

hm_tab_mt_mito = subset(hm_tab, GeneSymbol=='mt-Atp6' | GeneSymbol=='mt-Atp8' | GeneSymbol=='mt-Co1' | GeneSymbol=='mt-Co2' | GeneSymbol=='mt-Co3' | GeneSymbol=='mt-Cytb' | GeneSymbol=='mt-Nd1' | GeneSymbol=='mt-Nd2' | GeneSymbol=='mt-Nd3' | GeneSymbol=='mt-Nd4' | GeneSymbol=='mt-Nd4l' | GeneSymbol=='mt-Nd5' | GeneSymbol=='mt-Nd6' | GeneSymbol=='mt-Rnr1' | GeneSymbol=='mt-Rnr2' | GeneSymbol=='mt-Ta' | GeneSymbol=='mt-Tc' | GeneSymbol=='mt-Td' | GeneSymbol=='mt-Te' | GeneSymbol=='mt-Tf' | GeneSymbol=='mt-Tg' | GeneSymbol=='mt-Th' | GeneSymbol=='mt-Ti' | GeneSymbol=='mt-Tk' | GeneSymbol=='mt-Tl1' | GeneSymbol=='mt-Tl2' | GeneSymbol=='mt-Tm' | GeneSymbol=='mt-Tn' | GeneSymbol=='mt-Tp' | GeneSymbol=='mt-Tq' | GeneSymbol=='mt-Tr' | GeneSymbol=='mt-Ts1' | GeneSymbol=='mt-Ts2' | GeneSymbol=='mt-Tt' | GeneSymbol=='mt-Tv' | GeneSymbol=='mt-Tw' | GeneSymbol=='mt-Ty')

hm_tab_mt_mito <- hm_tab_mt_mito %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_mt_mito) = hm_tab_mt_mito$GeneSymbol
hm_mt_mito_annot = data.frame("Sig" = hm_tab_mt_mito$sig2)
rownames(hm_mt_mito_annot) = rownames(hm_tab_mt_mito)

hm_mt_mito <- pheatmap(hm_tab_mt_mito[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_mt_mito$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_mt_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial-encoded mito genes")

pdf(file="m2_dp8_hm_mt_mito.pdf",width=7,height=10)
hm_mt_mito
dev.off()

hm_tab_nucl_mito = subset(hm_tab, GeneSymbol=='Ndufb10' |GeneSymbol=='Ndufa3' |GeneSymbol=='Dmac2l' |GeneSymbol=='Atp5o' |GeneSymbol=='Uqcrfs1' |GeneSymbol=='Ndufa8' |GeneSymbol=='Uqcrq' |GeneSymbol=='Surf1' |GeneSymbol=='Atp5b' |GeneSymbol=='Uqcrh' |GeneSymbol=='Ndufa2' |GeneSymbol=='Ndufs7' |GeneSymbol=='Ndufb9' |GeneSymbol=='Ndufb6' |GeneSymbol=='Cox6b1' |GeneSymbol=='Cox6a2' |GeneSymbol=='Ndufa13' |GeneSymbol=='Ndufa9' |GeneSymbol=='Ndufs3' |GeneSymbol=='Uqcrc2' |GeneSymbol=='Ndufa4' |GeneSymbol=='Cycs' |GeneSymbol=='Cyc1' |GeneSymbol=='Ndufs5' |GeneSymbol=='Ndufs4' |GeneSymbol=='Ecsit' |GeneSymbol=='Cox10' |GeneSymbol=='Ndufs8' |GeneSymbol=='Ndufc2' |GeneSymbol=='Atp5a1' |GeneSymbol=='Ndufa7' |GeneSymbol=='Ndufb3' |GeneSymbol=='Ndufa5' |GeneSymbol=='Atp5k' |GeneSymbol=='Cox5b-ps' |GeneSymbol=='Cox18' |GeneSymbol=='Ndufa10' |GeneSymbol=='Atp5j2' |GeneSymbol=='Ndufaf1' |GeneSymbol=='Atp5pb' |GeneSymbol=='Cox11' |GeneSymbol=='Atpaf1' |GeneSymbol=='Sdhb' |GeneSymbol=='Atp5c1' |GeneSymbol=='Cox6b2' |GeneSymbol=='Gm10053' |GeneSymbol=='Phb' |GeneSymbol=='Cox7c' |GeneSymbol=='Sdhd' |GeneSymbol=='Sdhc' |GeneSymbol=='Sdha' |GeneSymbol=='Ndufa6' |GeneSymbol=='Ndufa12' |GeneSymbol=='Ndufa11' |GeneSymbol=='Cox6a1' |GeneSymbol=='Ndufb2' |GeneSymbol=='Cox5a' |GeneSymbol=='Atp5j' |GeneSymbol=='Atp5g3' |GeneSymbol=='Ndufv2' |GeneSymbol=='Ndufb8' |GeneSymbol=='Cox4i1' |GeneSymbol=='Uqcrc1' |GeneSymbol=='Atpaf2' |GeneSymbol=='Ndufb7' |GeneSymbol=='Atp5h' |GeneSymbol=='Cox5b' |GeneSymbol=='Ndufv1' |GeneSymbol=='Ndufv3' |GeneSymbol=='Ndufs1' |GeneSymbol=='Atp5d' |GeneSymbol=='Ndufb4' |GeneSymbol=='Cox7a1' |GeneSymbol=='Cox4i2' |GeneSymbol=='Ndufs6' |GeneSymbol=='Ndufs2' |GeneSymbol=='Ndufc1' |GeneSymbol=='Ndufb5' |GeneSymbol=='Gm21987' |GeneSymbol=='Cox17' |GeneSymbol=='Cox8a' |GeneSymbol=='Cox7a2' |GeneSymbol=='Cox6c' |GeneSymbol=='Nubpl' |GeneSymbol=='Ndufab1')

hm_tab_nucl_mito <- hm_tab_nucl_mito %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_nucl_mito) = hm_tab_nucl_mito$GeneSymbol
hm_nucl_mito_annot = data.frame("Sig" = hm_tab_nucl_mito$sig2)
rownames(hm_nucl_mito_annot) = rownames(hm_tab_nucl_mito)

hm_nucl_mito <- pheatmap(hm_tab_nucl_mito[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_nucl_mito$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_nucl_mito_annot, legend_labels = "Relative expression", main = "Nuclear-encoded mito genes")

pdf(file="m2_dp8_hm_nucl_mito.pdf",width=7,height=10)
hm_nucl_mito
dev.off()

#### make side-by-side hm of mitochondrial and nuclear encoded mitochondrial genes, analagous to eLife paper

library(RColorBrewer)
breaksList = seq(-2, 2, by = 0.1)

hm_tab_mt_mito2 <- as.data.frame(hm_tab_mt_mito$log2FC)
rownames(hm_tab_mt_mito2) = hm_tab_mt_mito$GeneSymbol
hm_tab_mt_mito2$log2FCdup <- hm_tab_mt_mito$log2FC

hm_mt_mito2 <- pheatmap(hm_tab_mt_mito2, cluster_rows = TRUE, cluster_cols = FALSE, cutree_rows = 2, legend = FALSE, cellwidth=30, angle_col=45, fontsize_col=6, annotation_row=hm_mt_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial-encoded", show_colnames = FALSE, show_rownames = FALSE, border_color = NA, scale = "none", color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList)

hm_tab_nucl_mito2 <- as.data.frame(hm_tab_nucl_mito$log2FC)
rownames(hm_tab_nucl_mito2) = hm_tab_nucl_mito$GeneSymbol
hm_tab_nucl_mito2$log2FCdup <- hm_tab_nucl_mito$log2FC

hm_nucl_mito2 <- pheatmap(hm_tab_nucl_mito2, cluster_rows = TRUE, cluster_cols = FALSE, cutree_rows = 3, legend = TRUE, cellwidth=30, angle_col=45, fontsize_col=6, annotation_row=hm_nucl_mito_annot, legend_labels = "Relative expression", main = "Nuclear-encoded", show_colnames = FALSE, , show_rownames = FALSE, border_color = NA, color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList)

require(cowplot)
require(ggplotify)

pdf(file="mito_genes_sumfig.pdf",width=8,height=3)
plot_grid(as.grob(hm_mt_mito2), as.grob(hm_nucl_mito2), ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()



############### Pathway analysis using enrichr =====================================================

require(enrichR)
require(tidyr)
require(cowplot)
require(viridis)

## look at sig up & down genes using enrichR
dbs_option <- listEnrichrDbs()

####### use upregulated genes

up_dge = subset(hm_tab, sig2=='sig' & log2FC>0)
write.table(up_dge,file="m2_dp8_up_dge.csv",sep=",")
up_dge <- up_dge[!is.na(up_dge$GeneSymbol), ]
up_genes <- as.vector(up_dge$GeneSymbol)


dbs_search <- c("GO_Biological_Process_2018","KEGG_2019_Mouse", "MSigDB_Hallmark_2020","GO_Cellular_Component_2018","GTEx_Tissue_Sample_Gene_Expression_Profiles_up","TF_Perturbations_Followed_by_Expression","GO_Molecular_Function_2018", "HMDB_Metabolites")

up_genes_enrichr <- enrichr(up_genes, databases = dbs_search)

## make figure from enrichr analyses
library(dplyr)
library(ggplot2)


GO_biol_data_up <- up_genes_enrichr[["GO_Biological_Process_2018"]]
View(GO_biol_data_up)
GO_biol_data_up = subset(GO_biol_data_up, Adjusted.P.value<.05)
GO_biol_data_up <- GO_biol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_biol_data_up$db <- "GO_biol_2019_Human"
GO_biol_fig_up <-ggplot(data=GO_biol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Biological_Process_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_biol_fig_up

KEGG_data_up <- up_genes_enrichr[["KEGG_2019_Mouse"]]
View(KEGG_data_up)
KEGG_data_up = subset(KEGG_data_up, Adjusted.P.value<.05)
KEGG_data_up <- KEGG_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
KEGG_data_up$db <- "KEGG_2019_Mouse"
KEGG_fig_up <-ggplot(data=KEGG_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("KEGG_2019_Mouse") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
KEGG_fig_up

Hall_data_up <- up_genes_enrichr[["MSigDB_Hallmark_2020"]]
View(Hall_data_up)
Hall_data_up = subset(Hall_data_up, Adjusted.P.value<.05)
Hall_data_up <- Hall_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Hall_data_up$db <- "MSigDB_Hallmark_2020"
Hall_fig_up <-ggplot(data=Hall_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("MSigDB_Hallmark_2020") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
Hall_fig_up

GO_cell_data_up <- up_genes_enrichr[["GO_Cellular_Component_2018"]]
View(GO_cell_data_up)
GO_cell_data_up = subset(GO_cell_data_up, Adjusted.P.value<.05)
GO_cell_data_up <- GO_cell_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_cell_data_up$db <- "GO_Cellular_Component_2018"
GO_cell_fig_up <-ggplot(data=GO_cell_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Cellular_Component_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_cell_fig_up

GTEx_data_up <- up_genes_enrichr[["GTEx_Tissue_Sample_Gene_Expression_Profiles_up"]]
View(GTEx_data_up)
GTEx_data_up = subset(GTEx_data_up, Adjusted.P.value<.05)
GTEx_data_up <- GTEx_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GTEx_data_up$db <- "GTEx_Tissue_Sample_Gene_Expression_Profiles_up"
GTEx_fig_up <-ggplot(data=GTEx_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GTEx_Tissue_Sample_Gene_Expression_Profiles_up") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GTEx_fig_up

TF_data_up <- up_genes_enrichr[["TF_Perturbations_Followed_by_Expression"]]
View(TF_data_up)
TF_data_up = subset(TF_data_up, Adjusted.P.value<.05)
TF_data_up <- TF_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
TF_data_up$db <- "TF_Perturbations_Followed_by_Expression"
TF_fig_up <-ggplot(data=TF_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("TF_Perturbations_Followed_by_Expression") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
TF_fig_up

GO_mol_data_up <- up_genes_enrichr[["GO_Molecular_Function_2018"]]
View(GO_mol_data_up)
GO_mol_data_up = subset(GO_mol_data_up, Adjusted.P.value<.05)
GO_mol_data_up <- GO_mol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_mol_data_up$db <- "GO_Molecular_Function_2018"
GO_mol_fig_up <-ggplot(data=GO_mol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Molecular_Function_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_mol_fig_up

Metabol_data_up <- up_genes_enrichr[["HMDB_Metabolites"]]
View(Metabol_data_up)
Metabol_data_up = subset(Metabol_data_up, Adjusted.P.value<.05)
Metabol_data_up <- Metabol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Metabol_data_up$db <- "HMDB_Metabolites"
Metabol_fig_up <-ggplot(data=Metabol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("HMDB_Metabolites") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
Metabol_fig_up

up_path_summary <- rbind(GO_biol_data_up, KEGG_data_up, Hall_data_up, GO_cell_data_up, GTEx_data_up, TF_data_up, GO_mol_data_up, Metabol_data_up)
up_path_summary$dir <- "Up"  

####### use downregulated genes

down_dge = subset(hm_tab, sig2=='sig' & log2FC<0)
write.table(down_dge,file="m2_dp8_down_dge.csv",sep=",")
down_list <- as.data.frame(down_dge$GeneSymbol)
down_list <- down_list %>% rename("genes" = "down_dge$GeneSymbol")
down_list <- down_list %>% drop_na()
down_list <- distinct(down_list)

dbs_search <- c("GO_Biological_Process_2018","KEGG_2019_Mouse", "MSigDB_Hallmark_2020","GO_Cellular_Component_2018","GTEx_Tissue_Sample_Gene_Expression_Profiles_up","TF_Perturbations_Followed_by_Expression","GO_Molecular_Function_2018", "HMDB_Metabolites")

down_genes_enrichr <- enrichr(down_list$genes, databases = dbs_search)

## make figure from enrichr analyses

GO_biol_data_down <- down_genes_enrichr[["GO_Biological_Process_2018"]]
View(GO_biol_data_down)
GO_biol_data_down = subset(GO_biol_data_down, Adjusted.P.value<.05)
GO_biol_data_down <- GO_biol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_biol_data_down$db <- "GO_biol_2019_Human"
GO_biol_fig_down <-ggplot(data=GO_biol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Biological_Process_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_biol_fig_down

KEGG_data_down <- down_genes_enrichr[["KEGG_2019_Mouse"]]
View(KEGG_data_down)
KEGG_data_down = subset(KEGG_data_down, Adjusted.P.value<.05)
KEGG_data_down <- KEGG_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
KEGG_data_down$db <- "KEGG_2019_Mouse"
KEGG_fig_down <-ggplot(data=KEGG_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("KEGG_2019_Mouse") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
KEGG_fig_down

Hall_data_down <- down_genes_enrichr[["MSigDB_Hallmark_2020"]]
View(Hall_data_down)
Hall_data_down = subset(Hall_data_down, Adjusted.P.value<.05)
Hall_data_down <- Hall_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Hall_data_down$db <- "MSigDB_Hallmark_2020"
Hall_fig_down <-ggplot(data=Hall_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("MSigDB_Hallmark_2020") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
Hall_fig_down

GO_cell_data_down <- down_genes_enrichr[["GO_Cellular_Component_2018"]]
View(GO_cell_data_down)
GO_cell_data_down = subset(GO_cell_data_down, Adjusted.P.value<.05)
GO_cell_data_down <- GO_cell_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_cell_data_down$db <- "GO_Cellular_Component_2018"
GO_cell_fig_down <-ggplot(data=GO_cell_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Cellular_Component_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_cell_fig_down

GTEx_data_down <- down_genes_enrichr[["GTEx_Tissue_Sample_Gene_Expression_Profiles_up"]]
View(GTEx_data_down)
GTEx_data_down = subset(GTEx_data_down, Adjusted.P.value<.05)
GTEx_data_down <- GTEx_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GTEx_data_down$db <- "GTEx_Tissue_Sample_Gene_Expression_Profiles_down"
GTEx_fig_down <-ggplot(data=GTEx_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GTEx_Tissue_Sample_Gene_Expression_Profiles_up") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GTEx_fig_down

TF_data_down <- down_genes_enrichr[["TF_Perturbations_Followed_by_Expression"]]
View(TF_data_down)
TF_data_down = subset(TF_data_down, Adjusted.P.value<.05)
TF_data_down <- TF_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
TF_data_down$db <- "TF_Perturbations_Followed_by_Expression"
TF_fig_down <-ggplot(data=TF_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("TF_Perturbations_Followed_by_Expression") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
TF_fig_down

GO_mol_data_down <- down_genes_enrichr[["GO_Molecular_Function_2018"]]
View(GO_mol_data_down)
GO_mol_data_down = subset(GO_mol_data_down, Adjusted.P.value<.05)
GO_mol_data_down <- GO_mol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_mol_data_down$db <- "GO_Molecular_Function_2018"
GO_mol_fig_down <-ggplot(data=GO_mol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Molecular_Function_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_mol_fig_down

Metabol_data_down <- down_genes_enrichr[["HMDB_Metabolites"]]
View(Metabol_data_down)
Metabol_data_down = subset(Metabol_data_down, Adjusted.P.value<.05)
Metabol_data_down <- Metabol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Metabol_data_down$db <- "HMDB_Metabolites"
Metabol_fig_down <-ggplot(data=Metabol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("HMDB_Metabolites") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
Metabol_fig_down

down_path_summary <- rbind(GO_biol_data_down, KEGG_data_down, Hall_data_down, GO_cell_data_down, GTEx_data_down, TF_data_down, GO_mol_data_down, Metabol_data_down)
down_path_summary$dir <- "down"  

path_summary <- rbind(up_path_summary, down_path_summary)
path_summary <- path_summary %>% arrange(desc(-Adjusted.P.value))               
write.table(path_summary,file="path_summary.csv",sep=",")

up_path_col1 <- plot_grid(GO_biol_fig_up, KEGG_fig_up, Hall_fig_up, GO_cell_fig_up, ncol = 1, labels = c('A', 'C', 'E', 'G', 'I', 'K', 'M', 'O'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))
up_path_col2 <- plot_grid(GTEx_fig_up, TF_fig_up, GO_mol_fig_up, Metabol_fig_up, ncol = 1, labels = c('B', 'D', 'F', 'H'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))

pdf(file="up_path_sumfig.pdf",width=16,height=12)
plot_grid(up_path_col1, up_path_col2, ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()

down_path_col1 <- plot_grid(GO_biol_fig_down, KEGG_fig_down, Hall_fig_down, GO_cell_fig_down, ncol = 1, labels = c('A', 'C', 'E', 'G', 'I', 'K', 'M', 'O'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))
down_path_col2 <- plot_grid(GTEx_fig_down, TF_fig_down, GO_mol_fig_down, Metabol_fig_down, ncol = 1, labels = c('B', 'D', 'F', 'H'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))

pdf(file="down_path_sumfig.pdf",width=16,height=12)
plot_grid(down_path_col1, down_path_col2, ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()

############ summarise enriched GO terms using revigo ---------

library(rrvgo)
library(stringr)

GO_BP_up_revigo <- up_genes_enrichr[["GO_Biological_Process_2018"]]
GO_BP_up_revigo = subset(GO_BP_up_revigo, Adjusted.P.value<.05)
GO_BP_up_revigo$ID <- str_extract(GO_BP_up_revigo$Term, "GO:.......")
GO_BP_up_simMatrix <- calculateSimMatrix(GO_BP_up_revigo$ID, orgdb="org.Mm.eg.db", ont="BP", method="Rel")
GO_BP_up_scores <- setNames(-log10(GO_BP_up_revigo$Adjusted.P.value), GO_BP_up_revigo$ID)
GO_BP_up_reducedTerms <- reduceSimMatrix(GO_BP_up_simMatrix, GO_BP_up_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_BP_up_simMatrix, GO_BP_up_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_BP_up_scatter_m2_dp8.pdf",width=14,height=8)
GO_BP_up_scatter <- scatterPlot(GO_BP_up_simMatrix, GO_BP_up_reducedTerms, labelSize=3)
GO_BP_up_scatter
dev.off()
pdf(file="GO_BP_up_tree_m2_dp8.pdf",width=14,height=8)
GO_BP_up_tree <- treemapPlot(GO_BP_up_reducedTerms)
dev.off()

GO_CC_up_revigo <- up_genes_enrichr[["GO_Cellular_Component_2018"]]
GO_CC_up_revigo = subset(GO_CC_up_revigo, Adjusted.P.value<.05)
GO_CC_up_revigo$ID <- str_extract(GO_CC_up_revigo$Term, "GO:.......")
GO_CC_up_simMatrix <- calculateSimMatrix(GO_CC_up_revigo$ID, orgdb="org.Mm.eg.db", ont="CC", method="Rel")
GO_CC_up_scores <- setNames(-log10(GO_CC_up_revigo$Adjusted.P.value), GO_CC_up_revigo$ID)
GO_CC_up_reducedTerms <- reduceSimMatrix(GO_CC_up_simMatrix, GO_CC_up_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_CC_up_simMatrix, GO_CC_up_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_CC_up_scatter_m2_dp8.pdf",width=14,height=8)
GO_CC_up_scatter <- scatterPlot(GO_CC_up_simMatrix, GO_CC_up_reducedTerms, labelSize=3)
GO_CC_up_scatter
dev.off()
pdf(file="GO_CC_up_tree_m2_dp8.pdf",width=14,height=8)
GO_CC_up_tree <- treemapPlot(GO_CC_up_reducedTerms)
dev.off()

GO_MF_up_revigo <- up_genes_enrichr[["GO_Molecular_Function_2018"]]
GO_MF_up_revigo = subset(GO_MF_up_revigo, Adjusted.P.value<.05)
GO_MF_up_revigo$ID <- str_extract(GO_MF_up_revigo$Term, "GO:.......")
GO_MF_up_simMatrix <- calculateSimMatrix(GO_MF_up_revigo$ID, orgdb="org.Mm.eg.db", ont="MF", method="Rel")
GO_MF_up_scores <- setNames(-log10(GO_MF_up_revigo$Adjusted.P.value), GO_MF_up_revigo$ID)
GO_MF_up_reducedTerms <- reduceSimMatrix(GO_MF_up_simMatrix, GO_MF_up_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_MF_up_simMatrix, GO_MF_up_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_MF_up_scatter_m2_dp8.pdf",width=14,height=8)
GO_MF_up_scatter <- scatterPlot(GO_MF_up_simMatrix, GO_MF_up_reducedTerms, labelSize=3)
GO_MF_up_scatter
dev.off()
pdf(file="GO_MF_up_tree_m2_dp8.pdf",width=14,height=8)
GO_MF_up_tree <- treemapPlot(GO_MF_up_reducedTerms)
dev.off()

GO_BP_down_revigo <- down_genes_enrichr[["GO_Biological_Process_2018"]]
GO_BP_down_revigo = subset(GO_BP_down_revigo, Adjusted.P.value<.05)
GO_BP_down_revigo$ID <- str_extract(GO_BP_down_revigo$Term, "GO:.......")
GO_BP_down_simMatrix <- calculateSimMatrix(GO_BP_down_revigo$ID, orgdb="org.Mm.eg.db", ont="BP", method="Rel")
GO_BP_down_scores <- setNames(-log10(GO_BP_down_revigo$Adjusted.P.value), GO_BP_down_revigo$ID)
GO_BP_down_reducedTerms <- reduceSimMatrix(GO_BP_down_simMatrix, GO_BP_down_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_BP_down_simMatrix, GO_BP_down_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_BP_down_scatter_m2_dp8.pdf",width=14,height=8)
GO_BP_down_scatter <- scatterPlot(GO_BP_down_simMatrix, GO_BP_down_reducedTerms, labelSize=3)
GO_BP_down_scatter
dev.off()
pdf(file="GO_BP_down_tree_m2_dp8.pdf",width=14,height=8)
GO_BP_down_tree <- treemapPlot(GO_BP_down_reducedTerms)
dev.off()

GO_CC_down_revigo <- down_genes_enrichr[["GO_Cellular_Component_2018"]]
GO_CC_down_revigo = subset(GO_CC_down_revigo, Adjusted.P.value<.05)
GO_CC_down_revigo$ID <- str_extract(GO_CC_down_revigo$Term, "GO:.......")
GO_CC_down_simMatrix <- calculateSimMatrix(GO_CC_down_revigo$ID, orgdb="org.Mm.eg.db", ont="CC", method="Rel")
GO_CC_down_scores <- setNames(-log10(GO_CC_down_revigo$Adjusted.P.value), GO_CC_down_revigo$ID)
GO_CC_down_reducedTerms <- reduceSimMatrix(GO_CC_down_simMatrix, GO_CC_down_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_CC_down_simMatrix, GO_CC_down_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_CC_down_scatter_m2_dp8.pdf",width=14,height=8)
GO_CC_down_scatter <- scatterPlot(GO_CC_down_simMatrix, GO_CC_down_reducedTerms, labelSize=3)
GO_CC_down_scatter
dev.off()
pdf(file="GO_CC_down_tree_m2_dp8.pdf",width=14,height=8)
GO_CC_down_tree <- treemapPlot(GO_CC_down_reducedTerms)
dev.off()

GO_MF_down_revigo <- down_genes_enrichr[["GO_Molecular_Function_2018"]]
GO_MF_down_revigo = subset(GO_MF_down_revigo, Adjusted.P.value<.05)
GO_MF_down_revigo$ID <- str_extract(GO_MF_down_revigo$Term, "GO:.......")
GO_MF_down_simMatrix <- calculateSimMatrix(GO_MF_down_revigo$ID, orgdb="org.Mm.eg.db", ont="MF", method="Rel")
GO_MF_down_scores <- setNames(-log10(GO_MF_down_revigo$Adjusted.P.value), GO_MF_down_revigo$ID)
GO_MF_down_reducedTerms <- reduceSimMatrix(GO_MF_down_simMatrix, GO_MF_down_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_MF_down_simMatrix, GO_MF_down_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_MF_down_scatter_m2_dp8.pdf",width=14,height=8)
GO_MF_down_scatter <- scatterPlot(GO_MF_down_simMatrix, GO_MF_down_reducedTerms, labelSize=3)
GO_MF_down_scatter
dev.off()
pdf(file="GO_MF_down_tree_m2_dp8.pdf",width=14,height=8)
GO_MF_down_tree <- treemapPlot(GO_MF_down_reducedTerms)
dev.off()


## remove duplicates to make TF figure
library(stringr)
library(dplyr)
library(ggplot2)

TF_data_up <- up_genes_enrichr[["TF_Perturbations_Followed_by_Expression"]]
View(TF_data_up)
TF_data_up = subset(TF_data_up, Adjusted.P.value<.05)
TF_data_up$TF <- gsub("([A-Za-z]+).*", "\\1", TF_data_up$Term)
TF_data_up$dir <- tolower(word(TF_data_up$Term,-1))
TF_data_up$text <- paste(TF_data_up$TF, TF_data_up$dir, sep = " ", collapse = NULL)
TF_data_up <- TF_data_up %>% distinct(text, .keep_all = TRUE)

TF_data_up <- TF_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
TF_data_up$db <- "TF_Perturbations_Followed_by_Expression"
TF_fig_up <-ggplot(data=TF_data_up, aes(x= reorder(text, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("TF_Perturbations_Followed_by_Expression") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
TF_fig_up

pdf(file="m2_dp8_TF_fig_up.pdf",width=8,height=4)
TF_fig_up
dev.off()


TF_data_down <- down_genes_enrichr[["TF_Perturbations_Followed_by_Expression"]]
View(TF_data_down)
TF_data_down = subset(TF_data_down, Adjusted.P.value<.05)
TF_data_down$TF <- gsub("([A-Za-z]+).*", "\\1", TF_data_down$Term)
TF_data_down$dir <- tolower(word(TF_data_down$Term,-1))
TF_data_down$text <- paste(TF_data_down$TF, TF_data_down$dir, sep = " ", collapse = NULL)
TF_data_down <- TF_data_down %>% distinct(text, .keep_all = TRUE)

TF_data_down <- TF_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
TF_data_down$db <- "TF_Perturbations_Followed_by_Expression"
TF_fig_down <-ggplot(data=TF_data_down, aes(x= reorder(text, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("TF_Perturbations_Followed_by_Expression") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
TF_fig_down

pdf(file="m2_dp8_TF_fig_down.pdf",width=8,height=4)
TF_fig_down
dev.off()

## use counts tables 


rm(list = ls())

#### PRELIMINARIES ############################################################################################# 

#*Uploads the needed libraries --------------------------------------------------------------------------------

require(DESeq2)

require(ggplot2)

require(data.table)

require(plotly)

require(DT)

require(htmlwidgets)

require(R2HTML)


soft_version <- packageVersion("DESeq2")

#*Set the number of significant digits for the output --------------------------
sig_dig = 4

## Analysis for mfn1 MEFs at dm2

#*Set the working directory ---------------------------------------------------------------------------------

#get the default wd
default_wd <- getwd()

#Set the directory where all the saved outputs will be stored
setwd("/Users/jakemann/RNAseq_Dec20/output_v1/m1_dm2")

new_wd <- getwd()
#### DATA UPLOAD ###############################################################################################################

annotation_table <- read.csv("/Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.95_gene_annotation_table.txt", sep = "\t")

# inputs the list of the count files
input_files <- list.files(path = "/Users/jakemann/RNAseq_Dec20/m1_MEF_counts/", pattern = "*tab$", full.names = TRUE)
input_files <- input_files[grep(input_files, pattern="m1_dm2|WT_dm2")]

# inputs the list of the summary files
summary_files <-  list.files(path = "/Users/jakemann/RNAseq_Dec20/m1_MEF_counts/", pattern = "summary$", full.names = TRUE)
summary_files <- summary_files[grep(summary_files, pattern="m1_dm2|WT_dm2")]

#Reads the count files (input_files)
#create a list; each element of a list (named ''sample'' in the following) is a count table
counts_tables <- lapply(input_files, fread, header = FALSE, stringsAsFactors = FALSE, skip=2, select=c(1,7), col.names=c("GeneID","Counts"))

#Reads the summary files (summary_files)
#create a list; each element of a list is a summary table
summary_tables <- lapply(summary_files, read.delim, header = FALSE, stringsAsFactors = FALSE, skip=1, quote = "")

#takes the names of the genes from the counts_tables
genes_names <- counts_tables[[1]]$GeneID
genes_number = length(genes_names)

#take the names of each element (sample) of the list from the input files 
samples_names <- substr(noquote(unlist(lapply(basename(input_files), tools::file_path_sans_ext))) ,1,8)

#assign the names to the elements of the counts_tables list, composed by the counts tables; NOTE: each replicate has its ID
names(counts_tables) <- samples_names

#Creates a single data frame with all the samples as columns, for reporting and clustering purposes -- see heatmaps below
counts_tables_dataframe <- sapply(counts_tables, '[[', 2)
#assignes the genes names to the rows of the counts_tables_dataframe
rownames(counts_tables_dataframe) <- genes_names

#assign the names to the elements of the summary_tables list, composed by the summary tables; NOTE: each replicate has its ID
names(summary_tables) <- samples_names

#take the roots of the samples_names; replicates cannot be distinguished here -- set the name of the control 
name_control <- "WT_dm2"
names_mutants <- setdiff(unique((substr(samples_names,1,6))), name_control)

#Creates the datasets_matrix, containing all the names of the datasets and replicates for reporting purposes
datasets_matrix <- matrix(samples_names, nrow=length(grep(name_control, samples_names)), ncol=length(names_mutants)+1)
colnames(datasets_matrix) <- c(names_mutants, name_control)





####PAIRWISE COMPARISONS ####################################################################################################
# *Set the tresholds ----------------------------------------------------------------------------------------------------

lfc = 1.5 #treshold for the ADJUSTED fold changes
pval = 0.01 #treshold for the ADJUSTED pvalues

num_comparisons=1 #loop's counter initialisation

###COMPARISONS, PLOTS AND TABLES LOOP ======================================================================================

# *Start of the loop ------------------------------------------------------------------------------------------------------
while(num_comparisons <= length(names_mutants)){    

  # **Grabbing the data ----------------------------------------------------------------------------------------------------  
  name_mutant <- names_mutants[num_comparisons]  
  
  #extract the needed samples from the whole list
  assign( paste0("counts_tables_", name_control), counts_tables[grep(name_control, samples_names, value = TRUE)]) #extract the controls counts tables 

  assign( paste0("counts_tables_", name_mutant), counts_tables[grep(name_mutant, samples_names, value = TRUE)]) #extract the mutants counts tables 

  assign( paste0("counts_list_", name_control, "_", name_mutant) , c( get( paste0("counts_tables_", name_control)),  get(paste0("counts_tables_", name_mutant)) )) #merges the two counts tables above in one list

  # **Creating the counts matrix needed for DESeq2 AND ... ---------------------------------------------------------------------  

  #creates the counts matrix: each row is a gene, the first n columns are the counts coming from the control's replicates, the last p columns are the counts from the mutant replicates
  assign( paste0( "columns_list_", name_control, "_", name_mutant), sapply(get( paste0("counts_list_", name_control, "_", name_mutant) ), `[[` , 2) )  #takes one column each two (i.e. only the columns containing the counts) from the counts list

  assign( paste0( "counts_matrix_", name_control, "_", name_mutant),  matrix(unlist( get( paste0( "columns_list_", name_control, "_", name_mutant) ) , use.names = FALSE), ncol = length( get( paste0("counts_list_", name_control, "_", name_mutant) ) ) )  )#convert the list into a matrix, for convenience

  assign( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names"), get(  paste0( "counts_matrix_", name_control, "_", name_mutant) ) )  #the counts matrix with names is also created; at this stage is the same of the counts matrix

  # #filters out low counts
  
  # matrix_to_filter <- get(paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names"))
  # summing_rows <- apply(matrix_to_filter, 1, sum)
  # rows_to_keep <- which(summing_rows > 10)
  # matrix_filtered <- matrix_to_filter[rows_to_keep,]
  # genes_names <- names(matrix_filtered)
  # assign( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names"), matrix_filtered)

  #** ... AND Creating the summary matrix ---------------------------------------------------------------------
  #The summary matrix contains, for each comparison, the general information about the counts statistics
  
  #extracts the needed samples from the whole list
  assign( paste0("summary_tables_", name_control), summary_tables[grep(name_control, samples_names, value = TRUE)]) #extract the controls summary tables 
  
  assign( paste0("summary_tables_", name_mutant), summary_tables[grep(name_mutant, samples_names, value = TRUE)]) #extract the mutants summary tables 
  
  assign( paste0("summary_list_", name_control, "_", name_mutant) , c( get( paste0("summary_tables_", name_control)),  get(paste0("summary_tables_", name_mutant)) )) #merges the two summary tables above in one list
  
  #creates the summary matrix: each row is a gene, the first n columns are the counts coming from the control's replicates, the last p columns are the counts from the mutant replicates
  assign( paste0( "columns_list_", name_control, "_", name_mutant), sapply(get( paste0("summary_list_", name_control, "_", name_mutant) ), `[[` , 2) )  #takes one column each two (i.e. only the columns containing the counts) from the counts list
  
  assign( paste0( "summary_matrix_", name_control, "_", name_mutant),  matrix(unlist( get( paste0( "columns_list_", name_control, "_", name_mutant) ) , use.names = FALSE), ncol = length( get( paste0("summary_list_", name_control, "_", name_mutant) ) ) )  )#convert the list into a matrix, for convenience
  
  assign( paste0( "summary_matrix_", name_control, "_", name_mutant, "_with_names"), get(  paste0( "summary_matrix_", name_control, "_", name_mutant) ) )  #the counts matrix with names is also created; at this stage is the same of the counts matrix
  
  
  col_names <-c(grep(name_control, samples_names, value=TRUE),  grep(name_mutant, samples_names, value = TRUE))  # takes the right names for the columns of the counts matrix, from the sample names 

  dummy<- get( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names") )         #workaround for assigning dynamically colnames and rownames to the counts_matrix - START
  colnames(dummy) <- col_names
  assign(  paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names")  ,  dummy)

  dummy<- get( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names") )
  rownames(dummy) <- genes_names
  assign(  paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names")  ,  dummy)    #workaround for assigning dynamically colnames and rownames to the counts_matrix - END

  dummy<- get( paste0( "summary_matrix_", name_control, "_", name_mutant) )         #workaround for assigning dynamically colnames and rownames to the summary_matrix - START
  colnames(dummy) <- col_names
  rownames(dummy) <- summary_tables[[1]][,1]
  assign(  paste0( "summary_matrix_", name_control, "_", name_mutant)  ,  dummy) #workaround for assigning dynamically colnames and rownames to the summary_matrix - END

  # #Evaluating the number of the reads counted and uncounted by HTSEQ2
  total_uncounted <- apply(get(paste0( "summary_matrix_", name_control, "_", name_mutant))[-1,], 2, sum)
  total_counted <- get(paste0( "summary_matrix_", name_control, "_", name_mutant))[1,]
  total_number <- total_uncounted + total_counted
  fraction_counted <- signif(total_counted/total_number, digits=3)
  void_row<-rep(" ", length(total_counted))
  statistics_matrix <- rbind(total_number, total_counted, total_uncounted,fraction_counted,void_row)
  rownames(statistics_matrix)<-c("TOTAL READS MAPPED", "TOTAL READS COUNTED", "TOTAL READS NON COUNTED", "FRACTION COUNTED" , "DETAILS UNCOUNTED:")

    #merging summary matrix and statistics matrix
  dummy<- rbind(statistics_matrix, get( paste0( "summary_matrix_", name_control, "_", name_mutant) )) 
  assign(  paste0( "summary_matrix_", name_control, "_", name_mutant)  ,  dummy)
  
  #**Defining the "experimental design" -----------------------------------
  comparisons <- sapply(col_names, function(x) substr(x,1,6))  #takes only the first parts of the column names; these are the identifiers of the control and mutant's data, irrespectively of the replicates 

  experimental_design <- data.frame(row.names = col_names, comparisons=comparisons)
  experimental_design$correlated <- c(seq(1: length(grep(name_control, col_names)) ),  seq(1: length(grep(name_mutant, col_names)) ) )
  
  #experimental_design$comparisons<- relevel(experimental_design$comparisons, ref=name_control)
  experimental_design$comparisons<- factor(experimental_design$comparisons, levels=c(name_control, name_mutant))
  
  #**Calling DESeq2 ------------------------

  #Creating the dds data structure, needed from DESEQ2
  dds <- DESeqDataSetFromMatrix(countData= get( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names")) , colData=experimental_design, design=~comparisons)
  
  #Calls DEseq2 on dds and store the results in de
  de<-DESeq(dds)

  #Uses the built-in DESEQ2 results operator for creating a matrix-like structure storing the DE analysis results; the structure is stored in res_raw and subsequently converted in a data frame (res) 
  
  res_raw <-results(de)
  res <- signif(as.data.frame(res_raw), digits = sig_dig) #converts into data frame and sets the number of digits
  res <- cbind(rownames(res), res) #adds one column with the genes ID to the res dataframe (it will be useful later on)
  colnames(res) <- c("ID","Mean of norm counts", "log2 FC (MLE)", "lFC Std Err" , "Wald Stat", "Wald test pval", "BH pval") # sets the column names
  
  
  ##*Plots and Tables -----------------------------------------------------------------------------------------------------------------
  
  #**Assigns dynamic names to the table to export, taking the res data frame defined above ---------------------------------- 
  assign(paste0("results_table_",name_control,"_", name_mutant),  res ) #takes the whole res data frame
  dummy<-merge(annotation_table, get(paste0("results_table_",name_control,"_", name_mutant)), by.x="GeneSymbol", by.y="ID")
  assign(paste0("results_table_",name_control,"_", name_mutant), dummy)
  
  
  assign(paste0("results_table_topscore_",name_control,"_", name_mutant), res[which(abs(res$`log2 FC (MLE)`)>lfc & res$`BH pval` <pval),]) #takes only the rows of the res data frame that have the best log2FC and the best BH pval
  dummy<-merge(annotation_table, get(paste0("results_table_topscore_",name_control,"_", name_mutant)), by.x="GeneSymbol", by.y="ID")
  assign(paste0("results_table_topscore_",name_control,"_", name_mutant), dummy)
  
  
  #**Prints the tables above in .csv---------------------------------------------------------------------------------
  
  #write.table(get(paste0("results_table_topscore_",name_control,"_", name_mutant)), file=paste0("results_table_topscore_",name_control,"_", name_mutant, ".tsv"),quote=F,sep="\t", row.names = FALSE)
  
  #write.table(get(paste0("results_table_",name_control,"_", name_mutant)), file=paste0("results_table_",name_control,"_", name_mutant, ".tsv"), quote=F,sep="\t", row.names = FALSE)
  
  #write.table(get(paste0("counts_matrix_",name_control,"_", name_mutant, "_with_names")), file=paste0("counts_matrix_",name_control,"_", name_mutant, ".tsv"), quote=F,sep="\t", row.names = FALSE)
  
  #**Building the datatables ---------------------------------------------------------------------------------------------------------
  #The datatables are widgets created through the saveWidget function; this can "automatically" be sorted clicking on it --> Useful for having a general overview
  
  #***Summingup datatable ------------------------------------------
  #Builds the datatable containing all the resuls of the DE analysis
  
  #Creates the summingup_matrix, which includes only some columns of the correspondent results_table (more handy for visualisation) 
  assign(paste0("summingup_matrix_",name_control, "_", name_mutant), get(paste0("results_table_",name_control,"_", name_mutant))[, c(1:7,10,11)])
  dummy <- get(paste0("summingup_matrix_",name_control, "_", name_mutant))
  rownames(dummy) <- c()
  assign( paste0("summingup_matrix_",name_control, "_", name_mutant), dummy )
  #Creates a dynamic table (widget) of all the results
  assign(paste0("summingup_datatable_",name_control, "_", name_mutant) , datatable(get(paste0("summingup_matrix_",name_control, "_", name_mutant))) )
  #saves the datatable widget to in the working directory
  saveWidget( get(paste0("summingup_datatable_",name_control, "_", name_mutant)), file= paste0("summingup_datatable_",name_control, "_", name_mutant, ".html") )

  #***Topscores datatable ----------------------------------------- 
  #Builds the matrix containing only the top log2FC (adjusted) top scores (independently on the pvalues)
  assign(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant),  subset(get(paste0("summingup_matrix_",name_control, "_", name_mutant)),  (abs(get(paste0("summingup_matrix_",name_control, "_", name_mutant))[,"log2 FC (MLE)"]) >lfc &  get(paste0("summingup_matrix_",name_control, "_", name_mutant))[,"BH pval"] <pval )  ) ) 
  dummy <- get(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant))
  rownames(dummy) <- c()
  assign( paste0("summingup_matrix_topscores_",name_control, "_", name_mutant), dummy )
  #Creates a dynamic table (widget) of the topscores
  assign(paste0("topscores_datatable_",name_control, "_", name_mutant) , datatable(get(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant))) )
  #saves the datatable widget to in the working directory
  saveWidget( get(paste0("topscores_datatable_",name_control, "_", name_mutant)), file= paste0("topscores_datatable_",name_control, "_", name_mutant, ".html") )

  #**Dispersion plot---------------------------------------------------------------------------------------------
  #This will not be stored or printed; for sanity check purposes only
  plotDispEsts(de, main=paste(name_mutant, " vs ", name_control))

  #**MA plot -----------------------------------------------------------------------------------------------------
  #Plot of the mean of normalised (according to DESEq) counts of the control vs. the log2fold change "corrected as well"
  #***Plot static MA -------------------------------------------------------------------------------------------------- 

  #Creates the dataframe for ggplot
  MA_dataframe <- data.frame(Ln_mean=log(res$`Mean of norm counts`), foldchange = res$`log2 FC (MLE)`, pvaladj=res$`BH pval`)
  rownames(MA_dataframe) <- rownames(res)
  MA_dataframe <- MA_dataframe[which(!is.na(MA_dataframe$foldchange)), ]
  MA_dataframe$Diff_Exp <- rep(0, nrow(MA_dataframe))
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)>=lfc  )] <- "Relevant log2 FC" 
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)>=lfc & MA_dataframe$pvaladj<=pval)] <- "Relevant log2 FC and Pval" 
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)<lfc)] = "Non significant" 

  #Creates the ggplot
  r <-ggplot(MA_dataframe, aes(x=Ln_mean, y=foldchange, text=rownames(MA_dataframe)))+
    geom_point(aes(colour= Diff_Exp), size=.5)+
    geom_hline(yintercept=0, linetype=1, color="green") + geom_hline(yintercept=lfc,linetype=3, color="green") + geom_hline(yintercept=-lfc, linetype=3, color="green")+
    scale_colour_manual(values = c("Relevant log2 FC and Pval" ="red", "Non significant" = "black", "Relevant log2 FC" ="blue"))+
    xlab("ln mean of norm. counts") + ylab("log2 fold change")+ scale_x_continuous(labels = function(x)as.integer(exp(x)))+
    #+ylim(-4, 4)
    labs(aesthetic='custom text')+
    ggtitle(paste("MA plot", name_control, "vs.", name_mutant))

  #Saves the plot in a variable
  assign(paste("static", "MAplot", name_control, name_mutant, sep = "_"), r)

  #Saves the pdf of the plot in the OUTPUT directory
  pdf(file= paste("static", "MAplot", name_control, name_mutant, ".pdf", sep = "_"))
  print(r)
  dev.off()

  #***Plot dynamic MA -------------------------------------------------------------------------------------------------- 

  #Creates the plot
  s<- ggplotly(r, tooltip=c("text", "x", "y") )

  #SAves the plot in a variable
  assign(paste("dynamic", "MAplot", name_control, name_mutant, sep = "_"), s)

  #Saves the WIDGET of the plot in the OUTPUT directory
  print(s)
  saveWidget(s, file= paste0("dynamic_MAplot",name_control, "_", name_mutant, ".html") )

  #**Volcano Plots --------------------------------------------------------------

  #***Plot static volcano--------------------------------------------------------

  #creates a data frame with some of the columns taken from res which, in turn, summarises the DESEq2 results
  tab = data.frame(logFC = res$`log2 FC (MLE)`, negLogPval = -log10(res$`BH pval`))
  rownames(tab) <- rownames(res)

  #Identifies the DE genes
  candidate_results <- subset(res, (abs(res$`log2 FC (MLE)`) > lfc & res$`BH pval` < pval))
  assign( paste0("candidate_results_tab_",name_control,"_",name_mutant), subset(tab, (abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval))) )

  #Identifies the not DE genes
  non_candidate_results <- subset(res, (abs(res$`log2 FC (MLE)`) <= lfc | res$`BH pval` >= pval))
  assign(paste0("non_candidate_results_tab_",name_control,"_",name_mutant), subset(tab, (abs(tab$logFC) <= lfc | tab$negLogPval <= -log10(pval))) )

  #Mark DE and non DE genes in the dataframe 
  dummy <- get(paste0("non_candidate_results_tab_",name_control,"_",name_mutant))
  dummy$Diff_Exp <- "DE -"
  assign(paste0("non_candidate_results_tab_",name_control,"_",name_mutant), dummy)

  dummy <- get(paste0("candidate_results_tab_",name_control,"_",name_mutant))
  if(nrow(dummy)>0){dummy$Diff_Exp <- "DE +"}
  assign(paste0("candidate_results_tab_",name_control,"_",name_mutant), dummy)

  #merge the "candidate" and "non candidate" dataframes
  assign(paste0("results_tab_",name_control,"_",name_mutant), rbind(get(paste0("candidate_results_tab_",name_control,"_",name_mutant)), get(paste0("non_candidate_results_tab_",name_control,"_",name_mutant)) ))

  #builds the ggplot
  h<-ggplot( get(paste0("results_tab_",name_control,"_",name_mutant)), aes(x=logFC, y=negLogPval, text=rownames(get(paste0("results_tab_",name_control,"_",name_mutant))) ) )+
   geom_point(aes(colour= Diff_Exp), size=.5)+
   geom_hline(yintercept=-log10(pval), linetype=3, color="green") + geom_vline(xintercept=-c(-lfc, lfc), linetype=3, color="blue")+
   scale_colour_manual(values = c("DE +" ="red", "DE -" = "black"))+
   xlab("log2 fold change") + ylab("-log10 pvalue")+ 
   ggtitle(paste("Volcano plot", name_control, "vs.", name_mutant))

  #Saves the plot in a variable
  assign(paste("static", "Vplot", name_control, name_mutant, sep = "_"), h)

  #Saves the pdf of the plot in the OUTPUT directory
  pdf(file= paste("static", "Vplot", name_control, name_mutant, ".pdf", sep = "_"))
  print(h)
  dev.off()

  #***Plot dynamic volcano----------------------------------------------------------------------------------------------------------

  #Creates the plot
  k<- ggplotly(h, tooltip=c("text", "x", "y") )

  #Saves the plot in a variable
  assign(paste("dynamic", "Vplot", name_control, name_mutant, sep = "_"), k)

  print(k)

  #Saves the WIDGET of the plot in the OUTPUT directory
  saveWidget(k, file= paste0("dynamic_Vplot",name_control, "_", name_mutant, ".html") )

  #Updates the loop counter
  print(num_comparisons)
  num_comparisons= num_comparisons +1
} 
#*End of the loop --------------------------------------------


# #PRODUCES ADDITIONAL TABLES =================================================

#**Produces the genes_lenghts  ---------------------------------------------------------------
#takes the genes lengths from the first feature counts input file and creates the genes_lenghts table
feature_counts_table <- fread(input_files[[1]])
genes_lenghts <- as.matrix(feature_counts_table$Length)
rownames(genes_lenghts) <- feature_counts_table$Geneid
colnames(genes_lenghts) <- "Lenght"

#**Produces the annotation_table_with_length ---------------------------------------------------------------
annotation_table_with_length <- merge(annotation_table, genes_lenghts, all.x=T, by.x="GeneSymbol", by.y="row.names")

#** Raw counts, CPM, TPM  ---------------------------------------------------------------

# produces the raw_counts matrix
# merges the raw_counts matrix (all the raw counts for each sample) with the genes_lenghts_table
raw_counts <- (merge(annotation_table_with_length, counts(de), by.x="GeneSymbol", by.y="row.names", all.x=T))
write.csv(raw_counts, file="raw_counts.csv", row.names=FALSE)

# produces the Raw Counts Normalised (DESeq2 normalisation) table 
raw_counts_normalised <- (merge(annotation_table_with_length, counts(de, normalized=T), by.x="GeneSymbol", by.y="row.names", all.x=T))
write.csv(raw_counts_normalised, file="raw_counts_normalised.csv", row.names=FALSE)

# computes the CPM on the raw counts
CPM_working = subset(raw_counts, select = c(7:ncol(raw_counts)))
CPM_working$sum <- rowSums(CPM_working)
CPM <- apply(raw_counts[,c(7:ncol(raw_counts))],2, function(x){x*10^6/CPM_working$sum})
CPM <- cbind(raw_counts[,c(1:6)],CPM)
write.csv(CPM, file="raw_counts_CPM.csv", row.names=FALSE)

# computes the TPM
RPK <-  (raw_counts[,c(7:ncol(raw_counts))])/(raw_counts$Lenght/1000)  #<- Reads Per Kilobase (Normalises the counts for the genes length, expressed in kilobases)
Scaling_factor <- apply(RPK,2,sum)/10^6
TPM <- sweep(RPK, 2, Scaling_factor, FUN = '/')
TPM <- cbind(raw_counts[,c(1:6)],TPM)
write.csv(TPM, file="raw_counts_TPM.csv", row.names=FALSE)

#** Produces the results_tables  ---------------------------------------------------------------

#computes the average CPM for controls and mutants
assign(paste0("average_",name_control), apply(CPM[,grep(colnames(CPM), pattern=name_control)],1,mean ) )
dummy<-as.data.frame(get(paste0("average_",name_control)))
colnames(dummy) <- paste0("Average CPM ",name_control)
rownames(dummy) <- CPM$gene_id
assign(paste0("average_",name_control), dummy)
#
assign(paste0("average_",names_mutants), apply(CPM[,grep(colnames(CPM), pattern=names_mutants)],1,mean ) )
dummy<-as.data.frame(get(paste0("average_",names_mutants)))
colnames(dummy) <- paste0("Average CPM ",names_mutants)
rownames(dummy) <- CPM$gene_id
assign(paste0("average_",names_mutants), dummy)
#
#merges the averages CPMs tables with the results table and the genes_length table
dummy<- merge(get(paste0("average_",name_control)),  get(paste0("average_",names_mutants)), by="row.names") 
rownames(dummy) <- dummy$Row.names
dummy<- dummy[,-1]
#
assign(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM"), merge( get(paste0("results_table_",name_control,"_", names_mutants)), dummy, by.y="row.names", by.x="gene_id") ) 
assign(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM"), merge( get(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM")), genes_lenghts, by.x="GeneSymbol", by.y="row.names", all.x=T ) )
write.csv(get(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM")), file=paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM.csv"), row.names = FALSE)
#
assign(paste0("results_table_topscore_", name_control,"_", names_mutants, "_", "CPM"), merge( get(paste0("results_table_topscore_",name_control,"_", names_mutants)), dummy, by.y="row.names", by.x="gene_id") ) 
assign(paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM"), merge( get(paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM")), genes_lenghts, by.x="GeneSymbol", by.y="row.names", all.x=T ) )
write.csv(get(paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM")), file=paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM.csv"), row.names = FALSE)

#**Filters the counts matrix  according to the CPM ------------------------

# # Filters the counts matrix eliminating the rows where at least one element violates the condition (low counts threshold)

count_zeroes<- function(x){length(which(x<=.5))}
numberofzeroes <- apply(CPM[,c(7:ncol(CPM))], 1, count_zeroes)
CPM_filtered <- CPM[which(numberofzeroes<=5),]
# write.csv(counts_matrix_cpm_filtered, file="cpm_counts_filtered.csv")
# 
#Filters the results_mtrx with the same criteria above 
results_mtrx <- get(paste0("results_table_",name_control,"_", name_mutant, "_CPM"))
results_mtrx_filtered <- results_mtrx[which(results_mtrx$gene_id %in% CPM_filtered$gene_id), ]
#write.csv(results_mtrx, file="results_table.csv", row.names = FALSE)
write.csv(results_mtrx_filtered, file="results_table_CPM_filtered.csv", row.names = FALSE)
#Filters the results_mtrx with the same criteria above 
results_mtrx <- get(paste0("results_table_",name_control,"_", name_mutant, "_CPM"))
results_mtrx_filtered <- results_mtrx[which(results_mtrx$gene_id %in% CPM_filtered$gene_id), ]
#write.csv(results_mtrx, file="results_table.csv", row.names = FALSE)
write.csv(results_mtrx_filtered, file="results_table_CPM_filtered.csv", row.names = FALSE)

results_mtrx_topscore <- get(paste0("results_table_topscore_",name_control,"_", name_mutant, "_CPM"))
results_mtrx_topscore_filtered <- results_mtrx_topscore[which(results_mtrx_topscore$gene_id %in% CPM_filtered$gene_id), ]
write.csv(results_mtrx_topscore_filtered, file="results_table_CPM_topscore_filtered.csv", row.names = FALSE)

#CREATES A HEATMAP =================================================
library(gplots)
#class(CPM_filtered) <- "numeric"
#CPM_filtered_resorted <-CPM_filtered[order(CPM_filtered[,7], decreasing = TRUE),]
#class(CPM_filtered_resorted) <- "numeric"
CPM_filtered_heat <- as.matrix(CPM_filtered[,c(7:ncol(CPM))])
class(CPM_filtered_heat) <- "numeric"

CPM_filtered_heat_sorted <-CPM_filtered_heat[order(CPM_filtered_heat[,1], decreasing = TRUE),]

pdf(file="m1_dm2_hm.pdf")
heatmap.2(CPM_filtered_heat_sorted[c(1:7000),], distfun=function(x) dist(x, method="minkowski"), hclustfun=function(x) hclust(x, method="ward.D2"), scale="row", trace = 'none', labRow = FALSE, dendrogram="column", margins=c(8,1), cexCol = .75)
dev.off()



# #CREATES THE TABLE FOR GSEA =====================================================
# #The data are taken from the res_raw table.
GSEA_table <- data.frame(Sign= sign(res_raw$log2FoldChange), pval=(res_raw$padj),stringsAsFactors = FALSE)
GSEA_table$metric <- -log10(GSEA_table$pval)/GSEA_table$Sign
rownames(GSEA_table) <- rownames(res_raw)

GSEA_input_ranked_table <- cbind(rownames(GSEA_table), GSEA_table$metric)
colnames(GSEA_input_ranked_table) <- cbind("Gene name", "Metric")
GSEA_input_ranked_table<-GSEA_input_ranked_table[-which(is.na(GSEA_input_ranked_table[,"Metric"])),]

GSEA_input_ranked_table2 <- as.data.frame(GSEA_input_ranked_table)
GSEA_input_ranked_table2 <- GSEA_input_ranked_table2 %>% rename("gene_name" = "Gene name")
GSEA_input_ranked_table2 <- GSEA_input_ranked_table2 %>% distinct(gene_name, .keep_all = TRUE)
write.table(GSEA_input_ranked_table2, file=paste0("GSEA_input_ranked_table_",name_control,"_", name_mutant, ".rnk"), quote=F,sep="\t", row.names = FALSE)




## further analysis, interpretation, and figures =====================================================
require(dplyr)


vplot_tab <- merge(results_table_WT_dm2_m1_dm2_CPM, annotation_table, by="gene_id")
vplot_tab <- vplot_tab %>% rename("BH_pval" = "BH pval")
vplot_tab <- vplot_tab %>% rename("log2FC" = "log2 FC (MLE)")

########## make volcano plot 
library(ggplot2)
library(ggrepel)
library(dplyr)
library(pheatmap)

vplot_tab$neglog_p = -log10(vplot_tab$BH_pval)
vplot_tab <- vplot_tab[complete.cases(vplot_tab), ]

############  edit formatting of signficance for labelleing

vplot_tab$significant = ifelse(vplot_tab$neglog_p > 2 & vplot_tab$log2FC <=-1.5 | vplot_tab$neglog_p > 2 & vplot_tab$log2FC>=1.5, "sig", "not")
vplot_tab_label1 = subset(vplot_tab, neglog_p > 120)
vplot_tab_label2 = subset(vplot_tab, neglog_p > 50)
vplot_tab_label2 <- subset(vplot_tab_label2, log2FC <=-5 | log2FC>=10)
vplot_tab_label3 = subset(vplot_tab, neglog_p > 10 & log2FC <=-10 | neglog_p > 10 & log2FC >=10)
vplot_tab_label4 = subset(vplot_tab, neglog_p > 50 & vplot_tab$log2FC <=-7 | vplot_tab$neglog_p > 50 & vplot_tab$log2FC>=8)
vplot_tab_label_final <- rbind(vplot_tab_label1, vplot_tab_label2)
vplot_tab_label_final <- rbind(vplot_tab_label_final, vplot_tab_label3)
vplot_tab_label_final <- rbind(vplot_tab_label_final, vplot_tab_label4)
vplot_tab_label_final <- vplot_tab_label_final %>% distinct(GeneSymbol.x, .keep_all = TRUE)

############



m1_dm2_vol <- ggplot(data=vplot_tab, aes(x=log2FC, y=neglog_p, colour=significant)) + geom_point(alpha=0.7, size=1.75) + xlab("Log2 Fold change") + ylab("-log10 p-value") + theme_classic() + theme(legend.position="none") + geom_text_repel(data = vplot_tab_label_final, aes(label = GeneSymbol.x), color="black",size = 3, key_glyph = "point") + theme(plot.title = element_text(hjust = 0.2)) + ggtitle("m1_dm2") + scale_colour_manual(values = c("#999999", "#E69F00")) + scale_y_continuous(labels = scales::comma, expand = c(0,5), breaks = seq(0, 300, 50), limits=c(0, 300))

pdf(file="m1_dm2_vol.pdf",width=4,height=4.5)
m1_dm2_vol
dev.off()

############

######################## make heatmaps

##### hm of significantly differentially expressed genes

vplot_tab_hm <- vplot_tab
vplot_tab_hm$significant = ifelse(vplot_tab$BH_pval <=.0001 & vplot_tab$log2FC <=-3 | vplot_tab$log2FC>=2.2, "sig", "not")
vplot_tab_hm$sig2 = ifelse(vplot_tab$BH_pval <=.01, "sig", "not")


norm_counts <- as.data.frame(counts(de, normalized=T))
norm_counts$GeneSymbol <- rownames(norm_counts)
numberofzeroes <- apply(norm_counts[,c(1:ncol(norm_counts))], 1, count_zeroes)
norm_counts_filtered <- norm_counts[which(numberofzeroes<=5),]
norm_counts_filtered$GeneSymbol.x <- rownames(norm_counts_filtered)

hm_tab <- merge(norm_counts_filtered, vplot_tab_hm, by="GeneSymbol.x")
hm_tab <- hm_tab[complete.cases(hm_tab), ]
write.table(hm_tab, file="norm_counts_gsea.csv",sep=",")

hm_tab_sig = subset(hm_tab, significant=="sig")

hm_sig <- pheatmap(hm_tab_sig[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", cutree_rows = 7, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, main = "Significantly differentially expressed genes")

pdf(file="m1_dm2_hm_sig.pdf",width=8,height=10)
hm_sig
dev.off()


##### hm of adipogenesis-related genes

hm_tab_adip = subset(hm_tab, GeneSymbol=="Lep" | GeneSymbol=="Adipoq" | GeneSymbol=="Cd36" | GeneSymbol=="Pparg" | GeneSymbol=="Glut4" | GeneSymbol=="Fasn"| GeneSymbol=="Plin1"| GeneSymbol=="Plin2"| GeneSymbol=="Plin4"| GeneSymbol=="Fabp4"| GeneSymbol=="Isnr"| GeneSymbol=="Lpl"| GeneSymbol=="Agpat2"| GeneSymbol=="Bscl2"| GeneSymbol=="Cidec"| GeneSymbol=="Cebpa"| GeneSymbol=="Acaca"| GeneSymbol=="Ppargc1a"| GeneSymbol=="Ppargc1b"| GeneSymbol=="Slc2a4" )

rownames(hm_tab_adip) = hm_tab_adip$GeneSymbol
hm_adip_annot = data.frame("Sig" = hm_tab_adip$sig2)
rownames(hm_adip_annot) = rownames(hm_tab_adip)

hm_adip <- pheatmap(hm_tab_adip[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_adip$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_adip_annot, legend_labels = "Relative expression", main = "Adipogenesis-related genes")

pdf(file="m1_dm2_hm_adip.pdf",width=5,height=6)
hm_adip
dev.off()

##### hm of ISR-related genes

hm_tab_ISR = subset(hm_tab, GeneSymbol=="Atf4" | GeneSymbol=="Atf5" |GeneSymbol=="Atf6" | GeneSymbol=="Xbp1" | GeneSymbol=="Gdf15" | GeneSymbol=="Fgf21" | GeneSymbol=="Trib3"| GeneSymbol=="Eif2ak4"| GeneSymbol=="Ddit3"| GeneSymbol=="Gadd34"| GeneSymbol=="Perk"| GeneSymbol=="Eif2ak1"| GeneSymbol=="Hif1a")
hm_tab_ISR <- hm_tab_ISR %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_ISR) = hm_tab_ISR$GeneSymbol
hm_ISR_annot = data.frame("Sig" = hm_tab_ISR$sig2)
rownames(hm_ISR_annot) = rownames(hm_tab_ISR)

hm_ISR <- pheatmap(hm_tab_ISR[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_ISR$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_ISR_annot, main = "ISR genes")

pdf(file="m1_dm2_hm_ISR.pdf",width=5,height=6)
hm_ISR
dev.off()

##### hm of mitochondrial-related genes

hm_tab_mito = subset(hm_tab, GeneSymbol=="Mfn1" | GeneSymbol=="mfn1" | GeneSymbol=="Opa1" | GeneSymbol=="Fis1" | GeneSymbol=="Tomm20" | GeneSymbol=="Ppargc1a"| GeneSymbol=="Ppargc1b"| GeneSymbol=="Cs" | GeneSymbol=='mt-Rnr1' | GeneSymbol=='mt-Rnr2' | GeneSymbol=='mt-Tl1' | GeneSymbol=='mt-Nd1' | GeneSymbol=='mt-Ti' | GeneSymbol=='mt-Tq' | GeneSymbol=='mt-Tm' | GeneSymbol=='mt-Nd2' | GeneSymbol=='mt-Tw' | GeneSymbol=='mt-Ta' | GeneSymbol=='mt-Tn' | GeneSymbol=='mt-Tc' | GeneSymbol=='mt-Ty' | GeneSymbol=='mt-Co1' | GeneSymbol=='mt-Ts1' | GeneSymbol=='mt-Td' | GeneSymbol=='mt-Co2' | GeneSymbol=='mt-Atp8' | GeneSymbol=='mt-Atp6' | GeneSymbol=='mt-Co3' | GeneSymbol=='mt-Tg' | GeneSymbol=='mt-Nd3' | GeneSymbol=='mt-Tr' | GeneSymbol=='mt-Nd4' | GeneSymbol=='mt-Th' | GeneSymbol=='mt-Ts2' | GeneSymbol=='mt-Tl2' | GeneSymbol=='mt-Nd5' | GeneSymbol=='mt-Nd6' | GeneSymbol=='mt-Te' | GeneSymbol=='mt-Cytb' | GeneSymbol=='mt-Tt' | GeneSymbol=='mt-Tp' | GeneSymbol=='mt-Nd4l' | GeneSymbol=='Sdha' | GeneSymbol=="Prkn" | GeneSymbol=="Pink1" | GeneSymbol=="Bnip3" | GeneSymbol=="Nrf1" | GeneSymbol==""| GeneSymbol=="Mff"| GeneSymbol=="Cycs")
hm_tab_mito <- hm_tab_mito %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_mito) = hm_tab_mito$GeneSymbol
hm_mito_annot = data.frame("Sig" = hm_tab_mito$sig2)
rownames(hm_mito_annot) = rownames(hm_tab_mito)

hm_mito <- pheatmap(hm_tab_mito[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_mito$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial function-related genes")

pdf(file="m1_dm2_hm_mito.pdf",width=5,height=6)
hm_mito
dev.off()

##### hm of inflammation-related genes

hm_tab_inflam = subset(hm_tab, GeneSymbol=='Ifng' |GeneSymbol=='Cd68' |GeneSymbol=='Cd11b' |GeneSymbol=='Itgam' |GeneSymbol=='Ccl2' |GeneSymbol=='Cd4' |GeneSymbol=='Cd3g' |GeneSymbol=='Cd8a' |GeneSymbol=='Tnf' |GeneSymbol=='Il1b' |GeneSymbol=='Il4' |GeneSymbol=='Il13' |GeneSymbol=='Il10' |GeneSymbol=='Ptprc' |GeneSymbol=='Adgre1' |GeneSymbol=='Il6' |GeneSymbol=='Mif' |GeneSymbol=='Tlr4')
hm_tab_inflam <- hm_tab_inflam %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_inflam) = hm_tab_inflam$GeneSymbol
hm_inflam_annot = data.frame("Sig" = hm_tab_inflam$sig2)
rownames(hm_inflam_annot) = rownames(hm_tab_inflam)

hm_inflam <- pheatmap(hm_tab_inflam[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_inflam$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_inflam_annot, legend_labels = "Relative expression", main = "Inflammatory genes")

pdf(file="m1_dm2_hm_inflam.pdf",width=5,height=6)
hm_inflam
dev.off()


##### hm of fibrosis-related genes

hm_tab_fibros = subset(hm_tab, GeneSymbol=='Tgfb1' |GeneSymbol=='Sod1' |GeneSymbol=='Hif1a' |GeneSymbol=='Pdgfa' |GeneSymbol=='Gtf2ird1' |GeneSymbol=='Inhba' |GeneSymbol=='Rock1')
hm_tab_fibros <- hm_tab_fibros %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_fibros) = hm_tab_fibros$GeneSymbol
hm_fibros_annot = data.frame("Sig" = hm_tab_fibros$sig2)
rownames(hm_fibros_annot) = rownames(hm_tab_fibros)

hm_fibros <- pheatmap(hm_tab_fibros[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_fibros$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_fibros_annot, legend_labels = "Relative expression", main = "Fibrosis-related genes")

pdf(file="m1_dm2_hm_fibros.pdf",width=5,height=6)
hm_fibros
dev.off()



##### hm of hallmark adipogenesis genes

hm_tab_hall_adip1 = subset(hm_tab, GeneSymbol=='Abca1' |GeneSymbol=='Abcb8' |GeneSymbol=='Acaa2' |GeneSymbol=='Acadl' |GeneSymbol=='Acadm' |GeneSymbol=='Acads' |GeneSymbol=='Acly' |GeneSymbol=='Aco2' |GeneSymbol=='Acox1' |GeneSymbol=='Adcy6' |GeneSymbol=='Adig' |GeneSymbol=='Adipoq' |GeneSymbol=='Adipor2' |GeneSymbol=='Agpat3' |GeneSymbol=='Aifm1' |GeneSymbol=='Ak2' |GeneSymbol=='Aldh2' |GeneSymbol=='Aldoa' |GeneSymbol=='Angpt1' |GeneSymbol=='Angptl4' |GeneSymbol=='Aplp2' |GeneSymbol=='Apoe' |GeneSymbol=='Araf' |GeneSymbol=='Arl4A' |GeneSymbol=='Atl2' |GeneSymbol=='Atp1B3' |GeneSymbol=='Atp5Po' |GeneSymbol=='Baz2A' |GeneSymbol=='Bckdha' |GeneSymbol=='Bcl2L13' |GeneSymbol=='Bcl6' |GeneSymbol=='C3' |GeneSymbol=='Cat' |GeneSymbol=='Cavin1' |GeneSymbol=='Cavin2' |GeneSymbol=='Ccng2' |GeneSymbol=='Cd151' |GeneSymbol=='Cd302' |GeneSymbol=='Cd36' |GeneSymbol=='Cdkn2C' |GeneSymbol=='Chchd10' |GeneSymbol=='Chuk' |GeneSymbol=='Cidea' |GeneSymbol=='Cmbl' |GeneSymbol=='Cmpk1' |GeneSymbol=='Col15A1' |GeneSymbol=='Col4A1' |GeneSymbol=='Coq3' |GeneSymbol=='Coq5' |GeneSymbol=='Coq9' |GeneSymbol=='Cox6A1' |GeneSymbol=='Cox7B' |GeneSymbol=='Cox8A' |GeneSymbol=='Cpt2' |GeneSymbol=='Crat' |GeneSymbol=='Cs' |GeneSymbol=='Cyc1' |GeneSymbol=='Cyp4B1' |GeneSymbol=='Dbt' |GeneSymbol=='Ddt' |GeneSymbol=='Decr1' |GeneSymbol=='Dgat1' |GeneSymbol=='Dhcr7' |GeneSymbol=='Dhrs7' |GeneSymbol=='Dhrs7B' |GeneSymbol=='Dlat' |GeneSymbol=='Dld' |GeneSymbol=='Dnajb9' |GeneSymbol=='Dnajc15' |GeneSymbol=='Dram2' |GeneSymbol=='Ech1' |GeneSymbol=='Echs1' |GeneSymbol=='Elmod3' |GeneSymbol=='Elovl6' |GeneSymbol=='Enpp2' |GeneSymbol=='Ephx2' |GeneSymbol=='Esrra' |GeneSymbol=='Esyt1' |GeneSymbol=='Etfb' |GeneSymbol=='Fabp4' |GeneSymbol=='Fah' |GeneSymbol=='Fzd4' |GeneSymbol=='G3Bp2' |GeneSymbol=='Gadd45A' |GeneSymbol=='Gbe1' |GeneSymbol=='Ghitm' |GeneSymbol=='Gpam' |GeneSymbol=='Gpat4' |GeneSymbol=='Gpd2' |GeneSymbol=='Gphn' |GeneSymbol=='Gpx3' |GeneSymbol=='Gpx4' |GeneSymbol=='Grpel1' |GeneSymbol=='Hadh' |GeneSymbol=='Hibch' |GeneSymbol=='Hspb8' |GeneSymbol=='Idh1' |GeneSymbol=='Idh3A' |GeneSymbol=='Idh3G' |GeneSymbol=='Ifngr1' |GeneSymbol=='Immt' |GeneSymbol=='Itga7' |GeneSymbol=='Itih5' |GeneSymbol=='Itsn1' |GeneSymbol=='Jagn1' |GeneSymbol=='Lama4' |GeneSymbol=='Lep' |GeneSymbol=='Lifr' |GeneSymbol=='Lipe' |GeneSymbol=='Lpcat3' |GeneSymbol=='Lpl' |GeneSymbol=='Ltc4S' |GeneSymbol=='Map4K3' |GeneSymbol=='Mccc1' |GeneSymbol=='Mdh2' |GeneSymbol=='Me1' |GeneSymbol=='Mgll' |GeneSymbol=='Mgst3' |GeneSymbol=='Miga2' |GeneSymbol=='Mrap' |GeneSymbol=='Mrpl15' |GeneSymbol=='Mtarc2')

hm_tab_hall_adip2 = subset(hm_tab, GeneSymbol=='Mtch2' |GeneSymbol=='Mylk' |GeneSymbol=='Nabp1' |GeneSymbol=='Ndufa5' |GeneSymbol=='Ndufab1' |GeneSymbol=='Ndufb7' |GeneSymbol=='Ndufs3' |GeneSymbol=='Nkiras1' |GeneSymbol=='Nmt1' |GeneSymbol=='Omd' |GeneSymbol=='Orm1' |GeneSymbol=='Pdcd4' |GeneSymbol=='Pemt' |GeneSymbol=='Pex14' |GeneSymbol=='Pfkfb3' |GeneSymbol=='Pfkl' |GeneSymbol=='Pgm1' |GeneSymbol=='Phldb1' |GeneSymbol=='Phyh' |GeneSymbol=='Pim3' |GeneSymbol=='Plin2' |GeneSymbol=='Por' |GeneSymbol=='Pparg' |GeneSymbol=='Ppm1B' |GeneSymbol=='Ppp1R15B' |GeneSymbol=='Prdx3' |GeneSymbol=='Preb' |GeneSymbol=='Ptcd3' |GeneSymbol=='Ptger3' |GeneSymbol=='Qdpr' |GeneSymbol=='Rab34' |GeneSymbol=='Reep5' |GeneSymbol=='Reep6' |GeneSymbol=='Retn' |GeneSymbol=='Retsat' |GeneSymbol=='Riok3' |GeneSymbol=='Rmdn3' |GeneSymbol=='Rnf11' |GeneSymbol=='Rreb1' |GeneSymbol=='Rtn3' |GeneSymbol=='Samm50' |GeneSymbol=='Scarb1' |GeneSymbol=='Scp2' |GeneSymbol=='Sdhb' |GeneSymbol=='Sdhc' |GeneSymbol=='Slc19A1' |GeneSymbol=='Slc1A5' |GeneSymbol=='Slc25A1' |GeneSymbol=='Slc25A10' |GeneSymbol=='Slc27A1' |GeneSymbol=='Slc5A6' |GeneSymbol=='Slc66A3' |GeneSymbol=='Sncg' |GeneSymbol=='Sod1' |GeneSymbol=='Sorbs1' |GeneSymbol=='Sowahc' |GeneSymbol=='Sparcl1' |GeneSymbol=='Sqor' |GeneSymbol=='Sspn' |GeneSymbol=='Stat5A' |GeneSymbol=='Stom' |GeneSymbol=='Suclg1' |GeneSymbol=='Sult1A1' |GeneSymbol=='Taldo1' |GeneSymbol=='Tank' |GeneSymbol=='Tkt' |GeneSymbol=='Tob1' |GeneSymbol=='Tst' |GeneSymbol=='Ubc' |GeneSymbol=='Ubqln1' |GeneSymbol=='Uck1' |GeneSymbol=='Ucp2' |GeneSymbol=='Uqcr10' |GeneSymbol=='Uqcr11' |GeneSymbol=='Uqcrc1' |GeneSymbol=='Uqcrq' |GeneSymbol=='Vegfb' |GeneSymbol=='Ywhag')

hm_tab_hall_adip <- rbind(hm_tab_hall_adip1, hm_tab_hall_adip2)

hm_tab_hall_adip <- hm_tab_hall_adip %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_adip) = hm_tab_hall_adip$GeneSymbol
hm_hall_adip_annot = data.frame("Sig" = hm_tab_hall_adip$sig2)
rownames(hm_hall_adip_annot) = rownames(hm_tab_hall_adip)

hm_hall_adip <- pheatmap(hm_tab_hall_adip[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_adip$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_adip_annot, legend_labels = "Relative expression", main = "HALLMARK_ADIPOGENESIS genes")

pdf(file="m1_dm2_hm_hall_adip.pdf",width=6,height=12)
hm_hall_adip
dev.off()


##### hm of hallmark oxphos genes

hm_tab_hall_oxphos1 = subset(hm_tab, GeneSymbol=='Abcb7' |GeneSymbol=='Acaa1' |GeneSymbol=='Acaa2' |GeneSymbol=='Acadm' |GeneSymbol=='Acadsb' |GeneSymbol=='Acadvl' |GeneSymbol=='Acat1' |GeneSymbol=='Aco2' |GeneSymbol=='Afg3L2' |GeneSymbol=='Aifm1' |GeneSymbol=='Alas1' |GeneSymbol=='Aldh6A1' |GeneSymbol=='Atp1B1' |GeneSymbol=='Atp5F1A' |GeneSymbol=='Atp5F1B' |GeneSymbol=='Atp5F1C' |GeneSymbol=='Atp5F1D' |GeneSymbol=='Atp5F1E' |GeneSymbol=='Atp5Mc1' |GeneSymbol=='Atp5Mc2' |GeneSymbol=='Atp5Mc3' |GeneSymbol=='Atp5Me' |GeneSymbol=='Atp5Mf' |GeneSymbol=='Atp5Mg' |GeneSymbol=='Atp5Pb' |GeneSymbol=='Atp5Pd' |GeneSymbol=='Atp5Pf' |GeneSymbol=='Atp5Po' |GeneSymbol=='Atp6Ap1' |GeneSymbol=='Atp6V0B' |GeneSymbol=='Atp6V0C' |GeneSymbol=='Atp6V0E1' |GeneSymbol=='Atp6V1C1' |GeneSymbol=='Atp6V1D' |GeneSymbol=='Atp6V1E1' |GeneSymbol=='Atp6V1F' |GeneSymbol=='Atp6V1G1' |GeneSymbol=='Atp6V1H' |GeneSymbol=='Bax' |GeneSymbol=='Bckdha' |GeneSymbol=='Bdh2' |GeneSymbol=='Casp7' |GeneSymbol=='Cox10' |GeneSymbol=='Cox11' |GeneSymbol=='Cox15' |GeneSymbol=='Cox17' |GeneSymbol=='Cox4I1' |GeneSymbol=='Cox5A' |GeneSymbol=='Cox5B' |GeneSymbol=='Cox6A1' |GeneSymbol=='Cox6B1' |GeneSymbol=='Cox6C' |GeneSymbol=='Cox7A2' |GeneSymbol=='Cox7A2L' |GeneSymbol=='Cox7B' |GeneSymbol=='Cox7C' |GeneSymbol=='Cox8A' |GeneSymbol=='Cpt1A' |GeneSymbol=='Cs' |GeneSymbol=='Cyb5A' |GeneSymbol=='Cyb5R3' |GeneSymbol=='Cyc1' |GeneSymbol=='Cycs' |GeneSymbol=='Decr1' |GeneSymbol=='Dlat' |GeneSymbol=='Dld' |GeneSymbol=='Dlst' |GeneSymbol=='Ech1' |GeneSymbol=='Echs1' |GeneSymbol=='Eci1' |GeneSymbol=='Etfa' |GeneSymbol=='Etfb' |GeneSymbol=='Etfdh' |GeneSymbol=='Fdx1' |GeneSymbol=='Fh' |GeneSymbol=='Fxn' |GeneSymbol=='Glud1' |GeneSymbol=='Got2' |GeneSymbol=='Gpi' |GeneSymbol=='Gpx4' |GeneSymbol=='Grpel1' |GeneSymbol=='Hadha' |GeneSymbol=='Hadhb' |GeneSymbol=='Hccs' |GeneSymbol=='Hsd17B10' |GeneSymbol=='Hspa9' |GeneSymbol=='Htra2' |GeneSymbol=='Idh1' |GeneSymbol=='Idh2' |GeneSymbol=='Idh3A' |GeneSymbol=='Idh3B' |GeneSymbol=='Idh3G' |GeneSymbol=='Immt' |GeneSymbol=='Isca1' |GeneSymbol=='Iscu' |GeneSymbol=='Ldha' |GeneSymbol=='Ldhb' |GeneSymbol=='Lrpprc' |GeneSymbol=='Maob' |GeneSymbol=='Mdh1' |GeneSymbol=='Mdh2' |GeneSymbol=='mfn1' |GeneSymbol=='Mgst3' |GeneSymbol=='Mpc1' |GeneSymbol=='Mrpl11' |GeneSymbol=='Mrpl15' |GeneSymbol=='Mrpl34' |GeneSymbol=='Mrpl35' |GeneSymbol=='Mrps11' |GeneSymbol=='Mrps12' |GeneSymbol=='Mrps15' |GeneSymbol=='Mrps22' |GeneSymbol=='Mrps30' |GeneSymbol=='Mtrf1')

hm_tab_hall_oxphos2 = subset(hm_tab, GeneSymbol=='Mtrr' |GeneSymbol=='Mtx2' |GeneSymbol=='Ndufa1' |GeneSymbol=='Ndufa2' |GeneSymbol=='Ndufa3' |GeneSymbol=='Ndufa4' |GeneSymbol=='Ndufa5' |GeneSymbol=='Ndufa6' |GeneSymbol=='Ndufa7' |GeneSymbol=='Ndufa8' |GeneSymbol=='Ndufa9' |GeneSymbol=='Ndufab1' |GeneSymbol=='Ndufb1' |GeneSymbol=='Ndufb2' |GeneSymbol=='Ndufb3' |GeneSymbol=='Ndufb4' |GeneSymbol=='Ndufb5' |GeneSymbol=='Ndufb6' |GeneSymbol=='Ndufb7' |GeneSymbol=='Ndufb8' |GeneSymbol=='Ndufc1' |GeneSymbol=='Ndufc2' |GeneSymbol=='Ndufs1' |GeneSymbol=='Ndufs2' |GeneSymbol=='Ndufs3' |GeneSymbol=='Ndufs4' |GeneSymbol=='Ndufs6' |GeneSymbol=='Ndufs7' |GeneSymbol=='Ndufs8' |GeneSymbol=='Ndufv1' |GeneSymbol=='Ndufv2' |GeneSymbol=='Nnt' |GeneSymbol=='Nqo2' |GeneSymbol=='Oat' |GeneSymbol=='Ogdh' |GeneSymbol=='Opa1' |GeneSymbol=='Oxa1L' |GeneSymbol=='Pdha1' |GeneSymbol=='Pdhb' |GeneSymbol=='Pdhx' |GeneSymbol=='Pdk4' |GeneSymbol=='Pdp1' |GeneSymbol=='Phb2' |GeneSymbol=='Phyh' |GeneSymbol=='Pmpca' |GeneSymbol=='Polr2F' |GeneSymbol=='Por' |GeneSymbol=='Prdx3' |GeneSymbol=='Retsat' |GeneSymbol=='Rhot1' |GeneSymbol=='Rhot2' |GeneSymbol=='Sdha' |GeneSymbol=='Sdhb' |GeneSymbol=='Sdhc' |GeneSymbol=='Sdhd' |GeneSymbol=='Slc25A11' |GeneSymbol=='Slc25A12' |GeneSymbol=='Slc25A20' |GeneSymbol=='Slc25A3' |GeneSymbol=='Slc25A4' |GeneSymbol=='Slc25A5' |GeneSymbol=='Slc25A6' |GeneSymbol=='Sucla2' |GeneSymbol=='Suclg1' |GeneSymbol=='Supv3L1' |GeneSymbol=='Surf1' |GeneSymbol=='Tcirg1' |GeneSymbol=='Timm10' |GeneSymbol=='Timm13' |GeneSymbol=='Timm17A' |GeneSymbol=='Timm50' |GeneSymbol=='Timm8B' |GeneSymbol=='Timm9' |GeneSymbol=='Tomm22' |GeneSymbol=='Tomm70' |GeneSymbol=='Uqcr10' |GeneSymbol=='Uqcr11' |GeneSymbol=='Uqcrb' |GeneSymbol=='Uqcrc1' |GeneSymbol=='Uqcrc2' |GeneSymbol=='Uqcrfs1' |GeneSymbol=='Uqcrh' |GeneSymbol=='Uqcrq' |GeneSymbol=='Vdac1' |GeneSymbol=='Vdac2' |GeneSymbol=='Vdac3')

hm_tab_hall_oxphos <- rbind(hm_tab_hall_oxphos1, hm_tab_hall_oxphos2)

hm_tab_hall_oxphos <- hm_tab_hall_oxphos %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_oxphos) = hm_tab_hall_oxphos$GeneSymbol
hm_hall_oxphos_annot = data.frame("Sig" = hm_tab_hall_oxphos$sig2)
rownames(hm_hall_oxphos_annot) = rownames(hm_tab_hall_oxphos)

hm_hall_oxphos <- pheatmap(hm_tab_hall_oxphos[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_oxphos$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_oxphos_annot, legend_labels = "Relative expression", main = "HALLMARK_OXIDATIVE_PHOSPHORYLATION genes")

pdf(file="m1_dm2_hm_hall_oxphos.pdf",width=7,height=12)
hm_hall_oxphos
dev.off()


##### hm of hallmark ROS genes

hm_tab_hall_ros = subset(hm_tab, GeneSymbol=='Abcc1' |GeneSymbol=='Atox1' |GeneSymbol=='Cat' |GeneSymbol=='Cdkn2D' |GeneSymbol=='Egln2' |GeneSymbol=='Ercc2' |GeneSymbol=='Fes' |GeneSymbol=='Ftl' |GeneSymbol=='G6Pd' |GeneSymbol=='Gclc' |GeneSymbol=='Gclm' |GeneSymbol=='Glrx' |GeneSymbol=='Glrx2' |GeneSymbol=='Gpx3' |GeneSymbol=='Gpx4' |GeneSymbol=='Gsr' |GeneSymbol=='Hhex' |GeneSymbol=='Hmox2' |GeneSymbol=='Ipcef1' |GeneSymbol=='Junb' |GeneSymbol=='Lamtor5' |GeneSymbol=='Lsp1' |GeneSymbol=='Mbp' |GeneSymbol=='Mgst1' |GeneSymbol=='Mpo' |GeneSymbol=='Msra' |GeneSymbol=='Ndufa6' |GeneSymbol=='Ndufb4' |GeneSymbol=='Ndufs2' |GeneSymbol=='Nqo1' |GeneSymbol=='Oxsr1' |GeneSymbol=='Pdlim1' |GeneSymbol=='Pfkp' |GeneSymbol=='Prdx1' |GeneSymbol=='Prdx2' |GeneSymbol=='Prdx4' |GeneSymbol=='Prdx6' |GeneSymbol=='Prnp' |GeneSymbol=='Ptpa' |GeneSymbol=='Sbno2' |GeneSymbol=='Scaf4' |GeneSymbol=='Selenos' |GeneSymbol=='Sod1' |GeneSymbol=='Sod2' |GeneSymbol=='Srxn1' |GeneSymbol=='Stk25' |GeneSymbol=='Txn' |GeneSymbol=='Txnrd1' |GeneSymbol=='Txnrd2')

hm_tab_hall_ros <- hm_tab_hall_ros %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_ros) = hm_tab_hall_ros$GeneSymbol
hm_hall_ros_annot = data.frame("Sig" = hm_tab_hall_ros$sig2)
rownames(hm_hall_ros_annot) = rownames(hm_tab_hall_ros)

hm_hall_ros <- pheatmap(hm_tab_hall_ros[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_ros$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_ros_annot, legend_labels = "Relative expression", main = "HALLMARK_REACTIVE_OXYGEN_SPECIES_PATHWAY genes")

pdf(file="m1_dm2_hm_hall_ros.pdf",width=8,height=10)
hm_hall_ros
dev.off()


##### hm of hallmark UPR genes

hm_tab_hall_UPR = subset(hm_tab, GeneSymbol=='Aldh18A1' |GeneSymbol=='Arfgap1' |GeneSymbol=='Asns' |GeneSymbol=='Atf3' |GeneSymbol=='Atf4' |GeneSymbol=='Atf6' |GeneSymbol=='Atp6V0D1' |GeneSymbol=='Bag3' |GeneSymbol=='Banf1' |GeneSymbol=='Calr' |GeneSymbol=='Ccl2' |GeneSymbol=='Cebpb' |GeneSymbol=='Cebpg' |GeneSymbol=='Chac1' |GeneSymbol=='Cks1B' |GeneSymbol=='Cnot2' |GeneSymbol=='Cnot4' |GeneSymbol=='Cnot6' |GeneSymbol=='Cxxc1' |GeneSymbol=='Dcp1A' |GeneSymbol=='Dcp2' |GeneSymbol=='Dctn1' |GeneSymbol=='Ddit4' |GeneSymbol=='Ddx10' |GeneSymbol=='Dkc1' |GeneSymbol=='Dnaja4' |GeneSymbol=='Dnajb9' |GeneSymbol=='Dnajc3' |GeneSymbol=='Edc4' |GeneSymbol=='Edem1' |GeneSymbol=='Eef2' |GeneSymbol=='Eif2Ak3' |GeneSymbol=='Eif2S1' |GeneSymbol=='Eif4A1' |GeneSymbol=='Eif4A2' |GeneSymbol=='Eif4A3' |GeneSymbol=='Eif4E' |GeneSymbol=='Eif4Ebp1' |GeneSymbol=='Eif4G1' |GeneSymbol=='Ern1' |GeneSymbol=='Ero1A' |GeneSymbol=='Exoc2' |GeneSymbol=='Exosc1' |GeneSymbol=='Exosc10' |GeneSymbol=='Exosc2' |GeneSymbol=='Exosc4' |GeneSymbol=='Exosc5' |GeneSymbol=='Exosc9' |GeneSymbol=='Fkbp14' |GeneSymbol=='Fus' |GeneSymbol=='Gemin4' |GeneSymbol=='Gosr2' |GeneSymbol=='H2Ax' |GeneSymbol=='Herpud1' |GeneSymbol=='Hsp90B1' |GeneSymbol=='Hspa5' |GeneSymbol=='Hspa9' |GeneSymbol=='Hyou1' |GeneSymbol=='Iars1' |GeneSymbol=='Ifit1' |GeneSymbol=='Igfbp1' |GeneSymbol=='Imp3' |GeneSymbol=='Kdelr3' |GeneSymbol=='Khsrp' |GeneSymbol=='Kif5B' |GeneSymbol=='Lsm1' |GeneSymbol=='Lsm4' |GeneSymbol=='Mthfd2' |GeneSymbol=='Mtrex' |GeneSymbol=='Nabp1' |GeneSymbol=='Nfya' |GeneSymbol=='Nfyb' |GeneSymbol=='Nhp2' |GeneSymbol=='Nolc1' |GeneSymbol=='Nop14' |GeneSymbol=='Nop56' |GeneSymbol=='Npm1' |GeneSymbol=='Paip1' |GeneSymbol=='Parn' |GeneSymbol=='Pdia5' |GeneSymbol=='Pdia6' |GeneSymbol=='Pop4' |GeneSymbol=='Preb' |GeneSymbol=='Psat1' |GeneSymbol=='Rps14' |GeneSymbol=='Rrp9' |GeneSymbol=='Sdad1' |GeneSymbol=='Sec11A' |GeneSymbol=='Sec31A' |GeneSymbol=='Serp1' |GeneSymbol=='Shc1' |GeneSymbol=='Slc1A4' |GeneSymbol=='Slc30A5' |GeneSymbol=='Slc7A5' |GeneSymbol=='Spcs1' |GeneSymbol=='Spcs3' |GeneSymbol=='Srpra' |GeneSymbol=='Srprb' |GeneSymbol=='Ssr1' |GeneSymbol=='Stc2' |GeneSymbol=='Tars1' |GeneSymbol=='Tatdn2' |GeneSymbol=='Tspyl2' |GeneSymbol=='Ttc37' |GeneSymbol=='Tubb2A' |GeneSymbol=='Vegfa' |GeneSymbol=='Wfs1' |GeneSymbol=='Wipi1' |GeneSymbol=='Xbp1' |GeneSymbol=='Xpot' |GeneSymbol=='Yif1A' |GeneSymbol=='Ywhaz' |GeneSymbol=='Zbtb17')

hm_tab_hall_UPR <- hm_tab_hall_UPR %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_UPR) = hm_tab_hall_UPR$GeneSymbol
hm_hall_UPR_annot = data.frame("Sig" = hm_tab_hall_UPR$sig2)
rownames(hm_hall_UPR_annot) = rownames(hm_tab_hall_UPR)

hm_hall_UPR <- pheatmap(hm_tab_hall_UPR[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_UPR$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_UPR_annot, legend_labels = "Relative expression", main = "HALLMARK_UNFOLDED_PROTEIN_RESPONSE genes")

pdf(file="m1_dm2_hm_hall_UPR.pdf",width=7,height=10)
hm_hall_UPR
dev.off()

##### hm of GO BAT genes

hm_tab_GO_BAT = subset(hm_tab, GeneSymbol=='Adig' |GeneSymbol=='Adipoq' |GeneSymbol=='Adrb1' |GeneSymbol=='Adrb2' |GeneSymbol=='Aldh6A1' |GeneSymbol=='Arl4A' |GeneSymbol=='Bmp7' |GeneSymbol=='Bnip3' |GeneSymbol=='Cebpa' |GeneSymbol=='Cebpb' |GeneSymbol=='Dio2' |GeneSymbol=='Dusp10' |GeneSymbol=='Ebf2' |GeneSymbol=='Ero1A' |GeneSymbol=='Fabp3' |GeneSymbol=='Fabp4' |GeneSymbol=='Ffar4' |GeneSymbol=='Flcn' |GeneSymbol=='Fndc5' |GeneSymbol=='Fto' |GeneSymbol=='Hnrnpu' |GeneSymbol=='Ins' |GeneSymbol=='Itga6' |GeneSymbol=='Lamb3' |GeneSymbol=='Lep' |GeneSymbol=='Lrg1' |GeneSymbol=='Mapk14' |GeneSymbol=='Mb' |GeneSymbol=='Metrnl' |GeneSymbol=='Mtor' |GeneSymbol=='Napepld' |GeneSymbol=='Nudt7' |GeneSymbol=='Pex11A' |GeneSymbol=='Pim1' |GeneSymbol=='Plac8' |GeneSymbol=='Ppargc1A' |GeneSymbol=='Prdm26' |GeneSymbol=='Ptgs2' |GeneSymbol=='Rgs2' |GeneSymbol=='Rreb1' |GeneSymbol=='Sirt1' |GeneSymbol=='Six1' |GeneSymbol=='Slc2A4' |GeneSymbol=='Sox13' |GeneSymbol=='Tfe3' |GeneSymbol=='Trpv4' |GeneSymbol=='Ucp1' |GeneSymbol=='Vstm2A' |GeneSymbol=='Zbtb7B' |GeneSymbol=='Znf516')

hm_tab_GO_BAT <- hm_tab_GO_BAT %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_GO_BAT) = hm_tab_GO_BAT$GeneSymbol
hm_GO_m1_dm2_annot = data.frame("Sig" = hm_tab_GO_BAT$sig2)
rownames(hm_GO_m1_dm2_annot) = rownames(hm_tab_GO_BAT)

hm_GO_BAT <- pheatmap(hm_tab_GO_BAT[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_GO_BAT$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_GO_m1_dm2_annot, legend_labels = "Relative expression", main = "GO_BROWN_FAT_CELL_DIFFERENTIATION genes")

pdf(file="m1_dm2_hm_GO_BAT.pdf",width=7,height=10)
hm_GO_BAT
dev.off()


##### hm of myc-TF genes

hm_tab_myc = subset(hm_tab, GeneSymbol=='Abcd2' |GeneSymbol=='Steap4' |GeneSymbol=='Nnmt' |GeneSymbol=='Pde3b' |GeneSymbol=='Hp' |GeneSymbol=='Lrp3' |GeneSymbol=='Slc1a5' |GeneSymbol=='Retn' |GeneSymbol=='Apcdd1' |GeneSymbol=='Adcy5' |GeneSymbol=='C4B' |GeneSymbol=='Gys2' |GeneSymbol=='Hcar2' |GeneSymbol=='Dock11' |GeneSymbol=='Mc2r' |GeneSymbol=='Hcar1' |GeneSymbol=='Dram1' |GeneSymbol=='B3galt2' |GeneSymbol=='Nnat' |GeneSymbol=='Ffar4' |GeneSymbol=='Slc16a7' |GeneSymbol=='Ffar2' |GeneSymbol=='Aoc3' |GeneSymbol=='Rarres2' |GeneSymbol=='Adipoq' |GeneSymbol=='Mmp3' |GeneSymbol=='Sctr' |GeneSymbol=='Klhl2' |GeneSymbol=='Igf1' |GeneSymbol=='Podn' |GeneSymbol=='Cidec' |GeneSymbol=='Tshr' |GeneSymbol=='Por' |GeneSymbol=='Rbp4' |GeneSymbol=='Ccdc80' |GeneSymbol=='Lrg1' |GeneSymbol=='Vnn3' |GeneSymbol=='Chdh' |GeneSymbol=='Lgals12' |GeneSymbol=='Chst1' |GeneSymbol=='St6galnac5')

hm_tab_myc <- hm_tab_myc %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_myc) = hm_tab_myc$GeneSymbol
hm_myc_annot = data.frame("Sig" = hm_tab_myc$sig2)
rownames(hm_myc_annot) = rownames(hm_tab_myc)

hm_myc <- pheatmap(hm_tab_myc[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_myc$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_myc_annot, legend_labels = "Relative expression", main = "Myc-related genes")

pdf(file="m1_dm2_hm_myc.pdf",width=7,height=10)
hm_myc
dev.off()


#### make hm of mitochondrial and nuclear encoded mitochondrial genes, using same genes to the figure in eLife paper

hm_tab_mt_mito = subset(hm_tab, GeneSymbol=='mt-Atp6' | GeneSymbol=='mt-Atp8' | GeneSymbol=='mt-Co1' | GeneSymbol=='mt-Co2' | GeneSymbol=='mt-Co3' | GeneSymbol=='mt-Cytb' | GeneSymbol=='mt-Nd1' | GeneSymbol=='mt-Nd2' | GeneSymbol=='mt-Nd3' | GeneSymbol=='mt-Nd4' | GeneSymbol=='mt-Nd4l' | GeneSymbol=='mt-Nd5' | GeneSymbol=='mt-Nd6' | GeneSymbol=='mt-Rnr1' | GeneSymbol=='mt-Rnr2' | GeneSymbol=='mt-Ta' | GeneSymbol=='mt-Tc' | GeneSymbol=='mt-Td' | GeneSymbol=='mt-Te' | GeneSymbol=='mt-Tf' | GeneSymbol=='mt-Tg' | GeneSymbol=='mt-Th' | GeneSymbol=='mt-Ti' | GeneSymbol=='mt-Tk' | GeneSymbol=='mt-Tl1' | GeneSymbol=='mt-Tl2' | GeneSymbol=='mt-Tm' | GeneSymbol=='mt-Tn' | GeneSymbol=='mt-Tp' | GeneSymbol=='mt-Tq' | GeneSymbol=='mt-Tr' | GeneSymbol=='mt-Ts1' | GeneSymbol=='mt-Ts2' | GeneSymbol=='mt-Tt' | GeneSymbol=='mt-Tv' | GeneSymbol=='mt-Tw' | GeneSymbol=='mt-Ty')

hm_tab_mt_mito <- hm_tab_mt_mito %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_mt_mito) = hm_tab_mt_mito$GeneSymbol
hm_mt_mito_annot = data.frame("Sig" = hm_tab_mt_mito$sig2)
rownames(hm_mt_mito_annot) = rownames(hm_tab_mt_mito)

hm_mt_mito <- pheatmap(hm_tab_mt_mito[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_mt_mito$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_mt_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial-encoded mito genes")

pdf(file="m1_dm2_hm_mt_mito.pdf",width=7,height=10)
hm_mt_mito
dev.off()

hm_tab_nucl_mito = subset(hm_tab, GeneSymbol=='Ndufb10' |GeneSymbol=='Ndufa3' |GeneSymbol=='Dmac2l' |GeneSymbol=='Atp5o' |GeneSymbol=='Uqcrfs1' |GeneSymbol=='Ndufa8' |GeneSymbol=='Uqcrq' |GeneSymbol=='Surf1' |GeneSymbol=='Atp5b' |GeneSymbol=='Uqcrh' |GeneSymbol=='Ndufa2' |GeneSymbol=='Ndufs7' |GeneSymbol=='Ndufb9' |GeneSymbol=='Ndufb6' |GeneSymbol=='Cox6b1' |GeneSymbol=='Cox6a2' |GeneSymbol=='Ndufa13' |GeneSymbol=='Ndufa9' |GeneSymbol=='Ndufs3' |GeneSymbol=='Uqcrc2' |GeneSymbol=='Ndufa4' |GeneSymbol=='Cycs' |GeneSymbol=='Cyc1' |GeneSymbol=='Ndufs5' |GeneSymbol=='Ndufs4' |GeneSymbol=='Ecsit' |GeneSymbol=='Cox10' |GeneSymbol=='Ndufs8' |GeneSymbol=='Ndufc2' |GeneSymbol=='Atp5a1' |GeneSymbol=='Ndufa7' |GeneSymbol=='Ndufb3' |GeneSymbol=='Ndufa5' |GeneSymbol=='Atp5k' |GeneSymbol=='Cox5b-ps' |GeneSymbol=='Cox18' |GeneSymbol=='Ndufa10' |GeneSymbol=='Atp5j2' |GeneSymbol=='Ndufaf1' |GeneSymbol=='Atp5pb' |GeneSymbol=='Cox11' |GeneSymbol=='Atpaf1' |GeneSymbol=='Sdhb' |GeneSymbol=='Atp5c1' |GeneSymbol=='Cox6b2' |GeneSymbol=='Gm10053' |GeneSymbol=='Phb' |GeneSymbol=='Cox7c' |GeneSymbol=='Sdhd' |GeneSymbol=='Sdhc' |GeneSymbol=='Sdha' |GeneSymbol=='Ndufa6' |GeneSymbol=='Ndufa12' |GeneSymbol=='Ndufa11' |GeneSymbol=='Cox6a1' |GeneSymbol=='Ndufb2' |GeneSymbol=='Cox5a' |GeneSymbol=='Atp5j' |GeneSymbol=='Atp5g3' |GeneSymbol=='Ndufv2' |GeneSymbol=='Ndufb8' |GeneSymbol=='Cox4i1' |GeneSymbol=='Uqcrc1' |GeneSymbol=='Atpaf2' |GeneSymbol=='Ndufb7' |GeneSymbol=='Atp5h' |GeneSymbol=='Cox5b' |GeneSymbol=='Ndufv1' |GeneSymbol=='Ndufv3' |GeneSymbol=='Ndufs1' |GeneSymbol=='Atp5d' |GeneSymbol=='Ndufb4' |GeneSymbol=='Cox7a1' |GeneSymbol=='Cox4i2' |GeneSymbol=='Ndufs6' |GeneSymbol=='Ndufs2' |GeneSymbol=='Ndufc1' |GeneSymbol=='Ndufb5' |GeneSymbol=='Gm21987' |GeneSymbol=='Cox17' |GeneSymbol=='Cox8a' |GeneSymbol=='Cox7a2' |GeneSymbol=='Cox6c' |GeneSymbol=='Nubpl' |GeneSymbol=='Ndufab1')

hm_tab_nucl_mito <- hm_tab_nucl_mito %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_nucl_mito) = hm_tab_nucl_mito$GeneSymbol
hm_nucl_mito_annot = data.frame("Sig" = hm_tab_nucl_mito$sig2)
rownames(hm_nucl_mito_annot) = rownames(hm_tab_nucl_mito)

hm_nucl_mito <- pheatmap(hm_tab_nucl_mito[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_nucl_mito$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_nucl_mito_annot, legend_labels = "Relative expression", main = "Nuclear-encoded mito genes")

pdf(file="m1_dm2_hm_nucl_mito.pdf",width=7,height=10)
hm_nucl_mito
dev.off()

#### make side-by-side hm of mitochondrial and nuclear encoded mitochondrial genes, analagous to eLife paper

library(RColorBrewer)
breaksList = seq(-2, 2, by = 0.1)

hm_tab_mt_mito2 <- as.data.frame(hm_tab_mt_mito$log2FC)
rownames(hm_tab_mt_mito2) = hm_tab_mt_mito$GeneSymbol
hm_tab_mt_mito2$log2FCdup <- hm_tab_mt_mito$log2FC

hm_mt_mito2 <- pheatmap(hm_tab_mt_mito2, cluster_rows = TRUE, cluster_cols = FALSE, cutree_rows = 2, legend = FALSE, cellwidth=30, angle_col=45, fontsize_col=6, annotation_row=hm_mt_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial-encoded", show_colnames = FALSE, show_rownames = FALSE, border_color = NA, scale = "none", color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList)

hm_tab_nucl_mito2 <- as.data.frame(hm_tab_nucl_mito$log2FC)
rownames(hm_tab_nucl_mito2) = hm_tab_nucl_mito$GeneSymbol
hm_tab_nucl_mito2$log2FCdup <- hm_tab_nucl_mito$log2FC

hm_nucl_mito2 <- pheatmap(hm_tab_nucl_mito2, cluster_rows = TRUE, cluster_cols = FALSE, cutree_rows = 3, legend = TRUE, cellwidth=30, angle_col=45, fontsize_col=6, annotation_row=hm_nucl_mito_annot, legend_labels = "Relative expression", main = "Nuclear-encoded", show_colnames = FALSE, , show_rownames = FALSE, border_color = NA, color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList)

require(cowplot)
require(ggplotify)

pdf(file="mito_genes_sumfig.pdf",width=8,height=3)
plot_grid(as.grob(hm_mt_mito2), as.grob(hm_nucl_mito2), ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()



############### Pathway analysis using enrichr =====================================================

require(enrichR)
require(tidyr)
require(cowplot)
require(viridis)

## look at sig up & down genes using enrichR
dbs_option <- listEnrichrDbs()

####### use upregulated genes

up_dge = subset(hm_tab, sig2=='sig' & log2FC>0)
write.table(up_dge,file="m1_dm2_up_dge.csv",sep=",")
up_dge <- up_dge[!is.na(up_dge$GeneSymbol), ]
up_genes <- as.vector(up_dge$GeneSymbol)


dbs_search <- c("GO_Biological_Process_2018","KEGG_2019_Mouse", "MSigDB_Hallmark_2020","GO_Cellular_Component_2018","GTEx_Tissue_Sample_Gene_Expression_Profiles_up","TF_Perturbations_Followed_by_Expression","GO_Molecular_Function_2018", "HMDB_Metabolites")

up_genes_enrichr <- enrichr(up_genes, databases = dbs_search)

## make figure from enrichr analyses
library(dplyr)
library(ggplot2)


GO_biol_data_up <- up_genes_enrichr[["GO_Biological_Process_2018"]]
View(GO_biol_data_up)
GO_biol_data_up = subset(GO_biol_data_up, Adjusted.P.value<.05)
GO_biol_data_up <- GO_biol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_biol_data_up$db <- "GO_biol_2019_Human"
GO_biol_fig_up <-ggplot(data=GO_biol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Biological_Process_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_biol_fig_up

KEGG_data_up <- up_genes_enrichr[["KEGG_2019_Mouse"]]
View(KEGG_data_up)
KEGG_data_up = subset(KEGG_data_up, Adjusted.P.value<.05)
KEGG_data_up <- KEGG_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
KEGG_data_up$db <- "KEGG_2019_Mouse"
KEGG_fig_up <-ggplot(data=KEGG_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("KEGG_2019_Mouse") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
KEGG_fig_up

Hall_data_up <- up_genes_enrichr[["MSigDB_Hallmark_2020"]]
View(Hall_data_up)
Hall_data_up = subset(Hall_data_up, Adjusted.P.value<.05)
Hall_data_up <- Hall_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Hall_data_up$db <- "MSigDB_Hallmark_2020"
Hall_fig_up <-ggplot(data=Hall_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("MSigDB_Hallmark_2020") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
Hall_fig_up

GO_cell_data_up <- up_genes_enrichr[["GO_Cellular_Component_2018"]]
View(GO_cell_data_up)
GO_cell_data_up = subset(GO_cell_data_up, Adjusted.P.value<.05)
GO_cell_data_up <- GO_cell_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_cell_data_up$db <- "GO_Cellular_Component_2018"
GO_cell_fig_up <-ggplot(data=GO_cell_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Cellular_Component_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_cell_fig_up

GTEx_data_up <- up_genes_enrichr[["GTEx_Tissue_Sample_Gene_Expression_Profiles_up"]]
View(GTEx_data_up)
GTEx_data_up = subset(GTEx_data_up, Adjusted.P.value<.05)
GTEx_data_up <- GTEx_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GTEx_data_up$db <- "GTEx_Tissue_Sample_Gene_Expression_Profiles_up"
GTEx_fig_up <-ggplot(data=GTEx_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GTEx_Tissue_Sample_Gene_Expression_Profiles_up") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GTEx_fig_up

TF_data_up <- up_genes_enrichr[["TF_Perturbations_Followed_by_Expression"]]
View(TF_data_up)
TF_data_up = subset(TF_data_up, Adjusted.P.value<.05)
TF_data_up <- TF_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
TF_data_up$db <- "TF_Perturbations_Followed_by_Expression"
TF_fig_up <-ggplot(data=TF_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("TF_Perturbations_Followed_by_Expression") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
TF_fig_up

GO_mol_data_up <- up_genes_enrichr[["GO_Molecular_Function_2018"]]
View(GO_mol_data_up)
GO_mol_data_up = subset(GO_mol_data_up, Adjusted.P.value<.05)
GO_mol_data_up <- GO_mol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_mol_data_up$db <- "GO_Molecular_Function_2018"
GO_mol_fig_up <-ggplot(data=GO_mol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Molecular_Function_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_mol_fig_up

Metabol_data_up <- up_genes_enrichr[["HMDB_Metabolites"]]
View(Metabol_data_up)
Metabol_data_up = subset(Metabol_data_up, Adjusted.P.value<.05)
Metabol_data_up <- Metabol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Metabol_data_up$db <- "HMDB_Metabolites"
Metabol_fig_up <-ggplot(data=Metabol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("HMDB_Metabolites") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
Metabol_fig_up

up_path_summary <- rbind(GO_biol_data_up, KEGG_data_up, Hall_data_up, GO_cell_data_up, GTEx_data_up, TF_data_up, GO_mol_data_up, Metabol_data_up)
up_path_summary$dir <- "Up"  


## remove duplicates to make TF figure
library(stringr)
library(dplyr)
library(ggplot2)

TF_data_up <- up_genes_enrichr[["TF_Perturbations_Followed_by_Expression"]]
View(TF_data_up)
TF_data_up = subset(TF_data_up, Adjusted.P.value<.05)
TF_data_up$TF <- gsub("([A-Za-z]+).*", "\\1", TF_data_up$Term)
TF_data_up$dir <- tolower(word(TF_data_up$Term,-1))
TF_data_up$text <- paste(TF_data_up$TF, TF_data_up$dir, sep = " ", collapse = NULL)
TF_data_up <- TF_data_up %>% distinct(text, .keep_all = TRUE)

TF_data_up <- TF_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
TF_data_up$db <- "TF_Perturbations_Followed_by_Expression"
TF_fig_up <-ggplot(data=TF_data_up, aes(x= reorder(text, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("TF_Perturbations_Followed_by_Expression") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
TF_fig_up

pdf(file="m1_dm2_TF_fig_up.pdf",width=8,height=4)
TF_fig_up
dev.off()


TF_data_down <- down_genes_enrichr[["TF_Perturbations_Followed_by_Expression"]]
View(TF_data_down)
TF_data_down = subset(TF_data_down, Adjusted.P.value<.05)
TF_data_down$TF <- gsub("([A-Za-z]+).*", "\\1", TF_data_down$Term)
TF_data_down$dir <- tolower(word(TF_data_down$Term,-1))
TF_data_down$text <- paste(TF_data_down$TF, TF_data_down$dir, sep = " ", collapse = NULL)
TF_data_down <- TF_data_down %>% distinct(text, .keep_all = TRUE)

TF_data_down <- TF_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
TF_data_down$db <- "TF_Perturbations_Followed_by_Expression"
TF_fig_down <-ggplot(data=TF_data_down, aes(x= reorder(text, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("TF_Perturbations_Followed_by_Expression") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
TF_fig_down

pdf(file="m1_dm2_TF_fig_down.pdf",width=8,height=4)
TF_fig_down
dev.off()





####### use downregulated genes

down_dge = subset(hm_tab, sig2=='sig' & log2FC<0)
write.table(down_dge,file="m1_dm2_down_dge.csv",sep=",")
down_list <- as.data.frame(down_dge$GeneSymbol)
down_list <- down_list %>% rename("genes" = "down_dge$GeneSymbol")
down_list <- down_list %>% drop_na()
down_list <- distinct(down_list)

dbs_search <- c("GO_Biological_Process_2018","KEGG_2019_Mouse", "MSigDB_Hallmark_2020","GO_Cellular_Component_2018","GTEx_Tissue_Sample_Gene_Expression_Profiles_up","TF_Perturbations_Followed_by_Expression","GO_Molecular_Function_2018", "HMDB_Metabolites")

down_genes_enrichr <- enrichr(down_list$genes, databases = dbs_search)

## make figure from enrichr analyses

GO_biol_data_down <- down_genes_enrichr[["GO_Biological_Process_2018"]]
View(GO_biol_data_down)
GO_biol_data_down = subset(GO_biol_data_down, Adjusted.P.value<.05)
GO_biol_data_down <- GO_biol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_biol_data_down$db <- "GO_biol_2019_Human"
GO_biol_fig_down <-ggplot(data=GO_biol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Biological_Process_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_biol_fig_down

KEGG_data_down <- down_genes_enrichr[["KEGG_2019_Mouse"]]
View(KEGG_data_down)
KEGG_data_down = subset(KEGG_data_down, Adjusted.P.value<.05)
KEGG_data_down <- KEGG_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
KEGG_data_down$db <- "KEGG_2019_Mouse"
KEGG_fig_down <-ggplot(data=KEGG_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("KEGG_2019_Mouse") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
KEGG_fig_down

Hall_data_down <- down_genes_enrichr[["MSigDB_Hallmark_2020"]]
View(Hall_data_down)
Hall_data_down = subset(Hall_data_down, Adjusted.P.value<.05)
Hall_data_down <- Hall_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Hall_data_down$db <- "MSigDB_Hallmark_2020"
Hall_fig_down <-ggplot(data=Hall_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("MSigDB_Hallmark_2020") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
Hall_fig_down

GO_cell_data_down <- down_genes_enrichr[["GO_Cellular_Component_2018"]]
View(GO_cell_data_down)
GO_cell_data_down = subset(GO_cell_data_down, Adjusted.P.value<.05)
GO_cell_data_down <- GO_cell_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_cell_data_down$db <- "GO_Cellular_Component_2018"
GO_cell_fig_down <-ggplot(data=GO_cell_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Cellular_Component_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_cell_fig_down

GTEx_data_down <- down_genes_enrichr[["GTEx_Tissue_Sample_Gene_Expression_Profiles_up"]]
View(GTEx_data_down)
GTEx_data_down = subset(GTEx_data_down, Adjusted.P.value<.05)
GTEx_data_down <- GTEx_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GTEx_data_down$db <- "GTEx_Tissue_Sample_Gene_Expression_Profiles_down"
GTEx_fig_down <-ggplot(data=GTEx_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GTEx_Tissue_Sample_Gene_Expression_Profiles_up") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GTEx_fig_down

TF_data_down <- down_genes_enrichr[["TF_Perturbations_Followed_by_Expression"]]
View(TF_data_down)
TF_data_down = subset(TF_data_down, Adjusted.P.value<.05)
TF_data_down <- TF_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
TF_data_down$db <- "TF_Perturbations_Followed_by_Expression"
TF_fig_down <-ggplot(data=TF_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("TF_Perturbations_Followed_by_Expression") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
TF_fig_down

GO_mol_data_down <- down_genes_enrichr[["GO_Molecular_Function_2018"]]
View(GO_mol_data_down)
GO_mol_data_down = subset(GO_mol_data_down, Adjusted.P.value<.05)
GO_mol_data_down <- GO_mol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_mol_data_down$db <- "GO_Molecular_Function_2018"
GO_mol_fig_down <-ggplot(data=GO_mol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Molecular_Function_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_mol_fig_down

Metabol_data_down <- down_genes_enrichr[["HMDB_Metabolites"]]
View(Metabol_data_down)
Metabol_data_down = subset(Metabol_data_down, Adjusted.P.value<.05)
Metabol_data_down <- Metabol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Metabol_data_down$db <- "HMDB_Metabolites"
Metabol_fig_down <-ggplot(data=Metabol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("HMDB_Metabolites") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
Metabol_fig_down

down_path_summary <- rbind(GO_biol_data_down, KEGG_data_down, Hall_data_down, GO_cell_data_down, GTEx_data_down, TF_data_down, GO_mol_data_down, Metabol_data_down)
down_path_summary$dir <- "down"  

path_summary <- rbind(up_path_summary, down_path_summary)
path_summary <- path_summary %>% arrange(desc(-Adjusted.P.value))               
write.table(path_summary,file="path_summary.csv",sep=",")

up_path_col1 <- plot_grid(GO_biol_fig_up, KEGG_fig_up, Hall_fig_up, GO_cell_fig_up, ncol = 1, labels = c('A', 'C', 'E', 'G', 'I', 'K', 'M', 'O'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))
up_path_col2 <- plot_grid(GTEx_fig_up, TF_fig_up, GO_mol_fig_up, Metabol_fig_up, ncol = 1, labels = c('B', 'D', 'F', 'H'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))

pdf(file="up_path_sumfig.pdf",width=16,height=12)
plot_grid(up_path_col1, up_path_col2, ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()

down_path_col1 <- plot_grid(GO_biol_fig_down, KEGG_fig_down, Hall_fig_down, GO_cell_fig_down, ncol = 1, labels = c('A', 'C', 'E', 'G', 'I', 'K', 'M', 'O'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))
down_path_col2 <- plot_grid(GTEx_fig_down, TF_fig_down, GO_mol_fig_down, Metabol_fig_down, ncol = 1, labels = c('B', 'D', 'F', 'H'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))

pdf(file="down_path_sumfig.pdf",width=16,height=12)
plot_grid(down_path_col1, down_path_col2, ncol = 2, rel_heights = c(1.0, 1.0))

############ summarise enriched GO terms using revigo ---------

library(rrvgo)
library(stringr)
GO_BP_up_revigo <- up_genes_enrichr[["GO_Biological_Process_2018"]]
GO_BP_up_revigo = subset(GO_BP_up_revigo, Adjusted.P.value<.05)
GO_BP_up_revigo$ID <- str_extract(GO_BP_up_revigo$Term, "GO:.......")
GO_BP_up_simMatrix <- calculateSimMatrix(GO_BP_up_revigo$ID, orgdb="org.Mm.eg.db", ont="BP", method="Rel")
GO_BP_up_scores <- setNames(-log10(GO_BP_up_revigo$Adjusted.P.value), GO_BP_up_revigo$ID)
GO_BP_up_reducedTerms <- reduceSimMatrix(GO_BP_up_simMatrix, GO_BP_up_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_BP_up_simMatrix, GO_BP_up_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_BP_up_scatter_m1_dm2.pdf",width=14,height=8)
GO_BP_up_scatter <- scatterPlot(GO_BP_up_simMatrix, GO_BP_up_reducedTerms, labelSize=3)
GO_BP_up_scatter
dev.off()
pdf(file="GO_BP_up_tree_m1_dm2.pdf",width=14,height=8)
GO_BP_up_tree <- treemapPlot(GO_BP_up_reducedTerms)
dev.off()

GO_CC_up_revigo <- up_genes_enrichr[["GO_Cellular_Component_2018"]]
GO_CC_up_revigo = subset(GO_CC_up_revigo, Adjusted.P.value<.05)
GO_CC_up_revigo$ID <- str_extract(GO_CC_up_revigo$Term, "GO:.......")
GO_CC_up_simMatrix <- calculateSimMatrix(GO_CC_up_revigo$ID, orgdb="org.Mm.eg.db", ont="CC", method="Rel")
GO_CC_up_scores <- setNames(-log10(GO_CC_up_revigo$Adjusted.P.value), GO_CC_up_revigo$ID)
GO_CC_up_reducedTerms <- reduceSimMatrix(GO_CC_up_simMatrix, GO_CC_up_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_CC_up_simMatrix, GO_CC_up_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_CC_up_scatter_m1_dm2.pdf",width=14,height=8)
GO_CC_up_scatter <- scatterPlot(GO_CC_up_simMatrix, GO_CC_up_reducedTerms, labelSize=3)
GO_CC_up_scatter
dev.off()
pdf(file="GO_CC_up_tree_m1_dm2.pdf",width=14,height=8)
GO_CC_up_tree <- treemapPlot(GO_CC_up_reducedTerms)
dev.off()

GO_MF_up_revigo <- up_genes_enrichr[["GO_Molecular_Function_2018"]]
GO_MF_up_revigo = subset(GO_MF_up_revigo, Adjusted.P.value<.05)
GO_MF_up_revigo$ID <- str_extract(GO_MF_up_revigo$Term, "GO:.......")
GO_MF_up_simMatrix <- calculateSimMatrix(GO_MF_up_revigo$ID, orgdb="org.Mm.eg.db", ont="MF", method="Rel")
GO_MF_up_scores <- setNames(-log10(GO_MF_up_revigo$Adjusted.P.value), GO_MF_up_revigo$ID)
GO_MF_up_reducedTerms <- reduceSimMatrix(GO_MF_up_simMatrix, GO_MF_up_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_MF_up_simMatrix, GO_MF_up_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_MF_up_scatter_m1_dm2.pdf",width=14,height=8)
GO_MF_up_scatter <- scatterPlot(GO_MF_up_simMatrix, GO_MF_up_reducedTerms, labelSize=3)
GO_MF_up_scatter
dev.off()
pdf(file="GO_MF_up_tree_m1_dm2.pdf",width=14,height=8)
GO_MF_up_tree <- treemapPlot(GO_MF_up_reducedTerms)
dev.off()

GO_BP_down_revigo <- down_genes_enrichr[["GO_Biological_Process_2018"]]
GO_BP_down_revigo = subset(GO_BP_down_revigo, Adjusted.P.value<.05)
GO_BP_down_revigo$ID <- str_extract(GO_BP_down_revigo$Term, "GO:.......")
GO_BP_down_simMatrix <- calculateSimMatrix(GO_BP_down_revigo$ID, orgdb="org.Mm.eg.db", ont="BP", method="Rel")
GO_BP_down_scores <- setNames(-log10(GO_BP_down_revigo$Adjusted.P.value), GO_BP_down_revigo$ID)
GO_BP_down_reducedTerms <- reduceSimMatrix(GO_BP_down_simMatrix, GO_BP_down_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_BP_down_simMatrix, GO_BP_down_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_BP_down_scatter_m1_dm2.pdf",width=14,height=8)
GO_BP_down_scatter <- scatterPlot(GO_BP_down_simMatrix, GO_BP_down_reducedTerms, labelSize=3)
GO_BP_down_scatter
dev.off()
pdf(file="GO_BP_down_tree_m1_dm2.pdf",width=14,height=8)
GO_BP_down_tree <- treemapPlot(GO_BP_down_reducedTerms)
dev.off()

GO_CC_down_revigo <- down_genes_enrichr[["GO_Cellular_Component_2018"]]
GO_CC_down_revigo = subset(GO_CC_down_revigo, Adjusted.P.value<.05)
GO_CC_down_revigo$ID <- str_extract(GO_CC_down_revigo$Term, "GO:.......")
GO_CC_down_simMatrix <- calculateSimMatrix(GO_CC_down_revigo$ID, orgdb="org.Mm.eg.db", ont="CC", method="Rel")
GO_CC_down_scores <- setNames(-log10(GO_CC_down_revigo$Adjusted.P.value), GO_CC_down_revigo$ID)
GO_CC_down_reducedTerms <- reduceSimMatrix(GO_CC_down_simMatrix, GO_CC_down_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_CC_down_simMatrix, GO_CC_down_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_CC_down_scatter_m1_dm2.pdf",width=14,height=8)
GO_CC_down_scatter <- scatterPlot(GO_CC_down_simMatrix, GO_CC_down_reducedTerms, labelSize=3)
GO_CC_down_scatter
dev.off()
pdf(file="GO_CC_down_tree_m1_dm2.pdf",width=14,height=8)
GO_CC_down_tree <- treemapPlot(GO_CC_down_reducedTerms)
dev.off()

GO_MF_down_revigo <- down_genes_enrichr[["GO_Molecular_Function_2018"]]
GO_MF_down_revigo = subset(GO_MF_down_revigo, Adjusted.P.value<.05)
GO_MF_down_revigo$ID <- str_extract(GO_MF_down_revigo$Term, "GO:.......")
GO_MF_down_simMatrix <- calculateSimMatrix(GO_MF_down_revigo$ID, orgdb="org.Mm.eg.db", ont="MF", method="Rel")
GO_MF_down_scores <- setNames(-log10(GO_MF_down_revigo$Adjusted.P.value), GO_MF_down_revigo$ID)
GO_MF_down_reducedTerms <- reduceSimMatrix(GO_MF_down_simMatrix, GO_MF_down_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_MF_down_simMatrix, GO_MF_down_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_MF_down_scatter_m1_dm2.pdf",width=14,height=8)
GO_MF_down_scatter <- scatterPlot(GO_MF_down_simMatrix, GO_MF_down_reducedTerms, labelSize=3)
GO_MF_down_scatter
dev.off()
pdf(file="GO_MF_down_tree_m1_dm2.pdf",width=14,height=8)
GO_MF_down_tree <- treemapPlot(GO_MF_down_reducedTerms)
dev.off()

### make table for comparison hm
hm_tab_m1_dm2 = subset(hm_tab, select=c("gene_id","WT_dm2_A","WT_dm2_B","WT_dm2_C","m1_dm2_A","m1_dm2_B","m1_dm2_C","log2FC","BH_pval","neglog_p","significant","sig2","GeneSymbol"))
hm_tab_m1_dm2 <- hm_tab_m1_dm2 %>% rename("WT_dm2_A_m1" = "WT_dm2_A")
hm_tab_m1_dm2 <- hm_tab_m1_dm2 %>% rename("WT_dm2_B_m1" = "WT_dm2_B")
hm_tab_m1_dm2 <- hm_tab_m1_dm2 %>% rename("WT_dm2_C_m1" = "WT_dm2_C")
hm_tab_m1_dm2 <- hm_tab_m1_dm2 %>% rename("log2FC_m1dm2" = "log2FC")
hm_tab_m1_dm2 <- hm_tab_m1_dm2 %>% rename("BH_pval_m1dm2" = "BH_pval")
hm_tab_m1_dm2 <- hm_tab_m1_dm2 %>% rename("neglog_p_m1dm2" = "neglog_p")
hm_tab_m1_dm2 <- hm_tab_m1_dm2 %>% rename("significant_m1dm2" = "significant")
hm_tab_m1_dm2 <- hm_tab_m1_dm2 %>% rename("sig2_m1dm2" = "sig2")
write.table(hm_tab_m1_dm2, file="hm_tab_m1_dm2.csv",sep=",")



############ make specific heatmaps following on enriched genesets ---------

##### hm of hallmark CholHomeo genes

hm_tab_hall_CholHomeo = subset(hm_tab, GeneSymbol=='Abca2' | GeneSymbol=='Acat2' | GeneSymbol=='Acss2' | GeneSymbol=='Actg1' | GeneSymbol=='Adh4' | GeneSymbol=='Alcam' | GeneSymbol=='Aldoc' | GeneSymbol=='Antxr2' | GeneSymbol=='Anxa13' | GeneSymbol=='Anxa5' | GeneSymbol=='Atf3' | GeneSymbol=='Atf5' | GeneSymbol=='Atxn2' | GeneSymbol=='Avpr1A' | GeneSymbol=='Cbs' | GeneSymbol=='Cd9' | GeneSymbol=='Chka' | GeneSymbol=='Clu' | GeneSymbol=='Cpeb2' | GeneSymbol=='Ctnnb1' | GeneSymbol=='Cxcl16' | GeneSymbol=='Cyp51A1' | GeneSymbol=='Dhcr7' | GeneSymbol=='Ebp' | GeneSymbol=='Ech1' | GeneSymbol=='Errfi1' | GeneSymbol=='Ethe1' | GeneSymbol=='Fabp5' | GeneSymbol=='Fads2' | GeneSymbol=='Fasn' | GeneSymbol=='Fbxo6' | GeneSymbol=='Fdft1' | GeneSymbol=='Fdps' | GeneSymbol=='Gldc' | GeneSymbol=='Gnai1' | GeneSymbol=='Gpx8' | GeneSymbol=='Gstm2' | GeneSymbol=='Gusb' | GeneSymbol=='Hmgcr' | GeneSymbol=='Hmgcs1' | GeneSymbol=='Hsd17B7' | GeneSymbol=='Idi1' | GeneSymbol=='Jag1' | GeneSymbol=='Ldlr' | GeneSymbol=='Lgals3' | GeneSymbol=='Lgmn' | GeneSymbol=='Lpl' | GeneSymbol=='Lss' | GeneSymbol=='Mal2' | GeneSymbol=='Mvd' | GeneSymbol=='Mvk' | GeneSymbol=='Nfil3' | GeneSymbol=='Niban1' | GeneSymbol=='Nsdhl' | GeneSymbol=='Pcyt2' | GeneSymbol=='Pdk3' | GeneSymbol=='Plaur' | GeneSymbol=='Plscr1' | GeneSymbol=='Pmvk' | GeneSymbol=='Pnrc1' | GeneSymbol=='Pparg' | GeneSymbol=='S100A11' | GeneSymbol=='Sc5D' | GeneSymbol=='Scd' | GeneSymbol=='Sema3B' | GeneSymbol=='Sqle' | GeneSymbol=='Srebf2' | GeneSymbol=='Stard4' | GeneSymbol=='Stx5' | GeneSymbol=='Tm7Sf2' | GeneSymbol=='Tmem97' | GeneSymbol=='Tnfrsf12A' | GeneSymbol=='Tp53Inp1' | GeneSymbol=='Trib3')

hm_tab_hall_CholHomeo <- hm_tab_hall_CholHomeo %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_CholHomeo) = hm_tab_hall_CholHomeo$GeneSymbol
hm_hall_CholHomeo_annot = data.frame("Sig" = hm_tab_hall_CholHomeo$sig2)
rownames(hm_hall_CholHomeo_annot) = rownames(hm_tab_hall_CholHomeo)

ann_colors = list(Sig = c(sig = "#E69F00", not = "#999999"))

hm_hall_CholHomeo <- pheatmap(hm_tab_hall_CholHomeo[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_CholHomeo$GeneSymbol, fontsize_row = 8, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_CholHomeo_annot, legend_labels = "Relative expression", gaps_col=c(3), treeheight_row = 10, main="CholHomeo", border_color=NA, annotation_colors = ann_colors)

pdf(file="m1_dm2_hm_hall_CholHomeo.pdf",width=7,height=10)
hm_hall_CholHomeo
dev.off()


##### hm of hallmark FAmetab genes

hm_tab_hall_FAmetab = subset(hm_tab, GeneSymbol=='Aadat' | GeneSymbol=='Acaa1' | GeneSymbol=='Acaa2' | GeneSymbol=='Acadl' | GeneSymbol=='Acadm' | GeneSymbol=='Acads' | GeneSymbol=='Acadvl' | GeneSymbol=='Acat2' | GeneSymbol=='Aco2' | GeneSymbol=='Acot2' | GeneSymbol=='Acot8' | GeneSymbol=='Acox1' | GeneSymbol=='Acsl1' | GeneSymbol=='Acsl4' | GeneSymbol=='Acsl5' | GeneSymbol=='Acsm3' | GeneSymbol=='Acss1' | GeneSymbol=='Adh1C' | GeneSymbol=='Adh7' | GeneSymbol=='Adipor2' | GeneSymbol=='Adsl' | GeneSymbol=='Alad' | GeneSymbol=='Aldh1A1' | GeneSymbol=='Aldh3A1' | GeneSymbol=='Aldh3A2' | GeneSymbol=='Aldh9A1' | GeneSymbol=='Aldoa' | GeneSymbol=='Aoc3' | GeneSymbol=='Apex1' | GeneSymbol=='Aqp7' | GeneSymbol=='Auh' | GeneSymbol=='Bckdhb' | GeneSymbol=='Blvra' | GeneSymbol=='Bmpr1B' | GeneSymbol=='Bphl' | GeneSymbol=='Ca2' | GeneSymbol=='Ca4' | GeneSymbol=='Ca6' | GeneSymbol=='Cbr1' | GeneSymbol=='Cbr3' | GeneSymbol=='Ccdc58' | GeneSymbol=='Cd1D' | GeneSymbol=='Cd36' | GeneSymbol=='Cel' | GeneSymbol=='Cidea' | GeneSymbol=='Cpox' | GeneSymbol=='Cpt1A' | GeneSymbol=='Cpt2' | GeneSymbol=='Crat' | GeneSymbol=='Cryz' | GeneSymbol=='Cyp1A1' | GeneSymbol=='Cyp4A11' | GeneSymbol=='Cyp4A22' | GeneSymbol=='D2Hgdh' | GeneSymbol=='Decr1' | GeneSymbol=='Dhcr24' | GeneSymbol=='Dld' | GeneSymbol=='Dlst' | GeneSymbol=='Ech1' | GeneSymbol=='Echs1' | GeneSymbol=='Eci1' | GeneSymbol=='Eci2' | GeneSymbol=='Ehhadh' | GeneSymbol=='Elovl5' | GeneSymbol=='Eno2' | GeneSymbol=='Eno3' | GeneSymbol=='Ephx1' | GeneSymbol=='Erp29' | GeneSymbol=='Etfdh' | GeneSymbol=='Fabp1' | GeneSymbol=='Fabp2' | GeneSymbol=='Fasn' | GeneSymbol=='Fh' | GeneSymbol=='Fmo1' | GeneSymbol=='G0S2' | GeneSymbol=='Gabarapl1' | GeneSymbol=='Gad2' | GeneSymbol=='Gapdhs' | GeneSymbol=='Gcdh' | GeneSymbol=='Glul' | GeneSymbol=='Gpd1' | GeneSymbol=='Gpd2' | GeneSymbol=='Grhpr' | GeneSymbol=='Gstz1' | GeneSymbol=='H2Az1' | GeneSymbol=='Hadh' | GeneSymbol=='Hadhb' | GeneSymbol=='Hao2' | GeneSymbol=='Hccs' | GeneSymbol=='Hibch' | GeneSymbol=='Hmgcl' | GeneSymbol=='Hmgcs1' | GeneSymbol=='Hmgcs2' | GeneSymbol=='Hpgd' | GeneSymbol=='Hsd17B10' | GeneSymbol=='Hsd17B11' | GeneSymbol=='Hsd17B4' | GeneSymbol=='Hsd17B7' | GeneSymbol=='Hsdl2' | GeneSymbol=='Hsp90Aa1' | GeneSymbol=='Hsph1' | GeneSymbol=='Idh1' | GeneSymbol=='Idh3B' | GeneSymbol=='Idh3G' | GeneSymbol=='Idi1' | GeneSymbol=='Il4I1' | GeneSymbol=='Inmt' | GeneSymbol=='Kmt5A' | GeneSymbol=='Ldha' | GeneSymbol=='Lgals1' | GeneSymbol=='Ltc4S' | GeneSymbol=='Maoa' | GeneSymbol=='Mcee' | GeneSymbol=='Mdh1' | GeneSymbol=='Mdh2' | GeneSymbol=='Me1' | GeneSymbol=='Metap1' | GeneSymbol=='Mgll' | GeneSymbol=='Mif' | GeneSymbol=='Mlycd' | GeneSymbol=='Nbn' | GeneSymbol=='Ncaph2' | GeneSymbol=='Nsdhl' | GeneSymbol=='Nthl1' | GeneSymbol=='Odc1' | GeneSymbol=='Ostc' | GeneSymbol=='Pcbd1' | GeneSymbol=='Pdha1' | GeneSymbol=='Pdhb' | GeneSymbol=='Ppara' | GeneSymbol=='Prdx6' | GeneSymbol=='Psme1' | GeneSymbol=='Ptprg' | GeneSymbol=='Pts' | GeneSymbol=='Rap1Gds1' | GeneSymbol=='Rdh11' | GeneSymbol=='Rdh16' | GeneSymbol=='Reep6' | GeneSymbol=='Retsat' | GeneSymbol=='S100A10' | GeneSymbol=='Sdha' | GeneSymbol=='Sdhc' | GeneSymbol=='Sdhd' | GeneSymbol=='Serinc1' | GeneSymbol=='Slc22A5' | GeneSymbol=='Sms' | GeneSymbol=='Sucla2' | GeneSymbol=='Suclg1' | GeneSymbol=='Suclg2' | GeneSymbol=='Tdo2' | GeneSymbol=='Tp53Inp2' | GeneSymbol=='Ube2L6' | GeneSymbol=='Ugdh' | GeneSymbol=='Urod' | GeneSymbol=='Uros' | GeneSymbol=='Vnn1' | GeneSymbol=='Xist' | GeneSymbol=='Ywhah')

hm_tab_hall_FAmetab <- hm_tab_hall_FAmetab %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_FAmetab) = hm_tab_hall_FAmetab$GeneSymbol
hm_hall_FAmetab_annot = data.frame("Sig" = hm_tab_hall_FAmetab$sig2)
rownames(hm_hall_FAmetab_annot) = rownames(hm_tab_hall_FAmetab)

hm_hall_FAmetab <- pheatmap(hm_tab_hall_FAmetab[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_FAmetab$GeneSymbol, fontsize_row = 7, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_FAmetab_annot, legend_labels = "Relative expression", gaps_col=c(3), treeheight_row = 10, main="FAmetab", border_color=NA, annotation_colors = ann_colors)

pdf(file="m1_dm2_hm_hall_FAmetab.pdf",width=7,height=10)
hm_hall_FAmetab
dev.off()


##### hm of hallmark Hypoxia genes

hm_tab_hall_Hypoxia1 = subset(hm_tab, GeneSymbol=='Ackr3' | GeneSymbol=='Adm' | GeneSymbol=='Adora2B' | GeneSymbol=='Ak4' | GeneSymbol=='Akap12' | GeneSymbol=='Aldoa' | GeneSymbol=='Aldob' | GeneSymbol=='Aldoc' | GeneSymbol=='Ampd3' | GeneSymbol=='Angptl4' | GeneSymbol=='Ankzf1' | GeneSymbol=='Anxa2' | GeneSymbol=='Atf3' | GeneSymbol=='Atp7A' | GeneSymbol=='B3Galt6' | GeneSymbol=='B4Galnt2' | GeneSymbol=='Bcan' | GeneSymbol=='Bcl2' | GeneSymbol=='Bgn' | GeneSymbol=='Bhlhe40' | GeneSymbol=='Bnip3L' | GeneSymbol=='Brs3' | GeneSymbol=='Btg1' | GeneSymbol=='Ca12' | GeneSymbol=='Casp6' | GeneSymbol=='Cav1' | GeneSymbol=='Cavin1' | GeneSymbol=='Cavin3' | GeneSymbol=='Ccn1' | GeneSymbol=='Ccn2' | GeneSymbol=='Ccn5' | GeneSymbol=='Ccng2' | GeneSymbol=='Cdkn1A' | GeneSymbol=='Cdkn1B' | GeneSymbol=='Cdkn1C' | GeneSymbol=='Chst2' | GeneSymbol=='Chst3' | GeneSymbol=='Cited2' | GeneSymbol=='Col5A1' | GeneSymbol=='Cp' | GeneSymbol=='Csrp2' | GeneSymbol=='Cxcr4' | GeneSymbol=='Dcn' | GeneSymbol=='Ddit3' | GeneSymbol=='Ddit4' | GeneSymbol=='Dpysl4' | GeneSymbol=='Dtna' | GeneSymbol=='Dusp1' | GeneSymbol=='Edn2' | GeneSymbol=='Efna1' | GeneSymbol=='Efna3' | GeneSymbol=='Egfr' | GeneSymbol=='Eno1' | GeneSymbol=='Eno2' | GeneSymbol=='Eno3' | GeneSymbol=='Ero1A' | GeneSymbol=='Errfi1' | GeneSymbol=='Ets1' | GeneSymbol=='Ext1' | GeneSymbol=='F3' | GeneSymbol=='Fam162A' | GeneSymbol=='Fbp1' | GeneSymbol=='Fos' | GeneSymbol=='Fosl2' | GeneSymbol=='Foxo3' | GeneSymbol=='Gaa' | GeneSymbol=='Galk1' | GeneSymbol=='Gapdh' | GeneSymbol=='Gapdhs' | GeneSymbol=='Gbe1' | GeneSymbol=='Gck' | GeneSymbol=='Gcnt2' | GeneSymbol=='Glrx' | GeneSymbol=='Gpc1' | GeneSymbol=='Gpc3' | GeneSymbol=='Gpc4' | GeneSymbol=='Gpi' | GeneSymbol=='Grhpr' | GeneSymbol=='Gys1' | GeneSymbol=='Has1' | GeneSymbol=='Hdlbp' | GeneSymbol=='Hexa' | GeneSymbol=='Hk1' | GeneSymbol=='Hk2' | GeneSymbol=='Hmox1' | GeneSymbol=='Hoxb9' | GeneSymbol=='Hs3St1' | GeneSymbol=='Hspa5' | GeneSymbol=='Ids' | GeneSymbol=='Ier3' | GeneSymbol=='Igfbp1' | GeneSymbol=='Igfbp3' | GeneSymbol=='Il6' | GeneSymbol=='Ilvbl' | GeneSymbol=='Inha' | GeneSymbol=='Irs2')

hm_tab_hall_Hypoxia2 = subset(hm_tab, GeneSymbol=='Isg20' | GeneSymbol=='Jmjd6' | GeneSymbol=='Jun' | GeneSymbol=='Kdelr3' | GeneSymbol=='Kdm3A' | GeneSymbol=='Kif5A' | GeneSymbol=='Klf6' | GeneSymbol=='Klf7' | GeneSymbol=='Klhl24' | GeneSymbol=='Lalba' | GeneSymbol=='Large1' | GeneSymbol=='Ldha' | GeneSymbol=='Ldhc' | GeneSymbol=='Lox' | GeneSymbol=='Lxn' | GeneSymbol=='Maff' | GeneSymbol=='Map3K1' | GeneSymbol=='Mif' | GeneSymbol=='Mt1E' | GeneSymbol=='Mt2A' | GeneSymbol=='Mxi1' | GeneSymbol=='Myh9' | GeneSymbol=='Nagk' | GeneSymbol=='Ncan' | GeneSymbol=='Ndrg1' | GeneSymbol=='Ndst1' | GeneSymbol=='Ndst2' | GeneSymbol=='Nedd4L' | GeneSymbol=='Nfil3' | GeneSymbol=='Noct' | GeneSymbol=='Nr3C1' | GeneSymbol=='P4Ha1' | GeneSymbol=='P4Ha2' | GeneSymbol=='Pam' | GeneSymbol=='Pck1' | GeneSymbol=='Pdgfb' | GeneSymbol=='Pdk1' | GeneSymbol=='Pdk3' | GeneSymbol=='Pfkfb3' | GeneSymbol=='Pfkl' | GeneSymbol=='Pfkp' | GeneSymbol=='Pgam2' | GeneSymbol=='Pgf' | GeneSymbol=='Pgk1' | GeneSymbol=='Pgm1' | GeneSymbol=='Pgm2' | GeneSymbol=='Phkg1' | GeneSymbol=='Pim1' | GeneSymbol=='Pklr' | GeneSymbol=='Pkp1' | GeneSymbol=='Plac8' | GeneSymbol=='Plaur' | GeneSymbol=='Plin2' | GeneSymbol=='Pnrc1' | GeneSymbol=='Ppargc1A' | GeneSymbol=='Ppfia4' | GeneSymbol=='Ppp1R15A' | GeneSymbol=='Ppp1R3C' | GeneSymbol=='Prdx5' | GeneSymbol=='Prkca' | GeneSymbol=='Pygm' | GeneSymbol=='Rbpj' | GeneSymbol=='Rora' | GeneSymbol=='Rragd' | GeneSymbol=='S100A4' | GeneSymbol=='Sap30' | GeneSymbol=='Scarb1' | GeneSymbol=='Sdc2' | GeneSymbol=='Sdc3' | GeneSymbol=='Sdc4' | GeneSymbol=='Selenbp1' | GeneSymbol=='Serpine1' | GeneSymbol=='Siah2' | GeneSymbol=='Slc25A1' | GeneSymbol=='Slc2A1' | GeneSymbol=='Slc2A3' | GeneSymbol=='Slc2A5' | GeneSymbol=='Slc37A4' | GeneSymbol=='Slc6A6' | GeneSymbol=='Srpx' | GeneSymbol=='Stbd1' | GeneSymbol=='Stc1' | GeneSymbol=='Stc2' | GeneSymbol=='Sult2B1' | GeneSymbol=='Tes' | GeneSymbol=='Tgfb3' | GeneSymbol=='Tgfbi' | GeneSymbol=='Tgm2' | GeneSymbol=='Tiparp' | GeneSymbol=='Tktl1' | GeneSymbol=='Tmem45A' | GeneSymbol=='Tnfaip3' | GeneSymbol=='Tpbg' | GeneSymbol=='Tpd52' | GeneSymbol=='Tpi1' | GeneSymbol=='Tpst2' | GeneSymbol=='Ugp2' | GeneSymbol=='Vegfa' | GeneSymbol=='Vhl' | GeneSymbol=='Vldlr' | GeneSymbol=='Wsb1' | GeneSymbol=='Xpnpep1' | GeneSymbol=='Zfp36' | GeneSymbol=='Znf292')

hm_tab_hall_Hypoxia <- rbind(hm_tab_hall_Hypoxia1, hm_tab_hall_Hypoxia2)

hm_tab_hall_Hypoxia <- hm_tab_hall_Hypoxia %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_Hypoxia) = hm_tab_hall_Hypoxia$GeneSymbol
hm_hall_Hypoxia_annot = data.frame("Sig" = hm_tab_hall_Hypoxia$sig2)
rownames(hm_hall_Hypoxia_annot) = rownames(hm_tab_hall_Hypoxia)

hm_hall_Hypoxia <- pheatmap(hm_tab_hall_Hypoxia[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_Hypoxia$GeneSymbol, fontsize_row = 5, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_Hypoxia_annot, legend_labels = "Relative expression", gaps_col=c(3), treeheight_row = 10, main="Hypoxia", border_color=NA, annotation_colors = ann_colors)

pdf(file="m1_dm2_hm_hall_Hypoxia.pdf",width=7,height=10)
hm_hall_Hypoxia
dev.off()


## use counts tables 


rm(list = ls())

#### PRELIMINARIES ############################################################################################# 

#*Uploads the needed libraries --------------------------------------------------------------------------------

require(DESeq2)

require(ggplot2)

require(data.table)

require(plotly)

require(DT)

require(htmlwidgets)

require(R2HTML)


soft_version <- packageVersion("DESeq2")

#*Set the number of significant digits for the output --------------------------
sig_dig = 4

## Analysis for mfn1 MEFs at dp8

#*Set the working directory ---------------------------------------------------------------------------------

#get the default wd
default_wd <- getwd()

#Set the directory where all the saved outputs will be stored
setwd("/Users/jakemann/RNAseq_Dec20/output_v1/m1_dp8")

new_wd <- getwd()
#### DATA UPLOAD ###############################################################################################################

annotation_table <- read.csv("/Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.95_gene_annotation_table.txt", sep = "\t")

# inputs the list of the count files
input_files <- list.files(path = "/Users/jakemann/RNAseq_Dec20/m1_MEF_counts/", pattern = "*tab$", full.names = TRUE)
input_files <- input_files[grep(input_files, pattern="m1_dp8|WT_dp8")]

# inputs the list of the summary files
summary_files <-  list.files(path = "/Users/jakemann/RNAseq_Dec20/m1_MEF_counts/", pattern = "summary$", full.names = TRUE)
summary_files <- summary_files[grep(summary_files, pattern="m1_dp8|WT_dp8")]

#Reads the count files (input_files)
#create a list; each element of a list (named ''sample'' in the following) is a count table
counts_tables <- lapply(input_files, fread, header = FALSE, stringsAsFactors = FALSE, skip=2, select=c(1,7), col.names=c("GeneID","Counts"))

#Reads the summary files (summary_files)
#create a list; each element of a list is a summary table
summary_tables <- lapply(summary_files, read.delim, header = FALSE, stringsAsFactors = FALSE, skip=1, quote = "")

#takes the names of the genes from the counts_tables
genes_names <- counts_tables[[1]]$GeneID
genes_number = length(genes_names)

#take the names of each element (sample) of the list from the input files 
samples_names <- substr(noquote(unlist(lapply(basename(input_files), tools::file_path_sans_ext))) ,1,8)

#assign the names to the elements of the counts_tables list, composed by the counts tables; NOTE: each replicate has its ID
names(counts_tables) <- samples_names

#Creates a single data frame with all the samples as columns, for reporting and clustering purposes -- see heatmaps below
counts_tables_dataframe <- sapply(counts_tables, '[[', 2)
#assignes the genes names to the rows of the counts_tables_dataframe
rownames(counts_tables_dataframe) <- genes_names

#assign the names to the elements of the summary_tables list, composed by the summary tables; NOTE: each replicate has its ID
names(summary_tables) <- samples_names

#take the roots of the samples_names; replicates cannot be distinguished here -- set the name of the control 
name_control <- "WT_dp8"
names_mutants <- setdiff(unique((substr(samples_names,1,6))), name_control)

#Creates the datasets_matrix, containing all the names of the datasets and replicates for reporting purposes
datasets_matrix <- matrix(samples_names, nrow=length(grep(name_control, samples_names)), ncol=length(names_mutants)+1)
colnames(datasets_matrix) <- c(names_mutants, name_control)





####PAIRWISE COMPARISONS ####################################################################################################
# *Set the tresholds ----------------------------------------------------------------------------------------------------

lfc = 1.5 #treshold for the ADJUSTED fold changes
pval = 0.01 #treshold for the ADJUSTED pvalues

num_comparisons=1 #loop's counter initialisation

###COMPARISONS, PLOTS AND TABLES LOOP ======================================================================================

# *Start of the loop ------------------------------------------------------------------------------------------------------
while(num_comparisons <= length(names_mutants)){    

  # **Grabbing the data ----------------------------------------------------------------------------------------------------  
  name_mutant <- names_mutants[num_comparisons]  
  
  #extract the needed samples from the whole list
  assign( paste0("counts_tables_", name_control), counts_tables[grep(name_control, samples_names, value = TRUE)]) #extract the controls counts tables 

  assign( paste0("counts_tables_", name_mutant), counts_tables[grep(name_mutant, samples_names, value = TRUE)]) #extract the mutants counts tables 

  assign( paste0("counts_list_", name_control, "_", name_mutant) , c( get( paste0("counts_tables_", name_control)),  get(paste0("counts_tables_", name_mutant)) )) #merges the two counts tables above in one list

  # **Creating the counts matrix needed for DESeq2 AND ... ---------------------------------------------------------------------  

  #creates the counts matrix: each row is a gene, the first n columns are the counts coming from the control's replicates, the last p columns are the counts from the mutant replicates
  assign( paste0( "columns_list_", name_control, "_", name_mutant), sapply(get( paste0("counts_list_", name_control, "_", name_mutant) ), `[[` , 2) )  #takes one column each two (i.e. only the columns containing the counts) from the counts list

  assign( paste0( "counts_matrix_", name_control, "_", name_mutant),  matrix(unlist( get( paste0( "columns_list_", name_control, "_", name_mutant) ) , use.names = FALSE), ncol = length( get( paste0("counts_list_", name_control, "_", name_mutant) ) ) )  )#convert the list into a matrix, for convenience

  assign( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names"), get(  paste0( "counts_matrix_", name_control, "_", name_mutant) ) )  #the counts matrix with names is also created; at this stage is the same of the counts matrix

  # #filters out low counts
  
  # matrix_to_filter <- get(paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names"))
  # summing_rows <- apply(matrix_to_filter, 1, sum)
  # rows_to_keep <- which(summing_rows > 10)
  # matrix_filtered <- matrix_to_filter[rows_to_keep,]
  # genes_names <- names(matrix_filtered)
  # assign( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names"), matrix_filtered)

  #** ... AND Creating the summary matrix ---------------------------------------------------------------------
  #The summary matrix contains, for each comparison, the general information about the counts statistics
  
  #extracts the needed samples from the whole list
  assign( paste0("summary_tables_", name_control), summary_tables[grep(name_control, samples_names, value = TRUE)]) #extract the controls summary tables 
  
  assign( paste0("summary_tables_", name_mutant), summary_tables[grep(name_mutant, samples_names, value = TRUE)]) #extract the mutants summary tables 
  
  assign( paste0("summary_list_", name_control, "_", name_mutant) , c( get( paste0("summary_tables_", name_control)),  get(paste0("summary_tables_", name_mutant)) )) #merges the two summary tables above in one list
  
  #creates the summary matrix: each row is a gene, the first n columns are the counts coming from the control's replicates, the last p columns are the counts from the mutant replicates
  assign( paste0( "columns_list_", name_control, "_", name_mutant), sapply(get( paste0("summary_list_", name_control, "_", name_mutant) ), `[[` , 2) )  #takes one column each two (i.e. only the columns containing the counts) from the counts list
  
  assign( paste0( "summary_matrix_", name_control, "_", name_mutant),  matrix(unlist( get( paste0( "columns_list_", name_control, "_", name_mutant) ) , use.names = FALSE), ncol = length( get( paste0("summary_list_", name_control, "_", name_mutant) ) ) )  )#convert the list into a matrix, for convenience
  
  assign( paste0( "summary_matrix_", name_control, "_", name_mutant, "_with_names"), get(  paste0( "summary_matrix_", name_control, "_", name_mutant) ) )  #the counts matrix with names is also created; at this stage is the same of the counts matrix
  
  
  col_names <-c(grep(name_control, samples_names, value=TRUE),  grep(name_mutant, samples_names, value = TRUE))  # takes the right names for the columns of the counts matrix, from the sample names 

  dummy<- get( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names") )         #workaround for assigning dynamically colnames and rownames to the counts_matrix - START
  colnames(dummy) <- col_names
  assign(  paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names")  ,  dummy)

  dummy<- get( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names") )
  rownames(dummy) <- genes_names
  assign(  paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names")  ,  dummy)    #workaround for assigning dynamically colnames and rownames to the counts_matrix - END

  dummy<- get( paste0( "summary_matrix_", name_control, "_", name_mutant) )         #workaround for assigning dynamically colnames and rownames to the summary_matrix - START
  colnames(dummy) <- col_names
  rownames(dummy) <- summary_tables[[1]][,1]
  assign(  paste0( "summary_matrix_", name_control, "_", name_mutant)  ,  dummy) #workaround for assigning dynamically colnames and rownames to the summary_matrix - END

  # #Evaluating the number of the reads counted and uncounted by HTSEQ2
  total_uncounted <- apply(get(paste0( "summary_matrix_", name_control, "_", name_mutant))[-1,], 2, sum)
  total_counted <- get(paste0( "summary_matrix_", name_control, "_", name_mutant))[1,]
  total_number <- total_uncounted + total_counted
  fraction_counted <- signif(total_counted/total_number, digits=3)
  void_row<-rep(" ", length(total_counted))
  statistics_matrix <- rbind(total_number, total_counted, total_uncounted,fraction_counted,void_row)
  rownames(statistics_matrix)<-c("TOTAL READS MAPPED", "TOTAL READS COUNTED", "TOTAL READS NON COUNTED", "FRACTION COUNTED" , "DETAILS UNCOUNTED:")

    #merging summary matrix and statistics matrix
  dummy<- rbind(statistics_matrix, get( paste0( "summary_matrix_", name_control, "_", name_mutant) )) 
  assign(  paste0( "summary_matrix_", name_control, "_", name_mutant)  ,  dummy)
  
  #**Defining the "experimental design" -----------------------------------
  comparisons <- sapply(col_names, function(x) substr(x,1,6))  #takes only the first parts of the column names; these are the identifiers of the control and mutant's data, irrespectively of the replicates 

  experimental_design <- data.frame(row.names = col_names, comparisons=comparisons)
  experimental_design$correlated <- c(seq(1: length(grep(name_control, col_names)) ),  seq(1: length(grep(name_mutant, col_names)) ) )
  
  #experimental_design$comparisons<- relevel(experimental_design$comparisons, ref=name_control)
  experimental_design$comparisons<- factor(experimental_design$comparisons, levels=c(name_control, name_mutant))
  
  #**Calling DESeq2 ------------------------

  #Creating the dds data structure, needed from DESEQ2
  dds <- DESeqDataSetFromMatrix(countData= get( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names")) , colData=experimental_design, design=~comparisons)
  
  #Calls DEseq2 on dds and store the results in de
  de<-DESeq(dds)

  #Uses the built-in DESEQ2 results operator for creating a matrix-like structure storing the DE analysis results; the structure is stored in res_raw and subsequently converted in a data frame (res) 
  
  res_raw <-results(de)
  res <- signif(as.data.frame(res_raw), digits = sig_dig) #converts into data frame and sets the number of digits
  res <- cbind(rownames(res), res) #adds one column with the genes ID to the res dataframe (it will be useful later on)
  colnames(res) <- c("ID","Mean of norm counts", "log2 FC (MLE)", "lFC Std Err" , "Wald Stat", "Wald test pval", "BH pval") # sets the column names
  
  
  ##*Plots and Tables -----------------------------------------------------------------------------------------------------------------
  
  #**Assigns dynamic names to the table to export, taking the res data frame defined above ---------------------------------- 
  assign(paste0("results_table_",name_control,"_", name_mutant),  res ) #takes the whole res data frame
  dummy<-merge(annotation_table, get(paste0("results_table_",name_control,"_", name_mutant)), by.x="GeneSymbol", by.y="ID")
  assign(paste0("results_table_",name_control,"_", name_mutant), dummy)
  
  
  assign(paste0("results_table_topscore_",name_control,"_", name_mutant), res[which(abs(res$`log2 FC (MLE)`)>lfc & res$`BH pval` <pval),]) #takes only the rows of the res data frame that have the best log2FC and the best BH pval
  dummy<-merge(annotation_table, get(paste0("results_table_topscore_",name_control,"_", name_mutant)), by.x="GeneSymbol", by.y="ID")
  assign(paste0("results_table_topscore_",name_control,"_", name_mutant), dummy)
  
  
  #**Prints the tables above in .csv---------------------------------------------------------------------------------
  
  #write.table(get(paste0("results_table_topscore_",name_control,"_", name_mutant)), file=paste0("results_table_topscore_",name_control,"_", name_mutant, ".tsv"),quote=F,sep="\t", row.names = FALSE)
  
  #write.table(get(paste0("results_table_",name_control,"_", name_mutant)), file=paste0("results_table_",name_control,"_", name_mutant, ".tsv"), quote=F,sep="\t", row.names = FALSE)
  
  #write.table(get(paste0("counts_matrix_",name_control,"_", name_mutant, "_with_names")), file=paste0("counts_matrix_",name_control,"_", name_mutant, ".tsv"), quote=F,sep="\t", row.names = FALSE)
  
  #**Building the datatables ---------------------------------------------------------------------------------------------------------
  #The datatables are widgets created through the saveWidget function; this can "automatically" be sorted clicking on it --> Useful for having a general overview
  
  #***Summingup datatable ------------------------------------------
  #Builds the datatable containing all the resuls of the DE analysis
  
  #Creates the summingup_matrix, which includes only some columns of the correspondent results_table (more handy for visualisation) 
  assign(paste0("summingup_matrix_",name_control, "_", name_mutant), get(paste0("results_table_",name_control,"_", name_mutant))[, c(1:7,10,11)])
  dummy <- get(paste0("summingup_matrix_",name_control, "_", name_mutant))
  rownames(dummy) <- c()
  assign( paste0("summingup_matrix_",name_control, "_", name_mutant), dummy )
  #Creates a dynamic table (widget) of all the results
  assign(paste0("summingup_datatable_",name_control, "_", name_mutant) , datatable(get(paste0("summingup_matrix_",name_control, "_", name_mutant))) )
  #saves the datatable widget to in the working directory
  saveWidget( get(paste0("summingup_datatable_",name_control, "_", name_mutant)), file= paste0("summingup_datatable_",name_control, "_", name_mutant, ".html") )

  #***Topscores datatable ----------------------------------------- 
  #Builds the matrix containing only the top log2FC (adjusted) top scores (independently on the pvalues)
  assign(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant),  subset(get(paste0("summingup_matrix_",name_control, "_", name_mutant)),  (abs(get(paste0("summingup_matrix_",name_control, "_", name_mutant))[,"log2 FC (MLE)"]) >lfc &  get(paste0("summingup_matrix_",name_control, "_", name_mutant))[,"BH pval"] <pval )  ) ) 
  dummy <- get(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant))
  rownames(dummy) <- c()
  assign( paste0("summingup_matrix_topscores_",name_control, "_", name_mutant), dummy )
  #Creates a dynamic table (widget) of the topscores
  assign(paste0("topscores_datatable_",name_control, "_", name_mutant) , datatable(get(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant))) )
  #saves the datatable widget to in the working directory
  saveWidget( get(paste0("topscores_datatable_",name_control, "_", name_mutant)), file= paste0("topscores_datatable_",name_control, "_", name_mutant, ".html") )

  #**Dispersion plot---------------------------------------------------------------------------------------------
  #This will not be stored or printed; for sanity check purposes only
  plotDispEsts(de, main=paste(name_mutant, " vs ", name_control))

  #**MA plot -----------------------------------------------------------------------------------------------------
  #Plot of the mean of normalised (according to DESEq) counts of the control vs. the log2fold change "corrected as well"
  #***Plot static MA -------------------------------------------------------------------------------------------------- 

  #Creates the dataframe for ggplot
  MA_dataframe <- data.frame(Ln_mean=log(res$`Mean of norm counts`), foldchange = res$`log2 FC (MLE)`, pvaladj=res$`BH pval`)
  rownames(MA_dataframe) <- rownames(res)
  MA_dataframe <- MA_dataframe[which(!is.na(MA_dataframe$foldchange)), ]
  MA_dataframe$Diff_Exp <- rep(0, nrow(MA_dataframe))
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)>=lfc  )] <- "Relevant log2 FC" 
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)>=lfc & MA_dataframe$pvaladj<=pval)] <- "Relevant log2 FC and Pval" 
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)<lfc)] = "Non significant" 

  #Creates the ggplot
  r <-ggplot(MA_dataframe, aes(x=Ln_mean, y=foldchange, text=rownames(MA_dataframe)))+
    geom_point(aes(colour= Diff_Exp), size=.5)+
    geom_hline(yintercept=0, linetype=1, color="green") + geom_hline(yintercept=lfc,linetype=3, color="green") + geom_hline(yintercept=-lfc, linetype=3, color="green")+
    scale_colour_manual(values = c("Relevant log2 FC and Pval" ="red", "Non significant" = "black", "Relevant log2 FC" ="blue"))+
    xlab("ln mean of norm. counts") + ylab("log2 fold change")+ scale_x_continuous(labels = function(x)as.integer(exp(x)))+
    #+ylim(-4, 4)
    labs(aesthetic='custom text')+
    ggtitle(paste("MA plot", name_control, "vs.", name_mutant))

  #Saves the plot in a variable
  assign(paste("static", "MAplot", name_control, name_mutant, sep = "_"), r)

  #Saves the pdf of the plot in the OUTPUT directory
  pdf(file= paste("static", "MAplot", name_control, name_mutant, ".pdf", sep = "_"))
  print(r)
  dev.off()

  #***Plot dynamic MA -------------------------------------------------------------------------------------------------- 

  #Creates the plot
  s<- ggplotly(r, tooltip=c("text", "x", "y") )

  #SAves the plot in a variable
  assign(paste("dynamic", "MAplot", name_control, name_mutant, sep = "_"), s)

  #Saves the WIDGET of the plot in the OUTPUT directory
  print(s)
  saveWidget(s, file= paste0("dynamic_MAplot",name_control, "_", name_mutant, ".html") )

  #**Volcano Plots --------------------------------------------------------------

  #***Plot static volcano--------------------------------------------------------

  #creates a data frame with some of the columns taken from res which, in turn, summarises the DESEq2 results
  tab = data.frame(logFC = res$`log2 FC (MLE)`, negLogPval = -log10(res$`BH pval`))
  rownames(tab) <- rownames(res)

  #Identifies the DE genes
  candidate_results <- subset(res, (abs(res$`log2 FC (MLE)`) > lfc & res$`BH pval` < pval))
  assign( paste0("candidate_results_tab_",name_control,"_",name_mutant), subset(tab, (abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval))) )

  #Identifies the not DE genes
  non_candidate_results <- subset(res, (abs(res$`log2 FC (MLE)`) <= lfc | res$`BH pval` >= pval))
  assign(paste0("non_candidate_results_tab_",name_control,"_",name_mutant), subset(tab, (abs(tab$logFC) <= lfc | tab$negLogPval <= -log10(pval))) )

  #Mark DE and non DE genes in the dataframe 
  dummy <- get(paste0("non_candidate_results_tab_",name_control,"_",name_mutant))
  dummy$Diff_Exp <- "DE -"
  assign(paste0("non_candidate_results_tab_",name_control,"_",name_mutant), dummy)

  dummy <- get(paste0("candidate_results_tab_",name_control,"_",name_mutant))
  if(nrow(dummy)>0){dummy$Diff_Exp <- "DE +"}
  assign(paste0("candidate_results_tab_",name_control,"_",name_mutant), dummy)

  #merge the "candidate" and "non candidate" dataframes
  assign(paste0("results_tab_",name_control,"_",name_mutant), rbind(get(paste0("candidate_results_tab_",name_control,"_",name_mutant)), get(paste0("non_candidate_results_tab_",name_control,"_",name_mutant)) ))

  #builds the ggplot
  h<-ggplot( get(paste0("results_tab_",name_control,"_",name_mutant)), aes(x=logFC, y=negLogPval, text=rownames(get(paste0("results_tab_",name_control,"_",name_mutant))) ) )+
   geom_point(aes(colour= Diff_Exp), size=.5)+
   geom_hline(yintercept=-log10(pval), linetype=3, color="green") + geom_vline(xintercept=-c(-lfc, lfc), linetype=3, color="blue")+
   scale_colour_manual(values = c("DE +" ="red", "DE -" = "black"))+
   xlab("log2 fold change") + ylab("-log10 pvalue")+ 
   ggtitle(paste("Volcano plot", name_control, "vs.", name_mutant))

  #Saves the plot in a variable
  assign(paste("static", "Vplot", name_control, name_mutant, sep = "_"), h)

  #Saves the pdf of the plot in the OUTPUT directory
  pdf(file= paste("static", "Vplot", name_control, name_mutant, ".pdf", sep = "_"))
  print(h)
  dev.off()

  #***Plot dynamic volcano----------------------------------------------------------------------------------------------------------

  #Creates the plot
  k<- ggplotly(h, tooltip=c("text", "x", "y") )

  #Saves the plot in a variable
  assign(paste("dynamic", "Vplot", name_control, name_mutant, sep = "_"), k)

  print(k)

  #Saves the WIDGET of the plot in the OUTPUT directory
  saveWidget(k, file= paste0("dynamic_Vplot",name_control, "_", name_mutant, ".html") )

  #Updates the loop counter
  print(num_comparisons)
  num_comparisons= num_comparisons +1
} 
#*End of the loop --------------------------------------------


# #PRODUCES ADDITIONAL TABLES =================================================

#**Produces the genes_lenghts  ---------------------------------------------------------------
#takes the genes lengths from the first feature counts input file and creates the genes_lenghts table
feature_counts_table <- fread(input_files[[1]])
genes_lenghts <- as.matrix(feature_counts_table$Length)
rownames(genes_lenghts) <- feature_counts_table$Geneid
colnames(genes_lenghts) <- "Lenght"

#**Produces the annotation_table_with_length ---------------------------------------------------------------
annotation_table_with_length <- merge(annotation_table, genes_lenghts, all.x=T, by.x="GeneSymbol", by.y="row.names")

#** Raw counts, CPM, TPM  ---------------------------------------------------------------

# produces the raw_counts matrix
# merges the raw_counts matrix (all the raw counts for each sample) with the genes_lenghts_table
raw_counts <- (merge(annotation_table_with_length, counts(de), by.x="GeneSymbol", by.y="row.names", all.x=T))
write.csv(raw_counts, file="raw_counts.csv", row.names=FALSE)

# produces the Raw Counts Normalised (DESeq2 normalisation) table 
raw_counts_normalised <- (merge(annotation_table_with_length, counts(de, normalized=T), by.x="GeneSymbol", by.y="row.names", all.x=T))
write.csv(raw_counts_normalised, file="raw_counts_normalised.csv", row.names=FALSE)

# computes the CPM on the raw counts
CPM_working = subset(raw_counts, select = c(7:ncol(raw_counts)))
CPM_working$sum <- rowSums(CPM_working)
CPM <- apply(raw_counts[,c(7:ncol(raw_counts))],2, function(x){x*10^6/CPM_working$sum})
CPM <- cbind(raw_counts[,c(1:6)],CPM)
write.csv(CPM, file="raw_counts_CPM.csv", row.names=FALSE)

# computes the TPM
RPK <-  (raw_counts[,c(7:ncol(raw_counts))])/(raw_counts$Lenght/1000)  #<- Reads Per Kilobase (Normalises the counts for the genes length, expressed in kilobases)
Scaling_factor <- apply(RPK,2,sum)/10^6
TPM <- sweep(RPK, 2, Scaling_factor, FUN = '/')
TPM <- cbind(raw_counts[,c(1:6)],TPM)
write.csv(TPM, file="raw_counts_TPM.csv", row.names=FALSE)

#** Produces the results_tables  ---------------------------------------------------------------

#computes the average CPM for controls and mutants
assign(paste0("average_",name_control), apply(CPM[,grep(colnames(CPM), pattern=name_control)],1,mean ) )
dummy<-as.data.frame(get(paste0("average_",name_control)))
colnames(dummy) <- paste0("Average CPM ",name_control)
rownames(dummy) <- CPM$gene_id
assign(paste0("average_",name_control), dummy)
#
assign(paste0("average_",names_mutants), apply(CPM[,grep(colnames(CPM), pattern=names_mutants)],1,mean ) )
dummy<-as.data.frame(get(paste0("average_",names_mutants)))
colnames(dummy) <- paste0("Average CPM ",names_mutants)
rownames(dummy) <- CPM$gene_id
assign(paste0("average_",names_mutants), dummy)
#
#merges the averages CPMs tables with the results table and the genes_length table
dummy<- merge(get(paste0("average_",name_control)),  get(paste0("average_",names_mutants)), by="row.names") 
rownames(dummy) <- dummy$Row.names
dummy<- dummy[,-1]
#
assign(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM"), merge( get(paste0("results_table_",name_control,"_", names_mutants)), dummy, by.y="row.names", by.x="gene_id") ) 
assign(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM"), merge( get(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM")), genes_lenghts, by.x="GeneSymbol", by.y="row.names", all.x=T ) )
write.csv(get(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM")), file=paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM.csv"), row.names = FALSE)
#
assign(paste0("results_table_topscore_", name_control,"_", names_mutants, "_", "CPM"), merge( get(paste0("results_table_topscore_",name_control,"_", names_mutants)), dummy, by.y="row.names", by.x="gene_id") ) 
assign(paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM"), merge( get(paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM")), genes_lenghts, by.x="GeneSymbol", by.y="row.names", all.x=T ) )
write.csv(get(paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM")), file=paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM.csv"), row.names = FALSE)

#**Filters the counts matrix  according to the CPM ------------------------

# # Filters the counts matrix eliminating the rows where at least one element violates the condition (low counts threshold)

count_zeroes<- function(x){length(which(x<=.5))}
numberofzeroes <- apply(CPM[,c(7:ncol(CPM))], 1, count_zeroes)
CPM_filtered <- CPM[which(numberofzeroes<=5),]
# write.csv(counts_matrix_cpm_filtered, file="cpm_counts_filtered.csv")
# 
#Filters the results_mtrx with the same criteria above 
results_mtrx <- get(paste0("results_table_",name_control,"_", name_mutant, "_CPM"))
results_mtrx_filtered <- results_mtrx[which(results_mtrx$gene_id %in% CPM_filtered$gene_id), ]
#write.csv(results_mtrx, file="results_table.csv", row.names = FALSE)
write.csv(results_mtrx_filtered, file="results_table_CPM_filtered.csv", row.names = FALSE)
#Filters the results_mtrx with the same criteria above 
results_mtrx <- get(paste0("results_table_",name_control,"_", name_mutant, "_CPM"))
results_mtrx_filtered <- results_mtrx[which(results_mtrx$gene_id %in% CPM_filtered$gene_id), ]
#write.csv(results_mtrx, file="results_table.csv", row.names = FALSE)
write.csv(results_mtrx_filtered, file="results_table_CPM_filtered.csv", row.names = FALSE)

results_mtrx_topscore <- get(paste0("results_table_topscore_",name_control,"_", name_mutant, "_CPM"))
results_mtrx_topscore_filtered <- results_mtrx_topscore[which(results_mtrx_topscore$gene_id %in% CPM_filtered$gene_id), ]
write.csv(results_mtrx_topscore_filtered, file="results_table_CPM_topscore_filtered.csv", row.names = FALSE)

#CREATES A HEATMAP =================================================
library(gplots)
#class(CPM_filtered) <- "numeric"
#CPM_filtered_resorted <-CPM_filtered[order(CPM_filtered[,7], decreasing = TRUE),]
#class(CPM_filtered_resorted) <- "numeric"
CPM_filtered_heat <- as.matrix(CPM_filtered[,c(7:ncol(CPM))])
class(CPM_filtered_heat) <- "numeric"

CPM_filtered_heat_sorted <-CPM_filtered_heat[order(CPM_filtered_heat[,1], decreasing = TRUE),]

pdf(file="m1_dp8_hm.pdf")
heatmap.2(CPM_filtered_heat_sorted[c(1:7000),], distfun=function(x) dist(x, method="minkowski"), hclustfun=function(x) hclust(x, method="ward.D2"), scale="row", trace = 'none', labRow = FALSE, dendrogram="column", margins=c(8,1), cexCol = .75)
dev.off()



# #CREATES THE TABLE FOR GSEA =====================================================
# #The data are taken from the res_raw table.
GSEA_table <- data.frame(Sign= sign(res_raw$log2FoldChange), pval=(res_raw$padj),stringsAsFactors = FALSE)
GSEA_table$metric <- -log10(GSEA_table$pval)/GSEA_table$Sign
rownames(GSEA_table) <- rownames(res_raw)

GSEA_input_ranked_table <- cbind(rownames(GSEA_table), GSEA_table$metric)
colnames(GSEA_input_ranked_table) <- cbind("Gene name", "Metric")
GSEA_input_ranked_table<-GSEA_input_ranked_table[-which(is.na(GSEA_input_ranked_table[,"Metric"])),]

write.table(GSEA_input_ranked_table, file=paste0("GSEA_input_ranked_table_",name_control,"_", name_mutant, ".rnk"), quote=F,sep="\t", row.names = FALSE)




## further analysis, interpretation, and figures =====================================================
require(dplyr)


vplot_tab <- merge(results_table_WT_dp8_m1_dp8_CPM, annotation_table, by="gene_id")
vplot_tab <- vplot_tab %>% rename("BH_pval" = "BH pval")
vplot_tab <- vplot_tab %>% rename("log2FC" = "log2 FC (MLE)")

########## make volcano plot 
library(ggplot2)
library(ggrepel)
library(dplyr)
library(pheatmap)

vplot_tab$neglog_p = -log10(vplot_tab$BH_pval)
vplot_tab <- vplot_tab[complete.cases(vplot_tab), ]

############  edit formatting of signficance for labelleing

vplot_tab$significant = ifelse(vplot_tab$neglog_p > 2 & vplot_tab$log2FC <=-1.5 | vplot_tab$neglog_p > 2 & vplot_tab$log2FC>=1.5, "sig", "not")
vplot_tab_label1 = subset(vplot_tab, neglog_p > 80)
vplot_tab_label2 = subset(vplot_tab, neglog_p > 50)
vplot_tab_label2 <- subset(vplot_tab_label2, log2FC <=-6 | log2FC>=6)
vplot_tab_label3 = subset(vplot_tab, neglog_p > 10 & log2FC <=-10 | neglog_p > 10 & log2FC >=6)
vplot_tab_label4 = subset(vplot_tab, neglog_p > 50 & vplot_tab$log2FC <=-3 | vplot_tab$neglog_p > 40 & vplot_tab$log2FC>=1.5)
vplot_tab_label_final <- rbind(vplot_tab_label1, vplot_tab_label2)
vplot_tab_label_final <- rbind(vplot_tab_label_final, vplot_tab_label3)
vplot_tab_label_final <- rbind(vplot_tab_label_final, vplot_tab_label4)
vplot_tab_label_final <- vplot_tab_label_final %>% distinct(GeneSymbol.x, .keep_all = TRUE)

############

m1_dp8_vol <- ggplot(data=vplot_tab, aes(x=log2FC, y=neglog_p, colour=significant)) + geom_point(alpha=0.7, size=1.75) + xlab("Log2 Fold change") + ylab("-log10 p-value") + theme_classic() + theme(legend.position="none") + geom_text_repel(data = vplot_tab_label_final, aes(label = GeneSymbol.x), color="black",size = 3, key_glyph = "point") + theme(plot.title = element_text(hjust = 0.2)) + ggtitle("m1_dp8") + scale_colour_manual(values = c("#999999", "#D55E00")) + scale_y_continuous(labels = scales::comma, expand = c(0,5), breaks = seq(0, 150, 50), limits=c(0, 150))
m1_dp8_vol

pdf(file="m1_dp8_vol.pdf",width=4,height=6)
m1_dp8_vol
dev.off()

############

######################## make heatmaps

##### hm of significantly differentially expressed genes

vplot_tab_hm <- vplot_tab
vplot_tab_hm$significant = ifelse(vplot_tab$BH_pval <=.0001 & vplot_tab$log2FC <=-3 | vplot_tab$log2FC>=2.2, "sig", "not")
vplot_tab_hm$sig2 = ifelse(vplot_tab$BH_pval <=.01, "sig", "not")


norm_counts <- as.data.frame(counts(de, normalized=T))
norm_counts$GeneSymbol <- rownames(norm_counts)
numberofzeroes <- apply(norm_counts[,c(1:ncol(norm_counts))], 1, count_zeroes)
norm_counts_filtered <- norm_counts[which(numberofzeroes<=5),]
norm_counts_filtered$GeneSymbol.x <- rownames(norm_counts_filtered)

hm_tab <- merge(norm_counts_filtered, vplot_tab_hm, by="GeneSymbol.x")
hm_tab <- hm_tab[complete.cases(hm_tab), ]
write.table(hm_tab, file="norm_counts_gsea.csv",sep=",")

hm_tab_sig = subset(hm_tab, significant=="sig")

hm_sig <- pheatmap(hm_tab_sig[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", cutree_rows = 7, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, main = "Significantly differentially expressed genes")

pdf(file="m1_dp8_hm_sig.pdf",width=8,height=10)
hm_sig
dev.off()

### make table for comparison hm
hm_tab_m1_dp8 = subset(hm_tab, select=c("gene_id","WT_dp8_A","WT_dp8_B","WT_dp8_C","m1_dp8_A","m1_dp8_B","m1_dp8_C","log2FC","BH_pval","neglog_p","significant","sig2","GeneSymbol"))
hm_tab_m1_dp8 <- hm_tab_m1_dp8 %>% rename("WT_dp8_A_m1" = "WT_dp8_A")
hm_tab_m1_dp8 <- hm_tab_m1_dp8 %>% rename("WT_dp8_B_m1" = "WT_dp8_B")
hm_tab_m1_dp8 <- hm_tab_m1_dp8 %>% rename("WT_dp8_C_m1" = "WT_dp8_C")
hm_tab_m1_dp8 <- hm_tab_m1_dp8 %>% rename("log2FC_m1dp8" = "log2FC")
hm_tab_m1_dp8 <- hm_tab_m1_dp8 %>% rename("BH_pval_m1dp8" = "BH_pval")
hm_tab_m1_dp8 <- hm_tab_m1_dp8 %>% rename("neglog_p_m1dp8" = "neglog_p")
hm_tab_m1_dp8 <- hm_tab_m1_dp8 %>% rename("significant_m1dp8" = "significant")
hm_tab_m1_dp8 <- hm_tab_m1_dp8 %>% rename("sig2_m1dp8" = "sig2")
write.table(hm_tab_m1_dp8, file="hm_tab_m1_dp8.csv",sep=",")


##### hm of adipogenesis-related genes

hm_tab_adip = subset(hm_tab, GeneSymbol=="Lep" | GeneSymbol=="Adipoq" | GeneSymbol=="Cd36" | GeneSymbol=="Pparg" | GeneSymbol=="Glut4" | GeneSymbol=="Fasn"| GeneSymbol=="Plin1"| GeneSymbol=="Plin2"| GeneSymbol=="Plin4"| GeneSymbol=="Fabp4"| GeneSymbol=="Isnr"| GeneSymbol=="Lpl"| GeneSymbol=="Agpat2"| GeneSymbol=="Bscl2"| GeneSymbol=="Cidec"| GeneSymbol=="Cebpa"| GeneSymbol=="Acaca"| GeneSymbol=="Ppargc1a"| GeneSymbol=="Ppargc1b"| GeneSymbol=="Slc2a4" )

rownames(hm_tab_adip) = hm_tab_adip$GeneSymbol
hm_adip_annot = data.frame("Sig" = hm_tab_adip$sig2)
rownames(hm_adip_annot) = rownames(hm_tab_adip)

hm_adip <- pheatmap(hm_tab_adip[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_adip$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_adip_annot, legend_labels = "Relative expression", main = "Adipogenesis-related genes")

pdf(file="m1_dp8_hm_adip.pdf",width=5,height=6)
hm_adip
dev.off()

##### hm of ISR-related genes

hm_tab_ISR = subset(hm_tab, GeneSymbol=="Atf4" | GeneSymbol=="Atf5" |GeneSymbol=="Atf6" | GeneSymbol=="Xbp1" | GeneSymbol=="Gdf15" | GeneSymbol=="Fgf21" | GeneSymbol=="Trib3"| GeneSymbol=="Eif2ak4"| GeneSymbol=="Ddit3"| GeneSymbol=="Gadd34"| GeneSymbol=="Perk"| GeneSymbol=="Eif2ak1"| GeneSymbol=="Hif1a")
hm_tab_ISR <- hm_tab_ISR %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_ISR) = hm_tab_ISR$GeneSymbol
hm_ISR_annot = data.frame("Sig" = hm_tab_ISR$sig2)
rownames(hm_ISR_annot) = rownames(hm_tab_ISR)

hm_ISR <- pheatmap(hm_tab_ISR[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_ISR$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_ISR_annot, main = "ISR genes")

pdf(file="m1_dp8_hm_ISR.pdf",width=5,height=6)
hm_ISR
dev.off()

##### hm of mitochondrial-related genes

hm_tab_mito = subset(hm_tab, GeneSymbol=="Mfn1" | GeneSymbol=="mfn1" | GeneSymbol=="Opa1" | GeneSymbol=="Fis1" | GeneSymbol=="Tomm20" | GeneSymbol=="Ppargc1a"| GeneSymbol=="Ppargc1b"| GeneSymbol=="Cs" | GeneSymbol=='mt-Rnr1' | GeneSymbol=='mt-Rnr2' | GeneSymbol=='mt-Tl1' | GeneSymbol=='mt-Nd1' | GeneSymbol=='mt-Ti' | GeneSymbol=='mt-Tq' | GeneSymbol=='mt-Tm' | GeneSymbol=='mt-Nd2' | GeneSymbol=='mt-Tw' | GeneSymbol=='mt-Ta' | GeneSymbol=='mt-Tn' | GeneSymbol=='mt-Tc' | GeneSymbol=='mt-Ty' | GeneSymbol=='mt-Co1' | GeneSymbol=='mt-Ts1' | GeneSymbol=='mt-Td' | GeneSymbol=='mt-Co2' | GeneSymbol=='mt-Atp8' | GeneSymbol=='mt-Atp6' | GeneSymbol=='mt-Co3' | GeneSymbol=='mt-Tg' | GeneSymbol=='mt-Nd3' | GeneSymbol=='mt-Tr' | GeneSymbol=='mt-Nd4' | GeneSymbol=='mt-Th' | GeneSymbol=='mt-Ts2' | GeneSymbol=='mt-Tl2' | GeneSymbol=='mt-Nd5' | GeneSymbol=='mt-Nd6' | GeneSymbol=='mt-Te' | GeneSymbol=='mt-Cytb' | GeneSymbol=='mt-Tt' | GeneSymbol=='mt-Tp' | GeneSymbol=='mt-Nd4l' | GeneSymbol=='Sdha' | GeneSymbol=="Prkn" | GeneSymbol=="Pink1" | GeneSymbol=="Bnip3" | GeneSymbol=="Nrf1" | GeneSymbol==""| GeneSymbol=="Mff"| GeneSymbol=="Cycs")
hm_tab_mito <- hm_tab_mito %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_mito) = hm_tab_mito$GeneSymbol
hm_mito_annot = data.frame("Sig" = hm_tab_mito$sig2)
rownames(hm_mito_annot) = rownames(hm_tab_mito)

hm_mito <- pheatmap(hm_tab_mito[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_mito$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial function-related genes")

pdf(file="m1_dp8_hm_mito.pdf",width=5,height=6)
hm_mito
dev.off()

##### hm of inflammation-related genes

hm_tab_inflam = subset(hm_tab, GeneSymbol=='Ifng' |GeneSymbol=='Cd68' |GeneSymbol=='Cd11b' |GeneSymbol=='Itgam' |GeneSymbol=='Ccl2' |GeneSymbol=='Cd4' |GeneSymbol=='Cd3g' |GeneSymbol=='Cd8a' |GeneSymbol=='Tnf' |GeneSymbol=='Il1b' |GeneSymbol=='Il4' |GeneSymbol=='Il13' |GeneSymbol=='Il10' |GeneSymbol=='Ptprc' |GeneSymbol=='Adgre1' |GeneSymbol=='Il6' |GeneSymbol=='Mif' |GeneSymbol=='Tlr4')
hm_tab_inflam <- hm_tab_inflam %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_inflam) = hm_tab_inflam$GeneSymbol
hm_inflam_annot = data.frame("Sig" = hm_tab_inflam$sig2)
rownames(hm_inflam_annot) = rownames(hm_tab_inflam)

hm_inflam <- pheatmap(hm_tab_inflam[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_inflam$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_inflam_annot, legend_labels = "Relative expression", main = "Inflammatory genes")

pdf(file="m1_dp8_hm_inflam.pdf",width=5,height=6)
hm_inflam
dev.off()


##### hm of fibrosis-related genes

hm_tab_fibros = subset(hm_tab, GeneSymbol=='Tgfb1' |GeneSymbol=='Sod1' |GeneSymbol=='Hif1a' |GeneSymbol=='Pdgfa' |GeneSymbol=='Gtf2ird1' |GeneSymbol=='Inhba' |GeneSymbol=='Rock1')
hm_tab_fibros <- hm_tab_fibros %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_fibros) = hm_tab_fibros$GeneSymbol
hm_fibros_annot = data.frame("Sig" = hm_tab_fibros$sig2)
rownames(hm_fibros_annot) = rownames(hm_tab_fibros)

hm_fibros <- pheatmap(hm_tab_fibros[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_fibros$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_fibros_annot, legend_labels = "Relative expression", main = "Fibrosis-related genes")

pdf(file="m1_dp8_hm_fibros.pdf",width=5,height=6)
hm_fibros
dev.off()



##### hm of hallmark adipogenesis genes

hm_tab_hall_adip1 = subset(hm_tab, GeneSymbol=='Abca1' |GeneSymbol=='Abcb8' |GeneSymbol=='Acaa2' |GeneSymbol=='Acadl' |GeneSymbol=='Acadm' |GeneSymbol=='Acads' |GeneSymbol=='Acly' |GeneSymbol=='Aco2' |GeneSymbol=='Acox1' |GeneSymbol=='Adcy6' |GeneSymbol=='Adig' |GeneSymbol=='Adipoq' |GeneSymbol=='Adipor2' |GeneSymbol=='Agpat3' |GeneSymbol=='Aifm1' |GeneSymbol=='Ak2' |GeneSymbol=='Aldh2' |GeneSymbol=='Aldoa' |GeneSymbol=='Angpt1' |GeneSymbol=='Angptl4' |GeneSymbol=='Aplp2' |GeneSymbol=='Apoe' |GeneSymbol=='Araf' |GeneSymbol=='Arl4A' |GeneSymbol=='Atl2' |GeneSymbol=='Atp1B3' |GeneSymbol=='Atp5Po' |GeneSymbol=='Baz2A' |GeneSymbol=='Bckdha' |GeneSymbol=='Bcl2L13' |GeneSymbol=='Bcl6' |GeneSymbol=='C3' |GeneSymbol=='Cat' |GeneSymbol=='Cavin1' |GeneSymbol=='Cavin2' |GeneSymbol=='Ccng2' |GeneSymbol=='Cd151' |GeneSymbol=='Cd302' |GeneSymbol=='Cd36' |GeneSymbol=='Cdkn2C' |GeneSymbol=='Chchd10' |GeneSymbol=='Chuk' |GeneSymbol=='Cidea' |GeneSymbol=='Cmbl' |GeneSymbol=='Cmpk1' |GeneSymbol=='Col15A1' |GeneSymbol=='Col4A1' |GeneSymbol=='Coq3' |GeneSymbol=='Coq5' |GeneSymbol=='Coq9' |GeneSymbol=='Cox6A1' |GeneSymbol=='Cox7B' |GeneSymbol=='Cox8A' |GeneSymbol=='Cpt2' |GeneSymbol=='Crat' |GeneSymbol=='Cs' |GeneSymbol=='Cyc1' |GeneSymbol=='Cyp4B1' |GeneSymbol=='Dbt' |GeneSymbol=='Ddt' |GeneSymbol=='Decr1' |GeneSymbol=='Dgat1' |GeneSymbol=='Dhcr7' |GeneSymbol=='Dhrs7' |GeneSymbol=='Dhrs7B' |GeneSymbol=='Dlat' |GeneSymbol=='Dld' |GeneSymbol=='Dnajb9' |GeneSymbol=='Dnajc15' |GeneSymbol=='Dram2' |GeneSymbol=='Ech1' |GeneSymbol=='Echs1' |GeneSymbol=='Elmod3' |GeneSymbol=='Elovl6' |GeneSymbol=='Enpp2' |GeneSymbol=='Ephx2' |GeneSymbol=='Esrra' |GeneSymbol=='Esyt1' |GeneSymbol=='Etfb' |GeneSymbol=='Fabp4' |GeneSymbol=='Fah' |GeneSymbol=='Fzd4' |GeneSymbol=='G3Bp2' |GeneSymbol=='Gadd45A' |GeneSymbol=='Gbe1' |GeneSymbol=='Ghitm' |GeneSymbol=='Gpam' |GeneSymbol=='Gpat4' |GeneSymbol=='Gpd2' |GeneSymbol=='Gphn' |GeneSymbol=='Gpx3' |GeneSymbol=='Gpx4' |GeneSymbol=='Grpel1' |GeneSymbol=='Hadh' |GeneSymbol=='Hibch' |GeneSymbol=='Hspb8' |GeneSymbol=='Idh1' |GeneSymbol=='Idh3A' |GeneSymbol=='Idh3G' |GeneSymbol=='Ifngr1' |GeneSymbol=='Immt' |GeneSymbol=='Itga7' |GeneSymbol=='Itih5' |GeneSymbol=='Itsn1' |GeneSymbol=='Jagn1' |GeneSymbol=='Lama4' |GeneSymbol=='Lep' |GeneSymbol=='Lifr' |GeneSymbol=='Lipe' |GeneSymbol=='Lpcat3' |GeneSymbol=='Lpl' |GeneSymbol=='Ltc4S' |GeneSymbol=='Map4K3' |GeneSymbol=='Mccc1' |GeneSymbol=='Mdh2' |GeneSymbol=='Me1' |GeneSymbol=='Mgll' |GeneSymbol=='Mgst3' |GeneSymbol=='Miga2' |GeneSymbol=='Mrap' |GeneSymbol=='Mrpl15' |GeneSymbol=='Mtarc2')

hm_tab_hall_adip2 = subset(hm_tab, GeneSymbol=='Mtch2' |GeneSymbol=='Mylk' |GeneSymbol=='Nabp1' |GeneSymbol=='Ndufa5' |GeneSymbol=='Ndufab1' |GeneSymbol=='Ndufb7' |GeneSymbol=='Ndufs3' |GeneSymbol=='Nkiras1' |GeneSymbol=='Nmt1' |GeneSymbol=='Omd' |GeneSymbol=='Orm1' |GeneSymbol=='Pdcd4' |GeneSymbol=='Pemt' |GeneSymbol=='Pex14' |GeneSymbol=='Pfkfb3' |GeneSymbol=='Pfkl' |GeneSymbol=='Pgm1' |GeneSymbol=='Phldb1' |GeneSymbol=='Phyh' |GeneSymbol=='Pim3' |GeneSymbol=='Plin2' |GeneSymbol=='Por' |GeneSymbol=='Pparg' |GeneSymbol=='Ppm1B' |GeneSymbol=='Ppp1R15B' |GeneSymbol=='Prdx3' |GeneSymbol=='Preb' |GeneSymbol=='Ptcd3' |GeneSymbol=='Ptger3' |GeneSymbol=='Qdpr' |GeneSymbol=='Rab34' |GeneSymbol=='Reep5' |GeneSymbol=='Reep6' |GeneSymbol=='Retn' |GeneSymbol=='Retsat' |GeneSymbol=='Riok3' |GeneSymbol=='Rmdn3' |GeneSymbol=='Rnf11' |GeneSymbol=='Rreb1' |GeneSymbol=='Rtn3' |GeneSymbol=='Samm50' |GeneSymbol=='Scarb1' |GeneSymbol=='Scp2' |GeneSymbol=='Sdhb' |GeneSymbol=='Sdhc' |GeneSymbol=='Slc19A1' |GeneSymbol=='Slc1A5' |GeneSymbol=='Slc25A1' |GeneSymbol=='Slc25A10' |GeneSymbol=='Slc27A1' |GeneSymbol=='Slc5A6' |GeneSymbol=='Slc66A3' |GeneSymbol=='Sncg' |GeneSymbol=='Sod1' |GeneSymbol=='Sorbs1' |GeneSymbol=='Sowahc' |GeneSymbol=='Sparcl1' |GeneSymbol=='Sqor' |GeneSymbol=='Sspn' |GeneSymbol=='Stat5A' |GeneSymbol=='Stom' |GeneSymbol=='Suclg1' |GeneSymbol=='Sult1A1' |GeneSymbol=='Taldo1' |GeneSymbol=='Tank' |GeneSymbol=='Tkt' |GeneSymbol=='Tob1' |GeneSymbol=='Tst' |GeneSymbol=='Ubc' |GeneSymbol=='Ubqln1' |GeneSymbol=='Uck1' |GeneSymbol=='Ucp2' |GeneSymbol=='Uqcr10' |GeneSymbol=='Uqcr11' |GeneSymbol=='Uqcrc1' |GeneSymbol=='Uqcrq' |GeneSymbol=='Vegfb' |GeneSymbol=='Ywhag')

hm_tab_hall_adip <- rbind(hm_tab_hall_adip1, hm_tab_hall_adip2)

hm_tab_hall_adip <- hm_tab_hall_adip %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_adip) = hm_tab_hall_adip$GeneSymbol
hm_hall_adip_annot = data.frame("Sig" = hm_tab_hall_adip$sig2)
rownames(hm_hall_adip_annot) = rownames(hm_tab_hall_adip)

hm_hall_adip <- pheatmap(hm_tab_hall_adip[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_adip$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_adip_annot, legend_labels = "Relative expression", main = "HALLMARK_ADIPOGENESIS genes")

pdf(file="m1_dp8_hm_hall_adip.pdf",width=6,height=12)
hm_hall_adip
dev.off()


##### hm of hallmark oxphos genes

hm_tab_hall_oxphos1 = subset(hm_tab, GeneSymbol=='Abcb7' |GeneSymbol=='Acaa1' |GeneSymbol=='Acaa2' |GeneSymbol=='Acadm' |GeneSymbol=='Acadsb' |GeneSymbol=='Acadvl' |GeneSymbol=='Acat1' |GeneSymbol=='Aco2' |GeneSymbol=='Afg3L2' |GeneSymbol=='Aifm1' |GeneSymbol=='Alas1' |GeneSymbol=='Aldh6A1' |GeneSymbol=='Atp1B1' |GeneSymbol=='Atp5F1A' |GeneSymbol=='Atp5F1B' |GeneSymbol=='Atp5F1C' |GeneSymbol=='Atp5F1D' |GeneSymbol=='Atp5F1E' |GeneSymbol=='Atp5Mc1' |GeneSymbol=='Atp5Mc2' |GeneSymbol=='Atp5Mc3' |GeneSymbol=='Atp5Me' |GeneSymbol=='Atp5Mf' |GeneSymbol=='Atp5Mg' |GeneSymbol=='Atp5Pb' |GeneSymbol=='Atp5Pd' |GeneSymbol=='Atp5Pf' |GeneSymbol=='Atp5Po' |GeneSymbol=='Atp6Ap1' |GeneSymbol=='Atp6V0B' |GeneSymbol=='Atp6V0C' |GeneSymbol=='Atp6V0E1' |GeneSymbol=='Atp6V1C1' |GeneSymbol=='Atp6V1D' |GeneSymbol=='Atp6V1E1' |GeneSymbol=='Atp6V1F' |GeneSymbol=='Atp6V1G1' |GeneSymbol=='Atp6V1H' |GeneSymbol=='Bax' |GeneSymbol=='Bckdha' |GeneSymbol=='Bdh2' |GeneSymbol=='Casp7' |GeneSymbol=='Cox10' |GeneSymbol=='Cox11' |GeneSymbol=='Cox15' |GeneSymbol=='Cox17' |GeneSymbol=='Cox4I1' |GeneSymbol=='Cox5A' |GeneSymbol=='Cox5B' |GeneSymbol=='Cox6A1' |GeneSymbol=='Cox6B1' |GeneSymbol=='Cox6C' |GeneSymbol=='Cox7A2' |GeneSymbol=='Cox7A2L' |GeneSymbol=='Cox7B' |GeneSymbol=='Cox7C' |GeneSymbol=='Cox8A' |GeneSymbol=='Cpt1A' |GeneSymbol=='Cs' |GeneSymbol=='Cyb5A' |GeneSymbol=='Cyb5R3' |GeneSymbol=='Cyc1' |GeneSymbol=='Cycs' |GeneSymbol=='Decr1' |GeneSymbol=='Dlat' |GeneSymbol=='Dld' |GeneSymbol=='Dlst' |GeneSymbol=='Ech1' |GeneSymbol=='Echs1' |GeneSymbol=='Eci1' |GeneSymbol=='Etfa' |GeneSymbol=='Etfb' |GeneSymbol=='Etfdh' |GeneSymbol=='Fdx1' |GeneSymbol=='Fh' |GeneSymbol=='Fxn' |GeneSymbol=='Glud1' |GeneSymbol=='Got2' |GeneSymbol=='Gpi' |GeneSymbol=='Gpx4' |GeneSymbol=='Grpel1' |GeneSymbol=='Hadha' |GeneSymbol=='Hadhb' |GeneSymbol=='Hccs' |GeneSymbol=='Hsd17B10' |GeneSymbol=='Hspa9' |GeneSymbol=='Htra2' |GeneSymbol=='Idh1' |GeneSymbol=='Idh2' |GeneSymbol=='Idh3A' |GeneSymbol=='Idh3B' |GeneSymbol=='Idh3G' |GeneSymbol=='Immt' |GeneSymbol=='Isca1' |GeneSymbol=='Iscu' |GeneSymbol=='Ldha' |GeneSymbol=='Ldhb' |GeneSymbol=='Lrpprc' |GeneSymbol=='Maob' |GeneSymbol=='Mdh1' |GeneSymbol=='Mdh2' |GeneSymbol=='mfn1' |GeneSymbol=='Mgst3' |GeneSymbol=='Mpc1' |GeneSymbol=='Mrpl11' |GeneSymbol=='Mrpl15' |GeneSymbol=='Mrpl34' |GeneSymbol=='Mrpl35' |GeneSymbol=='Mrps11' |GeneSymbol=='Mrps12' |GeneSymbol=='Mrps15' |GeneSymbol=='Mrps22' |GeneSymbol=='Mrps30' |GeneSymbol=='Mtrf1')

hm_tab_hall_oxphos2 = subset(hm_tab, GeneSymbol=='Mtrr' |GeneSymbol=='Mtx2' |GeneSymbol=='Ndufa1' |GeneSymbol=='Ndufa2' |GeneSymbol=='Ndufa3' |GeneSymbol=='Ndufa4' |GeneSymbol=='Ndufa5' |GeneSymbol=='Ndufa6' |GeneSymbol=='Ndufa7' |GeneSymbol=='Ndufa8' |GeneSymbol=='Ndufa9' |GeneSymbol=='Ndufab1' |GeneSymbol=='Ndufb1' |GeneSymbol=='Ndufb2' |GeneSymbol=='Ndufb3' |GeneSymbol=='Ndufb4' |GeneSymbol=='Ndufb5' |GeneSymbol=='Ndufb6' |GeneSymbol=='Ndufb7' |GeneSymbol=='Ndufb8' |GeneSymbol=='Ndufc1' |GeneSymbol=='Ndufc2' |GeneSymbol=='Ndufs1' |GeneSymbol=='Ndufs2' |GeneSymbol=='Ndufs3' |GeneSymbol=='Ndufs4' |GeneSymbol=='Ndufs6' |GeneSymbol=='Ndufs7' |GeneSymbol=='Ndufs8' |GeneSymbol=='Ndufv1' |GeneSymbol=='Ndufv2' |GeneSymbol=='Nnt' |GeneSymbol=='Nqo2' |GeneSymbol=='Oat' |GeneSymbol=='Ogdh' |GeneSymbol=='Opa1' |GeneSymbol=='Oxa1L' |GeneSymbol=='Pdha1' |GeneSymbol=='Pdhb' |GeneSymbol=='Pdhx' |GeneSymbol=='Pdk4' |GeneSymbol=='Pdp1' |GeneSymbol=='Phb2' |GeneSymbol=='Phyh' |GeneSymbol=='Pmpca' |GeneSymbol=='Polr2F' |GeneSymbol=='Por' |GeneSymbol=='Prdx3' |GeneSymbol=='Retsat' |GeneSymbol=='Rhot1' |GeneSymbol=='Rhot2' |GeneSymbol=='Sdha' |GeneSymbol=='Sdhb' |GeneSymbol=='Sdhc' |GeneSymbol=='Sdhd' |GeneSymbol=='Slc25A11' |GeneSymbol=='Slc25A12' |GeneSymbol=='Slc25A20' |GeneSymbol=='Slc25A3' |GeneSymbol=='Slc25A4' |GeneSymbol=='Slc25A5' |GeneSymbol=='Slc25A6' |GeneSymbol=='Sucla2' |GeneSymbol=='Suclg1' |GeneSymbol=='Supv3L1' |GeneSymbol=='Surf1' |GeneSymbol=='Tcirg1' |GeneSymbol=='Timm10' |GeneSymbol=='Timm13' |GeneSymbol=='Timm17A' |GeneSymbol=='Timm50' |GeneSymbol=='Timm8B' |GeneSymbol=='Timm9' |GeneSymbol=='Tomm22' |GeneSymbol=='Tomm70' |GeneSymbol=='Uqcr10' |GeneSymbol=='Uqcr11' |GeneSymbol=='Uqcrb' |GeneSymbol=='Uqcrc1' |GeneSymbol=='Uqcrc2' |GeneSymbol=='Uqcrfs1' |GeneSymbol=='Uqcrh' |GeneSymbol=='Uqcrq' |GeneSymbol=='Vdac1' |GeneSymbol=='Vdac2' |GeneSymbol=='Vdac3')

hm_tab_hall_oxphos <- rbind(hm_tab_hall_oxphos1, hm_tab_hall_oxphos2)

hm_tab_hall_oxphos <- hm_tab_hall_oxphos %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_oxphos) = hm_tab_hall_oxphos$GeneSymbol
hm_hall_oxphos_annot = data.frame("Sig" = hm_tab_hall_oxphos$sig2)
rownames(hm_hall_oxphos_annot) = rownames(hm_tab_hall_oxphos)

hm_hall_oxphos <- pheatmap(hm_tab_hall_oxphos[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_oxphos$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_oxphos_annot, legend_labels = "Relative expression", main = "HALLMARK_OXIDATIVE_PHOSPHORYLATION genes")

pdf(file="m1_dp8_hm_hall_oxphos.pdf",width=7,height=12)
hm_hall_oxphos
dev.off()


##### hm of hallmark ROS genes

hm_tab_hall_ros = subset(hm_tab, GeneSymbol=='Abcc1' |GeneSymbol=='Atox1' |GeneSymbol=='Cat' |GeneSymbol=='Cdkn2D' |GeneSymbol=='Egln2' |GeneSymbol=='Ercc2' |GeneSymbol=='Fes' |GeneSymbol=='Ftl' |GeneSymbol=='G6Pd' |GeneSymbol=='Gclc' |GeneSymbol=='Gclm' |GeneSymbol=='Glrx' |GeneSymbol=='Glrx2' |GeneSymbol=='Gpx3' |GeneSymbol=='Gpx4' |GeneSymbol=='Gsr' |GeneSymbol=='Hhex' |GeneSymbol=='Hmox2' |GeneSymbol=='Ipcef1' |GeneSymbol=='Junb' |GeneSymbol=='Lamtor5' |GeneSymbol=='Lsp1' |GeneSymbol=='Mbp' |GeneSymbol=='Mgst1' |GeneSymbol=='Mpo' |GeneSymbol=='Msra' |GeneSymbol=='Ndufa6' |GeneSymbol=='Ndufb4' |GeneSymbol=='Ndufs2' |GeneSymbol=='Nqo1' |GeneSymbol=='Oxsr1' |GeneSymbol=='Pdlim1' |GeneSymbol=='Pfkp' |GeneSymbol=='Prdx1' |GeneSymbol=='Prdx2' |GeneSymbol=='Prdx4' |GeneSymbol=='Prdx6' |GeneSymbol=='Prnp' |GeneSymbol=='Ptpa' |GeneSymbol=='Sbno2' |GeneSymbol=='Scaf4' |GeneSymbol=='Selenos' |GeneSymbol=='Sod1' |GeneSymbol=='Sod2' |GeneSymbol=='Srxn1' |GeneSymbol=='Stk25' |GeneSymbol=='Txn' |GeneSymbol=='Txnrd1' |GeneSymbol=='Txnrd2')

hm_tab_hall_ros <- hm_tab_hall_ros %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_ros) = hm_tab_hall_ros$GeneSymbol
hm_hall_ros_annot = data.frame("Sig" = hm_tab_hall_ros$sig2)
rownames(hm_hall_ros_annot) = rownames(hm_tab_hall_ros)

hm_hall_ros <- pheatmap(hm_tab_hall_ros[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_ros$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_ros_annot, legend_labels = "Relative expression", main = "HALLMARK_REACTIVE_OXYGEN_SPECIES_PATHWAY genes")

pdf(file="m1_dp8_hm_hall_ros.pdf",width=8,height=10)
hm_hall_ros
dev.off()


##### hm of hallmark UPR genes

hm_tab_hall_UPR = subset(hm_tab, GeneSymbol=='Aldh18A1' |GeneSymbol=='Arfgap1' |GeneSymbol=='Asns' |GeneSymbol=='Atf3' |GeneSymbol=='Atf4' |GeneSymbol=='Atf6' |GeneSymbol=='Atp6V0D1' |GeneSymbol=='Bag3' |GeneSymbol=='Banf1' |GeneSymbol=='Calr' |GeneSymbol=='Ccl2' |GeneSymbol=='Cebpb' |GeneSymbol=='Cebpg' |GeneSymbol=='Chac1' |GeneSymbol=='Cks1B' |GeneSymbol=='Cnot2' |GeneSymbol=='Cnot4' |GeneSymbol=='Cnot6' |GeneSymbol=='Cxxc1' |GeneSymbol=='Dcp1A' |GeneSymbol=='Dcp2' |GeneSymbol=='Dctn1' |GeneSymbol=='Ddit4' |GeneSymbol=='Ddx10' |GeneSymbol=='Dkc1' |GeneSymbol=='Dnaja4' |GeneSymbol=='Dnajb9' |GeneSymbol=='Dnajc3' |GeneSymbol=='Edc4' |GeneSymbol=='Edem1' |GeneSymbol=='Eef2' |GeneSymbol=='Eif2Ak3' |GeneSymbol=='Eif2S1' |GeneSymbol=='Eif4A1' |GeneSymbol=='Eif4A2' |GeneSymbol=='Eif4A3' |GeneSymbol=='Eif4E' |GeneSymbol=='Eif4Ebp1' |GeneSymbol=='Eif4G1' |GeneSymbol=='Ern1' |GeneSymbol=='Ero1A' |GeneSymbol=='Exoc2' |GeneSymbol=='Exosc1' |GeneSymbol=='Exosc10' |GeneSymbol=='Exosc2' |GeneSymbol=='Exosc4' |GeneSymbol=='Exosc5' |GeneSymbol=='Exosc9' |GeneSymbol=='Fkbp14' |GeneSymbol=='Fus' |GeneSymbol=='Gemin4' |GeneSymbol=='Gosr2' |GeneSymbol=='H2Ax' |GeneSymbol=='Herpud1' |GeneSymbol=='Hsp90B1' |GeneSymbol=='Hspa5' |GeneSymbol=='Hspa9' |GeneSymbol=='Hyou1' |GeneSymbol=='Iars1' |GeneSymbol=='Ifit1' |GeneSymbol=='Igfbp1' |GeneSymbol=='Imp3' |GeneSymbol=='Kdelr3' |GeneSymbol=='Khsrp' |GeneSymbol=='Kif5B' |GeneSymbol=='Lsm1' |GeneSymbol=='Lsm4' |GeneSymbol=='Mthfd2' |GeneSymbol=='Mtrex' |GeneSymbol=='Nabp1' |GeneSymbol=='Nfya' |GeneSymbol=='Nfyb' |GeneSymbol=='Nhp2' |GeneSymbol=='Nolc1' |GeneSymbol=='Nop14' |GeneSymbol=='Nop56' |GeneSymbol=='Npm1' |GeneSymbol=='Paip1' |GeneSymbol=='Parn' |GeneSymbol=='Pdia5' |GeneSymbol=='Pdia6' |GeneSymbol=='Pop4' |GeneSymbol=='Preb' |GeneSymbol=='Psat1' |GeneSymbol=='Rps14' |GeneSymbol=='Rrp9' |GeneSymbol=='Sdad1' |GeneSymbol=='Sec11A' |GeneSymbol=='Sec31A' |GeneSymbol=='Serp1' |GeneSymbol=='Shc1' |GeneSymbol=='Slc1A4' |GeneSymbol=='Slc30A5' |GeneSymbol=='Slc7A5' |GeneSymbol=='Spcs1' |GeneSymbol=='Spcs3' |GeneSymbol=='Srpra' |GeneSymbol=='Srprb' |GeneSymbol=='Ssr1' |GeneSymbol=='Stc2' |GeneSymbol=='Tars1' |GeneSymbol=='Tatdn2' |GeneSymbol=='Tspyl2' |GeneSymbol=='Ttc37' |GeneSymbol=='Tubb2A' |GeneSymbol=='Vegfa' |GeneSymbol=='Wfs1' |GeneSymbol=='Wipi1' |GeneSymbol=='Xbp1' |GeneSymbol=='Xpot' |GeneSymbol=='Yif1A' |GeneSymbol=='Ywhaz' |GeneSymbol=='Zbtb17')

hm_tab_hall_UPR <- hm_tab_hall_UPR %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_UPR) = hm_tab_hall_UPR$GeneSymbol
hm_hall_UPR_annot = data.frame("Sig" = hm_tab_hall_UPR$sig2)
rownames(hm_hall_UPR_annot) = rownames(hm_tab_hall_UPR)

hm_hall_UPR <- pheatmap(hm_tab_hall_UPR[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_UPR$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_UPR_annot, legend_labels = "Relative expression", main = "HALLMARK_UNFOLDED_PROTEIN_RESPONSE genes")

pdf(file="m1_dp8_hm_hall_UPR.pdf",width=7,height=10)
hm_hall_UPR
dev.off()

##### hm of GO BAT genes

hm_tab_GO_BAT = subset(hm_tab, GeneSymbol=='Adig' |GeneSymbol=='Adipoq' |GeneSymbol=='Adrb1' |GeneSymbol=='Adrb2' |GeneSymbol=='Aldh6A1' |GeneSymbol=='Arl4A' |GeneSymbol=='Bmp7' |GeneSymbol=='Bnip3' |GeneSymbol=='Cebpa' |GeneSymbol=='Cebpb' |GeneSymbol=='Dio2' |GeneSymbol=='Dusp10' |GeneSymbol=='Ebf2' |GeneSymbol=='Ero1A' |GeneSymbol=='Fabp3' |GeneSymbol=='Fabp4' |GeneSymbol=='Ffar4' |GeneSymbol=='Flcn' |GeneSymbol=='Fndc5' |GeneSymbol=='Fto' |GeneSymbol=='Hnrnpu' |GeneSymbol=='Ins' |GeneSymbol=='Itga6' |GeneSymbol=='Lamb3' |GeneSymbol=='Lep' |GeneSymbol=='Lrg1' |GeneSymbol=='Mapk14' |GeneSymbol=='Mb' |GeneSymbol=='Metrnl' |GeneSymbol=='Mtor' |GeneSymbol=='Napepld' |GeneSymbol=='Nudt7' |GeneSymbol=='Pex11A' |GeneSymbol=='Pim1' |GeneSymbol=='Plac8' |GeneSymbol=='Ppargc1A' |GeneSymbol=='Prdp86' |GeneSymbol=='Ptgs2' |GeneSymbol=='Rgs2' |GeneSymbol=='Rreb1' |GeneSymbol=='Sirt1' |GeneSymbol=='Six1' |GeneSymbol=='Slc2A4' |GeneSymbol=='Sox13' |GeneSymbol=='Tfe3' |GeneSymbol=='Trpv4' |GeneSymbol=='Ucp1' |GeneSymbol=='Vstm2A' |GeneSymbol=='Zbtb7B' |GeneSymbol=='Znf516')

hm_tab_GO_BAT <- hm_tab_GO_BAT %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_GO_BAT) = hm_tab_GO_BAT$GeneSymbol
hm_GO_m1_dp8_annot = data.frame("Sig" = hm_tab_GO_BAT$sig2)
rownames(hm_GO_m1_dp8_annot) = rownames(hm_tab_GO_BAT)

hm_GO_BAT <- pheatmap(hm_tab_GO_BAT[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_GO_BAT$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_GO_m1_dp8_annot, legend_labels = "Relative expression", main = "GO_BROWN_FAT_CELL_DIFFERENTIATION genes")

pdf(file="m1_dp8_hm_GO_BAT.pdf",width=7,height=10)
hm_GO_BAT
dev.off()


##### hm of myc-TF genes

hm_tab_myc = subset(hm_tab, GeneSymbol=='Abcd2' |GeneSymbol=='Steap4' |GeneSymbol=='Nnmt' |GeneSymbol=='Pde3b' |GeneSymbol=='Hp' |GeneSymbol=='Lrp3' |GeneSymbol=='Slc1a5' |GeneSymbol=='Retn' |GeneSymbol=='Apcdd1' |GeneSymbol=='Adcy5' |GeneSymbol=='C4B' |GeneSymbol=='Gys2' |GeneSymbol=='Hcar2' |GeneSymbol=='Dock11' |GeneSymbol=='Mc2r' |GeneSymbol=='Hcar1' |GeneSymbol=='Dram1' |GeneSymbol=='B3galt2' |GeneSymbol=='Nnat' |GeneSymbol=='Ffar4' |GeneSymbol=='Slc16a7' |GeneSymbol=='Ffar2' |GeneSymbol=='Aoc3' |GeneSymbol=='Rarres2' |GeneSymbol=='Adipoq' |GeneSymbol=='Mmp3' |GeneSymbol=='Sctr' |GeneSymbol=='Klhl2' |GeneSymbol=='Igf1' |GeneSymbol=='Podn' |GeneSymbol=='Cidec' |GeneSymbol=='Tshr' |GeneSymbol=='Por' |GeneSymbol=='Rbp4' |GeneSymbol=='Ccdc80' |GeneSymbol=='Lrg1' |GeneSymbol=='Vnn3' |GeneSymbol=='Chdh' |GeneSymbol=='Lgals12' |GeneSymbol=='Chst1' |GeneSymbol=='St6galnac5')

hm_tab_myc <- hm_tab_myc %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_myc) = hm_tab_myc$GeneSymbol
hm_myc_annot = data.frame("Sig" = hm_tab_myc$sig2)
rownames(hm_myc_annot) = rownames(hm_tab_myc)

hm_myc <- pheatmap(hm_tab_myc[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_myc$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_myc_annot, legend_labels = "Relative expression", main = "Myc-related genes")

pdf(file="m1_dp8_hm_myc.pdf",width=7,height=10)
hm_myc
dev.off()


#### make hm of mitochondrial and nuclear encoded mitochondrial genes, using same genes to the figure in eLife paper

hm_tab_mt_mito = subset(hm_tab, GeneSymbol=='mt-Atp6' | GeneSymbol=='mt-Atp8' | GeneSymbol=='mt-Co1' | GeneSymbol=='mt-Co2' | GeneSymbol=='mt-Co3' | GeneSymbol=='mt-Cytb' | GeneSymbol=='mt-Nd1' | GeneSymbol=='mt-Nd2' | GeneSymbol=='mt-Nd3' | GeneSymbol=='mt-Nd4' | GeneSymbol=='mt-Nd4l' | GeneSymbol=='mt-Nd5' | GeneSymbol=='mt-Nd6' | GeneSymbol=='mt-Rnr1' | GeneSymbol=='mt-Rnr2' | GeneSymbol=='mt-Ta' | GeneSymbol=='mt-Tc' | GeneSymbol=='mt-Td' | GeneSymbol=='mt-Te' | GeneSymbol=='mt-Tf' | GeneSymbol=='mt-Tg' | GeneSymbol=='mt-Th' | GeneSymbol=='mt-Ti' | GeneSymbol=='mt-Tk' | GeneSymbol=='mt-Tl1' | GeneSymbol=='mt-Tl2' | GeneSymbol=='mt-Tm' | GeneSymbol=='mt-Tn' | GeneSymbol=='mt-Tp' | GeneSymbol=='mt-Tq' | GeneSymbol=='mt-Tr' | GeneSymbol=='mt-Ts1' | GeneSymbol=='mt-Ts2' | GeneSymbol=='mt-Tt' | GeneSymbol=='mt-Tv' | GeneSymbol=='mt-Tw' | GeneSymbol=='mt-Ty')

hm_tab_mt_mito <- hm_tab_mt_mito %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_mt_mito) = hm_tab_mt_mito$GeneSymbol
hm_mt_mito_annot = data.frame("Sig" = hm_tab_mt_mito$sig2)
rownames(hm_mt_mito_annot) = rownames(hm_tab_mt_mito)

hm_mt_mito <- pheatmap(hm_tab_mt_mito[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_mt_mito$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_mt_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial-encoded mito genes")

pdf(file="m1_dp8_hm_mt_mito.pdf",width=7,height=10)
hm_mt_mito
dev.off()

hm_tab_nucl_mito = subset(hm_tab, GeneSymbol=='Ndufb10' |GeneSymbol=='Ndufa3' |GeneSymbol=='Dmac2l' |GeneSymbol=='Atp5o' |GeneSymbol=='Uqcrfs1' |GeneSymbol=='Ndufa8' |GeneSymbol=='Uqcrq' |GeneSymbol=='Surf1' |GeneSymbol=='Atp5b' |GeneSymbol=='Uqcrh' |GeneSymbol=='Ndufa2' |GeneSymbol=='Ndufs7' |GeneSymbol=='Ndufb9' |GeneSymbol=='Ndufb6' |GeneSymbol=='Cox6b1' |GeneSymbol=='Cox6a2' |GeneSymbol=='Ndufa13' |GeneSymbol=='Ndufa9' |GeneSymbol=='Ndufs3' |GeneSymbol=='Uqcrc2' |GeneSymbol=='Ndufa4' |GeneSymbol=='Cycs' |GeneSymbol=='Cyc1' |GeneSymbol=='Ndufs5' |GeneSymbol=='Ndufs4' |GeneSymbol=='Ecsit' |GeneSymbol=='Cox10' |GeneSymbol=='Ndufs8' |GeneSymbol=='Ndufc2' |GeneSymbol=='Atp5a1' |GeneSymbol=='Ndufa7' |GeneSymbol=='Ndufb3' |GeneSymbol=='Ndufa5' |GeneSymbol=='Atp5k' |GeneSymbol=='Cox5b-ps' |GeneSymbol=='Cox18' |GeneSymbol=='Ndufa10' |GeneSymbol=='Atp5j2' |GeneSymbol=='Ndufaf1' |GeneSymbol=='Atp5pb' |GeneSymbol=='Cox11' |GeneSymbol=='Atpaf1' |GeneSymbol=='Sdhb' |GeneSymbol=='Atp5c1' |GeneSymbol=='Cox6b2' |GeneSymbol=='Gm10053' |GeneSymbol=='Phb' |GeneSymbol=='Cox7c' |GeneSymbol=='Sdhd' |GeneSymbol=='Sdhc' |GeneSymbol=='Sdha' |GeneSymbol=='Ndufa6' |GeneSymbol=='Ndufa12' |GeneSymbol=='Ndufa11' |GeneSymbol=='Cox6a1' |GeneSymbol=='Ndufb2' |GeneSymbol=='Cox5a' |GeneSymbol=='Atp5j' |GeneSymbol=='Atp5g3' |GeneSymbol=='Ndufv2' |GeneSymbol=='Ndufb8' |GeneSymbol=='Cox4i1' |GeneSymbol=='Uqcrc1' |GeneSymbol=='Atpaf2' |GeneSymbol=='Ndufb7' |GeneSymbol=='Atp5h' |GeneSymbol=='Cox5b' |GeneSymbol=='Ndufv1' |GeneSymbol=='Ndufv3' |GeneSymbol=='Ndufs1' |GeneSymbol=='Atp5d' |GeneSymbol=='Ndufb4' |GeneSymbol=='Cox7a1' |GeneSymbol=='Cox4i2' |GeneSymbol=='Ndufs6' |GeneSymbol=='Ndufs2' |GeneSymbol=='Ndufc1' |GeneSymbol=='Ndufb5' |GeneSymbol=='Gm21987' |GeneSymbol=='Cox17' |GeneSymbol=='Cox8a' |GeneSymbol=='Cox7a2' |GeneSymbol=='Cox6c' |GeneSymbol=='Nubpl' |GeneSymbol=='Ndufab1')

hm_tab_nucl_mito <- hm_tab_nucl_mito %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_nucl_mito) = hm_tab_nucl_mito$GeneSymbol
hm_nucl_mito_annot = data.frame("Sig" = hm_tab_nucl_mito$sig2)
rownames(hm_nucl_mito_annot) = rownames(hm_tab_nucl_mito)

hm_nucl_mito <- pheatmap(hm_tab_nucl_mito[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_nucl_mito$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_nucl_mito_annot, legend_labels = "Relative expression", main = "Nuclear-encoded mito genes")

pdf(file="m1_dp8_hm_nucl_mito.pdf",width=7,height=10)
hm_nucl_mito
dev.off()

#### make side-by-side hm of mitochondrial and nuclear encoded mitochondrial genes, analagous to eLife paper

library(RColorBrewer)
breaksList = seq(-6, 6, by = 0.1)

hm_tab_mt_mito2 <- as.data.frame(hm_tab_mt_mito$log2FC)
rownames(hm_tab_mt_mito2) = hm_tab_mt_mito$GeneSymbol
hm_tab_mt_mito2$log2FCdup <- hm_tab_mt_mito$log2FC

hm_mt_mito2 <- pheatmap(hm_tab_mt_mito2, cluster_rows = TRUE, cluster_cols = FALSE, cutree_rows = 2, legend = FALSE, cellwidth=30, angle_col=45, fontsize_col=6, annotation_row=hm_mt_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial-encoded", show_colnames = FALSE, show_rownames = FALSE, border_color = NA, scale = "none", color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList)

hm_tab_nucl_mito2 <- as.data.frame(hm_tab_nucl_mito$log2FC)
rownames(hm_tab_nucl_mito2) = hm_tab_nucl_mito$GeneSymbol
hm_tab_nucl_mito2$log2FCdup <- hm_tab_nucl_mito$log2FC

hm_nucl_mito2 <- pheatmap(hm_tab_nucl_mito2, cluster_rows = TRUE, cluster_cols = FALSE, cutree_rows = 3, legend = TRUE, cellwidth=30, angle_col=45, fontsize_col=6, annotation_row=hm_nucl_mito_annot, legend_labels = "Relative expression", main = "Nuclear-encoded", show_colnames = FALSE, , show_rownames = FALSE, border_color = NA, color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList)

require(cowplot)
require(ggplotify)

pdf(file="mito_genes_sumfig.pdf",width=8,height=3)
plot_grid(as.grob(hm_mt_mito2), as.grob(hm_nucl_mito2), ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()



############### Pathway analysis using enrichr =====================================================

require(enrichR)
require(tidyr)
require(cowplot)
require(viridis)

## look at sig up & down genes using enrichR
dbs_option <- listEnrichrDbs()

####### use upregulated genes

up_dge = subset(hm_tab, sig2=='sig' & log2FC>0)
write.table(up_dge,file="m1_dp8_up_dge.csv",sep=",")
up_dge <- up_dge[!is.na(up_dge$GeneSymbol), ]
up_genes <- as.vector(up_dge$GeneSymbol)


dbs_search <- c("GO_Biological_Process_2018","KEGG_2019_Mouse", "MSigDB_Hallmark_2020","GO_Cellular_Component_2018","GTEx_Tissue_Sample_Gene_Expression_Profiles_up","TF_Perturbations_Followed_by_Expression","GO_Molecular_Function_2018", "HMDB_Metabolites")

up_genes_enrichr <- enrichr(up_genes, databases = dbs_search)

## make figure from enrichr analyses
library(dplyr)
library(ggplot2)


GO_biol_data_up <- up_genes_enrichr[["GO_Biological_Process_2018"]]
View(GO_biol_data_up)
GO_biol_data_up = subset(GO_biol_data_up, Adjusted.P.value<.05)
GO_biol_data_up <- GO_biol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_biol_data_up$db <- "GO_biol_2019_Human"
GO_biol_fig_up <-ggplot(data=GO_biol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Biological_Process_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_biol_fig_up

KEGG_data_up <- up_genes_enrichr[["KEGG_2019_Mouse"]]
View(KEGG_data_up)
KEGG_data_up = subset(KEGG_data_up, Adjusted.P.value<.05)
KEGG_data_up <- KEGG_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
KEGG_data_up$db <- "KEGG_2019_Mouse"
KEGG_fig_up <-ggplot(data=KEGG_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("KEGG_2019_Mouse") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
KEGG_fig_up

Hall_data_up <- up_genes_enrichr[["MSigDB_Hallmark_2020"]]
View(Hall_data_up)
Hall_data_up = subset(Hall_data_up, Adjusted.P.value<.05)
Hall_data_up <- Hall_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Hall_data_up$db <- "MSigDB_Hallmark_2020"
Hall_fig_up <-ggplot(data=Hall_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("MSigDB_Hallmark_2020") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
Hall_fig_up

GO_cell_data_up <- up_genes_enrichr[["GO_Cellular_Component_2018"]]
View(GO_cell_data_up)
GO_cell_data_up = subset(GO_cell_data_up, Adjusted.P.value<.05)
GO_cell_data_up <- GO_cell_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_cell_data_up$db <- "GO_Cellular_Component_2018"
GO_cell_fig_up <-ggplot(data=GO_cell_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Cellular_Component_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_cell_fig_up

GTEx_data_up <- up_genes_enrichr[["GTEx_Tissue_Sample_Gene_Expression_Profiles_up"]]
View(GTEx_data_up)
GTEx_data_up = subset(GTEx_data_up, Adjusted.P.value<.05)
GTEx_data_up <- GTEx_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GTEx_data_up$db <- "GTEx_Tissue_Sample_Gene_Expression_Profiles_up"
GTEx_fig_up <-ggplot(data=GTEx_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GTEx_Tissue_Sample_Gene_Expression_Profiles_up") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GTEx_fig_up

TF_data_up <- up_genes_enrichr[["TF_Perturbations_Followed_by_Expression"]]
View(TF_data_up)
TF_data_up = subset(TF_data_up, Adjusted.P.value<.05)
TF_data_up <- TF_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
TF_data_up$db <- "TF_Perturbations_Followed_by_Expression"
TF_fig_up <-ggplot(data=TF_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("TF_Perturbations_Followed_by_Expression") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
TF_fig_up

GO_mol_data_up <- up_genes_enrichr[["GO_Molecular_Function_2018"]]
View(GO_mol_data_up)
GO_mol_data_up = subset(GO_mol_data_up, Adjusted.P.value<.05)
GO_mol_data_up <- GO_mol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_mol_data_up$db <- "GO_Molecular_Function_2018"
GO_mol_fig_up <-ggplot(data=GO_mol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Molecular_Function_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_mol_fig_up

Metabol_data_up <- up_genes_enrichr[["HMDB_Metabolites"]]
View(Metabol_data_up)
Metabol_data_up = subset(Metabol_data_up, Adjusted.P.value<.05)
Metabol_data_up <- Metabol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Metabol_data_up$db <- "HMDB_Metabolites"
Metabol_fig_up <-ggplot(data=Metabol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("HMDB_Metabolites") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
Metabol_fig_up

up_path_summary <- rbind(GO_biol_data_up, KEGG_data_up, Hall_data_up, GO_cell_data_up, GTEx_data_up, TF_data_up, GO_mol_data_up, Metabol_data_up)
up_path_summary$dir <- "Up"  

####### use downregulated genes

down_dge = subset(hm_tab, sig2=='sig' & log2FC<0)
write.table(down_dge,file="m1_dp8_down_dge.csv",sep=",")
down_list <- as.data.frame(down_dge$GeneSymbol)
down_list <- down_list %>% rename("genes" = "down_dge$GeneSymbol")
down_list <- down_list %>% drop_na()
down_list <- distinct(down_list)

dbs_search <- c("GO_Biological_Process_2018","KEGG_2019_Mouse", "MSigDB_Hallmark_2020","GO_Cellular_Component_2018","GTEx_Tissue_Sample_Gene_Expression_Profiles_up","TF_Perturbations_Followed_by_Expression","GO_Molecular_Function_2018", "HMDB_Metabolites")

down_genes_enrichr <- enrichr(down_list$genes, databases = dbs_search)

## make figure from enrichr analyses

GO_biol_data_down <- down_genes_enrichr[["GO_Biological_Process_2018"]]
View(GO_biol_data_down)
GO_biol_data_down = subset(GO_biol_data_down, Adjusted.P.value<.05)
GO_biol_data_down <- GO_biol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_biol_data_down$db <- "GO_biol_2019_Human"
GO_biol_fig_down <-ggplot(data=GO_biol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Biological_Process_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_biol_fig_down

KEGG_data_down <- down_genes_enrichr[["KEGG_2019_Mouse"]]
View(KEGG_data_down)
KEGG_data_down = subset(KEGG_data_down, Adjusted.P.value<.05)
KEGG_data_down <- KEGG_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
KEGG_data_down$db <- "KEGG_2019_Mouse"
KEGG_fig_down <-ggplot(data=KEGG_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("KEGG_2019_Mouse") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
KEGG_fig_down

Hall_data_down <- down_genes_enrichr[["MSigDB_Hallmark_2020"]]
View(Hall_data_down)
Hall_data_down = subset(Hall_data_down, Adjusted.P.value<.05)
Hall_data_down <- Hall_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Hall_data_down$db <- "MSigDB_Hallmark_2020"
Hall_fig_down <-ggplot(data=Hall_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("MSigDB_Hallmark_2020") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
Hall_fig_down

GO_cell_data_down <- down_genes_enrichr[["GO_Cellular_Component_2018"]]
View(GO_cell_data_down)
GO_cell_data_down = subset(GO_cell_data_down, Adjusted.P.value<.05)
GO_cell_data_down <- GO_cell_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_cell_data_down$db <- "GO_Cellular_Component_2018"
GO_cell_fig_down <-ggplot(data=GO_cell_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Cellular_Component_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_cell_fig_down

GTEx_data_down <- down_genes_enrichr[["GTEx_Tissue_Sample_Gene_Expression_Profiles_up"]]
View(GTEx_data_down)
GTEx_data_down = subset(GTEx_data_down, Adjusted.P.value<.05)
GTEx_data_down <- GTEx_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GTEx_data_down$db <- "GTEx_Tissue_Sample_Gene_Expression_Profiles_down"
GTEx_fig_down <-ggplot(data=GTEx_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GTEx_Tissue_Sample_Gene_Expression_Profiles_up") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GTEx_fig_down

TF_data_down <- down_genes_enrichr[["TF_Perturbations_Followed_by_Expression"]]
View(TF_data_down)
TF_data_down = subset(TF_data_down, Adjusted.P.value<.05)
TF_data_down <- TF_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
TF_data_down$db <- "TF_Perturbations_Followed_by_Expression"
TF_fig_down <-ggplot(data=TF_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("TF_Perturbations_Followed_by_Expression") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
TF_fig_down

GO_mol_data_down <- down_genes_enrichr[["GO_Molecular_Function_2018"]]
View(GO_mol_data_down)
GO_mol_data_down = subset(GO_mol_data_down, Adjusted.P.value<.05)
GO_mol_data_down <- GO_mol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_mol_data_down$db <- "GO_Molecular_Function_2018"
GO_mol_fig_down <-ggplot(data=GO_mol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Molecular_Function_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_mol_fig_down

Metabol_data_down <- down_genes_enrichr[["HMDB_Metabolites"]]
View(Metabol_data_down)
Metabol_data_down = subset(Metabol_data_down, Adjusted.P.value<.05)
Metabol_data_down <- Metabol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Metabol_data_down$db <- "HMDB_Metabolites"
Metabol_fig_down <-ggplot(data=Metabol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("HMDB_Metabolites") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
Metabol_fig_down

down_path_summary <- rbind(GO_biol_data_down, KEGG_data_down, Hall_data_down, GO_cell_data_down, GTEx_data_down, TF_data_down, GO_mol_data_down, Metabol_data_down)
down_path_summary$dir <- "down"  

path_summary <- rbind(up_path_summary, down_path_summary)
path_summary <- path_summary %>% arrange(desc(-Adjusted.P.value))               
write.table(path_summary,file="path_summary.csv",sep=",")

up_path_col1 <- plot_grid(GO_biol_fig_up, KEGG_fig_up, Hall_fig_up, GO_cell_fig_up, ncol = 1, labels = c('A', 'C', 'E', 'G', 'I', 'K', 'M', 'O'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))
up_path_col2 <- plot_grid(GTEx_fig_up, TF_fig_up, GO_mol_fig_up, Metabol_fig_up, ncol = 1, labels = c('B', 'D', 'F', 'H'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))

pdf(file="up_path_sumfig.pdf",width=16,height=12)
plot_grid(up_path_col1, up_path_col2, ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()

down_path_col1 <- plot_grid(GO_biol_fig_down, KEGG_fig_down, Hall_fig_down, GO_cell_fig_down, ncol = 1, labels = c('A', 'C', 'E', 'G', 'I', 'K', 'M', 'O'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))
down_path_col2 <- plot_grid(GTEx_fig_down, TF_fig_down, GO_mol_fig_down, Metabol_fig_down, ncol = 1, labels = c('B', 'D', 'F', 'H'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))

pdf(file="down_path_sumfig.pdf",width=16,height=12)
plot_grid(down_path_col1, down_path_col2, ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()
############ summarise enriched GO terms using revigo ---------

library(rrvgo)
library(stringr)
GO_BP_up_revigo <- up_genes_enrichr[["GO_Biological_Process_2018"]]
GO_BP_up_revigo = subset(GO_BP_up_revigo, Adjusted.P.value<.05)
GO_BP_up_revigo$ID <- str_extract(GO_BP_up_revigo$Term, "GO:.......")
GO_BP_up_simMatrix <- calculateSimMatrix(GO_BP_up_revigo$ID, orgdb="org.Mm.eg.db", ont="BP", method="Rel")
GO_BP_up_scores <- setNames(-log10(GO_BP_up_revigo$Adjusted.P.value), GO_BP_up_revigo$ID)
GO_BP_up_reducedTerms <- reduceSimMatrix(GO_BP_up_simMatrix, GO_BP_up_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_BP_up_simMatrix, GO_BP_up_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_BP_up_scatter_m1_dp8.pdf",width=14,height=8)
GO_BP_up_scatter <- scatterPlot(GO_BP_up_simMatrix, GO_BP_up_reducedTerms, labelSize=3)
GO_BP_up_scatter
dev.off()
pdf(file="GO_BP_up_tree_m1_dp8.pdf",width=14,height=8)
GO_BP_up_tree <- treemapPlot(GO_BP_up_reducedTerms)
dev.off()

GO_CC_up_revigo <- up_genes_enrichr[["GO_Cellular_Component_2018"]]
GO_CC_up_revigo = subset(GO_CC_up_revigo, Adjusted.P.value<.05)
GO_CC_up_revigo$ID <- str_extract(GO_CC_up_revigo$Term, "GO:.......")
GO_CC_up_simMatrix <- calculateSimMatrix(GO_CC_up_revigo$ID, orgdb="org.Mm.eg.db", ont="CC", method="Rel")
GO_CC_up_scores <- setNames(-log10(GO_CC_up_revigo$Adjusted.P.value), GO_CC_up_revigo$ID)
GO_CC_up_reducedTerms <- reduceSimMatrix(GO_CC_up_simMatrix, GO_CC_up_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_CC_up_simMatrix, GO_CC_up_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_CC_up_scatter_m1_dp8.pdf",width=14,height=8)
GO_CC_up_scatter <- scatterPlot(GO_CC_up_simMatrix, GO_CC_up_reducedTerms, labelSize=3)
GO_CC_up_scatter
dev.off()
pdf(file="GO_CC_up_tree_m1_dp8.pdf",width=14,height=8)
GO_CC_up_tree <- treemapPlot(GO_CC_up_reducedTerms)
dev.off()

GO_MF_up_revigo <- up_genes_enrichr[["GO_Molecular_Function_2018"]]
GO_MF_up_revigo = subset(GO_MF_up_revigo, Adjusted.P.value<.05)
GO_MF_up_revigo$ID <- str_extract(GO_MF_up_revigo$Term, "GO:.......")
GO_MF_up_simMatrix <- calculateSimMatrix(GO_MF_up_revigo$ID, orgdb="org.Mm.eg.db", ont="MF", method="Rel")
GO_MF_up_scores <- setNames(-log10(GO_MF_up_revigo$Adjusted.P.value), GO_MF_up_revigo$ID)
GO_MF_up_reducedTerms <- reduceSimMatrix(GO_MF_up_simMatrix, GO_MF_up_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_MF_up_simMatrix, GO_MF_up_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_MF_up_scatter_m1_dp8.pdf",width=14,height=8)
GO_MF_up_scatter <- scatterPlot(GO_MF_up_simMatrix, GO_MF_up_reducedTerms, labelSize=3)
GO_MF_up_scatter
dev.off()
pdf(file="GO_MF_up_tree_m1_dp8.pdf",width=14,height=8)
GO_MF_up_tree <- treemapPlot(GO_MF_up_reducedTerms)
dev.off()

GO_BP_down_revigo <- down_genes_enrichr[["GO_Biological_Process_2018"]]
GO_BP_down_revigo = subset(GO_BP_down_revigo, Adjusted.P.value<.05)
GO_BP_down_revigo$ID <- str_extract(GO_BP_down_revigo$Term, "GO:.......")
GO_BP_down_simMatrix <- calculateSimMatrix(GO_BP_down_revigo$ID, orgdb="org.Mm.eg.db", ont="BP", method="Rel")
GO_BP_down_scores <- setNames(-log10(GO_BP_down_revigo$Adjusted.P.value), GO_BP_down_revigo$ID)
GO_BP_down_reducedTerms <- reduceSimMatrix(GO_BP_down_simMatrix, GO_BP_down_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_BP_down_simMatrix, GO_BP_down_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_BP_down_scatter_m1_dp8.pdf",width=14,height=8)
GO_BP_down_scatter <- scatterPlot(GO_BP_down_simMatrix, GO_BP_down_reducedTerms, labelSize=3)
GO_BP_down_scatter
dev.off()
pdf(file="GO_BP_down_tree_m1_dp8.pdf",width=14,height=8)
GO_BP_down_tree <- treemapPlot(GO_BP_down_reducedTerms)
dev.off()

GO_CC_down_revigo <- down_genes_enrichr[["GO_Cellular_Component_2018"]]
GO_CC_down_revigo = subset(GO_CC_down_revigo, Adjusted.P.value<.05)
GO_CC_down_revigo$ID <- str_extract(GO_CC_down_revigo$Term, "GO:.......")
GO_CC_down_simMatrix <- calculateSimMatrix(GO_CC_down_revigo$ID, orgdb="org.Mm.eg.db", ont="CC", method="Rel")
GO_CC_down_scores <- setNames(-log10(GO_CC_down_revigo$Adjusted.P.value), GO_CC_down_revigo$ID)
GO_CC_down_reducedTerms <- reduceSimMatrix(GO_CC_down_simMatrix, GO_CC_down_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_CC_down_simMatrix, GO_CC_down_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_CC_down_scatter_m1_dp8.pdf",width=14,height=8)
GO_CC_down_scatter <- scatterPlot(GO_CC_down_simMatrix, GO_CC_down_reducedTerms, labelSize=3)
GO_CC_down_scatter
dev.off()
pdf(file="GO_CC_down_tree_m1_dp8.pdf",width=14,height=8)
GO_CC_down_tree <- treemapPlot(GO_CC_down_reducedTerms)
dev.off()

GO_MF_down_revigo <- down_genes_enrichr[["GO_Molecular_Function_2018"]]
GO_MF_down_revigo = subset(GO_MF_down_revigo, Adjusted.P.value<.05)
GO_MF_down_revigo$ID <- str_extract(GO_MF_down_revigo$Term, "GO:.......")
GO_MF_down_simMatrix <- calculateSimMatrix(GO_MF_down_revigo$ID, orgdb="org.Mm.eg.db", ont="MF", method="Rel")
GO_MF_down_scores <- setNames(-log10(GO_MF_down_revigo$Adjusted.P.value), GO_MF_down_revigo$ID)
GO_MF_down_reducedTerms <- reduceSimMatrix(GO_MF_down_simMatrix, GO_MF_down_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_MF_down_simMatrix, GO_MF_down_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_MF_down_scatter_m1_dp8.pdf",width=14,height=8)
GO_MF_down_scatter <- scatterPlot(GO_MF_down_simMatrix, GO_MF_down_reducedTerms, labelSize=3)
GO_MF_down_scatter
dev.off()
pdf(file="GO_MF_down_tree_m1_dp8.pdf",width=14,height=8)
GO_MF_down_tree <- treemapPlot(GO_MF_down_reducedTerms)
dev.off()

pdf(file="m1_dp8_Hall_fig_up.pdf",width=6,height=3.5)
Hall_fig_up
dev.off()

pdf(file="m1_dp8_Hall_fig_down.pdf",width=6,height=3.5)
Hall_fig_down
dev.off()

## remove duplicates to make TF figure
library(stringr)
library(dplyr)
library(ggplot2)

TF_data_up <- up_genes_enrichr[["TF_Perturbations_Followed_by_Expression"]]
View(TF_data_up)
TF_data_up = subset(TF_data_up, Adjusted.P.value<.05)
TF_data_up$TF <- gsub("([A-Za-z]+).*", "\\1", TF_data_up$Term)
TF_data_up$dir <- tolower(word(TF_data_up$Term,-1))
TF_data_up$text <- paste(TF_data_up$TF, TF_data_up$dir, sep = " ", collapse = NULL)
TF_data_up <- TF_data_up %>% distinct(text, .keep_all = TRUE)

TF_data_up <- TF_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
TF_data_up$db <- "TF_Perturbations_Followed_by_Expression"
TF_fig_up <-ggplot(data=TF_data_up, aes(x= reorder(text, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("TF_Perturbations_Followed_by_Expression") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
TF_fig_up

pdf(file="m1_dp8_TF_fig_up.pdf",width=8,height=4)
TF_fig_up
dev.off()


TF_data_down <- down_genes_enrichr[["TF_Perturbations_Followed_by_Expression"]]
View(TF_data_down)
TF_data_down = subset(TF_data_down, Adjusted.P.value<.05)
TF_data_down$TF <- gsub("([A-Za-z]+).*", "\\1", TF_data_down$Term)
TF_data_down$dir <- tolower(word(TF_data_down$Term,-1))
TF_data_down$text <- paste(TF_data_down$TF, TF_data_down$dir, sep = " ", collapse = NULL)
TF_data_down <- TF_data_down %>% distinct(text, .keep_all = TRUE)

TF_data_down <- TF_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
TF_data_down$db <- "TF_Perturbations_Followed_by_Expression"
TF_fig_down <-ggplot(data=TF_data_down, aes(x= reorder(text, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("TF_Perturbations_Followed_by_Expression") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
TF_fig_down

pdf(file="m1_dp8_TF_fig_down.pdf",width=8,height=4)
TF_fig_down
dev.off()


## use counts tables 


rm(list = ls())

#### PRELIMINARIES ############################################################################################# 

#*Uploads the needed libraries --------------------------------------------------------------------------------

require(DESeq2)

require(ggplot2)

require(data.table)

require(plotly)

require(DT)

require(htmlwidgets)

require(R2HTML)


soft_version <- packageVersion("DESeq2")

#*Set the number of significant digits for the output --------------------------
sig_dig = 4

## Analysis for mfn1 MEFs at dm0

#*Set the working directory ---------------------------------------------------------------------------------

#get the default wd
default_wd <- getwd()

#Set the directory where all the saved outputs will be stored
setwd("/Users/jakemann/RNAseq_Dec20/output_v1/m1_dm0")

new_wd <- getwd()
#### DATA UPLOAD ###############################################################################################################

annotation_table <- read.csv("/Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.95_gene_annotation_table.txt", sep = "\t")

# inputs the list of the count files
input_files <- list.files(path = "/Users/jakemann/RNAseq_Dec20/m1_MEF_counts/", pattern = "*tab$", full.names = TRUE)
input_files <- input_files[grep(input_files, pattern="m1_dm0|WT_dm0")]

# inputs the list of the summary files
summary_files <-  list.files(path = "/Users/jakemann/RNAseq_Dec20/m1_MEF_counts/", pattern = "summary$", full.names = TRUE)
summary_files <- summary_files[grep(summary_files, pattern="m1_dm0|WT_dm0")]

#Reads the count files (input_files)
#create a list; each element of a list (named ''sample'' in the following) is a count table
counts_tables <- lapply(input_files, fread, header = FALSE, stringsAsFactors = FALSE, skip=2, select=c(1,7), col.names=c("GeneID","Counts"))

#Reads the summary files (summary_files)
#create a list; each element of a list is a summary table
summary_tables <- lapply(summary_files, read.delim, header = FALSE, stringsAsFactors = FALSE, skip=1, quote = "")

#takes the names of the genes from the counts_tables
genes_names <- counts_tables[[1]]$GeneID
genes_number = length(genes_names)

#take the names of each element (sample) of the list from the input files 
samples_names <- substr(noquote(unlist(lapply(basename(input_files), tools::file_path_sans_ext))) ,1,8)

#assign the names to the elements of the counts_tables list, composed by the counts tables; NOTE: each replicate has its ID
names(counts_tables) <- samples_names

#Creates a single data frame with all the samples as columns, for reporting and clustering purposes -- see heatmaps below
counts_tables_dataframe <- sapply(counts_tables, '[[', 2)
#assignes the genes names to the rows of the counts_tables_dataframe
rownames(counts_tables_dataframe) <- genes_names

#assign the names to the elements of the summary_tables list, composed by the summary tables; NOTE: each replicate has its ID
names(summary_tables) <- samples_names

#take the roots of the samples_names; replicates cannot be distinguished here -- set the name of the control 
name_control <- "WT_dm0"
names_mutants <- setdiff(unique((substr(samples_names,1,6))), name_control)

#Creates the datasets_matrix, containing all the names of the datasets and replicates for reporting purposes
datasets_matrix <- matrix(samples_names, nrow=length(grep(name_control, samples_names)), ncol=length(names_mutants)+1)
colnames(datasets_matrix) <- c(names_mutants, name_control)





####PAIRWISE COMPARISONS ####################################################################################################
# *Set the tresholds ----------------------------------------------------------------------------------------------------

lfc = 1.5 #treshold for the ADJUSTED fold changes
pval = 0.01 #treshold for the ADJUSTED pvalues

num_comparisons=1 #loop's counter initialisation

###COMPARISONS, PLOTS AND TABLES LOOP ======================================================================================

# *Start of the loop ------------------------------------------------------------------------------------------------------
while(num_comparisons <= length(names_mutants)){    

  # **Grabbing the data ----------------------------------------------------------------------------------------------------  
  name_mutant <- names_mutants[num_comparisons]  
  
  #extract the needed samples from the whole list
  assign( paste0("counts_tables_", name_control), counts_tables[grep(name_control, samples_names, value = TRUE)]) #extract the controls counts tables 

  assign( paste0("counts_tables_", name_mutant), counts_tables[grep(name_mutant, samples_names, value = TRUE)]) #extract the mutants counts tables 

  assign( paste0("counts_list_", name_control, "_", name_mutant) , c( get( paste0("counts_tables_", name_control)),  get(paste0("counts_tables_", name_mutant)) )) #merges the two counts tables above in one list

  # **Creating the counts matrix needed for DESeq2 AND ... ---------------------------------------------------------------------  

  #creates the counts matrix: each row is a gene, the first n columns are the counts coming from the control's replicates, the last p columns are the counts from the mutant replicates
  assign( paste0( "columns_list_", name_control, "_", name_mutant), sapply(get( paste0("counts_list_", name_control, "_", name_mutant) ), `[[` , 2) )  #takes one column each two (i.e. only the columns containing the counts) from the counts list

  assign( paste0( "counts_matrix_", name_control, "_", name_mutant),  matrix(unlist( get( paste0( "columns_list_", name_control, "_", name_mutant) ) , use.names = FALSE), ncol = length( get( paste0("counts_list_", name_control, "_", name_mutant) ) ) )  )#convert the list into a matrix, for convenience

  assign( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names"), get(  paste0( "counts_matrix_", name_control, "_", name_mutant) ) )  #the counts matrix with names is also created; at this stage is the same of the counts matrix

  # #filters out low counts
  
  # matrix_to_filter <- get(paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names"))
  # summing_rows <- apply(matrix_to_filter, 1, sum)
  # rows_to_keep <- which(summing_rows > 10)
  # matrix_filtered <- matrix_to_filter[rows_to_keep,]
  # genes_names <- names(matrix_filtered)
  # assign( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names"), matrix_filtered)

  #** ... AND Creating the summary matrix ---------------------------------------------------------------------
  #The summary matrix contains, for each comparison, the general information about the counts statistics
  
  #extracts the needed samples from the whole list
  assign( paste0("summary_tables_", name_control), summary_tables[grep(name_control, samples_names, value = TRUE)]) #extract the controls summary tables 
  
  assign( paste0("summary_tables_", name_mutant), summary_tables[grep(name_mutant, samples_names, value = TRUE)]) #extract the mutants summary tables 
  
  assign( paste0("summary_list_", name_control, "_", name_mutant) , c( get( paste0("summary_tables_", name_control)),  get(paste0("summary_tables_", name_mutant)) )) #merges the two summary tables above in one list
  
  #creates the summary matrix: each row is a gene, the first n columns are the counts coming from the control's replicates, the last p columns are the counts from the mutant replicates
  assign( paste0( "columns_list_", name_control, "_", name_mutant), sapply(get( paste0("summary_list_", name_control, "_", name_mutant) ), `[[` , 2) )  #takes one column each two (i.e. only the columns containing the counts) from the counts list
  
  assign( paste0( "summary_matrix_", name_control, "_", name_mutant),  matrix(unlist( get( paste0( "columns_list_", name_control, "_", name_mutant) ) , use.names = FALSE), ncol = length( get( paste0("summary_list_", name_control, "_", name_mutant) ) ) )  )#convert the list into a matrix, for convenience
  
  assign( paste0( "summary_matrix_", name_control, "_", name_mutant, "_with_names"), get(  paste0( "summary_matrix_", name_control, "_", name_mutant) ) )  #the counts matrix with names is also created; at this stage is the same of the counts matrix
  
  
  col_names <-c(grep(name_control, samples_names, value=TRUE),  grep(name_mutant, samples_names, value = TRUE))  # takes the right names for the columns of the counts matrix, from the sample names 

  dummy<- get( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names") )         #workaround for assigning dynamically colnames and rownames to the counts_matrix - START
  colnames(dummy) <- col_names
  assign(  paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names")  ,  dummy)

  dummy<- get( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names") )
  rownames(dummy) <- genes_names
  assign(  paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names")  ,  dummy)    #workaround for assigning dynamically colnames and rownames to the counts_matrix - END

  dummy<- get( paste0( "summary_matrix_", name_control, "_", name_mutant) )         #workaround for assigning dynamically colnames and rownames to the summary_matrix - START
  colnames(dummy) <- col_names
  rownames(dummy) <- summary_tables[[1]][,1]
  assign(  paste0( "summary_matrix_", name_control, "_", name_mutant)  ,  dummy) #workaround for assigning dynamically colnames and rownames to the summary_matrix - END

  # #Evaluating the number of the reads counted and uncounted by HTSEQ2
  total_uncounted <- apply(get(paste0( "summary_matrix_", name_control, "_", name_mutant))[-1,], 2, sum)
  total_counted <- get(paste0( "summary_matrix_", name_control, "_", name_mutant))[1,]
  total_number <- total_uncounted + total_counted
  fraction_counted <- signif(total_counted/total_number, digits=3)
  void_row<-rep(" ", length(total_counted))
  statistics_matrix <- rbind(total_number, total_counted, total_uncounted,fraction_counted,void_row)
  rownames(statistics_matrix)<-c("TOTAL READS MAPPED", "TOTAL READS COUNTED", "TOTAL READS NON COUNTED", "FRACTION COUNTED" , "DETAILS UNCOUNTED:")

    #merging summary matrix and statistics matrix
  dummy<- rbind(statistics_matrix, get( paste0( "summary_matrix_", name_control, "_", name_mutant) )) 
  assign(  paste0( "summary_matrix_", name_control, "_", name_mutant)  ,  dummy)
  
  #**Defining the "experimental design" -----------------------------------
  comparisons <- sapply(col_names, function(x) substr(x,1,6))  #takes only the first parts of the column names; these are the identifiers of the control and mutant's data, irrespectively of the replicates 

  experimental_design <- data.frame(row.names = col_names, comparisons=comparisons)
  experimental_design$correlated <- c(seq(1: length(grep(name_control, col_names)) ),  seq(1: length(grep(name_mutant, col_names)) ) )
  
  #experimental_design$comparisons<- relevel(experimental_design$comparisons, ref=name_control)
  experimental_design$comparisons<- factor(experimental_design$comparisons, levels=c(name_control, name_mutant))
  
  #**Calling DESeq2 ------------------------

  #Creating the dds data structure, needed from DESEQ2
  dds <- DESeqDataSetFromMatrix(countData= get( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names")) , colData=experimental_design, design=~comparisons)
  
  #Calls DEseq2 on dds and store the results in de
  de<-DESeq(dds)

  #Uses the built-in DESEQ2 results operator for creating a matrix-like structure storing the DE analysis results; the structure is stored in res_raw and subsequently converted in a data frame (res) 
  
  res_raw <-results(de)
  res <- signif(as.data.frame(res_raw), digits = sig_dig) #converts into data frame and sets the number of digits
  res <- cbind(rownames(res), res) #adds one column with the genes ID to the res dataframe (it will be useful later on)
  colnames(res) <- c("ID","Mean of norm counts", "log2 FC (MLE)", "lFC Std Err" , "Wald Stat", "Wald test pval", "BH pval") # sets the column names
  
  
  ##*Plots and Tables -----------------------------------------------------------------------------------------------------------------
  
  #**Assigns dynamic names to the table to export, taking the res data frame defined above ---------------------------------- 
  assign(paste0("results_table_",name_control,"_", name_mutant),  res ) #takes the whole res data frame
  dummy<-merge(annotation_table, get(paste0("results_table_",name_control,"_", name_mutant)), by.x="GeneSymbol", by.y="ID")
  assign(paste0("results_table_",name_control,"_", name_mutant), dummy)
  
  
  assign(paste0("results_table_topscore_",name_control,"_", name_mutant), res[which(abs(res$`log2 FC (MLE)`)>lfc & res$`BH pval` <pval),]) #takes only the rows of the res data frame that have the best log2FC and the best BH pval
  dummy<-merge(annotation_table, get(paste0("results_table_topscore_",name_control,"_", name_mutant)), by.x="GeneSymbol", by.y="ID")
  assign(paste0("results_table_topscore_",name_control,"_", name_mutant), dummy)
  
  
  #**Prints the tables above in .csv---------------------------------------------------------------------------------
  
  #write.table(get(paste0("results_table_topscore_",name_control,"_", name_mutant)), file=paste0("results_table_topscore_",name_control,"_", name_mutant, ".tsv"),quote=F,sep="\t", row.names = FALSE)
  
  #write.table(get(paste0("results_table_",name_control,"_", name_mutant)), file=paste0("results_table_",name_control,"_", name_mutant, ".tsv"), quote=F,sep="\t", row.names = FALSE)
  
  #write.table(get(paste0("counts_matrix_",name_control,"_", name_mutant, "_with_names")), file=paste0("counts_matrix_",name_control,"_", name_mutant, ".tsv"), quote=F,sep="\t", row.names = FALSE)
  
  #**Building the datatables ---------------------------------------------------------------------------------------------------------
  #The datatables are widgets created through the saveWidget function; this can "automatically" be sorted clicking on it --> Useful for having a general overview
  
  #***Summingup datatable ------------------------------------------
  #Builds the datatable containing all the resuls of the DE analysis
  
  #Creates the summingup_matrix, which includes only some columns of the correspondent results_table (more handy for visualisation) 
  assign(paste0("summingup_matrix_",name_control, "_", name_mutant), get(paste0("results_table_",name_control,"_", name_mutant))[, c(1:7,10,11)])
  dummy <- get(paste0("summingup_matrix_",name_control, "_", name_mutant))
  rownames(dummy) <- c()
  assign( paste0("summingup_matrix_",name_control, "_", name_mutant), dummy )
  #Creates a dynamic table (widget) of all the results
  assign(paste0("summingup_datatable_",name_control, "_", name_mutant) , datatable(get(paste0("summingup_matrix_",name_control, "_", name_mutant))) )
  #saves the datatable widget to in the working directory
  saveWidget( get(paste0("summingup_datatable_",name_control, "_", name_mutant)), file= paste0("summingup_datatable_",name_control, "_", name_mutant, ".html") )

  #***Topscores datatable ----------------------------------------- 
  #Builds the matrix containing only the top log2FC (adjusted) top scores (independently on the pvalues)
  assign(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant),  subset(get(paste0("summingup_matrix_",name_control, "_", name_mutant)),  (abs(get(paste0("summingup_matrix_",name_control, "_", name_mutant))[,"log2 FC (MLE)"]) >lfc &  get(paste0("summingup_matrix_",name_control, "_", name_mutant))[,"BH pval"] <pval )  ) ) 
  dummy <- get(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant))
  rownames(dummy) <- c()
  assign( paste0("summingup_matrix_topscores_",name_control, "_", name_mutant), dummy )
  #Creates a dynamic table (widget) of the topscores
  assign(paste0("topscores_datatable_",name_control, "_", name_mutant) , datatable(get(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant))) )
  #saves the datatable widget to in the working directory
  saveWidget( get(paste0("topscores_datatable_",name_control, "_", name_mutant)), file= paste0("topscores_datatable_",name_control, "_", name_mutant, ".html") )

  #**Dispersion plot---------------------------------------------------------------------------------------------
  #This will not be stored or printed; for sanity check purposes only
  plotDispEsts(de, main=paste(name_mutant, " vs ", name_control))

  #**MA plot -----------------------------------------------------------------------------------------------------
  #Plot of the mean of normalised (according to DESEq) counts of the control vs. the log2fold change "corrected as well"
  #***Plot static MA -------------------------------------------------------------------------------------------------- 

  #Creates the dataframe for ggplot
  MA_dataframe <- data.frame(Ln_mean=log(res$`Mean of norm counts`), foldchange = res$`log2 FC (MLE)`, pvaladj=res$`BH pval`)
  rownames(MA_dataframe) <- rownames(res)
  MA_dataframe <- MA_dataframe[which(!is.na(MA_dataframe$foldchange)), ]
  MA_dataframe$Diff_Exp <- rep(0, nrow(MA_dataframe))
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)>=lfc  )] <- "Relevant log2 FC" 
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)>=lfc & MA_dataframe$pvaladj<=pval)] <- "Relevant log2 FC and Pval" 
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)<lfc)] = "Non significant" 

  #Creates the ggplot
  r <-ggplot(MA_dataframe, aes(x=Ln_mean, y=foldchange, text=rownames(MA_dataframe)))+
    geom_point(aes(colour= Diff_Exp), size=.5)+
    geom_hline(yintercept=0, linetype=1, color="green") + geom_hline(yintercept=lfc,linetype=3, color="green") + geom_hline(yintercept=-lfc, linetype=3, color="green")+
    scale_colour_manual(values = c("Relevant log2 FC and Pval" ="red", "Non significant" = "black", "Relevant log2 FC" ="blue"))+
    xlab("ln mean of norm. counts") + ylab("log2 fold change")+ scale_x_continuous(labels = function(x)as.integer(exp(x)))+
    #+ylim(-4, 4)
    labs(aesthetic='custom text')+
    ggtitle(paste("MA plot", name_control, "vs.", name_mutant))

  #Saves the plot in a variable
  assign(paste("static", "MAplot", name_control, name_mutant, sep = "_"), r)

  #Saves the pdf of the plot in the OUTPUT directory
  pdf(file= paste("static", "MAplot", name_control, name_mutant, ".pdf", sep = "_"))
  print(r)
  dev.off()

  #***Plot dynamic MA -------------------------------------------------------------------------------------------------- 

  #Creates the plot
  s<- ggplotly(r, tooltip=c("text", "x", "y") )

  #SAves the plot in a variable
  assign(paste("dynamic", "MAplot", name_control, name_mutant, sep = "_"), s)

  #Saves the WIDGET of the plot in the OUTPUT directory
  print(s)
  saveWidget(s, file= paste0("dynamic_MAplot",name_control, "_", name_mutant, ".html") )

  #**Volcano Plots --------------------------------------------------------------

  #***Plot static volcano--------------------------------------------------------

  #creates a data frame with some of the columns taken from res which, in turn, summarises the DESEq2 results
  tab = data.frame(logFC = res$`log2 FC (MLE)`, negLogPval = -log10(res$`BH pval`))
  rownames(tab) <- rownames(res)

  #Identifies the DE genes
  candidate_results <- subset(res, (abs(res$`log2 FC (MLE)`) > lfc & res$`BH pval` < pval))
  assign( paste0("candidate_results_tab_",name_control,"_",name_mutant), subset(tab, (abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval))) )

  #Identifies the not DE genes
  non_candidate_results <- subset(res, (abs(res$`log2 FC (MLE)`) <= lfc | res$`BH pval` >= pval))
  assign(paste0("non_candidate_results_tab_",name_control,"_",name_mutant), subset(tab, (abs(tab$logFC) <= lfc | tab$negLogPval <= -log10(pval))) )

  #Mark DE and non DE genes in the dataframe 
  dummy <- get(paste0("non_candidate_results_tab_",name_control,"_",name_mutant))
  dummy$Diff_Exp <- "DE -"
  assign(paste0("non_candidate_results_tab_",name_control,"_",name_mutant), dummy)

  dummy <- get(paste0("candidate_results_tab_",name_control,"_",name_mutant))
  if(nrow(dummy)>0){dummy$Diff_Exp <- "DE +"}
  assign(paste0("candidate_results_tab_",name_control,"_",name_mutant), dummy)

  #merge the "candidate" and "non candidate" dataframes
  assign(paste0("results_tab_",name_control,"_",name_mutant), rbind(get(paste0("candidate_results_tab_",name_control,"_",name_mutant)), get(paste0("non_candidate_results_tab_",name_control,"_",name_mutant)) ))

  #builds the ggplot
  h<-ggplot( get(paste0("results_tab_",name_control,"_",name_mutant)), aes(x=logFC, y=negLogPval, text=rownames(get(paste0("results_tab_",name_control,"_",name_mutant))) ) )+
   geom_point(aes(colour= Diff_Exp), size=.5)+
   geom_hline(yintercept=-log10(pval), linetype=3, color="green") + geom_vline(xintercept=-c(-lfc, lfc), linetype=3, color="blue")+
   scale_colour_manual(values = c("DE +" ="red", "DE -" = "black"))+
   xlab("log2 fold change") + ylab("-log10 pvalue")+ 
   ggtitle(paste("Volcano plot", name_control, "vs.", name_mutant))

  #Saves the plot in a variable
  assign(paste("static", "Vplot", name_control, name_mutant, sep = "_"), h)

  #Saves the pdf of the plot in the OUTPUT directory
  pdf(file= paste("static", "Vplot", name_control, name_mutant, ".pdf", sep = "_"))
  print(h)
  dev.off()

  #***Plot dynamic volcano----------------------------------------------------------------------------------------------------------

  #Creates the plot
  k<- ggplotly(h, tooltip=c("text", "x", "y") )

  #Saves the plot in a variable
  assign(paste("dynamic", "Vplot", name_control, name_mutant, sep = "_"), k)

  print(k)

  #Saves the WIDGET of the plot in the OUTPUT directory
  saveWidget(k, file= paste0("dynamic_Vplot",name_control, "_", name_mutant, ".html") )

  #Updates the loop counter
  print(num_comparisons)
  num_comparisons= num_comparisons +1
} 
#*End of the loop --------------------------------------------


# #PRODUCES ADDITIONAL TABLES =================================================

#**Produces the genes_lenghts  ---------------------------------------------------------------
#takes the genes lengths from the first feature counts input file and creates the genes_lenghts table
feature_counts_table <- fread(input_files[[1]])
genes_lenghts <- as.matrix(feature_counts_table$Length)
rownames(genes_lenghts) <- feature_counts_table$Geneid
colnames(genes_lenghts) <- "Lenght"

#**Produces the annotation_table_with_length ---------------------------------------------------------------
annotation_table_with_length <- merge(annotation_table, genes_lenghts, all.x=T, by.x="GeneSymbol", by.y="row.names")

#** Raw counts, CPM, TPM  ---------------------------------------------------------------

# produces the raw_counts matrix
# merges the raw_counts matrix (all the raw counts for each sample) with the genes_lenghts_table
raw_counts <- (merge(annotation_table_with_length, counts(de), by.x="GeneSymbol", by.y="row.names", all.x=T))
write.csv(raw_counts, file="raw_counts.csv", row.names=FALSE)

# produces the Raw Counts Normalised (DESeq2 normalisation) table 
raw_counts_normalised <- (merge(annotation_table_with_length, counts(de, normalized=T), by.x="GeneSymbol", by.y="row.names", all.x=T))
write.csv(raw_counts_normalised, file="raw_counts_normalised.csv", row.names=FALSE)

# computes the CPM on the raw counts
CPM_working = subset(raw_counts, select = c(7:ncol(raw_counts)))
CPM_working$sum <- rowSums(CPM_working)
CPM <- apply(raw_counts[,c(7:ncol(raw_counts))],2, function(x){x*10^6/CPM_working$sum})
CPM <- cbind(raw_counts[,c(1:6)],CPM)
write.csv(CPM, file="raw_counts_CPM.csv", row.names=FALSE)

# computes the TPM
RPK <-  (raw_counts[,c(7:ncol(raw_counts))])/(raw_counts$Lenght/1000)  #<- Reads Per Kilobase (Normalises the counts for the genes length, expressed in kilobases)
Scaling_factor <- apply(RPK,2,sum)/10^6
TPM <- sweep(RPK, 2, Scaling_factor, FUN = '/')
TPM <- cbind(raw_counts[,c(1:6)],TPM)
write.csv(TPM, file="raw_counts_TPM.csv", row.names=FALSE)

#** Produces the results_tables  ---------------------------------------------------------------

#computes the average CPM for controls and mutants
assign(paste0("average_",name_control), apply(CPM[,grep(colnames(CPM), pattern=name_control)],1,mean ) )
dummy<-as.data.frame(get(paste0("average_",name_control)))
colnames(dummy) <- paste0("Average CPM ",name_control)
rownames(dummy) <- CPM$gene_id
assign(paste0("average_",name_control), dummy)
#
assign(paste0("average_",names_mutants), apply(CPM[,grep(colnames(CPM), pattern=names_mutants)],1,mean ) )
dummy<-as.data.frame(get(paste0("average_",names_mutants)))
colnames(dummy) <- paste0("Average CPM ",names_mutants)
rownames(dummy) <- CPM$gene_id
assign(paste0("average_",names_mutants), dummy)
#
#merges the averages CPMs tables with the results table and the genes_length table
dummy<- merge(get(paste0("average_",name_control)),  get(paste0("average_",names_mutants)), by="row.names") 
rownames(dummy) <- dummy$Row.names
dummy<- dummy[,-1]
#
assign(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM"), merge( get(paste0("results_table_",name_control,"_", names_mutants)), dummy, by.y="row.names", by.x="gene_id") ) 
assign(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM"), merge( get(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM")), genes_lenghts, by.x="GeneSymbol", by.y="row.names", all.x=T ) )
write.csv(get(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM")), file=paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM.csv"), row.names = FALSE)
#
assign(paste0("results_table_topscore_", name_control,"_", names_mutants, "_", "CPM"), merge( get(paste0("results_table_topscore_",name_control,"_", names_mutants)), dummy, by.y="row.names", by.x="gene_id") ) 
assign(paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM"), merge( get(paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM")), genes_lenghts, by.x="GeneSymbol", by.y="row.names", all.x=T ) )
write.csv(get(paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM")), file=paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM.csv"), row.names = FALSE)

#**Filters the counts matrix  according to the CPM ------------------------

# # Filters the counts matrix eliminating the rows where at least one element violates the condition (low counts threshold)

count_zeroes<- function(x){length(which(x<=.5))}
numberofzeroes <- apply(CPM[,c(7:ncol(CPM))], 1, count_zeroes)
CPM_filtered <- CPM[which(numberofzeroes<=5),]
# write.csv(counts_matrix_cpm_filtered, file="cpm_counts_filtered.csv")
# 
#Filters the results_mtrx with the same criteria above 
results_mtrx <- get(paste0("results_table_",name_control,"_", name_mutant, "_CPM"))
results_mtrx_filtered <- results_mtrx[which(results_mtrx$gene_id %in% CPM_filtered$gene_id), ]
#write.csv(results_mtrx, file="results_table.csv", row.names = FALSE)
write.csv(results_mtrx_filtered, file="results_table_CPM_filtered.csv", row.names = FALSE)
#Filters the results_mtrx with the same criteria above 
results_mtrx <- get(paste0("results_table_",name_control,"_", name_mutant, "_CPM"))
results_mtrx_filtered <- results_mtrx[which(results_mtrx$gene_id %in% CPM_filtered$gene_id), ]
#write.csv(results_mtrx, file="results_table.csv", row.names = FALSE)
write.csv(results_mtrx_filtered, file="results_table_CPM_filtered.csv", row.names = FALSE)

results_mtrx_topscore <- get(paste0("results_table_topscore_",name_control,"_", name_mutant, "_CPM"))
results_mtrx_topscore_filtered <- results_mtrx_topscore[which(results_mtrx_topscore$gene_id %in% CPM_filtered$gene_id), ]
write.csv(results_mtrx_topscore_filtered, file="results_table_CPM_topscore_filtered.csv", row.names = FALSE)

#CREATES A HEATMAP =================================================
library(gplots)
#class(CPM_filtered) <- "numeric"
#CPM_filtered_resorted <-CPM_filtered[order(CPM_filtered[,7], decreasing = TRUE),]
#class(CPM_filtered_resorted) <- "numeric"
CPM_filtered_heat <- as.matrix(CPM_filtered[,c(7:ncol(CPM))])
class(CPM_filtered_heat) <- "numeric"

CPM_filtered_heat_sorted <-CPM_filtered_heat[order(CPM_filtered_heat[,1], decreasing = TRUE),]

pdf(file="m1_dm0_hm.pdf")
heatmap.2(CPM_filtered_heat_sorted[c(1:7000),], distfun=function(x) dist(x, method="minkowski"), hclustfun=function(x) hclust(x, method="ward.D2"), scale="row", trace = 'none', labRow = FALSE, dendrogram="column", margins=c(8,1), cexCol = .75)
dev.off()



# #CREATES THE TABLE FOR GSEA =====================================================
# #The data are taken from the res_raw table.
GSEA_table <- data.frame(Sign= sign(res_raw$log2FoldChange), pval=(res_raw$padj),stringsAsFactors = FALSE)
GSEA_table$metric <- -log10(GSEA_table$pval)/GSEA_table$Sign
rownames(GSEA_table) <- rownames(res_raw)

GSEA_input_ranked_table <- cbind(rownames(GSEA_table), GSEA_table$metric)
colnames(GSEA_input_ranked_table) <- cbind("Gene name", "Metric")
GSEA_input_ranked_table<-GSEA_input_ranked_table[-which(is.na(GSEA_input_ranked_table[,"Metric"])),]

write.table(GSEA_input_ranked_table, file=paste0("GSEA_input_ranked_table_",name_control,"_", name_mutant, ".rnk"), quote=F,sep="\t", row.names = FALSE)




## further analysis, interpretation, and figures =====================================================
require(dplyr)


vplot_tab <- merge(results_table_WT_dm0_m1_dm0_CPM, annotation_table, by="gene_id")
vplot_tab <- vplot_tab %>% rename("BH_pval" = "BH pval")
vplot_tab <- vplot_tab %>% rename("log2FC" = "log2 FC (MLE)")

########## make volcano plot 
library(ggplot2)
library(ggrepel)
library(dplyr)
library(pheatmap)

vplot_tab$neglog_p = -log10(vplot_tab$BH_pval)
vplot_tab <- vplot_tab[complete.cases(vplot_tab), ]

############  edit formatting of signficance for labelleing

vplot_tab$significant = ifelse(vplot_tab$neglog_p > 2 & vplot_tab$log2FC <=-1.5 | vplot_tab$neglog_p > 2 & vplot_tab$log2FC>=1.5, "sig", "not")
vplot_tab_label1 = subset(vplot_tab, neglog_p > 80)
vplot_tab_label2 = subset(vplot_tab, neglog_p > 50)
vplot_tab_label2 <- subset(vplot_tab_label2, log2FC <=-6 | log2FC>=6)
vplot_tab_label3 = subset(vplot_tab, neglog_p > 10 & log2FC <=-10 | neglog_p > 10 & log2FC >=8.5)
vplot_tab_label4 = subset(vplot_tab, neglog_p > 50 & vplot_tab$log2FC <=-7 | vplot_tab$neglog_p > 50 & vplot_tab$log2FC>=8)
vplot_tab_label_final <- rbind(vplot_tab_label1, vplot_tab_label2)
vplot_tab_label_final <- rbind(vplot_tab_label_final, vplot_tab_label3)
vplot_tab_label_final <- rbind(vplot_tab_label_final, vplot_tab_label4)
vplot_tab_label_final <- vplot_tab_label_final %>% distinct(GeneSymbol.x, .keep_all = TRUE)

############

m1_dm0_vol <- ggplot(data=vplot_tab, aes(x=log2FC, y=neglog_p, colour=significant)) + geom_point(alpha=0.4, size=1.75) + xlab("Log2 Fold change") + ylab("-log10 p-value") + theme_bw() + theme(legend.position="right") + geom_text_repel(data = vplot_tab_label_final, aes(label = GeneSymbol.x), size = 3, key_glyph = "point")
m1_dm0_vol

pdf(file="m1_dm0_vol.pdf",width=9,height=6)
m1_dm0_vol
dev.off()

############

######################## make heatmaps

##### hm of significantly differentially expressed genes

vplot_tab_hm <- vplot_tab
vplot_tab_hm$significant = ifelse(vplot_tab$BH_pval <=.0001 & vplot_tab$log2FC <=-3 | vplot_tab$log2FC>=2.2, "sig", "not")
vplot_tab_hm$sig2 = ifelse(vplot_tab$BH_pval <=.01, "sig", "not")


norm_counts <- as.data.frame(counts(de, normalized=T))
norm_counts$GeneSymbol <- rownames(norm_counts)
numberofzeroes <- apply(norm_counts[,c(1:ncol(norm_counts))], 1, count_zeroes)
norm_counts_filtered <- norm_counts[which(numberofzeroes<=5),]
norm_counts_filtered$GeneSymbol.x <- rownames(norm_counts_filtered)

hm_tab <- merge(norm_counts_filtered, vplot_tab_hm, by="GeneSymbol.x")
hm_tab <- hm_tab[complete.cases(hm_tab), ]
write.table(hm_tab, file="norm_counts_gsea.csv",sep=",")

hm_tab_sig = subset(hm_tab, significant=="sig")

hm_sig <- pheatmap(hm_tab_sig[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", cutree_rows = 7, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, main = "Significantly differentially expressed genes")

pdf(file="m1_dm0_hm_sig.pdf",width=8,height=10)
hm_sig
dev.off()


##### hm of adipogenesis-related genes

hm_tab_adip = subset(hm_tab, GeneSymbol=="Lep" | GeneSymbol=="Adipoq" | GeneSymbol=="Cd36" | GeneSymbol=="Pparg" | GeneSymbol=="Glut4" | GeneSymbol=="Fasn"| GeneSymbol=="Plin1"| GeneSymbol=="Plin2"| GeneSymbol=="Plin4"| GeneSymbol=="Fabp4"| GeneSymbol=="Isnr"| GeneSymbol=="Lpl"| GeneSymbol=="Agpat2"| GeneSymbol=="Bscl2"| GeneSymbol=="Cidec"| GeneSymbol=="Cebpa"| GeneSymbol=="Acaca"| GeneSymbol=="Ppargc1a"| GeneSymbol=="Ppargc1b"| GeneSymbol=="Slc2a4" )

rownames(hm_tab_adip) = hm_tab_adip$GeneSymbol
hm_adip_annot = data.frame("Sig" = hm_tab_adip$sig2)
rownames(hm_adip_annot) = rownames(hm_tab_adip)

hm_adip <- pheatmap(hm_tab_adip[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_adip$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_adip_annot, legend_labels = "Relative expression", main = "Adipogenesis-related genes")

pdf(file="m1_dm0_hm_adip.pdf",width=5,height=6)
hm_adip
dev.off()

##### hm of ISR-related genes

hm_tab_ISR = subset(hm_tab, GeneSymbol=="Atf4" | GeneSymbol=="Atf5" |GeneSymbol=="Atf6" | GeneSymbol=="Xbp1" | GeneSymbol=="Gdf15" | GeneSymbol=="Fgf21" | GeneSymbol=="Trib3"| GeneSymbol=="Eif2ak4"| GeneSymbol=="Ddit3"| GeneSymbol=="Gadd34"| GeneSymbol=="Perk"| GeneSymbol=="Eif2ak1"| GeneSymbol=="Hif1a")
hm_tab_ISR <- hm_tab_ISR %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_ISR) = hm_tab_ISR$GeneSymbol
hm_ISR_annot = data.frame("Sig" = hm_tab_ISR$sig2)
rownames(hm_ISR_annot) = rownames(hm_tab_ISR)

hm_ISR <- pheatmap(hm_tab_ISR[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_ISR$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_ISR_annot, main = "ISR genes")

pdf(file="m1_dm0_hm_ISR.pdf",width=5,height=6)
hm_ISR
dev.off()

##### hm of mitochondrial-related genes

hm_tab_mito = subset(hm_tab, GeneSymbol=="Mfn1" | GeneSymbol=="mfn1" | GeneSymbol=="Opa1" | GeneSymbol=="Fis1" | GeneSymbol=="Tomm20" | GeneSymbol=="Ppargc1a"| GeneSymbol=="Ppargc1b"| GeneSymbol=="Cs" | GeneSymbol=='mt-Rnr1' | GeneSymbol=='mt-Rnr2' | GeneSymbol=='mt-Tl1' | GeneSymbol=='mt-Nd1' | GeneSymbol=='mt-Ti' | GeneSymbol=='mt-Tq' | GeneSymbol=='mt-Tm' | GeneSymbol=='mt-Nd2' | GeneSymbol=='mt-Tw' | GeneSymbol=='mt-Ta' | GeneSymbol=='mt-Tn' | GeneSymbol=='mt-Tc' | GeneSymbol=='mt-Ty' | GeneSymbol=='mt-Co1' | GeneSymbol=='mt-Ts1' | GeneSymbol=='mt-Td' | GeneSymbol=='mt-Co2' | GeneSymbol=='mt-Atp8' | GeneSymbol=='mt-Atp6' | GeneSymbol=='mt-Co3' | GeneSymbol=='mt-Tg' | GeneSymbol=='mt-Nd3' | GeneSymbol=='mt-Tr' | GeneSymbol=='mt-Nd4' | GeneSymbol=='mt-Th' | GeneSymbol=='mt-Ts2' | GeneSymbol=='mt-Tl2' | GeneSymbol=='mt-Nd5' | GeneSymbol=='mt-Nd6' | GeneSymbol=='mt-Te' | GeneSymbol=='mt-Cytb' | GeneSymbol=='mt-Tt' | GeneSymbol=='mt-Tp' | GeneSymbol=='mt-Nd4l' | GeneSymbol=='Sdha' | GeneSymbol=="Prkn" | GeneSymbol=="Pink1" | GeneSymbol=="Bnip3" | GeneSymbol=="Nrf1" | GeneSymbol==""| GeneSymbol=="Mff"| GeneSymbol=="Cycs")
hm_tab_mito <- hm_tab_mito %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_mito) = hm_tab_mito$GeneSymbol
hm_mito_annot = data.frame("Sig" = hm_tab_mito$sig2)
rownames(hm_mito_annot) = rownames(hm_tab_mito)

hm_mito <- pheatmap(hm_tab_mito[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_mito$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial function-related genes")

pdf(file="m1_dm0_hm_mito.pdf",width=5,height=6)
hm_mito
dev.off()

##### hm of inflammation-related genes

hm_tab_inflam = subset(hm_tab, GeneSymbol=='Ifng' |GeneSymbol=='Cd68' |GeneSymbol=='Cd11b' |GeneSymbol=='Itgam' |GeneSymbol=='Ccl2' |GeneSymbol=='Cd4' |GeneSymbol=='Cd3g' |GeneSymbol=='Cd8a' |GeneSymbol=='Tnf' |GeneSymbol=='Il1b' |GeneSymbol=='Il4' |GeneSymbol=='Il13' |GeneSymbol=='Il10' |GeneSymbol=='Ptprc' |GeneSymbol=='Adgre1' |GeneSymbol=='Il6' |GeneSymbol=='Mif' |GeneSymbol=='Tlr4')
hm_tab_inflam <- hm_tab_inflam %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_inflam) = hm_tab_inflam$GeneSymbol
hm_inflam_annot = data.frame("Sig" = hm_tab_inflam$sig2)
rownames(hm_inflam_annot) = rownames(hm_tab_inflam)

hm_inflam <- pheatmap(hm_tab_inflam[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_inflam$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_inflam_annot, legend_labels = "Relative expression", main = "Inflammatory genes")

pdf(file="m1_dm0_hm_inflam.pdf",width=5,height=6)
hm_inflam
dev.off()


##### hm of fibrosis-related genes

hm_tab_fibros = subset(hm_tab, GeneSymbol=='Tgfb1' |GeneSymbol=='Sod1' |GeneSymbol=='Hif1a' |GeneSymbol=='Pdgfa' |GeneSymbol=='Gtf2ird1' |GeneSymbol=='Inhba' |GeneSymbol=='Rock1')
hm_tab_fibros <- hm_tab_fibros %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_fibros) = hm_tab_fibros$GeneSymbol
hm_fibros_annot = data.frame("Sig" = hm_tab_fibros$sig2)
rownames(hm_fibros_annot) = rownames(hm_tab_fibros)

hm_fibros <- pheatmap(hm_tab_fibros[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_fibros$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_fibros_annot, legend_labels = "Relative expression", main = "Fibrosis-related genes")

pdf(file="m1_dm0_hm_fibros.pdf",width=5,height=6)
hm_fibros
dev.off()



##### hm of hallmark adipogenesis genes

hm_tab_hall_adip1 = subset(hm_tab, GeneSymbol=='Abca1' |GeneSymbol=='Abcb8' |GeneSymbol=='Acaa2' |GeneSymbol=='Acadl' |GeneSymbol=='Acadm' |GeneSymbol=='Acads' |GeneSymbol=='Acly' |GeneSymbol=='Aco2' |GeneSymbol=='Acox1' |GeneSymbol=='Adcy6' |GeneSymbol=='Adig' |GeneSymbol=='Adipoq' |GeneSymbol=='Adipor2' |GeneSymbol=='Agpat3' |GeneSymbol=='Aifm1' |GeneSymbol=='Ak2' |GeneSymbol=='Aldh2' |GeneSymbol=='Aldoa' |GeneSymbol=='Angpt1' |GeneSymbol=='Angptl4' |GeneSymbol=='Aplp2' |GeneSymbol=='Apoe' |GeneSymbol=='Araf' |GeneSymbol=='Arl4A' |GeneSymbol=='Atl2' |GeneSymbol=='Atp1B3' |GeneSymbol=='Atp5Po' |GeneSymbol=='Baz2A' |GeneSymbol=='Bckdha' |GeneSymbol=='Bcl2L13' |GeneSymbol=='Bcl6' |GeneSymbol=='C3' |GeneSymbol=='Cat' |GeneSymbol=='Cavin1' |GeneSymbol=='Cavin2' |GeneSymbol=='Ccng2' |GeneSymbol=='Cd151' |GeneSymbol=='Cd302' |GeneSymbol=='Cd36' |GeneSymbol=='Cdkn2C' |GeneSymbol=='Chchd10' |GeneSymbol=='Chuk' |GeneSymbol=='Cidea' |GeneSymbol=='Cmbl' |GeneSymbol=='Cmpk1' |GeneSymbol=='Col15A1' |GeneSymbol=='Col4A1' |GeneSymbol=='Coq3' |GeneSymbol=='Coq5' |GeneSymbol=='Coq9' |GeneSymbol=='Cox6A1' |GeneSymbol=='Cox7B' |GeneSymbol=='Cox8A' |GeneSymbol=='Cpt2' |GeneSymbol=='Crat' |GeneSymbol=='Cs' |GeneSymbol=='Cyc1' |GeneSymbol=='Cyp4B1' |GeneSymbol=='Dbt' |GeneSymbol=='Ddt' |GeneSymbol=='Decr1' |GeneSymbol=='Dgat1' |GeneSymbol=='Dhcr7' |GeneSymbol=='Dhrs7' |GeneSymbol=='Dhrs7B' |GeneSymbol=='Dlat' |GeneSymbol=='Dld' |GeneSymbol=='Dnajb9' |GeneSymbol=='Dnajc15' |GeneSymbol=='Dram2' |GeneSymbol=='Ech1' |GeneSymbol=='Echs1' |GeneSymbol=='Elmod3' |GeneSymbol=='Elovl6' |GeneSymbol=='Enpp2' |GeneSymbol=='Ephx2' |GeneSymbol=='Esrra' |GeneSymbol=='Esyt1' |GeneSymbol=='Etfb' |GeneSymbol=='Fabp4' |GeneSymbol=='Fah' |GeneSymbol=='Fzd4' |GeneSymbol=='G3Bp2' |GeneSymbol=='Gadd45A' |GeneSymbol=='Gbe1' |GeneSymbol=='Ghitm' |GeneSymbol=='Gpam' |GeneSymbol=='Gpat4' |GeneSymbol=='Gpd2' |GeneSymbol=='Gphn' |GeneSymbol=='Gpx3' |GeneSymbol=='Gpx4' |GeneSymbol=='Grpel1' |GeneSymbol=='Hadh' |GeneSymbol=='Hibch' |GeneSymbol=='Hspb8' |GeneSymbol=='Idh1' |GeneSymbol=='Idh3A' |GeneSymbol=='Idh3G' |GeneSymbol=='Ifngr1' |GeneSymbol=='Immt' |GeneSymbol=='Itga7' |GeneSymbol=='Itih5' |GeneSymbol=='Itsn1' |GeneSymbol=='Jagn1' |GeneSymbol=='Lama4' |GeneSymbol=='Lep' |GeneSymbol=='Lifr' |GeneSymbol=='Lipe' |GeneSymbol=='Lpcat3' |GeneSymbol=='Lpl' |GeneSymbol=='Ltc4S' |GeneSymbol=='Map4K3' |GeneSymbol=='Mccc1' |GeneSymbol=='Mdh2' |GeneSymbol=='Me1' |GeneSymbol=='Mgll' |GeneSymbol=='Mgst3' |GeneSymbol=='Miga2' |GeneSymbol=='Mrap' |GeneSymbol=='Mrpl15' |GeneSymbol=='Mtarc2')

hm_tab_hall_adip2 = subset(hm_tab, GeneSymbol=='Mtch2' |GeneSymbol=='Mylk' |GeneSymbol=='Nabp1' |GeneSymbol=='Ndufa5' |GeneSymbol=='Ndufab1' |GeneSymbol=='Ndufb7' |GeneSymbol=='Ndufs3' |GeneSymbol=='Nkiras1' |GeneSymbol=='Nmt1' |GeneSymbol=='Omd' |GeneSymbol=='Orm1' |GeneSymbol=='Pdcd4' |GeneSymbol=='Pemt' |GeneSymbol=='Pex14' |GeneSymbol=='Pfkfb3' |GeneSymbol=='Pfkl' |GeneSymbol=='Pgm1' |GeneSymbol=='Phldb1' |GeneSymbol=='Phyh' |GeneSymbol=='Pim3' |GeneSymbol=='Plin2' |GeneSymbol=='Por' |GeneSymbol=='Pparg' |GeneSymbol=='Ppm1B' |GeneSymbol=='Ppp1R15B' |GeneSymbol=='Prdx3' |GeneSymbol=='Preb' |GeneSymbol=='Ptcd3' |GeneSymbol=='Ptger3' |GeneSymbol=='Qdpr' |GeneSymbol=='Rab34' |GeneSymbol=='Reep5' |GeneSymbol=='Reep6' |GeneSymbol=='Retn' |GeneSymbol=='Retsat' |GeneSymbol=='Riok3' |GeneSymbol=='Rmdn3' |GeneSymbol=='Rnf11' |GeneSymbol=='Rreb1' |GeneSymbol=='Rtn3' |GeneSymbol=='Samm50' |GeneSymbol=='Scarb1' |GeneSymbol=='Scp2' |GeneSymbol=='Sdhb' |GeneSymbol=='Sdhc' |GeneSymbol=='Slc19A1' |GeneSymbol=='Slc1A5' |GeneSymbol=='Slc25A1' |GeneSymbol=='Slc25A10' |GeneSymbol=='Slc27A1' |GeneSymbol=='Slc5A6' |GeneSymbol=='Slc66A3' |GeneSymbol=='Sncg' |GeneSymbol=='Sod1' |GeneSymbol=='Sorbs1' |GeneSymbol=='Sowahc' |GeneSymbol=='Sparcl1' |GeneSymbol=='Sqor' |GeneSymbol=='Sspn' |GeneSymbol=='Stat5A' |GeneSymbol=='Stom' |GeneSymbol=='Suclg1' |GeneSymbol=='Sult1A1' |GeneSymbol=='Taldo1' |GeneSymbol=='Tank' |GeneSymbol=='Tkt' |GeneSymbol=='Tob1' |GeneSymbol=='Tst' |GeneSymbol=='Ubc' |GeneSymbol=='Ubqln1' |GeneSymbol=='Uck1' |GeneSymbol=='Ucp2' |GeneSymbol=='Uqcr10' |GeneSymbol=='Uqcr11' |GeneSymbol=='Uqcrc1' |GeneSymbol=='Uqcrq' |GeneSymbol=='Vegfb' |GeneSymbol=='Ywhag')

hm_tab_hall_adip <- rbind(hm_tab_hall_adip1, hm_tab_hall_adip2)

hm_tab_hall_adip <- hm_tab_hall_adip %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_adip) = hm_tab_hall_adip$GeneSymbol
hm_hall_adip_annot = data.frame("Sig" = hm_tab_hall_adip$sig2)
rownames(hm_hall_adip_annot) = rownames(hm_tab_hall_adip)

hm_hall_adip <- pheatmap(hm_tab_hall_adip[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_adip$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_adip_annot, legend_labels = "Relative expression", main = "HALLMARK_ADIPOGENESIS genes")

pdf(file="m1_dm0_hm_hall_adip.pdf",width=6,height=12)
hm_hall_adip
dev.off()


##### hm of hallmark oxphos genes

hm_tab_hall_oxphos1 = subset(hm_tab, GeneSymbol=='Abcb7' |GeneSymbol=='Acaa1' |GeneSymbol=='Acaa2' |GeneSymbol=='Acadm' |GeneSymbol=='Acadsb' |GeneSymbol=='Acadvl' |GeneSymbol=='Acat1' |GeneSymbol=='Aco2' |GeneSymbol=='Afg3L2' |GeneSymbol=='Aifm1' |GeneSymbol=='Alas1' |GeneSymbol=='Aldh6A1' |GeneSymbol=='Atp1B1' |GeneSymbol=='Atp5F1A' |GeneSymbol=='Atp5F1B' |GeneSymbol=='Atp5F1C' |GeneSymbol=='Atp5F1D' |GeneSymbol=='Atp5F1E' |GeneSymbol=='Atp5Mc1' |GeneSymbol=='Atp5Mc2' |GeneSymbol=='Atp5Mc3' |GeneSymbol=='Atp5Me' |GeneSymbol=='Atp5Mf' |GeneSymbol=='Atp5Mg' |GeneSymbol=='Atp5Pb' |GeneSymbol=='Atp5Pd' |GeneSymbol=='Atp5Pf' |GeneSymbol=='Atp5Po' |GeneSymbol=='Atp6Ap1' |GeneSymbol=='Atp6V0B' |GeneSymbol=='Atp6V0C' |GeneSymbol=='Atp6V0E1' |GeneSymbol=='Atp6V1C1' |GeneSymbol=='Atp6V1D' |GeneSymbol=='Atp6V1E1' |GeneSymbol=='Atp6V1F' |GeneSymbol=='Atp6V1G1' |GeneSymbol=='Atp6V1H' |GeneSymbol=='Bax' |GeneSymbol=='Bckdha' |GeneSymbol=='Bdh2' |GeneSymbol=='Casp7' |GeneSymbol=='Cox10' |GeneSymbol=='Cox11' |GeneSymbol=='Cox15' |GeneSymbol=='Cox17' |GeneSymbol=='Cox4I1' |GeneSymbol=='Cox5A' |GeneSymbol=='Cox5B' |GeneSymbol=='Cox6A1' |GeneSymbol=='Cox6B1' |GeneSymbol=='Cox6C' |GeneSymbol=='Cox7A2' |GeneSymbol=='Cox7A2L' |GeneSymbol=='Cox7B' |GeneSymbol=='Cox7C' |GeneSymbol=='Cox8A' |GeneSymbol=='Cpt1A' |GeneSymbol=='Cs' |GeneSymbol=='Cyb5A' |GeneSymbol=='Cyb5R3' |GeneSymbol=='Cyc1' |GeneSymbol=='Cycs' |GeneSymbol=='Decr1' |GeneSymbol=='Dlat' |GeneSymbol=='Dld' |GeneSymbol=='Dlst' |GeneSymbol=='Ech1' |GeneSymbol=='Echs1' |GeneSymbol=='Eci1' |GeneSymbol=='Etfa' |GeneSymbol=='Etfb' |GeneSymbol=='Etfdh' |GeneSymbol=='Fdx1' |GeneSymbol=='Fh' |GeneSymbol=='Fxn' |GeneSymbol=='Glud1' |GeneSymbol=='Got2' |GeneSymbol=='Gpi' |GeneSymbol=='Gpx4' |GeneSymbol=='Grpel1' |GeneSymbol=='Hadha' |GeneSymbol=='Hadhb' |GeneSymbol=='Hccs' |GeneSymbol=='Hsd17B10' |GeneSymbol=='Hspa9' |GeneSymbol=='Htra2' |GeneSymbol=='Idh1' |GeneSymbol=='Idh2' |GeneSymbol=='Idh3A' |GeneSymbol=='Idh3B' |GeneSymbol=='Idh3G' |GeneSymbol=='Immt' |GeneSymbol=='Isca1' |GeneSymbol=='Iscu' |GeneSymbol=='Ldha' |GeneSymbol=='Ldhb' |GeneSymbol=='Lrpprc' |GeneSymbol=='Maob' |GeneSymbol=='Mdh1' |GeneSymbol=='Mdh2' |GeneSymbol=='mfn1' |GeneSymbol=='Mgst3' |GeneSymbol=='Mpc1' |GeneSymbol=='Mrpl11' |GeneSymbol=='Mrpl15' |GeneSymbol=='Mrpl34' |GeneSymbol=='Mrpl35' |GeneSymbol=='Mrps11' |GeneSymbol=='Mrps12' |GeneSymbol=='Mrps15' |GeneSymbol=='Mrps22' |GeneSymbol=='Mrps30' |GeneSymbol=='Mtrf1')

hm_tab_hall_oxphos2 = subset(hm_tab, GeneSymbol=='Mtrr' |GeneSymbol=='Mtx2' |GeneSymbol=='Ndufa1' |GeneSymbol=='Ndufa2' |GeneSymbol=='Ndufa3' |GeneSymbol=='Ndufa4' |GeneSymbol=='Ndufa5' |GeneSymbol=='Ndufa6' |GeneSymbol=='Ndufa7' |GeneSymbol=='Ndufa8' |GeneSymbol=='Ndufa9' |GeneSymbol=='Ndufab1' |GeneSymbol=='Ndufb1' |GeneSymbol=='Ndufb2' |GeneSymbol=='Ndufb3' |GeneSymbol=='Ndufb4' |GeneSymbol=='Ndufb5' |GeneSymbol=='Ndufb6' |GeneSymbol=='Ndufb7' |GeneSymbol=='Ndufb8' |GeneSymbol=='Ndufc1' |GeneSymbol=='Ndufc2' |GeneSymbol=='Ndufs1' |GeneSymbol=='Ndufs2' |GeneSymbol=='Ndufs3' |GeneSymbol=='Ndufs4' |GeneSymbol=='Ndufs6' |GeneSymbol=='Ndufs7' |GeneSymbol=='Ndufs8' |GeneSymbol=='Ndufv1' |GeneSymbol=='Ndufv2' |GeneSymbol=='Nnt' |GeneSymbol=='Nqo2' |GeneSymbol=='Oat' |GeneSymbol=='Ogdh' |GeneSymbol=='Opa1' |GeneSymbol=='Oxa1L' |GeneSymbol=='Pdha1' |GeneSymbol=='Pdhb' |GeneSymbol=='Pdhx' |GeneSymbol=='Pdk4' |GeneSymbol=='Pdp1' |GeneSymbol=='Phb2' |GeneSymbol=='Phyh' |GeneSymbol=='Pmpca' |GeneSymbol=='Polr2F' |GeneSymbol=='Por' |GeneSymbol=='Prdx3' |GeneSymbol=='Retsat' |GeneSymbol=='Rhot1' |GeneSymbol=='Rhot2' |GeneSymbol=='Sdha' |GeneSymbol=='Sdhb' |GeneSymbol=='Sdhc' |GeneSymbol=='Sdhd' |GeneSymbol=='Slc25A11' |GeneSymbol=='Slc25A12' |GeneSymbol=='Slc25A20' |GeneSymbol=='Slc25A3' |GeneSymbol=='Slc25A4' |GeneSymbol=='Slc25A5' |GeneSymbol=='Slc25A6' |GeneSymbol=='Sucla2' |GeneSymbol=='Suclg1' |GeneSymbol=='Supv3L1' |GeneSymbol=='Surf1' |GeneSymbol=='Tcirg1' |GeneSymbol=='Timm10' |GeneSymbol=='Timm13' |GeneSymbol=='Timm17A' |GeneSymbol=='Timm50' |GeneSymbol=='Timm8B' |GeneSymbol=='Timm9' |GeneSymbol=='Tomm22' |GeneSymbol=='Tomm70' |GeneSymbol=='Uqcr10' |GeneSymbol=='Uqcr11' |GeneSymbol=='Uqcrb' |GeneSymbol=='Uqcrc1' |GeneSymbol=='Uqcrc2' |GeneSymbol=='Uqcrfs1' |GeneSymbol=='Uqcrh' |GeneSymbol=='Uqcrq' |GeneSymbol=='Vdac1' |GeneSymbol=='Vdac2' |GeneSymbol=='Vdac3')

hm_tab_hall_oxphos <- rbind(hm_tab_hall_oxphos1, hm_tab_hall_oxphos2)

hm_tab_hall_oxphos <- hm_tab_hall_oxphos %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_oxphos) = hm_tab_hall_oxphos$GeneSymbol
hm_hall_oxphos_annot = data.frame("Sig" = hm_tab_hall_oxphos$sig2)
rownames(hm_hall_oxphos_annot) = rownames(hm_tab_hall_oxphos)

hm_hall_oxphos <- pheatmap(hm_tab_hall_oxphos[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_oxphos$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_oxphos_annot, legend_labels = "Relative expression", main = "HALLMARK_OXIDATIVE_PHOSPHORYLATION genes")

pdf(file="m1_dm0_hm_hall_oxphos.pdf",width=7,height=12)
hm_hall_oxphos
dev.off()


##### hm of hallmark ROS genes

hm_tab_hall_ros = subset(hm_tab, GeneSymbol=='Abcc1' |GeneSymbol=='Atox1' |GeneSymbol=='Cat' |GeneSymbol=='Cdkn2D' |GeneSymbol=='Egln2' |GeneSymbol=='Ercc2' |GeneSymbol=='Fes' |GeneSymbol=='Ftl' |GeneSymbol=='G6Pd' |GeneSymbol=='Gclc' |GeneSymbol=='Gclm' |GeneSymbol=='Glrx' |GeneSymbol=='Glrx2' |GeneSymbol=='Gpx3' |GeneSymbol=='Gpx4' |GeneSymbol=='Gsr' |GeneSymbol=='Hhex' |GeneSymbol=='Hmox2' |GeneSymbol=='Ipcef1' |GeneSymbol=='Junb' |GeneSymbol=='Lamtor5' |GeneSymbol=='Lsp1' |GeneSymbol=='Mbp' |GeneSymbol=='Mgst1' |GeneSymbol=='Mpo' |GeneSymbol=='Msra' |GeneSymbol=='Ndufa6' |GeneSymbol=='Ndufb4' |GeneSymbol=='Ndufs2' |GeneSymbol=='Nqo1' |GeneSymbol=='Oxsr1' |GeneSymbol=='Pdlim1' |GeneSymbol=='Pfkp' |GeneSymbol=='Prdx1' |GeneSymbol=='Prdx2' |GeneSymbol=='Prdx4' |GeneSymbol=='Prdx6' |GeneSymbol=='Prnp' |GeneSymbol=='Ptpa' |GeneSymbol=='Sbno2' |GeneSymbol=='Scaf4' |GeneSymbol=='Selenos' |GeneSymbol=='Sod1' |GeneSymbol=='Sod2' |GeneSymbol=='Srxn1' |GeneSymbol=='Stk25' |GeneSymbol=='Txn' |GeneSymbol=='Txnrd1' |GeneSymbol=='Txnrd2')

hm_tab_hall_ros <- hm_tab_hall_ros %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_ros) = hm_tab_hall_ros$GeneSymbol
hm_hall_ros_annot = data.frame("Sig" = hm_tab_hall_ros$sig2)
rownames(hm_hall_ros_annot) = rownames(hm_tab_hall_ros)

hm_hall_ros <- pheatmap(hm_tab_hall_ros[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_ros$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_ros_annot, legend_labels = "Relative expression", main = "HALLMARK_REACTIVE_OXYGEN_SPECIES_PATHWAY genes")

pdf(file="m1_dm0_hm_hall_ros.pdf",width=8,height=10)
hm_hall_ros
dev.off()


##### hm of hallmark UPR genes

hm_tab_hall_UPR = subset(hm_tab, GeneSymbol=='Aldh18A1' |GeneSymbol=='Arfgap1' |GeneSymbol=='Asns' |GeneSymbol=='Atf3' |GeneSymbol=='Atf4' |GeneSymbol=='Atf6' |GeneSymbol=='Atp6V0D1' |GeneSymbol=='Bag3' |GeneSymbol=='Banf1' |GeneSymbol=='Calr' |GeneSymbol=='Ccl2' |GeneSymbol=='Cebpb' |GeneSymbol=='Cebpg' |GeneSymbol=='Chac1' |GeneSymbol=='Cks1B' |GeneSymbol=='Cnot2' |GeneSymbol=='Cnot4' |GeneSymbol=='Cnot6' |GeneSymbol=='Cxxc1' |GeneSymbol=='Dcp1A' |GeneSymbol=='Dcp2' |GeneSymbol=='Dctn1' |GeneSymbol=='Ddit4' |GeneSymbol=='Ddx10' |GeneSymbol=='Dkc1' |GeneSymbol=='Dnaja4' |GeneSymbol=='Dnajb9' |GeneSymbol=='Dnajc3' |GeneSymbol=='Edc4' |GeneSymbol=='Edem1' |GeneSymbol=='Eef2' |GeneSymbol=='Eif2Ak3' |GeneSymbol=='Eif2S1' |GeneSymbol=='Eif4A1' |GeneSymbol=='Eif4A2' |GeneSymbol=='Eif4A3' |GeneSymbol=='Eif4E' |GeneSymbol=='Eif4Ebp1' |GeneSymbol=='Eif4G1' |GeneSymbol=='Ern1' |GeneSymbol=='Ero1A' |GeneSymbol=='Exoc2' |GeneSymbol=='Exosc1' |GeneSymbol=='Exosc10' |GeneSymbol=='Exosc2' |GeneSymbol=='Exosc4' |GeneSymbol=='Exosc5' |GeneSymbol=='Exosc9' |GeneSymbol=='Fkbp14' |GeneSymbol=='Fus' |GeneSymbol=='Gemin4' |GeneSymbol=='Gosr2' |GeneSymbol=='H2Ax' |GeneSymbol=='Herpud1' |GeneSymbol=='Hsp90B1' |GeneSymbol=='Hspa5' |GeneSymbol=='Hspa9' |GeneSymbol=='Hyou1' |GeneSymbol=='Iars1' |GeneSymbol=='Ifit1' |GeneSymbol=='Igfbp1' |GeneSymbol=='Imp3' |GeneSymbol=='Kdelr3' |GeneSymbol=='Khsrp' |GeneSymbol=='Kif5B' |GeneSymbol=='Lsm1' |GeneSymbol=='Lsm4' |GeneSymbol=='Mthfd2' |GeneSymbol=='Mtrex' |GeneSymbol=='Nabp1' |GeneSymbol=='Nfya' |GeneSymbol=='Nfyb' |GeneSymbol=='Nhp2' |GeneSymbol=='Nolc1' |GeneSymbol=='Nop14' |GeneSymbol=='Nop56' |GeneSymbol=='Npm1' |GeneSymbol=='Paip1' |GeneSymbol=='Parn' |GeneSymbol=='Pdia5' |GeneSymbol=='Pdia6' |GeneSymbol=='Pop4' |GeneSymbol=='Preb' |GeneSymbol=='Psat1' |GeneSymbol=='Rps14' |GeneSymbol=='Rrp9' |GeneSymbol=='Sdad1' |GeneSymbol=='Sec11A' |GeneSymbol=='Sec31A' |GeneSymbol=='Serp1' |GeneSymbol=='Shc1' |GeneSymbol=='Slc1A4' |GeneSymbol=='Slc30A5' |GeneSymbol=='Slc7A5' |GeneSymbol=='Spcs1' |GeneSymbol=='Spcs3' |GeneSymbol=='Srpra' |GeneSymbol=='Srprb' |GeneSymbol=='Ssr1' |GeneSymbol=='Stc2' |GeneSymbol=='Tars1' |GeneSymbol=='Tatdn2' |GeneSymbol=='Tspyl2' |GeneSymbol=='Ttc37' |GeneSymbol=='Tubb2A' |GeneSymbol=='Vegfa' |GeneSymbol=='Wfs1' |GeneSymbol=='Wipi1' |GeneSymbol=='Xbp1' |GeneSymbol=='Xpot' |GeneSymbol=='Yif1A' |GeneSymbol=='Ywhaz' |GeneSymbol=='Zbtb17')

hm_tab_hall_UPR <- hm_tab_hall_UPR %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_UPR) = hm_tab_hall_UPR$GeneSymbol
hm_hall_UPR_annot = data.frame("Sig" = hm_tab_hall_UPR$sig2)
rownames(hm_hall_UPR_annot) = rownames(hm_tab_hall_UPR)

hm_hall_UPR <- pheatmap(hm_tab_hall_UPR[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_UPR$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_UPR_annot, legend_labels = "Relative expression", main = "HALLMARK_UNFOLDED_PROTEIN_RESPONSE genes")

pdf(file="m1_dm0_hm_hall_UPR.pdf",width=7,height=10)
hm_hall_UPR
dev.off()

##### hm of GO BAT genes

hm_tab_GO_BAT = subset(hm_tab, GeneSymbol=='Adig' |GeneSymbol=='Adipoq' |GeneSymbol=='Adrb1' |GeneSymbol=='Adrb2' |GeneSymbol=='Aldh6A1' |GeneSymbol=='Arl4A' |GeneSymbol=='Bmp7' |GeneSymbol=='Bnip3' |GeneSymbol=='Cebpa' |GeneSymbol=='Cebpb' |GeneSymbol=='Dio2' |GeneSymbol=='Dusp10' |GeneSymbol=='Ebf2' |GeneSymbol=='Ero1A' |GeneSymbol=='Fabp3' |GeneSymbol=='Fabp4' |GeneSymbol=='Ffar4' |GeneSymbol=='Flcn' |GeneSymbol=='Fndc5' |GeneSymbol=='Fto' |GeneSymbol=='Hnrnpu' |GeneSymbol=='Ins' |GeneSymbol=='Itga6' |GeneSymbol=='Lamb3' |GeneSymbol=='Lep' |GeneSymbol=='Lrg1' |GeneSymbol=='Mapk14' |GeneSymbol=='Mb' |GeneSymbol=='Metrnl' |GeneSymbol=='Mtor' |GeneSymbol=='Napepld' |GeneSymbol=='Nudt7' |GeneSymbol=='Pex11A' |GeneSymbol=='Pim1' |GeneSymbol=='Plac8' |GeneSymbol=='Ppargc1A' |GeneSymbol=='Prdm06' |GeneSymbol=='Ptgs2' |GeneSymbol=='Rgs2' |GeneSymbol=='Rreb1' |GeneSymbol=='Sirt1' |GeneSymbol=='Six1' |GeneSymbol=='Slc2A4' |GeneSymbol=='Sox13' |GeneSymbol=='Tfe3' |GeneSymbol=='Trpv4' |GeneSymbol=='Ucp1' |GeneSymbol=='Vstm2A' |GeneSymbol=='Zbtb7B' |GeneSymbol=='Znf516')

hm_tab_GO_BAT <- hm_tab_GO_BAT %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_GO_BAT) = hm_tab_GO_BAT$GeneSymbol
hm_GO_m1_dm0_annot = data.frame("Sig" = hm_tab_GO_BAT$sig2)
rownames(hm_GO_m1_dm0_annot) = rownames(hm_tab_GO_BAT)

hm_GO_BAT <- pheatmap(hm_tab_GO_BAT[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_GO_BAT$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_GO_m1_dm0_annot, legend_labels = "Relative expression", main = "GO_BROWN_FAT_CELL_DIFFERENTIATION genes")

pdf(file="m1_dm0_hm_GO_BAT.pdf",width=7,height=10)
hm_GO_BAT
dev.off()


##### hm of myc-TF genes

hm_tab_myc = subset(hm_tab, GeneSymbol=='Abcd2' |GeneSymbol=='Steap4' |GeneSymbol=='Nnmt' |GeneSymbol=='Pde3b' |GeneSymbol=='Hp' |GeneSymbol=='Lrp3' |GeneSymbol=='Slc1a5' |GeneSymbol=='Retn' |GeneSymbol=='Apcdd1' |GeneSymbol=='Adcy5' |GeneSymbol=='C4B' |GeneSymbol=='Gys2' |GeneSymbol=='Hcar2' |GeneSymbol=='Dock11' |GeneSymbol=='Mc2r' |GeneSymbol=='Hcar1' |GeneSymbol=='Dram1' |GeneSymbol=='B3galt2' |GeneSymbol=='Nnat' |GeneSymbol=='Ffar4' |GeneSymbol=='Slc16a7' |GeneSymbol=='Ffar2' |GeneSymbol=='Aoc3' |GeneSymbol=='Rarres2' |GeneSymbol=='Adipoq' |GeneSymbol=='Mmp3' |GeneSymbol=='Sctr' |GeneSymbol=='Klhl2' |GeneSymbol=='Igf1' |GeneSymbol=='Podn' |GeneSymbol=='Cidec' |GeneSymbol=='Tshr' |GeneSymbol=='Por' |GeneSymbol=='Rbp4' |GeneSymbol=='Ccdc80' |GeneSymbol=='Lrg1' |GeneSymbol=='Vnn3' |GeneSymbol=='Chdh' |GeneSymbol=='Lgals12' |GeneSymbol=='Chst1' |GeneSymbol=='St6galnac5')

hm_tab_myc <- hm_tab_myc %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_myc) = hm_tab_myc$GeneSymbol
hm_myc_annot = data.frame("Sig" = hm_tab_myc$sig2)
rownames(hm_myc_annot) = rownames(hm_tab_myc)

hm_myc <- pheatmap(hm_tab_myc[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_myc$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_myc_annot, legend_labels = "Relative expression", main = "Myc-related genes")

pdf(file="m1_dm0_hm_myc.pdf",width=7,height=10)
hm_myc
dev.off()


#### make hm of mitochondrial and nuclear encoded mitochondrial genes, using same genes to the figure in eLife paper

hm_tab_mt_mito = subset(hm_tab, GeneSymbol=='mt-Atp6' | GeneSymbol=='mt-Atp8' | GeneSymbol=='mt-Co1' | GeneSymbol=='mt-Co2' | GeneSymbol=='mt-Co3' | GeneSymbol=='mt-Cytb' | GeneSymbol=='mt-Nd1' | GeneSymbol=='mt-Nd2' | GeneSymbol=='mt-Nd3' | GeneSymbol=='mt-Nd4' | GeneSymbol=='mt-Nd4l' | GeneSymbol=='mt-Nd5' | GeneSymbol=='mt-Nd6' | GeneSymbol=='mt-Rnr1' | GeneSymbol=='mt-Rnr2' | GeneSymbol=='mt-Ta' | GeneSymbol=='mt-Tc' | GeneSymbol=='mt-Td' | GeneSymbol=='mt-Te' | GeneSymbol=='mt-Tf' | GeneSymbol=='mt-Tg' | GeneSymbol=='mt-Th' | GeneSymbol=='mt-Ti' | GeneSymbol=='mt-Tk' | GeneSymbol=='mt-Tl1' | GeneSymbol=='mt-Tl2' | GeneSymbol=='mt-Tm' | GeneSymbol=='mt-Tn' | GeneSymbol=='mt-Tp' | GeneSymbol=='mt-Tq' | GeneSymbol=='mt-Tr' | GeneSymbol=='mt-Ts1' | GeneSymbol=='mt-Ts2' | GeneSymbol=='mt-Tt' | GeneSymbol=='mt-Tv' | GeneSymbol=='mt-Tw' | GeneSymbol=='mt-Ty')

hm_tab_mt_mito <- hm_tab_mt_mito %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_mt_mito) = hm_tab_mt_mito$GeneSymbol
hm_mt_mito_annot = data.frame("Sig" = hm_tab_mt_mito$sig2)
rownames(hm_mt_mito_annot) = rownames(hm_tab_mt_mito)

hm_mt_mito <- pheatmap(hm_tab_mt_mito[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_mt_mito$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_mt_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial-encoded mito genes")

pdf(file="m1_dm0_hm_mt_mito.pdf",width=7,height=10)
hm_mt_mito
dev.off()

hm_tab_nucl_mito = subset(hm_tab, GeneSymbol=='Ndufb10' |GeneSymbol=='Ndufa3' |GeneSymbol=='Dmac2l' |GeneSymbol=='Atp5o' |GeneSymbol=='Uqcrfs1' |GeneSymbol=='Ndufa8' |GeneSymbol=='Uqcrq' |GeneSymbol=='Surf1' |GeneSymbol=='Atp5b' |GeneSymbol=='Uqcrh' |GeneSymbol=='Ndufa2' |GeneSymbol=='Ndufs7' |GeneSymbol=='Ndufb9' |GeneSymbol=='Ndufb6' |GeneSymbol=='Cox6b1' |GeneSymbol=='Cox6a2' |GeneSymbol=='Ndufa13' |GeneSymbol=='Ndufa9' |GeneSymbol=='Ndufs3' |GeneSymbol=='Uqcrc2' |GeneSymbol=='Ndufa4' |GeneSymbol=='Cycs' |GeneSymbol=='Cyc1' |GeneSymbol=='Ndufs5' |GeneSymbol=='Ndufs4' |GeneSymbol=='Ecsit' |GeneSymbol=='Cox10' |GeneSymbol=='Ndufs8' |GeneSymbol=='Ndufc2' |GeneSymbol=='Atp5a1' |GeneSymbol=='Ndufa7' |GeneSymbol=='Ndufb3' |GeneSymbol=='Ndufa5' |GeneSymbol=='Atp5k' |GeneSymbol=='Cox5b-ps' |GeneSymbol=='Cox18' |GeneSymbol=='Ndufa10' |GeneSymbol=='Atp5j2' |GeneSymbol=='Ndufaf1' |GeneSymbol=='Atp5pb' |GeneSymbol=='Cox11' |GeneSymbol=='Atpaf1' |GeneSymbol=='Sdhb' |GeneSymbol=='Atp5c1' |GeneSymbol=='Cox6b2' |GeneSymbol=='Gm10053' |GeneSymbol=='Phb' |GeneSymbol=='Cox7c' |GeneSymbol=='Sdhd' |GeneSymbol=='Sdhc' |GeneSymbol=='Sdha' |GeneSymbol=='Ndufa6' |GeneSymbol=='Ndufa12' |GeneSymbol=='Ndufa11' |GeneSymbol=='Cox6a1' |GeneSymbol=='Ndufb2' |GeneSymbol=='Cox5a' |GeneSymbol=='Atp5j' |GeneSymbol=='Atp5g3' |GeneSymbol=='Ndufv2' |GeneSymbol=='Ndufb8' |GeneSymbol=='Cox4i1' |GeneSymbol=='Uqcrc1' |GeneSymbol=='Atpaf2' |GeneSymbol=='Ndufb7' |GeneSymbol=='Atp5h' |GeneSymbol=='Cox5b' |GeneSymbol=='Ndufv1' |GeneSymbol=='Ndufv3' |GeneSymbol=='Ndufs1' |GeneSymbol=='Atp5d' |GeneSymbol=='Ndufb4' |GeneSymbol=='Cox7a1' |GeneSymbol=='Cox4i2' |GeneSymbol=='Ndufs6' |GeneSymbol=='Ndufs2' |GeneSymbol=='Ndufc1' |GeneSymbol=='Ndufb5' |GeneSymbol=='Gm21987' |GeneSymbol=='Cox17' |GeneSymbol=='Cox8a' |GeneSymbol=='Cox7a2' |GeneSymbol=='Cox6c' |GeneSymbol=='Nubpl' |GeneSymbol=='Ndufab1')

hm_tab_nucl_mito <- hm_tab_nucl_mito %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_nucl_mito) = hm_tab_nucl_mito$GeneSymbol
hm_nucl_mito_annot = data.frame("Sig" = hm_tab_nucl_mito$sig2)
rownames(hm_nucl_mito_annot) = rownames(hm_tab_nucl_mito)

hm_nucl_mito <- pheatmap(hm_tab_nucl_mito[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_nucl_mito$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_nucl_mito_annot, legend_labels = "Relative expression", main = "Nuclear-encoded mito genes")

pdf(file="m1_dm0_hm_nucl_mito.pdf",width=7,height=10)
hm_nucl_mito
dev.off()

#### make side-by-side hm of mitochondrial and nuclear encoded mitochondrial genes, analagous to eLife paper

library(RColorBrewer)
breaksList = seq(-6, 6, by = 0.1)

hm_tab_mt_mito2 <- as.data.frame(hm_tab_mt_mito$log2FC)
rownames(hm_tab_mt_mito2) = hm_tab_mt_mito$GeneSymbol
hm_tab_mt_mito2$log2FCdup <- hm_tab_mt_mito$log2FC

hm_mt_mito2 <- pheatmap(hm_tab_mt_mito2, cluster_rows = TRUE, cluster_cols = FALSE, cutree_rows = 2, legend = FALSE, cellwidth=30, angle_col=45, fontsize_col=6, annotation_row=hm_mt_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial-encoded", show_colnames = FALSE, show_rownames = FALSE, border_color = NA, scale = "none", color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList)

hm_tab_nucl_mito2 <- as.data.frame(hm_tab_nucl_mito$log2FC)
rownames(hm_tab_nucl_mito2) = hm_tab_nucl_mito$GeneSymbol
hm_tab_nucl_mito2$log2FCdup <- hm_tab_nucl_mito$log2FC

hm_nucl_mito2 <- pheatmap(hm_tab_nucl_mito2, cluster_rows = TRUE, cluster_cols = FALSE, cutree_rows = 3, legend = TRUE, cellwidth=30, angle_col=45, fontsize_col=6, annotation_row=hm_nucl_mito_annot, legend_labels = "Relative expression", main = "Nuclear-encoded", show_colnames = FALSE, , show_rownames = FALSE, border_color = NA, color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList)

require(cowplot)
require(ggplotify)

pdf(file="mito_genes_sumfig.pdf",width=8,height=3)
plot_grid(as.grob(hm_mt_mito2), as.grob(hm_nucl_mito2), ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()



############### Pathway analysis using enrichr =====================================================

require(enrichR)
require(tidyr)
require(cowplot)
require(viridis)

## look at sig up & down genes using enrichR
dbs_option <- listEnrichrDbs()

####### use upregulated genes

up_dge = subset(hm_tab, sig2=='sig' & log2FC>0)
write.table(up_dge,file="m1_dm0_up_dge.csv",sep=",")
up_dge <- up_dge[!is.na(up_dge$GeneSymbol), ]
up_genes <- as.vector(up_dge$GeneSymbol)


dbs_search <- c("GO_Biological_Process_2018","KEGG_2019_Mouse", "MSigDB_Hallmark_2020","GO_Cellular_Component_2018","GTEx_Tissue_Sample_Gene_Expression_Profiles_up","TF_Perturbations_Followed_by_Expression","GO_Molecular_Function_2018", "HMDB_Metabolites")

up_genes_enrichr <- enrichr(up_genes, databases = dbs_search)

## make figure from enrichr analyses
library(dplyr)
library(ggplot2)


GO_biol_data_up <- up_genes_enrichr[["GO_Biological_Process_2018"]]
View(GO_biol_data_up)
GO_biol_data_up = subset(GO_biol_data_up, Adjusted.P.value<.05)
GO_biol_data_up <- GO_biol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_biol_data_up$db <- "GO_biol_2019_Human"
GO_biol_fig_up <-ggplot(data=GO_biol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Biological_Process_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_biol_fig_up

KEGG_data_up <- up_genes_enrichr[["KEGG_2019_Mouse"]]
View(KEGG_data_up)
KEGG_data_up = subset(KEGG_data_up, Adjusted.P.value<.05)
KEGG_data_up <- KEGG_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
KEGG_data_up$db <- "KEGG_2019_Mouse"
KEGG_fig_up <-ggplot(data=KEGG_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("KEGG_2019_Mouse") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
KEGG_fig_up

Hall_data_up <- up_genes_enrichr[["MSigDB_Hallmark_2020"]]
View(Hall_data_up)
Hall_data_up = subset(Hall_data_up, Adjusted.P.value<.05)
Hall_data_up <- Hall_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Hall_data_up$db <- "MSigDB_Hallmark_2020"
Hall_fig_up <-ggplot(data=Hall_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("MSigDB_Hallmark_2020") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
Hall_fig_up

GO_cell_data_up <- up_genes_enrichr[["GO_Cellular_Component_2018"]]
View(GO_cell_data_up)
GO_cell_data_up = subset(GO_cell_data_up, Adjusted.P.value<.05)
GO_cell_data_up <- GO_cell_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_cell_data_up$db <- "GO_Cellular_Component_2018"
GO_cell_fig_up <-ggplot(data=GO_cell_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Cellular_Component_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_cell_fig_up

GTEx_data_up <- up_genes_enrichr[["GTEx_Tissue_Sample_Gene_Expression_Profiles_up"]]
View(GTEx_data_up)
GTEx_data_up = subset(GTEx_data_up, Adjusted.P.value<.05)
GTEx_data_up <- GTEx_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GTEx_data_up$db <- "GTEx_Tissue_Sample_Gene_Expression_Profiles_up"
GTEx_fig_up <-ggplot(data=GTEx_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GTEx_Tissue_Sample_Gene_Expression_Profiles_up") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GTEx_fig_up

TF_data_up <- up_genes_enrichr[["TF_Perturbations_Followed_by_Expression"]]
View(TF_data_up)
TF_data_up = subset(TF_data_up, Adjusted.P.value<.05)
TF_data_up <- TF_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
TF_data_up$db <- "TF_Perturbations_Followed_by_Expression"
TF_fig_up <-ggplot(data=TF_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("TF_Perturbations_Followed_by_Expression") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
TF_fig_up

GO_mol_data_up <- up_genes_enrichr[["GO_Molecular_Function_2018"]]
View(GO_mol_data_up)
GO_mol_data_up = subset(GO_mol_data_up, Adjusted.P.value<.05)
GO_mol_data_up <- GO_mol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_mol_data_up$db <- "GO_Molecular_Function_2018"
GO_mol_fig_up <-ggplot(data=GO_mol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Molecular_Function_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_mol_fig_up

Metabol_data_up <- up_genes_enrichr[["HMDB_Metabolites"]]
View(Metabol_data_up)
Metabol_data_up = subset(Metabol_data_up, Adjusted.P.value<.05)
Metabol_data_up <- Metabol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Metabol_data_up$db <- "HMDB_Metabolites"
Metabol_fig_up <-ggplot(data=Metabol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("HMDB_Metabolites") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
Metabol_fig_up

up_path_summary <- rbind(GO_biol_data_up, KEGG_data_up, Hall_data_up, GO_cell_data_up, GTEx_data_up, TF_data_up, GO_mol_data_up, Metabol_data_up)
up_path_summary$dir <- "Up"  

####### use downregulated genes

down_dge = subset(hm_tab, sig2=='sig' & log2FC<0)
write.table(down_dge,file="m1_dm0_down_dge.csv",sep=",")
down_list <- as.data.frame(down_dge$GeneSymbol)
down_list <- down_list %>% rename("genes" = "down_dge$GeneSymbol")
down_list <- down_list %>% drop_na()
down_list <- distinct(down_list)

dbs_search <- c("GO_Biological_Process_2018","KEGG_2019_Mouse", "MSigDB_Hallmark_2020","GO_Cellular_Component_2018","GTEx_Tissue_Sample_Gene_Expression_Profiles_up","TF_Perturbations_Followed_by_Expression","GO_Molecular_Function_2018", "HMDB_Metabolites")

down_genes_enrichr <- enrichr(down_list$genes, databases = dbs_search)

## make figure from enrichr analyses

GO_biol_data_down <- down_genes_enrichr[["GO_Biological_Process_2018"]]
View(GO_biol_data_down)
GO_biol_data_down = subset(GO_biol_data_down, Adjusted.P.value<.05)
GO_biol_data_down <- GO_biol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_biol_data_down$db <- "GO_biol_2019_Human"
GO_biol_fig_down <-ggplot(data=GO_biol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Biological_Process_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_biol_fig_down

KEGG_data_down <- down_genes_enrichr[["KEGG_2019_Mouse"]]
View(KEGG_data_down)
KEGG_data_down = subset(KEGG_data_down, Adjusted.P.value<.05)
KEGG_data_down <- KEGG_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
KEGG_data_down$db <- "KEGG_2019_Mouse"
KEGG_fig_down <-ggplot(data=KEGG_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("KEGG_2019_Mouse") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
KEGG_fig_down

Hall_data_down <- down_genes_enrichr[["MSigDB_Hallmark_2020"]]
View(Hall_data_down)
Hall_data_down = subset(Hall_data_down, Adjusted.P.value<.05)
Hall_data_down <- Hall_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Hall_data_down$db <- "MSigDB_Hallmark_2020"
Hall_fig_down <-ggplot(data=Hall_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("MSigDB_Hallmark_2020") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
Hall_fig_down

GO_cell_data_down <- down_genes_enrichr[["GO_Cellular_Component_2018"]]
View(GO_cell_data_down)
GO_cell_data_down = subset(GO_cell_data_down, Adjusted.P.value<.05)
GO_cell_data_down <- GO_cell_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_cell_data_down$db <- "GO_Cellular_Component_2018"
GO_cell_fig_down <-ggplot(data=GO_cell_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Cellular_Component_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_cell_fig_down

GTEx_data_down <- down_genes_enrichr[["GTEx_Tissue_Sample_Gene_Expression_Profiles_up"]]
View(GTEx_data_down)
GTEx_data_down = subset(GTEx_data_down, Adjusted.P.value<.05)
GTEx_data_down <- GTEx_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GTEx_data_down$db <- "GTEx_Tissue_Sample_Gene_Expression_Profiles_down"
GTEx_fig_down <-ggplot(data=GTEx_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GTEx_Tissue_Sample_Gene_Expression_Profiles_up") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GTEx_fig_down

TF_data_down <- down_genes_enrichr[["TF_Perturbations_Followed_by_Expression"]]
View(TF_data_down)
TF_data_down = subset(TF_data_down, Adjusted.P.value<.05)
TF_data_down <- TF_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
TF_data_down$db <- "TF_Perturbations_Followed_by_Expression"
TF_fig_down <-ggplot(data=TF_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("TF_Perturbations_Followed_by_Expression") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
TF_fig_down

GO_mol_data_down <- down_genes_enrichr[["GO_Molecular_Function_2018"]]
View(GO_mol_data_down)
GO_mol_data_down = subset(GO_mol_data_down, Adjusted.P.value<.05)
GO_mol_data_down <- GO_mol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_mol_data_down$db <- "GO_Molecular_Function_2018"
GO_mol_fig_down <-ggplot(data=GO_mol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Molecular_Function_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_mol_fig_down

Metabol_data_down <- down_genes_enrichr[["HMDB_Metabolites"]]
View(Metabol_data_down)
Metabol_data_down = subset(Metabol_data_down, Adjusted.P.value<.05)
Metabol_data_down <- Metabol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Metabol_data_down$db <- "HMDB_Metabolites"
Metabol_fig_down <-ggplot(data=Metabol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("HMDB_Metabolites") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
Metabol_fig_down

down_path_summary <- rbind(GO_biol_data_down, KEGG_data_down, Hall_data_down, GO_cell_data_down, GTEx_data_down, TF_data_down, GO_mol_data_down, Metabol_data_down)
down_path_summary$dir <- "down"  

path_summary <- rbind(up_path_summary, down_path_summary)
path_summary <- path_summary %>% arrange(desc(-Adjusted.P.value))               
write.table(path_summary,file="path_summary.csv",sep=",")

up_path_col1 <- plot_grid(GO_biol_fig_up, KEGG_fig_up, Hall_fig_up, GO_cell_fig_up, ncol = 1, labels = c('A', 'C', 'E', 'G', 'I', 'K', 'M', 'O'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))
up_path_col2 <- plot_grid(GTEx_fig_up, TF_fig_up, GO_mol_fig_up, Metabol_fig_up, ncol = 1, labels = c('B', 'D', 'F', 'H'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))

pdf(file="up_path_sumfig.pdf",width=16,height=12)
plot_grid(up_path_col1, up_path_col2, ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()

down_path_col1 <- plot_grid(GO_biol_fig_down, KEGG_fig_down, Hall_fig_down, GO_cell_fig_down, ncol = 1, labels = c('A', 'C', 'E', 'G', 'I', 'K', 'M', 'O'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))
down_path_col2 <- plot_grid(GTEx_fig_down, TF_fig_down, GO_mol_fig_down, Metabol_fig_down, ncol = 1, labels = c('B', 'D', 'F', 'H'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))

pdf(file="down_path_sumfig.pdf",width=16,height=12)
plot_grid(down_path_col1, down_path_col2, ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()

############ summarise enriched GO terms using revigo ---------

library(rrvgo)
library(stringr)
GO_BP_up_revigo <- up_genes_enrichr[["GO_Biological_Process_2018"]]
GO_BP_up_revigo = subset(GO_BP_up_revigo, Adjusted.P.value<.05)
GO_BP_up_revigo$ID <- str_extract(GO_BP_up_revigo$Term, "GO:.......")
GO_BP_up_simMatrix <- calculateSimMatrix(GO_BP_up_revigo$ID, orgdb="org.Mm.eg.db", ont="BP", method="Rel")
GO_BP_up_scores <- setNames(-log10(GO_BP_up_revigo$Adjusted.P.value), GO_BP_up_revigo$ID)
GO_BP_up_reducedTerms <- reduceSimMatrix(GO_BP_up_simMatrix, GO_BP_up_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_BP_up_simMatrix, GO_BP_up_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_BP_up_scatter_m1_dm0.pdf",width=14,height=8)
GO_BP_up_scatter <- scatterPlot(GO_BP_up_simMatrix, GO_BP_up_reducedTerms, labelSize=3)
GO_BP_up_scatter
dev.off()
pdf(file="GO_BP_up_tree_m1_dm0.pdf",width=14,height=8)
GO_BP_up_tree <- treemapPlot(GO_BP_up_reducedTerms)
dev.off()

GO_CC_up_revigo <- up_genes_enrichr[["GO_Cellular_Component_2018"]]
GO_CC_up_revigo = subset(GO_CC_up_revigo, Adjusted.P.value<.05)
GO_CC_up_revigo$ID <- str_extract(GO_CC_up_revigo$Term, "GO:.......")
GO_CC_up_simMatrix <- calculateSimMatrix(GO_CC_up_revigo$ID, orgdb="org.Mm.eg.db", ont="CC", method="Rel")
GO_CC_up_scores <- setNames(-log10(GO_CC_up_revigo$Adjusted.P.value), GO_CC_up_revigo$ID)
GO_CC_up_reducedTerms <- reduceSimMatrix(GO_CC_up_simMatrix, GO_CC_up_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_CC_up_simMatrix, GO_CC_up_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_CC_up_scatter_m1_dm0.pdf",width=14,height=8)
GO_CC_up_scatter <- scatterPlot(GO_CC_up_simMatrix, GO_CC_up_reducedTerms, labelSize=3)
GO_CC_up_scatter
dev.off()
pdf(file="GO_CC_up_tree_m1_dm0.pdf",width=14,height=8)
GO_CC_up_tree <- treemapPlot(GO_CC_up_reducedTerms)
dev.off()

GO_MF_up_revigo <- up_genes_enrichr[["GO_Molecular_Function_2018"]]
GO_MF_up_revigo = subset(GO_MF_up_revigo, Adjusted.P.value<.05)
GO_MF_up_revigo$ID <- str_extract(GO_MF_up_revigo$Term, "GO:.......")
GO_MF_up_simMatrix <- calculateSimMatrix(GO_MF_up_revigo$ID, orgdb="org.Mm.eg.db", ont="MF", method="Rel")
GO_MF_up_scores <- setNames(-log10(GO_MF_up_revigo$Adjusted.P.value), GO_MF_up_revigo$ID)
GO_MF_up_reducedTerms <- reduceSimMatrix(GO_MF_up_simMatrix, GO_MF_up_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_MF_up_simMatrix, GO_MF_up_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_MF_up_scatter_m1_dm0.pdf",width=14,height=8)
GO_MF_up_scatter <- scatterPlot(GO_MF_up_simMatrix, GO_MF_up_reducedTerms, labelSize=3)
GO_MF_up_scatter
dev.off()
pdf(file="GO_MF_up_tree_m1_dm0.pdf",width=14,height=8)
GO_MF_up_tree <- treemapPlot(GO_MF_up_reducedTerms)
dev.off()

GO_BP_down_revigo <- down_genes_enrichr[["GO_Biological_Process_2018"]]
GO_BP_down_revigo = subset(GO_BP_down_revigo, Adjusted.P.value<.05)
GO_BP_down_revigo$ID <- str_extract(GO_BP_down_revigo$Term, "GO:.......")
GO_BP_down_simMatrix <- calculateSimMatrix(GO_BP_down_revigo$ID, orgdb="org.Mm.eg.db", ont="BP", method="Rel")
GO_BP_down_scores <- setNames(-log10(GO_BP_down_revigo$Adjusted.P.value), GO_BP_down_revigo$ID)
GO_BP_down_reducedTerms <- reduceSimMatrix(GO_BP_down_simMatrix, GO_BP_down_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_BP_down_simMatrix, GO_BP_down_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_BP_down_scatter_m1_dm0.pdf",width=14,height=8)
GO_BP_down_scatter <- scatterPlot(GO_BP_down_simMatrix, GO_BP_down_reducedTerms, labelSize=3)
GO_BP_down_scatter
dev.off()
pdf(file="GO_BP_down_tree_m1_dm0.pdf",width=14,height=8)
GO_BP_down_tree <- treemapPlot(GO_BP_down_reducedTerms)
dev.off()

GO_CC_down_revigo <- down_genes_enrichr[["GO_Cellular_Component_2018"]]
GO_CC_down_revigo = subset(GO_CC_down_revigo, Adjusted.P.value<.05)
GO_CC_down_revigo$ID <- str_extract(GO_CC_down_revigo$Term, "GO:.......")
GO_CC_down_simMatrix <- calculateSimMatrix(GO_CC_down_revigo$ID, orgdb="org.Mm.eg.db", ont="CC", method="Rel")
GO_CC_down_scores <- setNames(-log10(GO_CC_down_revigo$Adjusted.P.value), GO_CC_down_revigo$ID)
GO_CC_down_reducedTerms <- reduceSimMatrix(GO_CC_down_simMatrix, GO_CC_down_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_CC_down_simMatrix, GO_CC_down_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_CC_down_scatter_m1_dm0.pdf",width=14,height=8)
GO_CC_down_scatter <- scatterPlot(GO_CC_down_simMatrix, GO_CC_down_reducedTerms, labelSize=3)
GO_CC_down_scatter
dev.off()
pdf(file="GO_CC_down_tree_m1_dm0.pdf",width=14,height=8)
GO_CC_down_tree <- treemapPlot(GO_CC_down_reducedTerms)
dev.off()

GO_MF_down_revigo <- down_genes_enrichr[["GO_Molecular_Function_2018"]]
GO_MF_down_revigo = subset(GO_MF_down_revigo, Adjusted.P.value<.05)
GO_MF_down_revigo$ID <- str_extract(GO_MF_down_revigo$Term, "GO:.......")
GO_MF_down_simMatrix <- calculateSimMatrix(GO_MF_down_revigo$ID, orgdb="org.Mm.eg.db", ont="MF", method="Rel")
GO_MF_down_scores <- setNames(-log10(GO_MF_down_revigo$Adjusted.P.value), GO_MF_down_revigo$ID)
GO_MF_down_reducedTerms <- reduceSimMatrix(GO_MF_down_simMatrix, GO_MF_down_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_MF_down_simMatrix, GO_MF_down_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_MF_down_scatter_m1_dm0.pdf",width=14,height=8)
GO_MF_down_scatter <- scatterPlot(GO_MF_down_simMatrix, GO_MF_down_reducedTerms, labelSize=3)
GO_MF_down_scatter
dev.off()
pdf(file="GO_MF_down_tree_m1_dm0.pdf",width=14,height=8)
GO_MF_down_tree <- treemapPlot(GO_MF_down_reducedTerms)
dev.off()


## use counts tables 


rm(list = ls())

#### PRELIMINARIES ############################################################################################# 

#*Uploads the needed libraries --------------------------------------------------------------------------------

require(DESeq2)

require(ggplot2)

require(data.table)

require(plotly)

require(DT)

require(htmlwidgets)

require(R2HTML)


soft_version <- packageVersion("DESeq2")

#*Set the number of significant digits for the output --------------------------
sig_dig = 4

## Analysis for mfn1 MEFs at dp3

#*Set the working directory ---------------------------------------------------------------------------------

#get the default wd
default_wd <- getwd()

#Set the directory where all the saved outputs will be stored
setwd("/Users/jakemann/RNAseq_Dec20/output_v1/m1_dp3")

new_wd <- getwd()
#### DATA UPLOAD ###############################################################################################################

annotation_table <- read.csv("/Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.95_gene_annotation_table.txt", sep = "\t")

# inputs the list of the count files
input_files <- list.files(path = "/Users/jakemann/RNAseq_Dec20/m1_MEF_counts/", pattern = "*tab$", full.names = TRUE)
input_files <- input_files[grep(input_files, pattern="m1_dp3|WT_dp3")]

# inputs the list of the summary files
summary_files <-  list.files(path = "/Users/jakemann/RNAseq_Dec20/m1_MEF_counts/", pattern = "summary$", full.names = TRUE)
summary_files <- summary_files[grep(summary_files, pattern="m1_dp3|WT_dp3")]

#Reads the count files (input_files)
#create a list; each element of a list (named ''sample'' in the following) is a count table
counts_tables <- lapply(input_files, fread, header = FALSE, stringsAsFactors = FALSE, skip=2, select=c(1,7), col.names=c("GeneID","Counts"))

#Reads the summary files (summary_files)
#create a list; each element of a list is a summary table
summary_tables <- lapply(summary_files, read.delim, header = FALSE, stringsAsFactors = FALSE, skip=1, quote = "")

#takes the names of the genes from the counts_tables
genes_names <- counts_tables[[1]]$GeneID
genes_number = length(genes_names)

#take the names of each element (sample) of the list from the input files 
samples_names <- substr(noquote(unlist(lapply(basename(input_files), tools::file_path_sans_ext))) ,1,8)

#assign the names to the elements of the counts_tables list, composed by the counts tables; NOTE: each replicate has its ID
names(counts_tables) <- samples_names

#Creates a single data frame with all the samples as columns, for reporting and clustering purposes -- see heatmaps below
counts_tables_dataframe <- sapply(counts_tables, '[[', 2)
#assignes the genes names to the rows of the counts_tables_dataframe
rownames(counts_tables_dataframe) <- genes_names

#assign the names to the elements of the summary_tables list, composed by the summary tables; NOTE: each replicate has its ID
names(summary_tables) <- samples_names

#take the roots of the samples_names; replicates cannot be distinguished here -- set the name of the control 
name_control <- "WT_dp3"
names_mutants <- setdiff(unique((substr(samples_names,1,6))), name_control)

#Creates the datasets_matrix, containing all the names of the datasets and replicates for reporting purposes
datasets_matrix <- matrix(samples_names, nrow=length(grep(name_control, samples_names)), ncol=length(names_mutants)+1)
colnames(datasets_matrix) <- c(names_mutants, name_control)





####PAIRWISE COMPARISONS ####################################################################################################
# *Set the tresholds ----------------------------------------------------------------------------------------------------

lfc = 1.5 #treshold for the ADJUSTED fold changes
pval = 0.01 #treshold for the ADJUSTED pvalues

num_comparisons=1 #loop's counter initialisation

###COMPARISONS, PLOTS AND TABLES LOOP ======================================================================================

# *Start of the loop ------------------------------------------------------------------------------------------------------
while(num_comparisons <= length(names_mutants)){    

  # **Grabbing the data ----------------------------------------------------------------------------------------------------  
  name_mutant <- names_mutants[num_comparisons]  
  
  #extract the needed samples from the whole list
  assign( paste0("counts_tables_", name_control), counts_tables[grep(name_control, samples_names, value = TRUE)]) #extract the controls counts tables 

  assign( paste0("counts_tables_", name_mutant), counts_tables[grep(name_mutant, samples_names, value = TRUE)]) #extract the mutants counts tables 

  assign( paste0("counts_list_", name_control, "_", name_mutant) , c( get( paste0("counts_tables_", name_control)),  get(paste0("counts_tables_", name_mutant)) )) #merges the two counts tables above in one list

  # **Creating the counts matrix needed for DESeq2 AND ... ---------------------------------------------------------------------  

  #creates the counts matrix: each row is a gene, the first n columns are the counts coming from the control's replicates, the last p columns are the counts from the mutant replicates
  assign( paste0( "columns_list_", name_control, "_", name_mutant), sapply(get( paste0("counts_list_", name_control, "_", name_mutant) ), `[[` , 2) )  #takes one column each two (i.e. only the columns containing the counts) from the counts list

  assign( paste0( "counts_matrix_", name_control, "_", name_mutant),  matrix(unlist( get( paste0( "columns_list_", name_control, "_", name_mutant) ) , use.names = FALSE), ncol = length( get( paste0("counts_list_", name_control, "_", name_mutant) ) ) )  )#convert the list into a matrix, for convenience

  assign( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names"), get(  paste0( "counts_matrix_", name_control, "_", name_mutant) ) )  #the counts matrix with names is also created; at this stage is the same of the counts matrix

  # #filters out low counts
  
  # matrix_to_filter <- get(paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names"))
  # summing_rows <- apply(matrix_to_filter, 1, sum)
  # rows_to_keep <- which(summing_rows > 10)
  # matrix_filtered <- matrix_to_filter[rows_to_keep,]
  # genes_names <- names(matrix_filtered)
  # assign( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names"), matrix_filtered)

  #** ... AND Creating the summary matrix ---------------------------------------------------------------------
  #The summary matrix contains, for each comparison, the general information about the counts statistics
  
  #extracts the needed samples from the whole list
  assign( paste0("summary_tables_", name_control), summary_tables[grep(name_control, samples_names, value = TRUE)]) #extract the controls summary tables 
  
  assign( paste0("summary_tables_", name_mutant), summary_tables[grep(name_mutant, samples_names, value = TRUE)]) #extract the mutants summary tables 
  
  assign( paste0("summary_list_", name_control, "_", name_mutant) , c( get( paste0("summary_tables_", name_control)),  get(paste0("summary_tables_", name_mutant)) )) #merges the two summary tables above in one list
  
  #creates the summary matrix: each row is a gene, the first n columns are the counts coming from the control's replicates, the last p columns are the counts from the mutant replicates
  assign( paste0( "columns_list_", name_control, "_", name_mutant), sapply(get( paste0("summary_list_", name_control, "_", name_mutant) ), `[[` , 2) )  #takes one column each two (i.e. only the columns containing the counts) from the counts list
  
  assign( paste0( "summary_matrix_", name_control, "_", name_mutant),  matrix(unlist( get( paste0( "columns_list_", name_control, "_", name_mutant) ) , use.names = FALSE), ncol = length( get( paste0("summary_list_", name_control, "_", name_mutant) ) ) )  )#convert the list into a matrix, for convenience
  
  assign( paste0( "summary_matrix_", name_control, "_", name_mutant, "_with_names"), get(  paste0( "summary_matrix_", name_control, "_", name_mutant) ) )  #the counts matrix with names is also created; at this stage is the same of the counts matrix
  
  
  col_names <-c(grep(name_control, samples_names, value=TRUE),  grep(name_mutant, samples_names, value = TRUE))  # takes the right names for the columns of the counts matrix, from the sample names 

  dummy<- get( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names") )         #workaround for assigning dynamically colnames and rownames to the counts_matrix - START
  colnames(dummy) <- col_names
  assign(  paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names")  ,  dummy)

  dummy<- get( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names") )
  rownames(dummy) <- genes_names
  assign(  paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names")  ,  dummy)    #workaround for assigning dynamically colnames and rownames to the counts_matrix - END

  dummy<- get( paste0( "summary_matrix_", name_control, "_", name_mutant) )         #workaround for assigning dynamically colnames and rownames to the summary_matrix - START
  colnames(dummy) <- col_names
  rownames(dummy) <- summary_tables[[1]][,1]
  assign(  paste0( "summary_matrix_", name_control, "_", name_mutant)  ,  dummy) #workaround for assigning dynamically colnames and rownames to the summary_matrix - END

  # #Evaluating the number of the reads counted and uncounted by HTSEQ2
  total_uncounted <- apply(get(paste0( "summary_matrix_", name_control, "_", name_mutant))[-1,], 2, sum)
  total_counted <- get(paste0( "summary_matrix_", name_control, "_", name_mutant))[1,]
  total_number <- total_uncounted + total_counted
  fraction_counted <- signif(total_counted/total_number, digits=3)
  void_row<-rep(" ", length(total_counted))
  statistics_matrix <- rbind(total_number, total_counted, total_uncounted,fraction_counted,void_row)
  rownames(statistics_matrix)<-c("TOTAL READS MAPPED", "TOTAL READS COUNTED", "TOTAL READS NON COUNTED", "FRACTION COUNTED" , "DETAILS UNCOUNTED:")

    #merging summary matrix and statistics matrix
  dummy<- rbind(statistics_matrix, get( paste0( "summary_matrix_", name_control, "_", name_mutant) )) 
  assign(  paste0( "summary_matrix_", name_control, "_", name_mutant)  ,  dummy)
  
  #**Defining the "experimental design" -----------------------------------
  comparisons <- sapply(col_names, function(x) substr(x,1,6))  #takes only the first parts of the column names; these are the identifiers of the control and mutant's data, irrespectively of the replicates 

  experimental_design <- data.frame(row.names = col_names, comparisons=comparisons)
  experimental_design$correlated <- c(seq(1: length(grep(name_control, col_names)) ),  seq(1: length(grep(name_mutant, col_names)) ) )
  
  #experimental_design$comparisons<- relevel(experimental_design$comparisons, ref=name_control)
  experimental_design$comparisons<- factor(experimental_design$comparisons, levels=c(name_control, name_mutant))
  
  #**Calling DESeq2 ------------------------

  #Creating the dds data structure, needed from DESEQ2
  dds <- DESeqDataSetFromMatrix(countData= get( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names")) , colData=experimental_design, design=~comparisons)
  
  #Calls DEseq2 on dds and store the results in de
  de<-DESeq(dds)

  #Uses the built-in DESEQ2 results operator for creating a matrix-like structure storing the DE analysis results; the structure is stored in res_raw and subsequently converted in a data frame (res) 
  
  res_raw <-results(de)
  res <- signif(as.data.frame(res_raw), digits = sig_dig) #converts into data frame and sets the number of digits
  res <- cbind(rownames(res), res) #adds one column with the genes ID to the res dataframe (it will be useful later on)
  colnames(res) <- c("ID","Mean of norm counts", "log2 FC (MLE)", "lFC Std Err" , "Wald Stat", "Wald test pval", "BH pval") # sets the column names
  
  
  ##*Plots and Tables -----------------------------------------------------------------------------------------------------------------
  
  #**Assigns dynamic names to the table to export, taking the res data frame defined above ---------------------------------- 
  assign(paste0("results_table_",name_control,"_", name_mutant),  res ) #takes the whole res data frame
  dummy<-merge(annotation_table, get(paste0("results_table_",name_control,"_", name_mutant)), by.x="GeneSymbol", by.y="ID")
  assign(paste0("results_table_",name_control,"_", name_mutant), dummy)
  
  
  assign(paste0("results_table_topscore_",name_control,"_", name_mutant), res[which(abs(res$`log2 FC (MLE)`)>lfc & res$`BH pval` <pval),]) #takes only the rows of the res data frame that have the best log2FC and the best BH pval
  dummy<-merge(annotation_table, get(paste0("results_table_topscore_",name_control,"_", name_mutant)), by.x="GeneSymbol", by.y="ID")
  assign(paste0("results_table_topscore_",name_control,"_", name_mutant), dummy)
  
  
  #**Prints the tables above in .csv---------------------------------------------------------------------------------
  
  #write.table(get(paste0("results_table_topscore_",name_control,"_", name_mutant)), file=paste0("results_table_topscore_",name_control,"_", name_mutant, ".tsv"),quote=F,sep="\t", row.names = FALSE)
  
  #write.table(get(paste0("results_table_",name_control,"_", name_mutant)), file=paste0("results_table_",name_control,"_", name_mutant, ".tsv"), quote=F,sep="\t", row.names = FALSE)
  
  #write.table(get(paste0("counts_matrix_",name_control,"_", name_mutant, "_with_names")), file=paste0("counts_matrix_",name_control,"_", name_mutant, ".tsv"), quote=F,sep="\t", row.names = FALSE)
  
  #**Building the datatables ---------------------------------------------------------------------------------------------------------
  #The datatables are widgets created through the saveWidget function; this can "automatically" be sorted clicking on it --> Useful for having a general overview
  
  #***Summingup datatable ------------------------------------------
  #Builds the datatable containing all the resuls of the DE analysis
  
  #Creates the summingup_matrix, which includes only some columns of the correspondent results_table (more handy for visualisation) 
  assign(paste0("summingup_matrix_",name_control, "_", name_mutant), get(paste0("results_table_",name_control,"_", name_mutant))[, c(1:7,10,11)])
  dummy <- get(paste0("summingup_matrix_",name_control, "_", name_mutant))
  rownames(dummy) <- c()
  assign( paste0("summingup_matrix_",name_control, "_", name_mutant), dummy )
  #Creates a dynamic table (widget) of all the results
  assign(paste0("summingup_datatable_",name_control, "_", name_mutant) , datatable(get(paste0("summingup_matrix_",name_control, "_", name_mutant))) )
  #saves the datatable widget to in the working directory
  saveWidget( get(paste0("summingup_datatable_",name_control, "_", name_mutant)), file= paste0("summingup_datatable_",name_control, "_", name_mutant, ".html") )

  #***Topscores datatable ----------------------------------------- 
  #Builds the matrix containing only the top log2FC (adjusted) top scores (independently on the pvalues)
  assign(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant),  subset(get(paste0("summingup_matrix_",name_control, "_", name_mutant)),  (abs(get(paste0("summingup_matrix_",name_control, "_", name_mutant))[,"log2 FC (MLE)"]) >lfc &  get(paste0("summingup_matrix_",name_control, "_", name_mutant))[,"BH pval"] <pval )  ) ) 
  dummy <- get(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant))
  rownames(dummy) <- c()
  assign( paste0("summingup_matrix_topscores_",name_control, "_", name_mutant), dummy )
  #Creates a dynamic table (widget) of the topscores
  assign(paste0("topscores_datatable_",name_control, "_", name_mutant) , datatable(get(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant))) )
  #saves the datatable widget to in the working directory
  saveWidget( get(paste0("topscores_datatable_",name_control, "_", name_mutant)), file= paste0("topscores_datatable_",name_control, "_", name_mutant, ".html") )

  #**Dispersion plot---------------------------------------------------------------------------------------------
  #This will not be stored or printed; for sanity check purposes only
  plotDispEsts(de, main=paste(name_mutant, " vs ", name_control))

  #**MA plot -----------------------------------------------------------------------------------------------------
  #Plot of the mean of normalised (according to DESEq) counts of the control vs. the log2fold change "corrected as well"
  #***Plot static MA -------------------------------------------------------------------------------------------------- 

  #Creates the dataframe for ggplot
  MA_dataframe <- data.frame(Ln_mean=log(res$`Mean of norm counts`), foldchange = res$`log2 FC (MLE)`, pvaladj=res$`BH pval`)
  rownames(MA_dataframe) <- rownames(res)
  MA_dataframe <- MA_dataframe[which(!is.na(MA_dataframe$foldchange)), ]
  MA_dataframe$Diff_Exp <- rep(0, nrow(MA_dataframe))
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)>=lfc  )] <- "Relevant log2 FC" 
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)>=lfc & MA_dataframe$pvaladj<=pval)] <- "Relevant log2 FC and Pval" 
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)<lfc)] = "Non significant" 

  #Creates the ggplot
  r <-ggplot(MA_dataframe, aes(x=Ln_mean, y=foldchange, text=rownames(MA_dataframe)))+
    geom_point(aes(colour= Diff_Exp), size=.5)+
    geom_hline(yintercept=0, linetype=1, color="green") + geom_hline(yintercept=lfc,linetype=3, color="green") + geom_hline(yintercept=-lfc, linetype=3, color="green")+
    scale_colour_manual(values = c("Relevant log2 FC and Pval" ="red", "Non significant" = "black", "Relevant log2 FC" ="blue"))+
    xlab("ln mean of norm. counts") + ylab("log2 fold change")+ scale_x_continuous(labels = function(x)as.integer(exp(x)))+
    #+ylim(-4, 4)
    labs(aesthetic='custom text')+
    ggtitle(paste("MA plot", name_control, "vs.", name_mutant))

  #Saves the plot in a variable
  assign(paste("static", "MAplot", name_control, name_mutant, sep = "_"), r)

  #Saves the pdf of the plot in the OUTPUT directory
  pdf(file= paste("static", "MAplot", name_control, name_mutant, ".pdf", sep = "_"))
  print(r)
  dev.off()

  #***Plot dynamic MA -------------------------------------------------------------------------------------------------- 

  #Creates the plot
  s<- ggplotly(r, tooltip=c("text", "x", "y") )

  #SAves the plot in a variable
  assign(paste("dynamic", "MAplot", name_control, name_mutant, sep = "_"), s)

  #Saves the WIDGET of the plot in the OUTPUT directory
  print(s)
  saveWidget(s, file= paste0("dynamic_MAplot",name_control, "_", name_mutant, ".html") )

  #**Volcano Plots --------------------------------------------------------------

  #***Plot static volcano--------------------------------------------------------

  #creates a data frame with some of the columns taken from res which, in turn, summarises the DESEq2 results
  tab = data.frame(logFC = res$`log2 FC (MLE)`, negLogPval = -log10(res$`BH pval`))
  rownames(tab) <- rownames(res)

  #Identifies the DE genes
  candidate_results <- subset(res, (abs(res$`log2 FC (MLE)`) > lfc & res$`BH pval` < pval))
  assign( paste0("candidate_results_tab_",name_control,"_",name_mutant), subset(tab, (abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval))) )

  #Identifies the not DE genes
  non_candidate_results <- subset(res, (abs(res$`log2 FC (MLE)`) <= lfc | res$`BH pval` >= pval))
  assign(paste0("non_candidate_results_tab_",name_control,"_",name_mutant), subset(tab, (abs(tab$logFC) <= lfc | tab$negLogPval <= -log10(pval))) )

  #Mark DE and non DE genes in the dataframe 
  dummy <- get(paste0("non_candidate_results_tab_",name_control,"_",name_mutant))
  dummy$Diff_Exp <- "DE -"
  assign(paste0("non_candidate_results_tab_",name_control,"_",name_mutant), dummy)

  dummy <- get(paste0("candidate_results_tab_",name_control,"_",name_mutant))
  if(nrow(dummy)>0){dummy$Diff_Exp <- "DE +"}
  assign(paste0("candidate_results_tab_",name_control,"_",name_mutant), dummy)

  #merge the "candidate" and "non candidate" dataframes
  assign(paste0("results_tab_",name_control,"_",name_mutant), rbind(get(paste0("candidate_results_tab_",name_control,"_",name_mutant)), get(paste0("non_candidate_results_tab_",name_control,"_",name_mutant)) ))

  #builds the ggplot
  h<-ggplot( get(paste0("results_tab_",name_control,"_",name_mutant)), aes(x=logFC, y=negLogPval, text=rownames(get(paste0("results_tab_",name_control,"_",name_mutant))) ) )+
   geom_point(aes(colour= Diff_Exp), size=.5)+
   geom_hline(yintercept=-log10(pval), linetype=3, color="green") + geom_vline(xintercept=-c(-lfc, lfc), linetype=3, color="blue")+
   scale_colour_manual(values = c("DE +" ="red", "DE -" = "black"))+
   xlab("log2 fold change") + ylab("-log10 pvalue")+ 
   ggtitle(paste("Volcano plot", name_control, "vs.", name_mutant))

  #Saves the plot in a variable
  assign(paste("static", "Vplot", name_control, name_mutant, sep = "_"), h)

  #Saves the pdf of the plot in the OUTPUT directory
  pdf(file= paste("static", "Vplot", name_control, name_mutant, ".pdf", sep = "_"))
  print(h)
  dev.off()

  #***Plot dynamic volcano----------------------------------------------------------------------------------------------------------

  #Creates the plot
  k<- ggplotly(h, tooltip=c("text", "x", "y") )

  #Saves the plot in a variable
  assign(paste("dynamic", "Vplot", name_control, name_mutant, sep = "_"), k)

  print(k)

  #Saves the WIDGET of the plot in the OUTPUT directory
  saveWidget(k, file= paste0("dynamic_Vplot",name_control, "_", name_mutant, ".html") )

  #Updates the loop counter
  print(num_comparisons)
  num_comparisons= num_comparisons +1
} 
#*End of the loop --------------------------------------------


# #PRODUCES ADDITIONAL TABLES =================================================

#**Produces the genes_lenghts  ---------------------------------------------------------------
#takes the genes lengths from the first feature counts input file and creates the genes_lenghts table
feature_counts_table <- fread(input_files[[1]])
genes_lenghts <- as.matrix(feature_counts_table$Length)
rownames(genes_lenghts) <- feature_counts_table$Geneid
colnames(genes_lenghts) <- "Lenght"

#**Produces the annotation_table_with_length ---------------------------------------------------------------
annotation_table_with_length <- merge(annotation_table, genes_lenghts, all.x=T, by.x="GeneSymbol", by.y="row.names")

#** Raw counts, CPM, TPM  ---------------------------------------------------------------

# produces the raw_counts matrix
# merges the raw_counts matrix (all the raw counts for each sample) with the genes_lenghts_table
raw_counts <- (merge(annotation_table_with_length, counts(de), by.x="GeneSymbol", by.y="row.names", all.x=T))
write.csv(raw_counts, file="raw_counts.csv", row.names=FALSE)

# produces the Raw Counts Normalised (DESeq2 normalisation) table 
raw_counts_normalised <- (merge(annotation_table_with_length, counts(de, normalized=T), by.x="GeneSymbol", by.y="row.names", all.x=T))
write.csv(raw_counts_normalised, file="raw_counts_normalised.csv", row.names=FALSE)

# computes the CPM on the raw counts
CPM_working = subset(raw_counts, select = c(7:ncol(raw_counts)))
CPM_working$sum <- rowSums(CPM_working)
CPM <- apply(raw_counts[,c(7:ncol(raw_counts))],2, function(x){x*10^6/CPM_working$sum})
CPM <- cbind(raw_counts[,c(1:6)],CPM)
write.csv(CPM, file="raw_counts_CPM.csv", row.names=FALSE)

# computes the TPM
RPK <-  (raw_counts[,c(7:ncol(raw_counts))])/(raw_counts$Lenght/1000)  #<- Reads Per Kilobase (Normalises the counts for the genes length, expressed in kilobases)
Scaling_factor <- apply(RPK,2,sum)/10^6
TPM <- sweep(RPK, 2, Scaling_factor, FUN = '/')
TPM <- cbind(raw_counts[,c(1:6)],TPM)
write.csv(TPM, file="raw_counts_TPM.csv", row.names=FALSE)

#** Produces the results_tables  ---------------------------------------------------------------

#computes the average CPM for controls and mutants
assign(paste0("average_",name_control), apply(CPM[,grep(colnames(CPM), pattern=name_control)],1,mean ) )
dummy<-as.data.frame(get(paste0("average_",name_control)))
colnames(dummy) <- paste0("Average CPM ",name_control)
rownames(dummy) <- CPM$gene_id
assign(paste0("average_",name_control), dummy)
#
assign(paste0("average_",names_mutants), apply(CPM[,grep(colnames(CPM), pattern=names_mutants)],1,mean ) )
dummy<-as.data.frame(get(paste0("average_",names_mutants)))
colnames(dummy) <- paste0("Average CPM ",names_mutants)
rownames(dummy) <- CPM$gene_id
assign(paste0("average_",names_mutants), dummy)
#
#merges the averages CPMs tables with the results table and the genes_length table
dummy<- merge(get(paste0("average_",name_control)),  get(paste0("average_",names_mutants)), by="row.names") 
rownames(dummy) <- dummy$Row.names
dummy<- dummy[,-1]
#
assign(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM"), merge( get(paste0("results_table_",name_control,"_", names_mutants)), dummy, by.y="row.names", by.x="gene_id") ) 
assign(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM"), merge( get(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM")), genes_lenghts, by.x="GeneSymbol", by.y="row.names", all.x=T ) )
write.csv(get(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM")), file=paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM.csv"), row.names = FALSE)
#
assign(paste0("results_table_topscore_", name_control,"_", names_mutants, "_", "CPM"), merge( get(paste0("results_table_topscore_",name_control,"_", names_mutants)), dummy, by.y="row.names", by.x="gene_id") ) 
assign(paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM"), merge( get(paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM")), genes_lenghts, by.x="GeneSymbol", by.y="row.names", all.x=T ) )
write.csv(get(paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM")), file=paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM.csv"), row.names = FALSE)

#**Filters the counts matrix  according to the CPM ------------------------

# # Filters the counts matrix eliminating the rows where at least one element violates the condition (low counts threshold)

count_zeroes<- function(x){length(which(x<=.5))}
numberofzeroes <- apply(CPM[,c(7:ncol(CPM))], 1, count_zeroes)
CPM_filtered <- CPM[which(numberofzeroes<=5),]
# write.csv(counts_matrix_cpm_filtered, file="cpm_counts_filtered.csv")
# 
#Filters the results_mtrx with the same criteria above 
results_mtrx <- get(paste0("results_table_",name_control,"_", name_mutant, "_CPM"))
results_mtrx_filtered <- results_mtrx[which(results_mtrx$gene_id %in% CPM_filtered$gene_id), ]
#write.csv(results_mtrx, file="results_table.csv", row.names = FALSE)
write.csv(results_mtrx_filtered, file="results_table_CPM_filtered.csv", row.names = FALSE)
#Filters the results_mtrx with the same criteria above 
results_mtrx <- get(paste0("results_table_",name_control,"_", name_mutant, "_CPM"))
results_mtrx_filtered <- results_mtrx[which(results_mtrx$gene_id %in% CPM_filtered$gene_id), ]
#write.csv(results_mtrx, file="results_table.csv", row.names = FALSE)
write.csv(results_mtrx_filtered, file="results_table_CPM_filtered.csv", row.names = FALSE)

results_mtrx_topscore <- get(paste0("results_table_topscore_",name_control,"_", name_mutant, "_CPM"))
results_mtrx_topscore_filtered <- results_mtrx_topscore[which(results_mtrx_topscore$gene_id %in% CPM_filtered$gene_id), ]
write.csv(results_mtrx_topscore_filtered, file="results_table_CPM_topscore_filtered.csv", row.names = FALSE)

#CREATES A HEATMAP =================================================
library(gplots)
#class(CPM_filtered) <- "numeric"
#CPM_filtered_resorted <-CPM_filtered[order(CPM_filtered[,7], decreasing = TRUE),]
#class(CPM_filtered_resorted) <- "numeric"
CPM_filtered_heat <- as.matrix(CPM_filtered[,c(7:ncol(CPM))])
class(CPM_filtered_heat) <- "numeric"

CPM_filtered_heat_sorted <-CPM_filtered_heat[order(CPM_filtered_heat[,1], decreasing = TRUE),]

pdf(file="m1_dp3_hm.pdf")
heatmap.2(CPM_filtered_heat_sorted[c(1:7000),], distfun=function(x) dist(x, method="minkowski"), hclustfun=function(x) hclust(x, method="ward.D2"), scale="row", trace = 'none', labRow = FALSE, dendrogram="column", margins=c(8,1), cexCol = .75)
dev.off()



# #CREATES THE TABLE FOR GSEA =====================================================
# #The data are taken from the res_raw table.
GSEA_table <- data.frame(Sign= sign(res_raw$log2FoldChange), pval=(res_raw$padj),stringsAsFactors = FALSE)
GSEA_table$metric <- -log10(GSEA_table$pval)/GSEA_table$Sign
rownames(GSEA_table) <- rownames(res_raw)

GSEA_input_ranked_table <- cbind(rownames(GSEA_table), GSEA_table$metric)
colnames(GSEA_input_ranked_table) <- cbind("Gene name", "Metric")
GSEA_input_ranked_table<-GSEA_input_ranked_table[-which(is.na(GSEA_input_ranked_table[,"Metric"])),]

write.table(GSEA_input_ranked_table, file=paste0("GSEA_input_ranked_table_",name_control,"_", name_mutant, ".rnk"), quote=F,sep="\t", row.names = FALSE)




## further analysis, interpretation, and figures =====================================================
require(dplyr)


vplot_tab <- merge(results_table_WT_dp3_m1_dp3_CPM, annotation_table, by="gene_id")
vplot_tab <- vplot_tab %>% rename("BH_pval" = "BH pval")
vplot_tab <- vplot_tab %>% rename("log2FC" = "log2 FC (MLE)")

########## make volcano plot 
library(ggplot2)
library(ggrepel)
library(dplyr)
library(pheatmap)

vplot_tab$neglog_p = -log10(vplot_tab$BH_pval)
vplot_tab <- vplot_tab[complete.cases(vplot_tab), ]

############  edit formatting of signficance for labelleing

vplot_tab$significant = ifelse(vplot_tab$neglog_p > 2 & vplot_tab$log2FC <=-1.5 | vplot_tab$neglog_p > 2 & vplot_tab$log2FC>=1.5, "sig", "not")
vplot_tab_label1 = subset(vplot_tab, neglog_p > 80)
vplot_tab_label2 = subset(vplot_tab, neglog_p > 50)
vplot_tab_label2 <- subset(vplot_tab_label2, log2FC <=-6 | log2FC>=6)
vplot_tab_label3 = subset(vplot_tab, neglog_p > 10 & log2FC <=-10 | neglog_p > 10 & log2FC >=8.5)
vplot_tab_label4 = subset(vplot_tab, neglog_p > 50 & vplot_tab$log2FC <=-7 | vplot_tab$neglog_p > 50 & vplot_tab$log2FC>=8)
vplot_tab_label_final <- rbind(vplot_tab_label1, vplot_tab_label2)
vplot_tab_label_final <- rbind(vplot_tab_label_final, vplot_tab_label3)
vplot_tab_label_final <- rbind(vplot_tab_label_final, vplot_tab_label4)
vplot_tab_label_final <- vplot_tab_label_final %>% distinct(GeneSymbol.x, .keep_all = TRUE)

############

m1_dp3_vol <- ggplot(data=vplot_tab, aes(x=log2FC, y=neglog_p, colour=significant)) + geom_point(alpha=0.4, size=1.75) + xlab("Log2 Fold change") + ylab("-log10 p-value") + theme_bw() + theme(legend.position="right") + geom_text_repel(data = vplot_tab_label_final, aes(label = GeneSymbol.x), size = 3, key_glyph = "point")
m1_dp3_vol

pdf(file="m1_dp3_vol.pdf",width=9,height=6)
m1_dp3_vol
dev.off()

############

######################## make heatmaps

##### hm of significantly differentially expressed genes

vplot_tab_hm <- vplot_tab
vplot_tab_hm$significant = ifelse(vplot_tab$BH_pval <=.0001 & vplot_tab$log2FC <=-3 | vplot_tab$log2FC>=2.2, "sig", "not")
vplot_tab_hm$sig2 = ifelse(vplot_tab$BH_pval <=.01, "sig", "not")


norm_counts <- as.data.frame(counts(de, normalized=T))
norm_counts$GeneSymbol <- rownames(norm_counts)
numberofzeroes <- apply(norm_counts[,c(1:ncol(norm_counts))], 1, count_zeroes)
norm_counts_filtered <- norm_counts[which(numberofzeroes<=5),]
norm_counts_filtered$GeneSymbol.x <- rownames(norm_counts_filtered)

hm_tab <- merge(norm_counts_filtered, vplot_tab_hm, by="GeneSymbol.x")
hm_tab <- hm_tab[complete.cases(hm_tab), ]
write.table(hm_tab, file="norm_counts_gsea.csv",sep=",")

hm_tab_sig = subset(hm_tab, significant=="sig")

hm_sig <- pheatmap(hm_tab_sig[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", cutree_rows = 7, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, main = "Significantly differentially expressed genes")

pdf(file="m1_dp3_hm_sig.pdf",width=8,height=10)
hm_sig
dev.off()


##### hm of adipogenesis-related genes

hm_tab_adip = subset(hm_tab, GeneSymbol=="Lep" | GeneSymbol=="Adipoq" | GeneSymbol=="Cd36" | GeneSymbol=="Pparg" | GeneSymbol=="Glut4" | GeneSymbol=="Fasn"| GeneSymbol=="Plin1"| GeneSymbol=="Plin2"| GeneSymbol=="Plin4"| GeneSymbol=="Fabp4"| GeneSymbol=="Isnr"| GeneSymbol=="Lpl"| GeneSymbol=="Agpat2"| GeneSymbol=="Bscl2"| GeneSymbol=="Cidec"| GeneSymbol=="Cebpa"| GeneSymbol=="Acaca"| GeneSymbol=="Ppargc1a"| GeneSymbol=="Ppargc1b"| GeneSymbol=="Slc2a4" )

rownames(hm_tab_adip) = hm_tab_adip$GeneSymbol
hm_adip_annot = data.frame("Sig" = hm_tab_adip$sig2)
rownames(hm_adip_annot) = rownames(hm_tab_adip)

hm_adip <- pheatmap(hm_tab_adip[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_adip$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_adip_annot, legend_labels = "Relative expression", main = "Adipogenesis-related genes")

pdf(file="m1_dp3_hm_adip.pdf",width=5,height=6)
hm_adip
dev.off()

##### hm of ISR-related genes

hm_tab_ISR = subset(hm_tab, GeneSymbol=="Atf4" | GeneSymbol=="Atf5" |GeneSymbol=="Atf6" | GeneSymbol=="Xbp1" | GeneSymbol=="Gdf15" | GeneSymbol=="Fgf21" | GeneSymbol=="Trib3"| GeneSymbol=="Eif2ak4"| GeneSymbol=="Ddit3"| GeneSymbol=="Gadd34"| GeneSymbol=="Perk"| GeneSymbol=="Eif2ak1"| GeneSymbol=="Hif1a")
hm_tab_ISR <- hm_tab_ISR %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_ISR) = hm_tab_ISR$GeneSymbol
hm_ISR_annot = data.frame("Sig" = hm_tab_ISR$sig2)
rownames(hm_ISR_annot) = rownames(hm_tab_ISR)

hm_ISR <- pheatmap(hm_tab_ISR[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_ISR$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_ISR_annot, main = "ISR genes")

pdf(file="m1_dp3_hm_ISR.pdf",width=5,height=6)
hm_ISR
dev.off()

##### hm of mitochondrial-related genes

hm_tab_mito = subset(hm_tab, GeneSymbol=="Mfn1" | GeneSymbol=="mfn1" | GeneSymbol=="Opa1" | GeneSymbol=="Fis1" | GeneSymbol=="Tomm20" | GeneSymbol=="Ppargc1a"| GeneSymbol=="Ppargc1b"| GeneSymbol=="Cs" | GeneSymbol=='mt-Rnr1' | GeneSymbol=='mt-Rnr2' | GeneSymbol=='mt-Tl1' | GeneSymbol=='mt-Nd1' | GeneSymbol=='mt-Ti' | GeneSymbol=='mt-Tq' | GeneSymbol=='mt-Tm' | GeneSymbol=='mt-Nd2' | GeneSymbol=='mt-Tw' | GeneSymbol=='mt-Ta' | GeneSymbol=='mt-Tn' | GeneSymbol=='mt-Tc' | GeneSymbol=='mt-Ty' | GeneSymbol=='mt-Co1' | GeneSymbol=='mt-Ts1' | GeneSymbol=='mt-Td' | GeneSymbol=='mt-Co2' | GeneSymbol=='mt-Atp8' | GeneSymbol=='mt-Atp6' | GeneSymbol=='mt-Co3' | GeneSymbol=='mt-Tg' | GeneSymbol=='mt-Nd3' | GeneSymbol=='mt-Tr' | GeneSymbol=='mt-Nd4' | GeneSymbol=='mt-Th' | GeneSymbol=='mt-Ts2' | GeneSymbol=='mt-Tl2' | GeneSymbol=='mt-Nd5' | GeneSymbol=='mt-Nd6' | GeneSymbol=='mt-Te' | GeneSymbol=='mt-Cytb' | GeneSymbol=='mt-Tt' | GeneSymbol=='mt-Tp' | GeneSymbol=='mt-Nd4l' | GeneSymbol=='Sdha' | GeneSymbol=="Prkn" | GeneSymbol=="Pink1" | GeneSymbol=="Bnip3" | GeneSymbol=="Nrf1" | GeneSymbol==""| GeneSymbol=="Mff"| GeneSymbol=="Cycs")
hm_tab_mito <- hm_tab_mito %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_mito) = hm_tab_mito$GeneSymbol
hm_mito_annot = data.frame("Sig" = hm_tab_mito$sig2)
rownames(hm_mito_annot) = rownames(hm_tab_mito)

hm_mito <- pheatmap(hm_tab_mito[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_mito$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial function-related genes")

pdf(file="m1_dp3_hm_mito.pdf",width=5,height=6)
hm_mito
dev.off()

##### hm of inflammation-related genes

hm_tab_inflam = subset(hm_tab, GeneSymbol=='Ifng' |GeneSymbol=='Cd68' |GeneSymbol=='Cd11b' |GeneSymbol=='Itgam' |GeneSymbol=='Ccl2' |GeneSymbol=='Cd4' |GeneSymbol=='Cd3g' |GeneSymbol=='Cd8a' |GeneSymbol=='Tnf' |GeneSymbol=='Il1b' |GeneSymbol=='Il4' |GeneSymbol=='Il13' |GeneSymbol=='Il10' |GeneSymbol=='Ptprc' |GeneSymbol=='Adgre1' |GeneSymbol=='Il6' |GeneSymbol=='Mif' |GeneSymbol=='Tlr4')
hm_tab_inflam <- hm_tab_inflam %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_inflam) = hm_tab_inflam$GeneSymbol
hm_inflam_annot = data.frame("Sig" = hm_tab_inflam$sig2)
rownames(hm_inflam_annot) = rownames(hm_tab_inflam)

hm_inflam <- pheatmap(hm_tab_inflam[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_inflam$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_inflam_annot, legend_labels = "Relative expression", main = "Inflammatory genes")

pdf(file="m1_dp3_hm_inflam.pdf",width=5,height=6)
hm_inflam
dev.off()


##### hm of fibrosis-related genes

hm_tab_fibros = subset(hm_tab, GeneSymbol=='Tgfb1' |GeneSymbol=='Sod1' |GeneSymbol=='Hif1a' |GeneSymbol=='Pdgfa' |GeneSymbol=='Gtf2ird1' |GeneSymbol=='Inhba' |GeneSymbol=='Rock1')
hm_tab_fibros <- hm_tab_fibros %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_fibros) = hm_tab_fibros$GeneSymbol
hm_fibros_annot = data.frame("Sig" = hm_tab_fibros$sig2)
rownames(hm_fibros_annot) = rownames(hm_tab_fibros)

hm_fibros <- pheatmap(hm_tab_fibros[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_fibros$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_fibros_annot, legend_labels = "Relative expression", main = "Fibrosis-related genes")

pdf(file="m1_dp3_hm_fibros.pdf",width=5,height=6)
hm_fibros
dev.off()



##### hm of hallmark adipogenesis genes

hm_tab_hall_adip1 = subset(hm_tab, GeneSymbol=='Abca1' |GeneSymbol=='Abcb8' |GeneSymbol=='Acaa2' |GeneSymbol=='Acadl' |GeneSymbol=='Acadm' |GeneSymbol=='Acads' |GeneSymbol=='Acly' |GeneSymbol=='Aco2' |GeneSymbol=='Acox1' |GeneSymbol=='Adcy6' |GeneSymbol=='Adig' |GeneSymbol=='Adipoq' |GeneSymbol=='Adipor2' |GeneSymbol=='Agpat3' |GeneSymbol=='Aifm1' |GeneSymbol=='Ak2' |GeneSymbol=='Aldh2' |GeneSymbol=='Aldoa' |GeneSymbol=='Angpt1' |GeneSymbol=='Angptl4' |GeneSymbol=='Aplp2' |GeneSymbol=='Apoe' |GeneSymbol=='Araf' |GeneSymbol=='Arl4A' |GeneSymbol=='Atl2' |GeneSymbol=='Atp1B3' |GeneSymbol=='Atp5Po' |GeneSymbol=='Baz2A' |GeneSymbol=='Bckdha' |GeneSymbol=='Bcl2L13' |GeneSymbol=='Bcl6' |GeneSymbol=='C3' |GeneSymbol=='Cat' |GeneSymbol=='Cavin1' |GeneSymbol=='Cavin2' |GeneSymbol=='Ccng2' |GeneSymbol=='Cd151' |GeneSymbol=='Cd302' |GeneSymbol=='Cd36' |GeneSymbol=='Cdkn2C' |GeneSymbol=='Chchd10' |GeneSymbol=='Chuk' |GeneSymbol=='Cidea' |GeneSymbol=='Cmbl' |GeneSymbol=='Cmpk1' |GeneSymbol=='Col15A1' |GeneSymbol=='Col4A1' |GeneSymbol=='Coq3' |GeneSymbol=='Coq5' |GeneSymbol=='Coq9' |GeneSymbol=='Cox6A1' |GeneSymbol=='Cox7B' |GeneSymbol=='Cox8A' |GeneSymbol=='Cpt2' |GeneSymbol=='Crat' |GeneSymbol=='Cs' |GeneSymbol=='Cyc1' |GeneSymbol=='Cyp4B1' |GeneSymbol=='Dbt' |GeneSymbol=='Ddt' |GeneSymbol=='Decr1' |GeneSymbol=='Dgat1' |GeneSymbol=='Dhcr7' |GeneSymbol=='Dhrs7' |GeneSymbol=='Dhrs7B' |GeneSymbol=='Dlat' |GeneSymbol=='Dld' |GeneSymbol=='Dnajb9' |GeneSymbol=='Dnajc15' |GeneSymbol=='Dram2' |GeneSymbol=='Ech1' |GeneSymbol=='Echs1' |GeneSymbol=='Elmod3' |GeneSymbol=='Elovl6' |GeneSymbol=='Enpp2' |GeneSymbol=='Ephx2' |GeneSymbol=='Esrra' |GeneSymbol=='Esyt1' |GeneSymbol=='Etfb' |GeneSymbol=='Fabp4' |GeneSymbol=='Fah' |GeneSymbol=='Fzd4' |GeneSymbol=='G3Bp2' |GeneSymbol=='Gadd45A' |GeneSymbol=='Gbe1' |GeneSymbol=='Ghitm' |GeneSymbol=='Gpam' |GeneSymbol=='Gpat4' |GeneSymbol=='Gpd2' |GeneSymbol=='Gphn' |GeneSymbol=='Gpx3' |GeneSymbol=='Gpx4' |GeneSymbol=='Grpel1' |GeneSymbol=='Hadh' |GeneSymbol=='Hibch' |GeneSymbol=='Hspb8' |GeneSymbol=='Idh1' |GeneSymbol=='Idh3A' |GeneSymbol=='Idh3G' |GeneSymbol=='Ifngr1' |GeneSymbol=='Immt' |GeneSymbol=='Itga7' |GeneSymbol=='Itih5' |GeneSymbol=='Itsn1' |GeneSymbol=='Jagn1' |GeneSymbol=='Lama4' |GeneSymbol=='Lep' |GeneSymbol=='Lifr' |GeneSymbol=='Lipe' |GeneSymbol=='Lpcat3' |GeneSymbol=='Lpl' |GeneSymbol=='Ltc4S' |GeneSymbol=='Map4K3' |GeneSymbol=='Mccc1' |GeneSymbol=='Mdh2' |GeneSymbol=='Me1' |GeneSymbol=='Mgll' |GeneSymbol=='Mgst3' |GeneSymbol=='Miga2' |GeneSymbol=='Mrap' |GeneSymbol=='Mrpl15' |GeneSymbol=='Mtarc2')

hm_tab_hall_adip2 = subset(hm_tab, GeneSymbol=='Mtch2' |GeneSymbol=='Mylk' |GeneSymbol=='Nabp1' |GeneSymbol=='Ndufa5' |GeneSymbol=='Ndufab1' |GeneSymbol=='Ndufb7' |GeneSymbol=='Ndufs3' |GeneSymbol=='Nkiras1' |GeneSymbol=='Nmt1' |GeneSymbol=='Omd' |GeneSymbol=='Orm1' |GeneSymbol=='Pdcd4' |GeneSymbol=='Pemt' |GeneSymbol=='Pex14' |GeneSymbol=='Pfkfb3' |GeneSymbol=='Pfkl' |GeneSymbol=='Pgm1' |GeneSymbol=='Phldb1' |GeneSymbol=='Phyh' |GeneSymbol=='Pim3' |GeneSymbol=='Plin2' |GeneSymbol=='Por' |GeneSymbol=='Pparg' |GeneSymbol=='Ppm1B' |GeneSymbol=='Ppp1R15B' |GeneSymbol=='Prdx3' |GeneSymbol=='Preb' |GeneSymbol=='Ptcd3' |GeneSymbol=='Ptger3' |GeneSymbol=='Qdpr' |GeneSymbol=='Rab34' |GeneSymbol=='Reep5' |GeneSymbol=='Reep6' |GeneSymbol=='Retn' |GeneSymbol=='Retsat' |GeneSymbol=='Riok3' |GeneSymbol=='Rmdn3' |GeneSymbol=='Rnf11' |GeneSymbol=='Rreb1' |GeneSymbol=='Rtn3' |GeneSymbol=='Samm50' |GeneSymbol=='Scarb1' |GeneSymbol=='Scp2' |GeneSymbol=='Sdhb' |GeneSymbol=='Sdhc' |GeneSymbol=='Slc19A1' |GeneSymbol=='Slc1A5' |GeneSymbol=='Slc25A1' |GeneSymbol=='Slc25A10' |GeneSymbol=='Slc27A1' |GeneSymbol=='Slc5A6' |GeneSymbol=='Slc66A3' |GeneSymbol=='Sncg' |GeneSymbol=='Sod1' |GeneSymbol=='Sorbs1' |GeneSymbol=='Sowahc' |GeneSymbol=='Sparcl1' |GeneSymbol=='Sqor' |GeneSymbol=='Sspn' |GeneSymbol=='Stat5A' |GeneSymbol=='Stom' |GeneSymbol=='Suclg1' |GeneSymbol=='Sult1A1' |GeneSymbol=='Taldo1' |GeneSymbol=='Tank' |GeneSymbol=='Tkt' |GeneSymbol=='Tob1' |GeneSymbol=='Tst' |GeneSymbol=='Ubc' |GeneSymbol=='Ubqln1' |GeneSymbol=='Uck1' |GeneSymbol=='Ucp2' |GeneSymbol=='Uqcr10' |GeneSymbol=='Uqcr11' |GeneSymbol=='Uqcrc1' |GeneSymbol=='Uqcrq' |GeneSymbol=='Vegfb' |GeneSymbol=='Ywhag')

hm_tab_hall_adip <- rbind(hm_tab_hall_adip1, hm_tab_hall_adip2)

hm_tab_hall_adip <- hm_tab_hall_adip %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_adip) = hm_tab_hall_adip$GeneSymbol
hm_hall_adip_annot = data.frame("Sig" = hm_tab_hall_adip$sig2)
rownames(hm_hall_adip_annot) = rownames(hm_tab_hall_adip)

hm_hall_adip <- pheatmap(hm_tab_hall_adip[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_adip$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_adip_annot, legend_labels = "Relative expression", main = "HALLMARK_ADIPOGENESIS genes")

pdf(file="m1_dp3_hm_hall_adip.pdf",width=6,height=12)
hm_hall_adip
dev.off()


##### hm of hallmark oxphos genes

hm_tab_hall_oxphos1 = subset(hm_tab, GeneSymbol=='Abcb7' |GeneSymbol=='Acaa1' |GeneSymbol=='Acaa2' |GeneSymbol=='Acadm' |GeneSymbol=='Acadsb' |GeneSymbol=='Acadvl' |GeneSymbol=='Acat1' |GeneSymbol=='Aco2' |GeneSymbol=='Afg3L2' |GeneSymbol=='Aifm1' |GeneSymbol=='Alas1' |GeneSymbol=='Aldh6A1' |GeneSymbol=='Atp1B1' |GeneSymbol=='Atp5F1A' |GeneSymbol=='Atp5F1B' |GeneSymbol=='Atp5F1C' |GeneSymbol=='Atp5F1D' |GeneSymbol=='Atp5F1E' |GeneSymbol=='Atp5Mc1' |GeneSymbol=='Atp5Mc2' |GeneSymbol=='Atp5Mc3' |GeneSymbol=='Atp5Me' |GeneSymbol=='Atp5Mf' |GeneSymbol=='Atp5Mg' |GeneSymbol=='Atp5Pb' |GeneSymbol=='Atp5Pd' |GeneSymbol=='Atp5Pf' |GeneSymbol=='Atp5Po' |GeneSymbol=='Atp6Ap1' |GeneSymbol=='Atp6V0B' |GeneSymbol=='Atp6V0C' |GeneSymbol=='Atp6V0E1' |GeneSymbol=='Atp6V1C1' |GeneSymbol=='Atp6V1D' |GeneSymbol=='Atp6V1E1' |GeneSymbol=='Atp6V1F' |GeneSymbol=='Atp6V1G1' |GeneSymbol=='Atp6V1H' |GeneSymbol=='Bax' |GeneSymbol=='Bckdha' |GeneSymbol=='Bdh2' |GeneSymbol=='Casp7' |GeneSymbol=='Cox10' |GeneSymbol=='Cox11' |GeneSymbol=='Cox15' |GeneSymbol=='Cox17' |GeneSymbol=='Cox4I1' |GeneSymbol=='Cox5A' |GeneSymbol=='Cox5B' |GeneSymbol=='Cox6A1' |GeneSymbol=='Cox6B1' |GeneSymbol=='Cox6C' |GeneSymbol=='Cox7A2' |GeneSymbol=='Cox7A2L' |GeneSymbol=='Cox7B' |GeneSymbol=='Cox7C' |GeneSymbol=='Cox8A' |GeneSymbol=='Cpt1A' |GeneSymbol=='Cs' |GeneSymbol=='Cyb5A' |GeneSymbol=='Cyb5R3' |GeneSymbol=='Cyc1' |GeneSymbol=='Cycs' |GeneSymbol=='Decr1' |GeneSymbol=='Dlat' |GeneSymbol=='Dld' |GeneSymbol=='Dlst' |GeneSymbol=='Ech1' |GeneSymbol=='Echs1' |GeneSymbol=='Eci1' |GeneSymbol=='Etfa' |GeneSymbol=='Etfb' |GeneSymbol=='Etfdh' |GeneSymbol=='Fdx1' |GeneSymbol=='Fh' |GeneSymbol=='Fxn' |GeneSymbol=='Glud1' |GeneSymbol=='Got2' |GeneSymbol=='Gpi' |GeneSymbol=='Gpx4' |GeneSymbol=='Grpel1' |GeneSymbol=='Hadha' |GeneSymbol=='Hadhb' |GeneSymbol=='Hccs' |GeneSymbol=='Hsd17B10' |GeneSymbol=='Hspa9' |GeneSymbol=='Htra2' |GeneSymbol=='Idh1' |GeneSymbol=='Idh2' |GeneSymbol=='Idh3A' |GeneSymbol=='Idh3B' |GeneSymbol=='Idh3G' |GeneSymbol=='Immt' |GeneSymbol=='Isca1' |GeneSymbol=='Iscu' |GeneSymbol=='Ldha' |GeneSymbol=='Ldhb' |GeneSymbol=='Lrpprc' |GeneSymbol=='Maob' |GeneSymbol=='Mdh1' |GeneSymbol=='Mdh2' |GeneSymbol=='mfn1' |GeneSymbol=='Mgst3' |GeneSymbol=='Mpc1' |GeneSymbol=='Mrpl11' |GeneSymbol=='Mrpl15' |GeneSymbol=='Mrpl34' |GeneSymbol=='Mrpl35' |GeneSymbol=='Mrps11' |GeneSymbol=='Mrps12' |GeneSymbol=='Mrps15' |GeneSymbol=='Mrps22' |GeneSymbol=='Mrps30' |GeneSymbol=='Mtrf1')

hm_tab_hall_oxphos2 = subset(hm_tab, GeneSymbol=='Mtrr' |GeneSymbol=='Mtx2' |GeneSymbol=='Ndufa1' |GeneSymbol=='Ndufa2' |GeneSymbol=='Ndufa3' |GeneSymbol=='Ndufa4' |GeneSymbol=='Ndufa5' |GeneSymbol=='Ndufa6' |GeneSymbol=='Ndufa7' |GeneSymbol=='Ndufa8' |GeneSymbol=='Ndufa9' |GeneSymbol=='Ndufab1' |GeneSymbol=='Ndufb1' |GeneSymbol=='Ndufb2' |GeneSymbol=='Ndufb3' |GeneSymbol=='Ndufb4' |GeneSymbol=='Ndufb5' |GeneSymbol=='Ndufb6' |GeneSymbol=='Ndufb7' |GeneSymbol=='Ndufb8' |GeneSymbol=='Ndufc1' |GeneSymbol=='Ndufc2' |GeneSymbol=='Ndufs1' |GeneSymbol=='Ndufs2' |GeneSymbol=='Ndufs3' |GeneSymbol=='Ndufs4' |GeneSymbol=='Ndufs6' |GeneSymbol=='Ndufs7' |GeneSymbol=='Ndufs8' |GeneSymbol=='Ndufv1' |GeneSymbol=='Ndufv2' |GeneSymbol=='Nnt' |GeneSymbol=='Nqo2' |GeneSymbol=='Oat' |GeneSymbol=='Ogdh' |GeneSymbol=='Opa1' |GeneSymbol=='Oxa1L' |GeneSymbol=='Pdha1' |GeneSymbol=='Pdhb' |GeneSymbol=='Pdhx' |GeneSymbol=='Pdk4' |GeneSymbol=='Pdp1' |GeneSymbol=='Phb2' |GeneSymbol=='Phyh' |GeneSymbol=='Pmpca' |GeneSymbol=='Polr2F' |GeneSymbol=='Por' |GeneSymbol=='Prdx3' |GeneSymbol=='Retsat' |GeneSymbol=='Rhot1' |GeneSymbol=='Rhot2' |GeneSymbol=='Sdha' |GeneSymbol=='Sdhb' |GeneSymbol=='Sdhc' |GeneSymbol=='Sdhd' |GeneSymbol=='Slc25A11' |GeneSymbol=='Slc25A12' |GeneSymbol=='Slc25A20' |GeneSymbol=='Slc25A3' |GeneSymbol=='Slc25A4' |GeneSymbol=='Slc25A5' |GeneSymbol=='Slc25A6' |GeneSymbol=='Sucla2' |GeneSymbol=='Suclg1' |GeneSymbol=='Supv3L1' |GeneSymbol=='Surf1' |GeneSymbol=='Tcirg1' |GeneSymbol=='Timm10' |GeneSymbol=='Timm13' |GeneSymbol=='Timm17A' |GeneSymbol=='Timm50' |GeneSymbol=='Timm8B' |GeneSymbol=='Timm9' |GeneSymbol=='Tomm22' |GeneSymbol=='Tomm70' |GeneSymbol=='Uqcr10' |GeneSymbol=='Uqcr11' |GeneSymbol=='Uqcrb' |GeneSymbol=='Uqcrc1' |GeneSymbol=='Uqcrc2' |GeneSymbol=='Uqcrfs1' |GeneSymbol=='Uqcrh' |GeneSymbol=='Uqcrq' |GeneSymbol=='Vdac1' |GeneSymbol=='Vdac2' |GeneSymbol=='Vdac3')

hm_tab_hall_oxphos <- rbind(hm_tab_hall_oxphos1, hm_tab_hall_oxphos2)

hm_tab_hall_oxphos <- hm_tab_hall_oxphos %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_oxphos) = hm_tab_hall_oxphos$GeneSymbol
hm_hall_oxphos_annot = data.frame("Sig" = hm_tab_hall_oxphos$sig2)
rownames(hm_hall_oxphos_annot) = rownames(hm_tab_hall_oxphos)

hm_hall_oxphos <- pheatmap(hm_tab_hall_oxphos[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_oxphos$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_oxphos_annot, legend_labels = "Relative expression", main = "HALLMARK_OXIDATIVE_PHOSPHORYLATION genes")

pdf(file="m1_dp3_hm_hall_oxphos.pdf",width=7,height=12)
hm_hall_oxphos
dev.off()


##### hm of hallmark ROS genes

hm_tab_hall_ros = subset(hm_tab, GeneSymbol=='Abcc1' |GeneSymbol=='Atox1' |GeneSymbol=='Cat' |GeneSymbol=='Cdkn2D' |GeneSymbol=='Egln2' |GeneSymbol=='Ercc2' |GeneSymbol=='Fes' |GeneSymbol=='Ftl' |GeneSymbol=='G6Pd' |GeneSymbol=='Gclc' |GeneSymbol=='Gclm' |GeneSymbol=='Glrx' |GeneSymbol=='Glrx2' |GeneSymbol=='Gpx3' |GeneSymbol=='Gpx4' |GeneSymbol=='Gsr' |GeneSymbol=='Hhex' |GeneSymbol=='Hmox2' |GeneSymbol=='Ipcef1' |GeneSymbol=='Junb' |GeneSymbol=='Lamtor5' |GeneSymbol=='Lsp1' |GeneSymbol=='Mbp' |GeneSymbol=='Mgst1' |GeneSymbol=='Mpo' |GeneSymbol=='Msra' |GeneSymbol=='Ndufa6' |GeneSymbol=='Ndufb4' |GeneSymbol=='Ndufs2' |GeneSymbol=='Nqo1' |GeneSymbol=='Oxsr1' |GeneSymbol=='Pdlim1' |GeneSymbol=='Pfkp' |GeneSymbol=='Prdx1' |GeneSymbol=='Prdx2' |GeneSymbol=='Prdx4' |GeneSymbol=='Prdx6' |GeneSymbol=='Prnp' |GeneSymbol=='Ptpa' |GeneSymbol=='Sbno2' |GeneSymbol=='Scaf4' |GeneSymbol=='Selenos' |GeneSymbol=='Sod1' |GeneSymbol=='Sod2' |GeneSymbol=='Srxn1' |GeneSymbol=='Stk25' |GeneSymbol=='Txn' |GeneSymbol=='Txnrd1' |GeneSymbol=='Txnrd2')

hm_tab_hall_ros <- hm_tab_hall_ros %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_ros) = hm_tab_hall_ros$GeneSymbol
hm_hall_ros_annot = data.frame("Sig" = hm_tab_hall_ros$sig2)
rownames(hm_hall_ros_annot) = rownames(hm_tab_hall_ros)

hm_hall_ros <- pheatmap(hm_tab_hall_ros[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_ros$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_ros_annot, legend_labels = "Relative expression", main = "HALLMARK_REACTIVE_OXYGEN_SPECIES_PATHWAY genes")

pdf(file="m1_dp3_hm_hall_ros.pdf",width=8,height=10)
hm_hall_ros
dev.off()


##### hm of hallmark UPR genes

hm_tab_hall_UPR = subset(hm_tab, GeneSymbol=='Aldh18A1' |GeneSymbol=='Arfgap1' |GeneSymbol=='Asns' |GeneSymbol=='Atf3' |GeneSymbol=='Atf4' |GeneSymbol=='Atf6' |GeneSymbol=='Atp6V0D1' |GeneSymbol=='Bag3' |GeneSymbol=='Banf1' |GeneSymbol=='Calr' |GeneSymbol=='Ccl2' |GeneSymbol=='Cebpb' |GeneSymbol=='Cebpg' |GeneSymbol=='Chac1' |GeneSymbol=='Cks1B' |GeneSymbol=='Cnot2' |GeneSymbol=='Cnot4' |GeneSymbol=='Cnot6' |GeneSymbol=='Cxxc1' |GeneSymbol=='Dcp1A' |GeneSymbol=='Dcp2' |GeneSymbol=='Dctn1' |GeneSymbol=='Ddit4' |GeneSymbol=='Ddx10' |GeneSymbol=='Dkc1' |GeneSymbol=='Dnaja4' |GeneSymbol=='Dnajb9' |GeneSymbol=='Dnajc3' |GeneSymbol=='Edc4' |GeneSymbol=='Edem1' |GeneSymbol=='Eef2' |GeneSymbol=='Eif2Ak3' |GeneSymbol=='Eif2S1' |GeneSymbol=='Eif4A1' |GeneSymbol=='Eif4A2' |GeneSymbol=='Eif4A3' |GeneSymbol=='Eif4E' |GeneSymbol=='Eif4Ebp1' |GeneSymbol=='Eif4G1' |GeneSymbol=='Ern1' |GeneSymbol=='Ero1A' |GeneSymbol=='Exoc2' |GeneSymbol=='Exosc1' |GeneSymbol=='Exosc10' |GeneSymbol=='Exosc2' |GeneSymbol=='Exosc4' |GeneSymbol=='Exosc5' |GeneSymbol=='Exosc9' |GeneSymbol=='Fkbp14' |GeneSymbol=='Fus' |GeneSymbol=='Gemin4' |GeneSymbol=='Gosr2' |GeneSymbol=='H2Ax' |GeneSymbol=='Herpud1' |GeneSymbol=='Hsp90B1' |GeneSymbol=='Hspa5' |GeneSymbol=='Hspa9' |GeneSymbol=='Hyou1' |GeneSymbol=='Iars1' |GeneSymbol=='Ifit1' |GeneSymbol=='Igfbp1' |GeneSymbol=='Imp3' |GeneSymbol=='Kdelr3' |GeneSymbol=='Khsrp' |GeneSymbol=='Kif5B' |GeneSymbol=='Lsm1' |GeneSymbol=='Lsm4' |GeneSymbol=='Mthfd2' |GeneSymbol=='Mtrex' |GeneSymbol=='Nabp1' |GeneSymbol=='Nfya' |GeneSymbol=='Nfyb' |GeneSymbol=='Nhp2' |GeneSymbol=='Nolc1' |GeneSymbol=='Nop14' |GeneSymbol=='Nop56' |GeneSymbol=='Npm1' |GeneSymbol=='Paip1' |GeneSymbol=='Parn' |GeneSymbol=='Pdia5' |GeneSymbol=='Pdia6' |GeneSymbol=='Pop4' |GeneSymbol=='Preb' |GeneSymbol=='Psat1' |GeneSymbol=='Rps14' |GeneSymbol=='Rrp9' |GeneSymbol=='Sdad1' |GeneSymbol=='Sec11A' |GeneSymbol=='Sec31A' |GeneSymbol=='Serp1' |GeneSymbol=='Shc1' |GeneSymbol=='Slc1A4' |GeneSymbol=='Slc30A5' |GeneSymbol=='Slc7A5' |GeneSymbol=='Spcs1' |GeneSymbol=='Spcs3' |GeneSymbol=='Srpra' |GeneSymbol=='Srprb' |GeneSymbol=='Ssr1' |GeneSymbol=='Stc2' |GeneSymbol=='Tars1' |GeneSymbol=='Tatdn2' |GeneSymbol=='Tspyl2' |GeneSymbol=='Ttc37' |GeneSymbol=='Tubb2A' |GeneSymbol=='Vegfa' |GeneSymbol=='Wfs1' |GeneSymbol=='Wipi1' |GeneSymbol=='Xbp1' |GeneSymbol=='Xpot' |GeneSymbol=='Yif1A' |GeneSymbol=='Ywhaz' |GeneSymbol=='Zbtb17')

hm_tab_hall_UPR <- hm_tab_hall_UPR %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_UPR) = hm_tab_hall_UPR$GeneSymbol
hm_hall_UPR_annot = data.frame("Sig" = hm_tab_hall_UPR$sig2)
rownames(hm_hall_UPR_annot) = rownames(hm_tab_hall_UPR)

hm_hall_UPR <- pheatmap(hm_tab_hall_UPR[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_UPR$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_UPR_annot, legend_labels = "Relative expression", main = "HALLMARK_UNFOLDED_PROTEIN_RESPONSE genes")

pdf(file="m1_dp3_hm_hall_UPR.pdf",width=7,height=10)
hm_hall_UPR
dev.off()

##### hm of GO BAT genes

hm_tab_GO_BAT = subset(hm_tab, GeneSymbol=='Adig' |GeneSymbol=='Adipoq' |GeneSymbol=='Adrb1' |GeneSymbol=='Adrb2' |GeneSymbol=='Aldh6A1' |GeneSymbol=='Arl4A' |GeneSymbol=='Bmp7' |GeneSymbol=='Bnip3' |GeneSymbol=='Cebpa' |GeneSymbol=='Cebpb' |GeneSymbol=='Dio2' |GeneSymbol=='Dusp10' |GeneSymbol=='Ebf2' |GeneSymbol=='Ero1A' |GeneSymbol=='Fabp3' |GeneSymbol=='Fabp4' |GeneSymbol=='Ffar4' |GeneSymbol=='Flcn' |GeneSymbol=='Fndc5' |GeneSymbol=='Fto' |GeneSymbol=='Hnrnpu' |GeneSymbol=='Ins' |GeneSymbol=='Itga6' |GeneSymbol=='Lamb3' |GeneSymbol=='Lep' |GeneSymbol=='Lrg1' |GeneSymbol=='Mapk14' |GeneSymbol=='Mb' |GeneSymbol=='Metrnl' |GeneSymbol=='Mtor' |GeneSymbol=='Napepld' |GeneSymbol=='Nudt7' |GeneSymbol=='Pex11A' |GeneSymbol=='Pim1' |GeneSymbol=='Plac8' |GeneSymbol=='Ppargc1A' |GeneSymbol=='Prdp36' |GeneSymbol=='Ptgs2' |GeneSymbol=='Rgs2' |GeneSymbol=='Rreb1' |GeneSymbol=='Sirt1' |GeneSymbol=='Six1' |GeneSymbol=='Slc2A4' |GeneSymbol=='Sox13' |GeneSymbol=='Tfe3' |GeneSymbol=='Trpv4' |GeneSymbol=='Ucp1' |GeneSymbol=='Vstm2A' |GeneSymbol=='Zbtb7B' |GeneSymbol=='Znf516')

hm_tab_GO_BAT <- hm_tab_GO_BAT %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_GO_BAT) = hm_tab_GO_BAT$GeneSymbol
hm_GO_m1_dp3_annot = data.frame("Sig" = hm_tab_GO_BAT$sig2)
rownames(hm_GO_m1_dp3_annot) = rownames(hm_tab_GO_BAT)

hm_GO_BAT <- pheatmap(hm_tab_GO_BAT[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_GO_BAT$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_GO_m1_dp3_annot, legend_labels = "Relative expression", main = "GO_BROWN_FAT_CELL_DIFFERENTIATION genes")

pdf(file="m1_dp3_hm_GO_BAT.pdf",width=7,height=10)
hm_GO_BAT
dev.off()


##### hm of myc-TF genes

hm_tab_myc = subset(hm_tab, GeneSymbol=='Abcd2' |GeneSymbol=='Steap4' |GeneSymbol=='Nnmt' |GeneSymbol=='Pde3b' |GeneSymbol=='Hp' |GeneSymbol=='Lrp3' |GeneSymbol=='Slc1a5' |GeneSymbol=='Retn' |GeneSymbol=='Apcdd1' |GeneSymbol=='Adcy5' |GeneSymbol=='C4B' |GeneSymbol=='Gys2' |GeneSymbol=='Hcar2' |GeneSymbol=='Dock11' |GeneSymbol=='Mc2r' |GeneSymbol=='Hcar1' |GeneSymbol=='Dram1' |GeneSymbol=='B3galt2' |GeneSymbol=='Nnat' |GeneSymbol=='Ffar4' |GeneSymbol=='Slc16a7' |GeneSymbol=='Ffar2' |GeneSymbol=='Aoc3' |GeneSymbol=='Rarres2' |GeneSymbol=='Adipoq' |GeneSymbol=='Mmp3' |GeneSymbol=='Sctr' |GeneSymbol=='Klhl2' |GeneSymbol=='Igf1' |GeneSymbol=='Podn' |GeneSymbol=='Cidec' |GeneSymbol=='Tshr' |GeneSymbol=='Por' |GeneSymbol=='Rbp4' |GeneSymbol=='Ccdc80' |GeneSymbol=='Lrg1' |GeneSymbol=='Vnn3' |GeneSymbol=='Chdh' |GeneSymbol=='Lgals12' |GeneSymbol=='Chst1' |GeneSymbol=='St6galnac5')

hm_tab_myc <- hm_tab_myc %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_myc) = hm_tab_myc$GeneSymbol
hm_myc_annot = data.frame("Sig" = hm_tab_myc$sig2)
rownames(hm_myc_annot) = rownames(hm_tab_myc)

hm_myc <- pheatmap(hm_tab_myc[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_myc$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_myc_annot, legend_labels = "Relative expression", main = "Myc-related genes")

pdf(file="m1_dp3_hm_myc.pdf",width=7,height=10)
hm_myc
dev.off()


#### make hm of mitochondrial and nuclear encoded mitochondrial genes, using same genes to the figure in eLife paper

hm_tab_mt_mito = subset(hm_tab, GeneSymbol=='mt-Atp6' | GeneSymbol=='mt-Atp8' | GeneSymbol=='mt-Co1' | GeneSymbol=='mt-Co2' | GeneSymbol=='mt-Co3' | GeneSymbol=='mt-Cytb' | GeneSymbol=='mt-Nd1' | GeneSymbol=='mt-Nd2' | GeneSymbol=='mt-Nd3' | GeneSymbol=='mt-Nd4' | GeneSymbol=='mt-Nd4l' | GeneSymbol=='mt-Nd5' | GeneSymbol=='mt-Nd6' | GeneSymbol=='mt-Rnr1' | GeneSymbol=='mt-Rnr2' | GeneSymbol=='mt-Ta' | GeneSymbol=='mt-Tc' | GeneSymbol=='mt-Td' | GeneSymbol=='mt-Te' | GeneSymbol=='mt-Tf' | GeneSymbol=='mt-Tg' | GeneSymbol=='mt-Th' | GeneSymbol=='mt-Ti' | GeneSymbol=='mt-Tk' | GeneSymbol=='mt-Tl1' | GeneSymbol=='mt-Tl2' | GeneSymbol=='mt-Tm' | GeneSymbol=='mt-Tn' | GeneSymbol=='mt-Tp' | GeneSymbol=='mt-Tq' | GeneSymbol=='mt-Tr' | GeneSymbol=='mt-Ts1' | GeneSymbol=='mt-Ts2' | GeneSymbol=='mt-Tt' | GeneSymbol=='mt-Tv' | GeneSymbol=='mt-Tw' | GeneSymbol=='mt-Ty')

hm_tab_mt_mito <- hm_tab_mt_mito %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_mt_mito) = hm_tab_mt_mito$GeneSymbol
hm_mt_mito_annot = data.frame("Sig" = hm_tab_mt_mito$sig2)
rownames(hm_mt_mito_annot) = rownames(hm_tab_mt_mito)

hm_mt_mito <- pheatmap(hm_tab_mt_mito[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_mt_mito$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_mt_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial-encoded mito genes")

pdf(file="m1_dp3_hm_mt_mito.pdf",width=7,height=10)
hm_mt_mito
dev.off()

hm_tab_nucl_mito = subset(hm_tab, GeneSymbol=='Ndufb10' |GeneSymbol=='Ndufa3' |GeneSymbol=='Dmac2l' |GeneSymbol=='Atp5o' |GeneSymbol=='Uqcrfs1' |GeneSymbol=='Ndufa8' |GeneSymbol=='Uqcrq' |GeneSymbol=='Surf1' |GeneSymbol=='Atp5b' |GeneSymbol=='Uqcrh' |GeneSymbol=='Ndufa2' |GeneSymbol=='Ndufs7' |GeneSymbol=='Ndufb9' |GeneSymbol=='Ndufb6' |GeneSymbol=='Cox6b1' |GeneSymbol=='Cox6a2' |GeneSymbol=='Ndufa13' |GeneSymbol=='Ndufa9' |GeneSymbol=='Ndufs3' |GeneSymbol=='Uqcrc2' |GeneSymbol=='Ndufa4' |GeneSymbol=='Cycs' |GeneSymbol=='Cyc1' |GeneSymbol=='Ndufs5' |GeneSymbol=='Ndufs4' |GeneSymbol=='Ecsit' |GeneSymbol=='Cox10' |GeneSymbol=='Ndufs8' |GeneSymbol=='Ndufc2' |GeneSymbol=='Atp5a1' |GeneSymbol=='Ndufa7' |GeneSymbol=='Ndufb3' |GeneSymbol=='Ndufa5' |GeneSymbol=='Atp5k' |GeneSymbol=='Cox5b-ps' |GeneSymbol=='Cox18' |GeneSymbol=='Ndufa10' |GeneSymbol=='Atp5j2' |GeneSymbol=='Ndufaf1' |GeneSymbol=='Atp5pb' |GeneSymbol=='Cox11' |GeneSymbol=='Atpaf1' |GeneSymbol=='Sdhb' |GeneSymbol=='Atp5c1' |GeneSymbol=='Cox6b2' |GeneSymbol=='Gm10053' |GeneSymbol=='Phb' |GeneSymbol=='Cox7c' |GeneSymbol=='Sdhd' |GeneSymbol=='Sdhc' |GeneSymbol=='Sdha' |GeneSymbol=='Ndufa6' |GeneSymbol=='Ndufa12' |GeneSymbol=='Ndufa11' |GeneSymbol=='Cox6a1' |GeneSymbol=='Ndufb2' |GeneSymbol=='Cox5a' |GeneSymbol=='Atp5j' |GeneSymbol=='Atp5g3' |GeneSymbol=='Ndufv2' |GeneSymbol=='Ndufb8' |GeneSymbol=='Cox4i1' |GeneSymbol=='Uqcrc1' |GeneSymbol=='Atpaf2' |GeneSymbol=='Ndufb7' |GeneSymbol=='Atp5h' |GeneSymbol=='Cox5b' |GeneSymbol=='Ndufv1' |GeneSymbol=='Ndufv3' |GeneSymbol=='Ndufs1' |GeneSymbol=='Atp5d' |GeneSymbol=='Ndufb4' |GeneSymbol=='Cox7a1' |GeneSymbol=='Cox4i2' |GeneSymbol=='Ndufs6' |GeneSymbol=='Ndufs2' |GeneSymbol=='Ndufc1' |GeneSymbol=='Ndufb5' |GeneSymbol=='Gm21987' |GeneSymbol=='Cox17' |GeneSymbol=='Cox8a' |GeneSymbol=='Cox7a2' |GeneSymbol=='Cox6c' |GeneSymbol=='Nubpl' |GeneSymbol=='Ndufab1')

hm_tab_nucl_mito <- hm_tab_nucl_mito %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_nucl_mito) = hm_tab_nucl_mito$GeneSymbol
hm_nucl_mito_annot = data.frame("Sig" = hm_tab_nucl_mito$sig2)
rownames(hm_nucl_mito_annot) = rownames(hm_tab_nucl_mito)

hm_nucl_mito <- pheatmap(hm_tab_nucl_mito[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_nucl_mito$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_nucl_mito_annot, legend_labels = "Relative expression", main = "Nuclear-encoded mito genes")

pdf(file="m1_dp3_hm_nucl_mito.pdf",width=7,height=10)
hm_nucl_mito
dev.off()

#### make side-by-side hm of mitochondrial and nuclear encoded mitochondrial genes, analagous to eLife paper

library(RColorBrewer)
breaksList = seq(-6, 6, by = 0.1)

hm_tab_mt_mito2 <- as.data.frame(hm_tab_mt_mito$log2FC)
rownames(hm_tab_mt_mito2) = hm_tab_mt_mito$GeneSymbol
hm_tab_mt_mito2$log2FCdup <- hm_tab_mt_mito$log2FC

hm_mt_mito2 <- pheatmap(hm_tab_mt_mito2, cluster_rows = TRUE, cluster_cols = FALSE, cutree_rows = 2, legend = FALSE, cellwidth=30, angle_col=45, fontsize_col=6, annotation_row=hm_mt_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial-encoded", show_colnames = FALSE, show_rownames = FALSE, border_color = NA, scale = "none", color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList)

hm_tab_nucl_mito2 <- as.data.frame(hm_tab_nucl_mito$log2FC)
rownames(hm_tab_nucl_mito2) = hm_tab_nucl_mito$GeneSymbol
hm_tab_nucl_mito2$log2FCdup <- hm_tab_nucl_mito$log2FC

hm_nucl_mito2 <- pheatmap(hm_tab_nucl_mito2, cluster_rows = TRUE, cluster_cols = FALSE, cutree_rows = 3, legend = TRUE, cellwidth=30, angle_col=45, fontsize_col=6, annotation_row=hm_nucl_mito_annot, legend_labels = "Relative expression", main = "Nuclear-encoded", show_colnames = FALSE, , show_rownames = FALSE, border_color = NA, color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList)

require(cowplot)
require(ggplotify)

pdf(file="mito_genes_sumfig.pdf",width=8,height=3)
plot_grid(as.grob(hm_mt_mito2), as.grob(hm_nucl_mito2), ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()



############### Pathway analysis using enrichr =====================================================

require(enrichR)
require(tidyr)
require(cowplot)
require(viridis)

## look at sig up & down genes using enrichR
dbs_option <- listEnrichrDbs()

####### use upregulated genes

up_dge = subset(hm_tab, sig2=='sig' & log2FC>0)
write.table(up_dge,file="m1_dp3_up_dge.csv",sep=",")
up_dge <- up_dge[!is.na(up_dge$GeneSymbol), ]
up_genes <- as.vector(up_dge$GeneSymbol)


dbs_search <- c("GO_Biological_Process_2018","KEGG_2019_Mouse", "MSigDB_Hallmark_2020","GO_Cellular_Component_2018","GTEx_Tissue_Sample_Gene_Expression_Profiles_up","TF_Perturbations_Followed_by_Expression","GO_Molecular_Function_2018", "HMDB_Metabolites")

up_genes_enrichr <- enrichr(up_genes, databases = dbs_search)

## make figure from enrichr analyses
library(dplyr)
library(ggplot2)


GO_biol_data_up <- up_genes_enrichr[["GO_Biological_Process_2018"]]
View(GO_biol_data_up)
GO_biol_data_up = subset(GO_biol_data_up, Adjusted.P.value<.05)
GO_biol_data_up <- GO_biol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_biol_data_up$db <- "GO_biol_2019_Human"
GO_biol_fig_up <-ggplot(data=GO_biol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Biological_Process_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_biol_fig_up

KEGG_data_up <- up_genes_enrichr[["KEGG_2019_Mouse"]]
View(KEGG_data_up)
KEGG_data_up = subset(KEGG_data_up, Adjusted.P.value<.05)
KEGG_data_up <- KEGG_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
KEGG_data_up$db <- "KEGG_2019_Mouse"
KEGG_fig_up <-ggplot(data=KEGG_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("KEGG_2019_Mouse") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
KEGG_fig_up

Hall_data_up <- up_genes_enrichr[["MSigDB_Hallmark_2020"]]
View(Hall_data_up)
Hall_data_up = subset(Hall_data_up, Adjusted.P.value<.05)
Hall_data_up <- Hall_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Hall_data_up$db <- "MSigDB_Hallmark_2020"
Hall_fig_up <-ggplot(data=Hall_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("MSigDB_Hallmark_2020") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
Hall_fig_up

GO_cell_data_up <- up_genes_enrichr[["GO_Cellular_Component_2018"]]
View(GO_cell_data_up)
GO_cell_data_up = subset(GO_cell_data_up, Adjusted.P.value<.05)
GO_cell_data_up <- GO_cell_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_cell_data_up$db <- "GO_Cellular_Component_2018"
GO_cell_fig_up <-ggplot(data=GO_cell_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Cellular_Component_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_cell_fig_up

GTEx_data_up <- up_genes_enrichr[["GTEx_Tissue_Sample_Gene_Expression_Profiles_up"]]
View(GTEx_data_up)
GTEx_data_up = subset(GTEx_data_up, Adjusted.P.value<.05)
GTEx_data_up <- GTEx_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GTEx_data_up$db <- "GTEx_Tissue_Sample_Gene_Expression_Profiles_up"
GTEx_fig_up <-ggplot(data=GTEx_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GTEx_Tissue_Sample_Gene_Expression_Profiles_up") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GTEx_fig_up

TF_data_up <- up_genes_enrichr[["TF_Perturbations_Followed_by_Expression"]]
View(TF_data_up)
TF_data_up = subset(TF_data_up, Adjusted.P.value<.05)
TF_data_up <- TF_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
TF_data_up$db <- "TF_Perturbations_Followed_by_Expression"
TF_fig_up <-ggplot(data=TF_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("TF_Perturbations_Followed_by_Expression") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
TF_fig_up

GO_mol_data_up <- up_genes_enrichr[["GO_Molecular_Function_2018"]]
View(GO_mol_data_up)
GO_mol_data_up = subset(GO_mol_data_up, Adjusted.P.value<.05)
GO_mol_data_up <- GO_mol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_mol_data_up$db <- "GO_Molecular_Function_2018"
GO_mol_fig_up <-ggplot(data=GO_mol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Molecular_Function_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_mol_fig_up

Metabol_data_up <- up_genes_enrichr[["HMDB_Metabolites"]]
View(Metabol_data_up)
Metabol_data_up = subset(Metabol_data_up, Adjusted.P.value<.05)
Metabol_data_up <- Metabol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Metabol_data_up$db <- "HMDB_Metabolites"
Metabol_fig_up <-ggplot(data=Metabol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("HMDB_Metabolites") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
Metabol_fig_up

up_path_summary <- rbind(GO_biol_data_up, KEGG_data_up, Hall_data_up, GO_cell_data_up, GTEx_data_up, TF_data_up, GO_mol_data_up, Metabol_data_up)
up_path_summary$dir <- "Up"  

####### use downregulated genes

down_dge = subset(hm_tab, sig2=='sig' & log2FC<0)
write.table(down_dge,file="m1_dp3_down_dge.csv",sep=",")
down_list <- as.data.frame(down_dge$GeneSymbol)
down_list <- down_list %>% rename("genes" = "down_dge$GeneSymbol")
down_list <- down_list %>% drop_na()
down_list <- distinct(down_list)

dbs_search <- c("GO_Biological_Process_2018","KEGG_2019_Mouse", "MSigDB_Hallmark_2020","GO_Cellular_Component_2018","GTEx_Tissue_Sample_Gene_Expression_Profiles_up","TF_Perturbations_Followed_by_Expression","GO_Molecular_Function_2018", "HMDB_Metabolites")

down_genes_enrichr <- enrichr(down_list$genes, databases = dbs_search)

## make figure from enrichr analyses

GO_biol_data_down <- down_genes_enrichr[["GO_Biological_Process_2018"]]
View(GO_biol_data_down)
GO_biol_data_down = subset(GO_biol_data_down, Adjusted.P.value<.05)
GO_biol_data_down <- GO_biol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_biol_data_down$db <- "GO_biol_2019_Human"
GO_biol_fig_down <-ggplot(data=GO_biol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Biological_Process_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_biol_fig_down

KEGG_data_down <- down_genes_enrichr[["KEGG_2019_Mouse"]]
View(KEGG_data_down)
KEGG_data_down = subset(KEGG_data_down, Adjusted.P.value<.05)
KEGG_data_down <- KEGG_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
KEGG_data_down$db <- "KEGG_2019_Mouse"
KEGG_fig_down <-ggplot(data=KEGG_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("KEGG_2019_Mouse") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
KEGG_fig_down

Hall_data_down <- down_genes_enrichr[["MSigDB_Hallmark_2020"]]
View(Hall_data_down)
Hall_data_down = subset(Hall_data_down, Adjusted.P.value<.05)
Hall_data_down <- Hall_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Hall_data_down$db <- "MSigDB_Hallmark_2020"
Hall_fig_down <-ggplot(data=Hall_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("MSigDB_Hallmark_2020") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
Hall_fig_down

GO_cell_data_down <- down_genes_enrichr[["GO_Cellular_Component_2018"]]
View(GO_cell_data_down)
GO_cell_data_down = subset(GO_cell_data_down, Adjusted.P.value<.05)
GO_cell_data_down <- GO_cell_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_cell_data_down$db <- "GO_Cellular_Component_2018"
GO_cell_fig_down <-ggplot(data=GO_cell_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Cellular_Component_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_cell_fig_down

GTEx_data_down <- down_genes_enrichr[["GTEx_Tissue_Sample_Gene_Expression_Profiles_up"]]
View(GTEx_data_down)
GTEx_data_down = subset(GTEx_data_down, Adjusted.P.value<.05)
GTEx_data_down <- GTEx_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GTEx_data_down$db <- "GTEx_Tissue_Sample_Gene_Expression_Profiles_down"
GTEx_fig_down <-ggplot(data=GTEx_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GTEx_Tissue_Sample_Gene_Expression_Profiles_up") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GTEx_fig_down

TF_data_down <- down_genes_enrichr[["TF_Perturbations_Followed_by_Expression"]]
View(TF_data_down)
TF_data_down = subset(TF_data_down, Adjusted.P.value<.05)
TF_data_down <- TF_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
TF_data_down$db <- "TF_Perturbations_Followed_by_Expression"
TF_fig_down <-ggplot(data=TF_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("TF_Perturbations_Followed_by_Expression") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
TF_fig_down

GO_mol_data_down <- down_genes_enrichr[["GO_Molecular_Function_2018"]]
View(GO_mol_data_down)
GO_mol_data_down = subset(GO_mol_data_down, Adjusted.P.value<.05)
GO_mol_data_down <- GO_mol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_mol_data_down$db <- "GO_Molecular_Function_2018"
GO_mol_fig_down <-ggplot(data=GO_mol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Molecular_Function_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_mol_fig_down

Metabol_data_down <- down_genes_enrichr[["HMDB_Metabolites"]]
View(Metabol_data_down)
Metabol_data_down = subset(Metabol_data_down, Adjusted.P.value<.05)
Metabol_data_down <- Metabol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Metabol_data_down$db <- "HMDB_Metabolites"
Metabol_fig_down <-ggplot(data=Metabol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("HMDB_Metabolites") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
Metabol_fig_down

down_path_summary <- rbind(GO_biol_data_down, KEGG_data_down, Hall_data_down, GO_cell_data_down, GTEx_data_down, TF_data_down, GO_mol_data_down, Metabol_data_down)
down_path_summary$dir <- "down"  

path_summary <- rbind(up_path_summary, down_path_summary)
path_summary <- path_summary %>% arrange(desc(-Adjusted.P.value))               
write.table(path_summary,file="path_summary.csv",sep=",")

up_path_col1 <- plot_grid(GO_biol_fig_up, KEGG_fig_up, Hall_fig_up, GO_cell_fig_up, ncol = 1, labels = c('A', 'C', 'E', 'G', 'I', 'K', 'M', 'O'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))
up_path_col2 <- plot_grid(GTEx_fig_up, TF_fig_up, GO_mol_fig_up, Metabol_fig_up, ncol = 1, labels = c('B', 'D', 'F', 'H'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))

pdf(file="up_path_sumfig.pdf",width=16,height=12)
plot_grid(up_path_col1, up_path_col2, ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()

down_path_col1 <- plot_grid(GO_biol_fig_down, KEGG_fig_down, Hall_fig_down, GO_cell_fig_down, ncol = 1, labels = c('A', 'C', 'E', 'G', 'I', 'K', 'M', 'O'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))
down_path_col2 <- plot_grid(GTEx_fig_down, TF_fig_down, GO_mol_fig_down, Metabol_fig_down, ncol = 1, labels = c('B', 'D', 'F', 'H'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))

pdf(file="down_path_sumfig.pdf",width=16,height=12)
plot_grid(down_path_col1, down_path_col2, ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()

############ summarise enriched GO terms using revigo ---------

library(rrvgo)
library(stringr)
GO_BP_up_revigo <- up_genes_enrichr[["GO_Biological_Process_2018"]]
GO_BP_up_revigo = subset(GO_BP_up_revigo, Adjusted.P.value<.05)
GO_BP_up_revigo$ID <- str_extract(GO_BP_up_revigo$Term, "GO:.......")
GO_BP_up_simMatrix <- calculateSimMatrix(GO_BP_up_revigo$ID, orgdb="org.Mm.eg.db", ont="BP", method="Rel")
GO_BP_up_scores <- setNames(-log10(GO_BP_up_revigo$Adjusted.P.value), GO_BP_up_revigo$ID)
GO_BP_up_reducedTerms <- reduceSimMatrix(GO_BP_up_simMatrix, GO_BP_up_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_BP_up_simMatrix, GO_BP_up_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_BP_up_scatter_m1_dp3.pdf",width=14,height=8)
GO_BP_up_scatter <- scatterPlot(GO_BP_up_simMatrix, GO_BP_up_reducedTerms, labelSize=3)
GO_BP_up_scatter
dev.off()
pdf(file="GO_BP_up_tree_m1_dp3.pdf",width=14,height=8)
GO_BP_up_tree <- treemapPlot(GO_BP_up_reducedTerms)
dev.off()

GO_CC_up_revigo <- up_genes_enrichr[["GO_Cellular_Component_2018"]]
GO_CC_up_revigo = subset(GO_CC_up_revigo, Adjusted.P.value<.05)
GO_CC_up_revigo$ID <- str_extract(GO_CC_up_revigo$Term, "GO:.......")
GO_CC_up_simMatrix <- calculateSimMatrix(GO_CC_up_revigo$ID, orgdb="org.Mm.eg.db", ont="CC", method="Rel")
GO_CC_up_scores <- setNames(-log10(GO_CC_up_revigo$Adjusted.P.value), GO_CC_up_revigo$ID)
GO_CC_up_reducedTerms <- reduceSimMatrix(GO_CC_up_simMatrix, GO_CC_up_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_CC_up_simMatrix, GO_CC_up_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_CC_up_scatter_m1_dp3.pdf",width=14,height=8)
GO_CC_up_scatter <- scatterPlot(GO_CC_up_simMatrix, GO_CC_up_reducedTerms, labelSize=3)
GO_CC_up_scatter
dev.off()
pdf(file="GO_CC_up_tree_m1_dp3.pdf",width=14,height=8)
GO_CC_up_tree <- treemapPlot(GO_CC_up_reducedTerms)
dev.off()

GO_MF_up_revigo <- up_genes_enrichr[["GO_Molecular_Function_2018"]]
GO_MF_up_revigo = subset(GO_MF_up_revigo, Adjusted.P.value<.05)
GO_MF_up_revigo$ID <- str_extract(GO_MF_up_revigo$Term, "GO:.......")
GO_MF_up_simMatrix <- calculateSimMatrix(GO_MF_up_revigo$ID, orgdb="org.Mm.eg.db", ont="MF", method="Rel")
GO_MF_up_scores <- setNames(-log10(GO_MF_up_revigo$Adjusted.P.value), GO_MF_up_revigo$ID)
GO_MF_up_reducedTerms <- reduceSimMatrix(GO_MF_up_simMatrix, GO_MF_up_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_MF_up_simMatrix, GO_MF_up_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_MF_up_scatter_m1_dp3.pdf",width=14,height=8)
GO_MF_up_scatter <- scatterPlot(GO_MF_up_simMatrix, GO_MF_up_reducedTerms, labelSize=3)
GO_MF_up_scatter
dev.off()
pdf(file="GO_MF_up_tree_m1_dp3.pdf",width=14,height=8)
GO_MF_up_tree <- treemapPlot(GO_MF_up_reducedTerms)
dev.off()

GO_BP_down_revigo <- down_genes_enrichr[["GO_Biological_Process_2018"]]
GO_BP_down_revigo = subset(GO_BP_down_revigo, Adjusted.P.value<.05)
GO_BP_down_revigo$ID <- str_extract(GO_BP_down_revigo$Term, "GO:.......")
GO_BP_down_simMatrix <- calculateSimMatrix(GO_BP_down_revigo$ID, orgdb="org.Mm.eg.db", ont="BP", method="Rel")
GO_BP_down_scores <- setNames(-log10(GO_BP_down_revigo$Adjusted.P.value), GO_BP_down_revigo$ID)
GO_BP_down_reducedTerms <- reduceSimMatrix(GO_BP_down_simMatrix, GO_BP_down_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_BP_down_simMatrix, GO_BP_down_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_BP_down_scatter_m1_dp3.pdf",width=14,height=8)
GO_BP_down_scatter <- scatterPlot(GO_BP_down_simMatrix, GO_BP_down_reducedTerms, labelSize=3)
GO_BP_down_scatter
dev.off()
pdf(file="GO_BP_down_tree_m1_dp3.pdf",width=14,height=8)
GO_BP_down_tree <- treemapPlot(GO_BP_down_reducedTerms)
dev.off()

GO_CC_down_revigo <- down_genes_enrichr[["GO_Cellular_Component_2018"]]
GO_CC_down_revigo = subset(GO_CC_down_revigo, Adjusted.P.value<.05)
GO_CC_down_revigo$ID <- str_extract(GO_CC_down_revigo$Term, "GO:.......")
GO_CC_down_simMatrix <- calculateSimMatrix(GO_CC_down_revigo$ID, orgdb="org.Mm.eg.db", ont="CC", method="Rel")
GO_CC_down_scores <- setNames(-log10(GO_CC_down_revigo$Adjusted.P.value), GO_CC_down_revigo$ID)
GO_CC_down_reducedTerms <- reduceSimMatrix(GO_CC_down_simMatrix, GO_CC_down_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_CC_down_simMatrix, GO_CC_down_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_CC_down_scatter_m1_dp3.pdf",width=14,height=8)
GO_CC_down_scatter <- scatterPlot(GO_CC_down_simMatrix, GO_CC_down_reducedTerms, labelSize=3)
GO_CC_down_scatter
dev.off()
pdf(file="GO_CC_down_tree_m1_dp3.pdf",width=14,height=8)
GO_CC_down_tree <- treemapPlot(GO_CC_down_reducedTerms)
dev.off()

GO_MF_down_revigo <- down_genes_enrichr[["GO_Molecular_Function_2018"]]
GO_MF_down_revigo = subset(GO_MF_down_revigo, Adjusted.P.value<.05)
GO_MF_down_revigo$ID <- str_extract(GO_MF_down_revigo$Term, "GO:.......")
GO_MF_down_simMatrix <- calculateSimMatrix(GO_MF_down_revigo$ID, orgdb="org.Mm.eg.db", ont="MF", method="Rel")
GO_MF_down_scores <- setNames(-log10(GO_MF_down_revigo$Adjusted.P.value), GO_MF_down_revigo$ID)
GO_MF_down_reducedTerms <- reduceSimMatrix(GO_MF_down_simMatrix, GO_MF_down_scores, threshold=0.7, orgdb="org.Mm.eg.db")
heatmapPlot(GO_MF_down_simMatrix, GO_MF_down_reducedTerms, annotateParent=TRUE, annotationLabel="parentTerm", fontsize=6)
pdf(file="GO_MF_down_scatter_m1_dp3.pdf",width=14,height=8)
GO_MF_down_scatter <- scatterPlot(GO_MF_down_simMatrix, GO_MF_down_reducedTerms, labelSize=3)
GO_MF_down_scatter
dev.off()
pdf(file="GO_MF_down_tree_m1_dp3.pdf",width=14,height=8)
GO_MF_down_tree <- treemapPlot(GO_MF_down_reducedTerms)
dev.off()



## use counts tables 


rm(list = ls())

#### PRELIMINARIES ############################################################################################# 

#*Uploads the needed libraries --------------------------------------------------------------------------------

require(DESeq2)

require(ggplot2)

require(data.table)

require(plotly)

require(DT)

require(htmlwidgets)

require(R2HTML)


soft_version <- packageVersion("DESeq2")

#*Set the number of significant digits for the output --------------------------
sig_dig = 4

## Analysis for brown adipose tissue

#*Set the working directory ---------------------------------------------------------------------------------

#get the default wd
default_wd <- getwd()

#Set the directory where all the saved outputs will be stored
setwd("/Users/jakemann/RNAseq_Dec20/output_v1/IngHFD")

new_wd <- getwd()
#### DATA UPLOAD ###############################################################################################################

annotation_table <- read.csv("/Users/jakemann/RNAseq_Dec20/Analysis_Dec20/Mus_musculus.GRCm38.95_gene_annotation_table.txt", sep = "\t")

# inputs the list of the count files
input_files <- list.files(path = "/Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/counts_v1", pattern = "*tab$", full.names = TRUE)
input_files <- input_files[grep(input_files, pattern="KI_|WT_")]

# inputs the list of the summary files
summary_files <-  list.files(path = "/Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/counts_v1", pattern = "summary$", full.names = TRUE)
summary_files <- summary_files[grep(summary_files, pattern="KI_|WT_")]

#Reads the count files (input_files)
#create a list; each element of a list (named ''sample'' in the following) is a count table
counts_tables <- lapply(input_files, fread, header = FALSE, stringsAsFactors = FALSE, skip=2, select=c(1,7), col.names=c("GeneID","Counts"))

#Reads the summary files (summary_files)
#create a list; each element of a list is a summary table
summary_tables <- lapply(summary_files, read.delim, header = FALSE, stringsAsFactors = FALSE, skip=1, quote = "")

#takes the names of the genes from the counts_tables
genes_names <- counts_tables[[1]]$GeneID
genes_number = length(genes_names)

#take the names of each element (sample) of the list from the input files 
samples_names <- substr(noquote(unlist(lapply(basename(input_files), tools::file_path_sans_ext))) ,1,8)

#assign the names to the elements of the counts_tables list, composed by the counts tables; NOTE: each replicate has its ID
names(counts_tables) <- samples_names

#Creates a single data frame with all the samples as columns, for reporting and clustering purposes -- see heatmaps below
counts_tables_dataframe <- sapply(counts_tables, '[[', 2)
#assignes the genes names to the rows of the counts_tables_dataframe
rownames(counts_tables_dataframe) <- genes_names

#assign the names to the elements of the summary_tables list, composed by the summary tables; NOTE: each replicate has its ID
names(summary_tables) <- samples_names

#take the roots of the samples_names; replicates cannot be distinguished here -- set the name of the control 
name_control <- "WT_"
names_mutants <- setdiff(unique((substr(samples_names,1,3))), name_control)

#Creates the datasets_matrix, containing all the names of the datasets and replicates for reporting purposes
datasets_matrix <- matrix(samples_names, nrow=length(grep(name_control, samples_names)), ncol=length(names_mutants)+1)
colnames(datasets_matrix) <- c(names_mutants, name_control)





####PAIRWISE COMPARISONS ####################################################################################################
# *Set the tresholds ----------------------------------------------------------------------------------------------------

lfc = 1.5 #treshold for the ADJUSTED fold changes
pval = 0.01 #treshold for the ADJUSTED pvalues

num_comparisons=1 #loop's counter initialisation

###COMPARISONS, PLOTS AND TABLES LOOP ======================================================================================

# *Start of the loop ------------------------------------------------------------------------------------------------------
while(num_comparisons <= length(names_mutants)){    

  # **Grabbing the data ----------------------------------------------------------------------------------------------------  
  name_mutant <- names_mutants[num_comparisons]  
  
  #extract the needed samples from the whole list
  assign( paste0("counts_tables_", name_control), counts_tables[grep(name_control, samples_names, value = TRUE)]) #extract the controls counts tables 

  assign( paste0("counts_tables_", name_mutant), counts_tables[grep(name_mutant, samples_names, value = TRUE)]) #extract the mutants counts tables 

  assign( paste0("counts_list_", name_control, "_", name_mutant) , c( get( paste0("counts_tables_", name_control)),  get(paste0("counts_tables_", name_mutant)) )) #merges the two counts tables above in one list

  # **Creating the counts matrix needed for DESeq2 AND ... ---------------------------------------------------------------------  

  #creates the counts matrix: each row is a gene, the first n columns are the counts coming from the control's replicates, the last p columns are the counts from the mutant replicates
  assign( paste0( "columns_list_", name_control, "_", name_mutant), sapply(get( paste0("counts_list_", name_control, "_", name_mutant) ), `[[` , 2) )  #takes one column each two (i.e. only the columns containing the counts) from the counts list

  assign( paste0( "counts_matrix_", name_control, "_", name_mutant),  matrix(unlist( get( paste0( "columns_list_", name_control, "_", name_mutant) ) , use.names = FALSE), ncol = length( get( paste0("counts_list_", name_control, "_", name_mutant) ) ) )  )#convert the list into a matrix, for convenience

  assign( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names"), get(  paste0( "counts_matrix_", name_control, "_", name_mutant) ) )  #the counts matrix with names is also created; at this stage is the same of the counts matrix

  # #filters out low counts
  
  # matrix_to_filter <- get(paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names"))
  # summing_rows <- apply(matrix_to_filter, 1, sum)
  # rows_to_keep <- which(summing_rows > 10)
  # matrix_filtered <- matrix_to_filter[rows_to_keep,]
  # genes_names <- names(matrix_filtered)
  # assign( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names"), matrix_filtered)

  #** ... AND Creating the summary matrix ---------------------------------------------------------------------
  #The summary matrix contains, for each comparison, the general information about the counts statistics
  
  #extracts the needed samples from the whole list
  assign( paste0("summary_tables_", name_control), summary_tables[grep(name_control, samples_names, value = TRUE)]) #extract the controls summary tables 
  
  assign( paste0("summary_tables_", name_mutant), summary_tables[grep(name_mutant, samples_names, value = TRUE)]) #extract the mutants summary tables 
  
  assign( paste0("summary_list_", name_control, "_", name_mutant) , c( get( paste0("summary_tables_", name_control)),  get(paste0("summary_tables_", name_mutant)) )) #merges the two summary tables above in one list
  
  #creates the summary matrix: each row is a gene, the first n columns are the counts coming from the control's replicates, the last p columns are the counts from the mutant replicates
  assign( paste0( "columns_list_", name_control, "_", name_mutant), sapply(get( paste0("summary_list_", name_control, "_", name_mutant) ), `[[` , 2) )  #takes one column each two (i.e. only the columns containing the counts) from the counts list
  
  assign( paste0( "summary_matrix_", name_control, "_", name_mutant),  matrix(unlist( get( paste0( "columns_list_", name_control, "_", name_mutant) ) , use.names = FALSE), ncol = length( get( paste0("summary_list_", name_control, "_", name_mutant) ) ) )  )#convert the list into a matrix, for convenience
  
  assign( paste0( "summary_matrix_", name_control, "_", name_mutant, "_with_names"), get(  paste0( "summary_matrix_", name_control, "_", name_mutant) ) )  #the counts matrix with names is also created; at this stage is the same of the counts matrix
  
  
  col_names <-c(grep(name_control, samples_names, value=TRUE),  grep(name_mutant, samples_names, value = TRUE))  # takes the right names for the columns of the counts matrix, from the sample names 

  dummy<- get( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names") )         #workaround for assigning dynamically colnames and rownames to the counts_matrix - START
  colnames(dummy) <- col_names
  assign(  paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names")  ,  dummy)

  dummy<- get( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names") )
  rownames(dummy) <- genes_names
  assign(  paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names")  ,  dummy)    #workaround for assigning dynamically colnames and rownames to the counts_matrix - END

  dummy<- get( paste0( "summary_matrix_", name_control, "_", name_mutant) )         #workaround for assigning dynamically colnames and rownames to the summary_matrix - START
  colnames(dummy) <- col_names
  rownames(dummy) <- summary_tables[[1]][,1]
  assign(  paste0( "summary_matrix_", name_control, "_", name_mutant)  ,  dummy) #workaround for assigning dynamically colnames and rownames to the summary_matrix - END

  # #Evaluating the number of the reads counted and uncounted by HTSEQ2
  total_uncounted <- apply(get(paste0( "summary_matrix_", name_control, "_", name_mutant))[-1,], 2, sum)
  total_counted <- get(paste0( "summary_matrix_", name_control, "_", name_mutant))[1,]
  total_number <- total_uncounted + total_counted
  fraction_counted <- signif(total_counted/total_number, digits=3)
  void_row<-rep(" ", length(total_counted))
  statistics_matrix <- rbind(total_number, total_counted, total_uncounted,fraction_counted,void_row)
  rownames(statistics_matrix)<-c("TOTAL READS MAPPED", "TOTAL READS COUNTED", "TOTAL READS NON COUNTED", "FRACTION COUNTED" , "DETAILS UNCOUNTED:")

    #merging summary matrix and statistics matrix
  dummy<- rbind(statistics_matrix, get( paste0( "summary_matrix_", name_control, "_", name_mutant) )) 
  assign(  paste0( "summary_matrix_", name_control, "_", name_mutant)  ,  dummy)
  
  #**Defining the "experimental design" -----------------------------------
  comparisons <- sapply(col_names, function(x) substr(x,1,3))  #takes only the first parts of the column names; these are the identifiers of the control and mutant's data, irrespectively of the replicates 

  experimental_design <- data.frame(row.names = col_names, comparisons=comparisons)
  experimental_design$correlated <- c(seq(1: length(grep(name_control, col_names)) ),  seq(1: length(grep(name_mutant, col_names)) ) )
  
  #experimental_design$comparisons<- relevel(experimental_design$comparisons, ref=name_control)
  experimental_design$comparisons<- factor(experimental_design$comparisons, levels=c(name_control, name_mutant))
  
  #**Calling DESeq2 ------------------------

  #Creating the dds data structure, needed from DESEQ2
  dds <- DESeqDataSetFromMatrix(countData= get( paste0( "counts_matrix_", name_control, "_", name_mutant, "_with_names")) , colData=experimental_design, design=~comparisons)

# collapse the replicates
library(readr)
rep <- read_csv("/Users/jakemann/Documents/PhD/Analysis/Mfn2_IngWAT_HFD_RNAseq/Mfn2_RNAseqR/rep.csv")

ddsColl <- collapseReplicates(dds, groupby = rep$replicate, run = dds@colData@rownames)

# check correctly collapsed

collapsed <- data.frame(ddsColl@colData@listData[["runsCollapsed"]])

  
  #Calls DEseq2 on dds and store the results in de
  de<-DESeq(ddsColl)

  #Uses the built-in DESEQ2 results operator for creating a matrix-like structure storing the DE analysis results; the structure is stored in res_raw and subsequently converted in a data frame (res) 
  
  res_raw <-results(de)
  res <- signif(as.data.frame(res_raw), digits = sig_dig) #converts into data frame and sets the number of digits
  res <- cbind(rownames(res), res) #adds one column with the genes ID to the res dataframe (it will be useful later on)
  colnames(res) <- c("ID","Mean of norm counts", "log2 FC (MLE)", "lFC Std Err" , "Wald Stat", "Wald test pval", "BH pval") # sets the column names
  
  
  ##*Plots and Tables -----------------------------------------------------------------------------------------------------------------
  
  #**Assigns dynamic names to the table to export, taking the res data frame defined above ---------------------------------- 
  assign(paste0("results_table_",name_control,"_", name_mutant),  res ) #takes the whole res data frame
  dummy<-merge(annotation_table, get(paste0("results_table_",name_control,"_", name_mutant)), by.x="GeneSymbol", by.y="ID")
  assign(paste0("results_table_",name_control,"_", name_mutant), dummy)
  
  
  assign(paste0("results_table_topscore_",name_control,"_", name_mutant), res[which(abs(res$`log2 FC (MLE)`)>lfc & res$`BH pval` <pval),]) #takes only the rows of the res data frame that have the best log2FC and the best BH pval
  dummy<-merge(annotation_table, get(paste0("results_table_topscore_",name_control,"_", name_mutant)), by.x="GeneSymbol", by.y="ID")
  assign(paste0("results_table_topscore_",name_control,"_", name_mutant), dummy)
  
  
  #**Prints the tables above in .csv---------------------------------------------------------------------------------
  
  #write.table(get(paste0("results_table_topscore_",name_control,"_", name_mutant)), file=paste0("results_table_topscore_",name_control,"_", name_mutant, ".tsv"),quote=F,sep="\t", row.names = FALSE)
  
  #write.table(get(paste0("results_table_",name_control,"_", name_mutant)), file=paste0("results_table_",name_control,"_", name_mutant, ".tsv"), quote=F,sep="\t", row.names = FALSE)
  
  #write.table(get(paste0("counts_matrix_",name_control,"_", name_mutant, "_with_names")), file=paste0("counts_matrix_",name_control,"_", name_mutant, ".tsv"), quote=F,sep="\t", row.names = FALSE)
  
  #**Building the datatables ---------------------------------------------------------------------------------------------------------
  #The datatables are widgets created through the saveWidget function; this can "automatically" be sorted clicking on it --> Useful for having a general overview
  
  #***Summingup datatable ------------------------------------------
  #Builds the datatable containing all the resuls of the DE analysis
  
  #Creates the summingup_matrix, which includes only some columns of the correspondent results_table (more handy for visualisation) 
  assign(paste0("summingup_matrix_",name_control, "_", name_mutant), get(paste0("results_table_",name_control,"_", name_mutant))[, c(1:7,10,11)])
  dummy <- get(paste0("summingup_matrix_",name_control, "_", name_mutant))
  rownames(dummy) <- c()
  assign( paste0("summingup_matrix_",name_control, "_", name_mutant), dummy )
  #Creates a dynamic table (widget) of all the results
  assign(paste0("summingup_datatable_",name_control, "_", name_mutant) , datatable(get(paste0("summingup_matrix_",name_control, "_", name_mutant))) )
  #saves the datatable widget to in the working directory
  saveWidget( get(paste0("summingup_datatable_",name_control, "_", name_mutant)), file= paste0("summingup_datatable_",name_control, "_", name_mutant, ".html") )

  #***Topscores datatable ----------------------------------------- 
  #Builds the matrix containing only the top log2FC (adjusted) top scores (independently on the pvalues)
  assign(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant),  subset(get(paste0("summingup_matrix_",name_control, "_", name_mutant)),  (abs(get(paste0("summingup_matrix_",name_control, "_", name_mutant))[,"log2 FC (MLE)"]) >lfc &  get(paste0("summingup_matrix_",name_control, "_", name_mutant))[,"BH pval"] <pval )  ) ) 
  dummy <- get(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant))
  rownames(dummy) <- c()
  assign( paste0("summingup_matrix_topscores_",name_control, "_", name_mutant), dummy )
  #Creates a dynamic table (widget) of the topscores
  assign(paste0("topscores_datatable_",name_control, "_", name_mutant) , datatable(get(paste0("summingup_matrix_topscores_",name_control, "_", name_mutant))) )
  #saves the datatable widget to in the working directory
  saveWidget( get(paste0("topscores_datatable_",name_control, "_", name_mutant)), file= paste0("topscores_datatable_",name_control, "_", name_mutant, ".html") )

  #**Dispersion plot---------------------------------------------------------------------------------------------
  #This will not be stored or printed; for sanity check purposes only
  plotDispEsts(de, main=paste(name_mutant, " vs ", name_control))

  #**MA plot -----------------------------------------------------------------------------------------------------
  #Plot of the mean of normalised (according to DESEq) counts of the control vs. the log2fold change "corrected as well"

  #***Plot static MA -------------------------------------------------------------------------------------------------- 

  #Creates the dataframe for ggplot
  MA_dataframe <- data.frame(Ln_mean=log(res$`Mean of norm counts`), foldchange = res$`log2 FC (MLE)`, pvaladj=res$`BH pval`)
  rownames(MA_dataframe) <- rownames(res)
  MA_dataframe <- MA_dataframe[which(!is.na(MA_dataframe$foldchange)), ]
  MA_dataframe$Diff_Exp <- rep(0, nrow(MA_dataframe))
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)>=lfc  )] <- "Relevant log2 FC" 
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)>=lfc & MA_dataframe$pvaladj<=pval)] <- "Relevant log2 FC and Pval" 
  MA_dataframe$Diff_Exp[which(abs(MA_dataframe$foldchange)<lfc)] = "Non significant" 

  #Creates the ggplot
  r <-ggplot(MA_dataframe, aes(x=Ln_mean, y=foldchange, text=rownames(MA_dataframe)))+
    geom_point(aes(colour= Diff_Exp), size=.5)+
    geom_hline(yintercept=0, linetype=1, color="green") + geom_hline(yintercept=lfc,linetype=3, color="green") + geom_hline(yintercept=-lfc, linetype=3, color="green")+
    scale_colour_manual(values = c("Relevant log2 FC and Pval" ="red", "Non significant" = "black", "Relevant log2 FC" ="blue"))+
    xlab("ln mean of norm. counts") + ylab("log2 fold change")+ scale_x_continuous(labels = function(x)as.integer(exp(x)))+
    #+ylim(-4, 4)
    labs(aesthetic='custom text')+
    ggtitle(paste("MA plot", name_control, "vs.", name_mutant))

  #Saves the plot in a variable
  assign(paste("static", "MAplot", name_control, name_mutant, sep = "_"), r)

  #Saves the pdf of the plot in the OUTPUT directory
  pdf(file= paste("static", "MAplot", name_control, name_mutant, ".pdf", sep = "_"))
  print(r)
  dev.off()

  #***Plot dynamic MA -------------------------------------------------------------------------------------------------- 

  #Creates the plot
  s<- ggplotly(r, tooltip=c("text", "x", "y") )

  #SAves the plot in a variable
  assign(paste("dynamic", "MAplot", name_control, name_mutant, sep = "_"), s)

  #Saves the WIDGET of the plot in the OUTPUT directory
  print(s)
  saveWidget(s, file= paste0("dynamic_MAplot",name_control, "_", name_mutant, ".html") )

  #**Volcano Plots --------------------------------------------------------------

  #***Plot static volcano--------------------------------------------------------

  #creates a data frame with some of the columns taken from res which, in turn, summarises the DESEq2 results
  tab = data.frame(logFC = res$`log2 FC (MLE)`, negLogPval = -log10(res$`BH pval`))
  rownames(tab) <- rownames(res)

  #Identifies the DE genes
  candidate_results <- subset(res, (abs(res$`log2 FC (MLE)`) > lfc & res$`BH pval` < pval))
  assign( paste0("candidate_results_tab_",name_control,"_",name_mutant), subset(tab, (abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval))) )

  #Identifies the not DE genes
  non_candidate_results <- subset(res, (abs(res$`log2 FC (MLE)`) <= lfc | res$`BH pval` >= pval))
  assign(paste0("non_candidate_results_tab_",name_control,"_",name_mutant), subset(tab, (abs(tab$logFC) <= lfc | tab$negLogPval <= -log10(pval))) )

  #Mark DE and non DE genes in the dataframe 
  dummy <- get(paste0("non_candidate_results_tab_",name_control,"_",name_mutant))
  dummy$Diff_Exp <- "DE -"
  assign(paste0("non_candidate_results_tab_",name_control,"_",name_mutant), dummy)

  dummy <- get(paste0("candidate_results_tab_",name_control,"_",name_mutant))
  if(nrow(dummy)>0){dummy$Diff_Exp <- "DE +"}
  assign(paste0("candidate_results_tab_",name_control,"_",name_mutant), dummy)

  #merge the "candidate" and "non candidate" dataframes
  assign(paste0("results_tab_",name_control,"_",name_mutant), rbind(get(paste0("candidate_results_tab_",name_control,"_",name_mutant)), get(paste0("non_candidate_results_tab_",name_control,"_",name_mutant)) ))

  #builds the ggplot
  h<-ggplot( get(paste0("results_tab_",name_control,"_",name_mutant)), aes(x=logFC, y=negLogPval, text=rownames(get(paste0("results_tab_",name_control,"_",name_mutant))) ) )+
   geom_point(aes(colour= Diff_Exp), size=.5)+
   geom_hline(yintercept=-log10(pval), linetype=3, color="green") + geom_vline(xintercept=-c(-lfc, lfc), linetype=3, color="blue")+
   scale_colour_manual(values = c("DE +" ="red", "DE -" = "black"))+
   xlab("log2 fold change") + ylab("-log10 pvalue")+ 
   ggtitle(paste("Volcano plot", name_control, "vs.", name_mutant))

  #Saves the plot in a variable
  assign(paste("static", "Vplot", name_control, name_mutant, sep = "_"), h)

  #Saves the pdf of the plot in the OUTPUT directory
  pdf(file= paste("static", "Vplot", name_control, name_mutant, ".pdf", sep = "_"))
  print(h)
  dev.off()

  #***Plot dynamic volcano----------------------------------------------------------------------------------------------------------

  #Creates the plot
  k<- ggplotly(h, tooltip=c("text", "x", "y") )

  #Saves the plot in a variable
  assign(paste("dynamic", "Vplot", name_control, name_mutant, sep = "_"), k)

  print(k)

  #Saves the WIDGET of the plot in the OUTPUT directory
  saveWidget(k, file= paste0("dynamic_Vplot",name_control, "_", name_mutant, ".html") )

  #Updates the loop counter
  print(num_comparisons)
  num_comparisons= num_comparisons +1
} 
#*End of the loop --------------------------------------------


# #PRODUCES ADDITIONAL TABLES =================================================

#**Produces the genes_lenghts  ---------------------------------------------------------------
#takes the genes lengths from the first feature counts input file and creates the genes_lenghts table
feature_counts_table <- fread(input_files[[1]])
genes_lenghts <- as.matrix(feature_counts_table$Length)
rownames(genes_lenghts) <- feature_counts_table$Geneid
colnames(genes_lenghts) <- "Lenght"

#**Produces the annotation_table_with_length ---------------------------------------------------------------
annotation_table_with_length <- merge(annotation_table, genes_lenghts, all.x=T, by.x="GeneSymbol", by.y="row.names")

#** Raw counts, CPM, TPM  ---------------------------------------------------------------

# produces the raw_counts matrix
# merges the raw_counts matrix (all the raw counts for each sample) with the genes_lenghts_table
raw_counts <- (merge(annotation_table_with_length, counts(de), by.x="GeneSymbol", by.y="row.names", all.x=T))
write.csv(raw_counts, file="raw_counts.csv", row.names=FALSE)

# produces the Raw Counts Normalised (DESeq2 normalisation) table 
raw_counts_normalised <- (merge(annotation_table_with_length, counts(de, normalized=T), by.x="GeneSymbol", by.y="row.names", all.x=T))
write.csv(raw_counts_normalised, file="raw_counts_normalised.csv", row.names=FALSE)

# computes the CPM on the raw counts
CPM_working = subset(raw_counts, select = c(7:ncol(raw_counts)))
CPM_working$sum <- rowSums(CPM_working)
CPM <- apply(raw_counts[,c(7:ncol(raw_counts))],2, function(x){x*10^6/CPM_working$sum})
CPM <- cbind(raw_counts[,c(1:6)],CPM)
write.csv(CPM, file="raw_counts_CPM.csv", row.names=FALSE)

# computes the TPM
RPK <-  (raw_counts[,c(7:ncol(raw_counts))])/(raw_counts$Lenght/1000)  #<- Reads Per Kilobase (Normalises the counts for the genes length, expressed in kilobases)
Scaling_factor <- apply(RPK,2,sum)/10^6
TPM <- sweep(RPK, 2, Scaling_factor, FUN = '/')
TPM <- cbind(raw_counts[,c(1:6)],TPM)
write.csv(TPM, file="raw_counts_TPM.csv", row.names=FALSE)

#** Produces the results_tables  ---------------------------------------------------------------

#computes the average CPM for controls and mutants
assign(paste0("average_",name_control), apply(CPM[,grep(colnames(CPM), pattern=name_control)],1,mean ) )
dummy<-as.data.frame(get(paste0("average_",name_control)))
colnames(dummy) <- paste0("Average CPM ",name_control)
rownames(dummy) <- CPM$gene_id
assign(paste0("average_",name_control), dummy)
#
assign(paste0("average_",names_mutants), apply(CPM[,grep(colnames(CPM), pattern=names_mutants)],1,mean ) )
dummy<-as.data.frame(get(paste0("average_",names_mutants)))
colnames(dummy) <- paste0("Average CPM ",names_mutants)
rownames(dummy) <- CPM$gene_id
assign(paste0("average_",names_mutants), dummy)
#
#merges the averages CPMs tables with the results table and the genes_length table
dummy<- merge(get(paste0("average_",name_control)),  get(paste0("average_",names_mutants)), by="row.names") 
rownames(dummy) <- dummy$Row.names
dummy<- dummy[,-1]
#
assign(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM"), merge( get(paste0("results_table_",name_control,"_", names_mutants)), dummy, by.y="row.names", by.x="gene_id") ) 
assign(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM"), merge( get(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM")), genes_lenghts, by.x="GeneSymbol", by.y="row.names", all.x=T ) )
write.csv(get(paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM")), file=paste0("results_table_", name_control,"_", names_mutants, "_" , "CPM.csv"), row.names = FALSE)
#
assign(paste0("results_table_topscore_", name_control,"_", names_mutants, "_", "CPM"), merge( get(paste0("results_table_topscore_",name_control,"_", names_mutants)), dummy, by.y="row.names", by.x="gene_id") ) 
assign(paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM"), merge( get(paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM")), genes_lenghts, by.x="GeneSymbol", by.y="row.names", all.x=T ) )
write.csv(get(paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM")), file=paste0("results_table_topscore_", name_control,"_", names_mutants, "_" , "CPM.csv"), row.names = FALSE)

#**Filters the counts matrix  according to the CPM ------------------------

# # Filters the counts matrix eliminating the rows where at least one element violates the condition (low countys threshold)

count_zeroes<- function(x){length(which(x<=.5))}
numberofzeroes <- apply(CPM[,c(7:ncol(CPM))], 1, count_zeroes)
CPM_filtered <- CPM[which(numberofzeroes<=5),]
# write.csv(counts_matrix_cpm_filtered, file="cpm_counts_filtered.csv")
# 
#Filters the results_mtrx with the same criteria above 
results_mtrx <- get(paste0("results_table_",name_control,"_", name_mutant, "_CPM"))
results_mtrx_filtered <- results_mtrx[which(results_mtrx$gene_id %in% CPM_filtered$gene_id), ]
#write.csv(results_mtrx, file="results_table.csv", row.names = FALSE)
write.csv(results_mtrx_filtered, file="results_table_CPM_filtered.csv", row.names = FALSE)
#Filters the results_mtrx with the same criteria above 
results_mtrx <- get(paste0("results_table_",name_control,"_", name_mutant, "_CPM"))
results_mtrx_filtered <- results_mtrx[which(results_mtrx$gene_id %in% CPM_filtered$gene_id), ]
#write.csv(results_mtrx, file="results_table.csv", row.names = FALSE)
write.csv(results_mtrx_filtered, file="results_table_CPM_filtered.csv", row.names = FALSE)

results_mtrx_topscore <- get(paste0("results_table_topscore_",name_control,"_", name_mutant, "_CPM"))
results_mtrx_topscore_filtered <- results_mtrx_topscore[which(results_mtrx_topscore$gene_id %in% CPM_filtered$gene_id), ]
write.csv(results_mtrx_topscore_filtered, file="results_table_CPM_topscore_filtered.csv", row.names = FALSE)

#CREATES A HEATMAP =================================================
library(gplots)
#class(CPM_filtered) <- "numeric"
#CPM_filtered_resorted <-CPM_filtered[order(CPM_filtered[,7], decreasing = TRUE),]
#class(CPM_filtered_resorted) <- "numeric"
CPM_filtered_heat <- as.matrix(CPM_filtered[,c(7:ncol(CPM))])
class(CPM_filtered_heat) <- "numeric"

CPM_filtered_heat_sorted <-CPM_filtered_heat[order(CPM_filtered_heat[,1], decreasing = TRUE),]

pdf(file="IngHFD_hm.pdf")
heatmap.2(CPM_filtered_heat_sorted[c(1:7000),], distfun=function(x) dist(x, method="minkowski"), hclustfun=function(x) hclust(x, method="ward.D2"), scale="row", trace = 'none', labRow = FALSE, dendrogram="column", margins=c(8,1), cexCol = .75)
dev.off()


# #CREATES THE TABLE FOR GSEA =====================================================
# #The data are taken from the res_raw table.
GSEA_table <- data.frame(Sign= sign(res_raw$log2FoldChange), pval=(res_raw$padj),stringsAsFactors = FALSE)
GSEA_table$metric <- -log10(GSEA_table$pval)/GSEA_table$Sign
rownames(GSEA_table) <- rownames(res_raw)

GSEA_input_ranked_table <- cbind(rownames(GSEA_table), GSEA_table$metric)
colnames(GSEA_input_ranked_table) <- cbind("Gene name", "Metric")
GSEA_input_ranked_table<-GSEA_input_ranked_table[-which(is.na(GSEA_input_ranked_table[,"Metric"])),]

write.table(GSEA_input_ranked_table, file=paste0("GSEA_input_ranked_table_",name_control,"_", name_mutant, ".rnk"), quote=F,sep="\t", row.names = FALSE)



##############################
##########
##########
##########
##########
##########
##########


## further analysis, interpretation, and figures =====================================================
require(dplyr)


vplot_tab <- merge(results_table_WT__KI__CPM, annotation_table, by="gene_id")
vplot_tab <- vplot_tab %>% rename("BH_pval" = "BH pval")
vplot_tab <- vplot_tab %>% rename("log2FC" = "log2 FC (MLE)")

########## make volcano plot 
library(ggplot2)
library(ggrepel)
library(dplyr)
library(pheatmap)

vplot_tab$neglog_p = -log10(vplot_tab$BH_pval)
vplot_tab <- vplot_tab[complete.cases(vplot_tab), ]

############  edit formatting of signficance for labelleing

vplot_tab$significant = ifelse(vplot_tab$neglog_p > 2 & vplot_tab$log2FC <=-1.5 | vplot_tab$neglog_p > 2 & vplot_tab$log2FC>=1.5, "sig", "not")
vplot_tab_label1 = subset(vplot_tab, neglog_p > 19)
vplot_tab_label2 = subset(vplot_tab, neglog_p > 6)
vplot_tab_label2 <- subset(vplot_tab_label2, log2FC <=-5 | log2FC>=5)
vplot_tab_label3 = subset(vplot_tab_label2, log2FC <=-5)
vplot_tab_label4 = subset(vplot_tab, neglog_p > 2 & vplot_tab$log2FC <=-5 | vplot_tab$neglog_p > 2 & vplot_tab$log2FC>=5)
vplot_tab_label_final <- rbind(vplot_tab_label1, vplot_tab_label2)
vplot_tab_label_final <- rbind(vplot_tab_label_final, vplot_tab_label3)
vplot_tab_label_final <- rbind(vplot_tab_label_final, vplot_tab_label4)
vplot_tab_label_final <- vplot_tab_label_final %>% distinct(GeneSymbol.x, .keep_all = TRUE)

############

IngHFD_vol <- ggplot(data=vplot_tab, aes(x=log2FC, y=neglog_p, colour=significant)) + geom_point(alpha=0.4, size=1.75) + xlab("Log2 Fold change") + ylab("-log10 p-value") + theme_bw() + theme(legend.position="right") + geom_text_repel(data = vplot_tab_label_final, aes(label = GeneSymbol.x), size = 3, key_glyph = "point")
IngHFD_vol

pdf(file="IngHFD_vol.pdf",width=9,height=6)
IngHFD_vol
dev.off()

############

######################## make heatmaps

##### hm of significantly differentially expressed genes

vplot_tab_hm <- vplot_tab
vplot_tab_hm$significant = ifelse(vplot_tab$BH_pval <=.0001 & vplot_tab$log2FC <=-3 | vplot_tab$log2FC>=2.2, "sig", "not")
vplot_tab_hm$sig2 = ifelse(vplot_tab$BH_pval <=.01, "sig", "not")


norm_counts <- as.data.frame(counts(de, normalized=T))
col_order <- c("WT_1", "WT_2", "WT_3", "WT_4", "WT_5", "WT_6", "WT_7", "WT_8", "KI_1", "KI_2", "KI_3", "KI_4", "KI_5", "KI_6", "KI_7", "KI_8")
norm_counts <- norm_counts[, col_order]

numberofzeroes <- apply(norm_counts[,c(1:ncol(norm_counts))], 1, count_zeroes)
norm_counts_filtered <- norm_counts[which(numberofzeroes<=5),]
norm_counts_filtered$GeneSymbol.x <- rownames(norm_counts_filtered)

hm_tab <- merge(norm_counts_filtered, vplot_tab_hm, by="GeneSymbol.x")
hm_tab <- hm_tab %>% rename("GeneSymbol" = "GeneSymbol.x")
write.table(hm_tab, file="norm_counts_gsea.csv",sep=",")

hm_tab_sig = subset(hm_tab, significant=="sig")

hm_sig <- pheatmap(hm_tab_sig[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_sig$GeneSymbol, fontsize_row = 8, cutree_rows = 7, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, main = "Significantly differentially expressed genes")

pdf(file="IngHFD_hm_sig.pdf",width=8,height=8)
hm_sig
dev.off()


##### hm of adipogenesis-related genes

hm_tab_adip = subset(hm_tab, GeneSymbol=="Lep" | GeneSymbol=="Adipoq" | GeneSymbol=="Cd36" | GeneSymbol=="Pparg" | GeneSymbol=="Glut4" | GeneSymbol=="Fasn"| GeneSymbol=="Plin1"| GeneSymbol=="Plin2"| GeneSymbol=="Plin4"| GeneSymbol=="Fabp4"| GeneSymbol=="Isnr"| GeneSymbol=="Lpl"| GeneSymbol=="Agpat2"| GeneSymbol=="Bscl2"| GeneSymbol=="Cidec"| GeneSymbol=="Cebpa"| GeneSymbol=="Acaca"| GeneSymbol=="Ppargc1a"| GeneSymbol=="Ppargc1b"| GeneSymbol=="Slc2a4" )

rownames(hm_tab_adip) = hm_tab_adip$GeneSymbol
hm_adip_annot = data.frame("Sig" = hm_tab_adip$sig2)
rownames(hm_adip_annot) = rownames(hm_tab_adip)

hm_adip <- pheatmap(hm_tab_adip[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_adip$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_adip_annot, legend_labels = "Relative expression", main = "Adipogenesis-related genes")

pdf(file="IngHFD_hm_adip.pdf",width=5,height=6)
hm_adip
dev.off()

##### hm of ISR-related genes

hm_tab_ISR = subset(hm_tab, GeneSymbol=="Atf4" | GeneSymbol=="Atf5" |GeneSymbol=="Atf6" | GeneSymbol=="Xbp1" | GeneSymbol=="Gdf15" | GeneSymbol=="Fgf21" | GeneSymbol=="Trib3"| GeneSymbol=="Eif2ak4"| GeneSymbol=="Ddit3"| GeneSymbol=="Gadd34"| GeneSymbol=="Perk"| GeneSymbol=="Eif2ak1"| GeneSymbol=="Hif1a")
hm_tab_ISR <- hm_tab_ISR %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_ISR) = hm_tab_ISR$GeneSymbol
hm_ISR_annot = data.frame("Sig" = hm_tab_ISR$sig2)
rownames(hm_ISR_annot) = rownames(hm_tab_ISR)

hm_ISR <- pheatmap(hm_tab_ISR[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_ISR$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_ISR_annot, main = "ISR genes")

pdf(file="IngHFD_hm_ISR.pdf",width=5,height=6)
hm_ISR
dev.off()

##### hm of mitochondrial-related genes

hm_tab_mito = subset(hm_tab, GeneSymbol=="Mfn1" | GeneSymbol=="Mfn2" | GeneSymbol=="Opa1" | GeneSymbol=="Fis1" | GeneSymbol=="Tomm20" | GeneSymbol=="Ppargc1a"| GeneSymbol=="Ppargc1b"| GeneSymbol=="Cs" | GeneSymbol=='mt-Rnr1' | GeneSymbol=='mt-Rnr2' | GeneSymbol=='mt-Tl1' | GeneSymbol=='mt-Nd1' | GeneSymbol=='mt-Ti' | GeneSymbol=='mt-Tq' | GeneSymbol=='mt-Tm' | GeneSymbol=='mt-Nd2' | GeneSymbol=='mt-Tw' | GeneSymbol=='mt-Ta' | GeneSymbol=='mt-Tn' | GeneSymbol=='mt-Tc' | GeneSymbol=='mt-Ty' | GeneSymbol=='mt-Co1' | GeneSymbol=='mt-Ts1' | GeneSymbol=='mt-Td' | GeneSymbol=='mt-Co2' | GeneSymbol=='mt-Atp8' | GeneSymbol=='mt-Atp6' | GeneSymbol=='mt-Co3' | GeneSymbol=='mt-Tg' | GeneSymbol=='mt-Nd3' | GeneSymbol=='mt-Tr' | GeneSymbol=='mt-Nd4' | GeneSymbol=='mt-Th' | GeneSymbol=='mt-Ts2' | GeneSymbol=='mt-Tl2' | GeneSymbol=='mt-Nd5' | GeneSymbol=='mt-Nd6' | GeneSymbol=='mt-Te' | GeneSymbol=='mt-Cytb' | GeneSymbol=='mt-Tt' | GeneSymbol=='mt-Tp' | GeneSymbol=='mt-Nd4l' | GeneSymbol=='Sdha' | GeneSymbol=="Prkn" | GeneSymbol=="Pink1" | GeneSymbol=="Bnip3" | GeneSymbol=="Nrf1" | GeneSymbol==""| GeneSymbol=="Mff"| GeneSymbol=="Cycs")
hm_tab_mito <- hm_tab_mito %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_mito) = hm_tab_mito$GeneSymbol
hm_mito_annot = data.frame("Sig" = hm_tab_mito$sig2)
rownames(hm_mito_annot) = rownames(hm_tab_mito)

hm_mito <- pheatmap(hm_tab_mito[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_mito$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial function-related genes")

pdf(file="IngHFD_hm_mito.pdf",width=5,height=6)
hm_mito
dev.off()

##### hm of inflammation-related genes

hm_tab_inflam = subset(hm_tab, GeneSymbol=='Ifng' |GeneSymbol=='Cd68' |GeneSymbol=='Cd11b' |GeneSymbol=='Itgam' |GeneSymbol=='Ccl2' |GeneSymbol=='Cd4' |GeneSymbol=='Cd3g' |GeneSymbol=='Cd8a' |GeneSymbol=='Tnf' |GeneSymbol=='Il1b' |GeneSymbol=='Il4' |GeneSymbol=='Il13' |GeneSymbol=='Il10' |GeneSymbol=='Ptprc' |GeneSymbol=='Adgre1' |GeneSymbol=='Il6' |GeneSymbol=='Mif' |GeneSymbol=='Tlr4')
hm_tab_inflam <- hm_tab_inflam %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_inflam) = hm_tab_inflam$GeneSymbol
hm_inflam_annot = data.frame("Sig" = hm_tab_inflam$sig2)
rownames(hm_inflam_annot) = rownames(hm_tab_inflam)

hm_inflam <- pheatmap(hm_tab_inflam[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_inflam$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_inflam_annot, legend_labels = "Relative expression", main = "Inflammatory genes")

pdf(file="IngHFD_hm_inflam.pdf",width=5,height=6)
hm_inflam
dev.off()


##### hm of fibrosis-related genes

hm_tab_fibros = subset(hm_tab, GeneSymbol=='Tgfb1' |GeneSymbol=='Sod1' |GeneSymbol=='Hif1a' |GeneSymbol=='Pdgfa' |GeneSymbol=='Gtf2ird1' |GeneSymbol=='Inhba' |GeneSymbol=='Rock1')
hm_tab_fibros <- hm_tab_fibros %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_fibros) = hm_tab_fibros$GeneSymbol
hm_fibros_annot = data.frame("Sig" = hm_tab_fibros$sig2)
rownames(hm_fibros_annot) = rownames(hm_tab_fibros)

hm_fibros <- pheatmap(hm_tab_fibros[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_fibros$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_fibros_annot, legend_labels = "Relative expression", main = "Fibrosis-related genes")

pdf(file="IngHFD_hm_fibros.pdf",width=5,height=6)
hm_fibros
dev.off()



##### hm of hallmark adipogenesis genes

hm_tab_hall_adip1 = subset(hm_tab, GeneSymbol=='Abca1' |GeneSymbol=='Abcb8' |GeneSymbol=='Acaa2' |GeneSymbol=='Acadl' |GeneSymbol=='Acadm' |GeneSymbol=='Acads' |GeneSymbol=='Acly' |GeneSymbol=='Aco2' |GeneSymbol=='Acox1' |GeneSymbol=='Adcy6' |GeneSymbol=='Adig' |GeneSymbol=='Adipoq' |GeneSymbol=='Adipor2' |GeneSymbol=='Agpat3' |GeneSymbol=='Aifm1' |GeneSymbol=='Ak2' |GeneSymbol=='Aldh2' |GeneSymbol=='Aldoa' |GeneSymbol=='Angpt1' |GeneSymbol=='Angptl4' |GeneSymbol=='Aplp2' |GeneSymbol=='Apoe' |GeneSymbol=='Araf' |GeneSymbol=='Arl4A' |GeneSymbol=='Atl2' |GeneSymbol=='Atp1B3' |GeneSymbol=='Atp5Po' |GeneSymbol=='Baz2A' |GeneSymbol=='Bckdha' |GeneSymbol=='Bcl2L13' |GeneSymbol=='Bcl6' |GeneSymbol=='C3' |GeneSymbol=='Cat' |GeneSymbol=='Cavin1' |GeneSymbol=='Cavin2' |GeneSymbol=='Ccng2' |GeneSymbol=='Cd151' |GeneSymbol=='Cd302' |GeneSymbol=='Cd36' |GeneSymbol=='Cdkn2C' |GeneSymbol=='Chchd10' |GeneSymbol=='Chuk' |GeneSymbol=='Cidea' |GeneSymbol=='Cmbl' |GeneSymbol=='Cmpk1' |GeneSymbol=='Col15A1' |GeneSymbol=='Col4A1' |GeneSymbol=='Coq3' |GeneSymbol=='Coq5' |GeneSymbol=='Coq9' |GeneSymbol=='Cox6A1' |GeneSymbol=='Cox7B' |GeneSymbol=='Cox8A' |GeneSymbol=='Cpt2' |GeneSymbol=='Crat' |GeneSymbol=='Cs' |GeneSymbol=='Cyc1' |GeneSymbol=='Cyp4B1' |GeneSymbol=='Dbt' |GeneSymbol=='Ddt' |GeneSymbol=='Decr1' |GeneSymbol=='Dgat1' |GeneSymbol=='Dhcr7' |GeneSymbol=='Dhrs7' |GeneSymbol=='Dhrs7B' |GeneSymbol=='Dlat' |GeneSymbol=='Dld' |GeneSymbol=='Dnajb9' |GeneSymbol=='Dnajc15' |GeneSymbol=='Dram2' |GeneSymbol=='Ech1' |GeneSymbol=='Echs1' |GeneSymbol=='Elmod3' |GeneSymbol=='Elovl6' |GeneSymbol=='Enpp2' |GeneSymbol=='Ephx2' |GeneSymbol=='Esrra' |GeneSymbol=='Esyt1' |GeneSymbol=='Etfb' |GeneSymbol=='Fabp4' |GeneSymbol=='Fah' |GeneSymbol=='Fzd4' |GeneSymbol=='G3Bp2' |GeneSymbol=='Gadd45A' |GeneSymbol=='Gbe1' |GeneSymbol=='Ghitm' |GeneSymbol=='Gpam' |GeneSymbol=='Gpat4' |GeneSymbol=='Gpd2' |GeneSymbol=='Gphn' |GeneSymbol=='Gpx3' |GeneSymbol=='Gpx4' |GeneSymbol=='Grpel1' |GeneSymbol=='Hadh' |GeneSymbol=='Hibch' |GeneSymbol=='Hspb8' |GeneSymbol=='Idh1' |GeneSymbol=='Idh3A' |GeneSymbol=='Idh3G' |GeneSymbol=='Ifngr1' |GeneSymbol=='Immt' |GeneSymbol=='Itga7' |GeneSymbol=='Itih5' |GeneSymbol=='Itsn1' |GeneSymbol=='Jagn1' |GeneSymbol=='Lama4' |GeneSymbol=='Lep' |GeneSymbol=='Lifr' |GeneSymbol=='Lipe' |GeneSymbol=='Lpcat3' |GeneSymbol=='Lpl' |GeneSymbol=='Ltc4S' |GeneSymbol=='Map4K3' |GeneSymbol=='Mccc1' |GeneSymbol=='Mdh2' |GeneSymbol=='Me1' |GeneSymbol=='Mgll' |GeneSymbol=='Mgst3' |GeneSymbol=='Miga2' |GeneSymbol=='Mrap' |GeneSymbol=='Mrpl15' |GeneSymbol=='Mtarc2')

hm_tab_hall_adip2 = subset(hm_tab, GeneSymbol=='Mtch2' |GeneSymbol=='Mylk' |GeneSymbol=='Nabp1' |GeneSymbol=='Ndufa5' |GeneSymbol=='Ndufab1' |GeneSymbol=='Ndufb7' |GeneSymbol=='Ndufs3' |GeneSymbol=='Nkiras1' |GeneSymbol=='Nmt1' |GeneSymbol=='Omd' |GeneSymbol=='Orm1' |GeneSymbol=='Pdcd4' |GeneSymbol=='Pemt' |GeneSymbol=='Pex14' |GeneSymbol=='Pfkfb3' |GeneSymbol=='Pfkl' |GeneSymbol=='Pgm1' |GeneSymbol=='Phldb1' |GeneSymbol=='Phyh' |GeneSymbol=='Pim3' |GeneSymbol=='Plin2' |GeneSymbol=='Por' |GeneSymbol=='Pparg' |GeneSymbol=='Ppm1B' |GeneSymbol=='Ppp1R15B' |GeneSymbol=='Prdx3' |GeneSymbol=='Preb' |GeneSymbol=='Ptcd3' |GeneSymbol=='Ptger3' |GeneSymbol=='Qdpr' |GeneSymbol=='Rab34' |GeneSymbol=='Reep5' |GeneSymbol=='Reep6' |GeneSymbol=='Retn' |GeneSymbol=='Retsat' |GeneSymbol=='Riok3' |GeneSymbol=='Rmdn3' |GeneSymbol=='Rnf11' |GeneSymbol=='Rreb1' |GeneSymbol=='Rtn3' |GeneSymbol=='Samm50' |GeneSymbol=='Scarb1' |GeneSymbol=='Scp2' |GeneSymbol=='Sdhb' |GeneSymbol=='Sdhc' |GeneSymbol=='Slc19A1' |GeneSymbol=='Slc1A5' |GeneSymbol=='Slc25A1' |GeneSymbol=='Slc25A10' |GeneSymbol=='Slc27A1' |GeneSymbol=='Slc5A6' |GeneSymbol=='Slc66A3' |GeneSymbol=='Sncg' |GeneSymbol=='Sod1' |GeneSymbol=='Sorbs1' |GeneSymbol=='Sowahc' |GeneSymbol=='Sparcl1' |GeneSymbol=='Sqor' |GeneSymbol=='Sspn' |GeneSymbol=='Stat5A' |GeneSymbol=='Stom' |GeneSymbol=='Suclg1' |GeneSymbol=='Sult1A1' |GeneSymbol=='Taldo1' |GeneSymbol=='Tank' |GeneSymbol=='Tkt' |GeneSymbol=='Tob1' |GeneSymbol=='Tst' |GeneSymbol=='Ubc' |GeneSymbol=='Ubqln1' |GeneSymbol=='Uck1' |GeneSymbol=='Ucp2' |GeneSymbol=='Uqcr10' |GeneSymbol=='Uqcr11' |GeneSymbol=='Uqcrc1' |GeneSymbol=='Uqcrq' |GeneSymbol=='Vegfb' |GeneSymbol=='Ywhag')

hm_tab_hall_adip <- rbind(hm_tab_hall_adip1, hm_tab_hall_adip2)

hm_tab_hall_adip <- hm_tab_hall_adip %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_adip) = hm_tab_hall_adip$GeneSymbol
hm_hall_adip_annot = data.frame("Sig" = hm_tab_hall_adip$sig2)
rownames(hm_hall_adip_annot) = rownames(hm_tab_hall_adip)

hm_hall_adip <- pheatmap(hm_tab_hall_adip[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_adip$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_adip_annot, legend_labels = "Relative expression", main = "HALLMARK_ADIPOGENESIS genes")

pdf(file="IngHFD_hm_hall_adip.pdf",width=6,height=12)
hm_hall_adip
dev.off()


##### hm of hallmark oxphos genes

hm_tab_hall_oxphos1 = subset(hm_tab, GeneSymbol=='Abcb7' |GeneSymbol=='Acaa1' |GeneSymbol=='Acaa2' |GeneSymbol=='Acadm' |GeneSymbol=='Acadsb' |GeneSymbol=='Acadvl' |GeneSymbol=='Acat1' |GeneSymbol=='Aco2' |GeneSymbol=='Afg3L2' |GeneSymbol=='Aifm1' |GeneSymbol=='Alas1' |GeneSymbol=='Aldh6A1' |GeneSymbol=='Atp1B1' |GeneSymbol=='Atp5F1A' |GeneSymbol=='Atp5F1B' |GeneSymbol=='Atp5F1C' |GeneSymbol=='Atp5F1D' |GeneSymbol=='Atp5F1E' |GeneSymbol=='Atp5Mc1' |GeneSymbol=='Atp5Mc2' |GeneSymbol=='Atp5Mc3' |GeneSymbol=='Atp5Me' |GeneSymbol=='Atp5Mf' |GeneSymbol=='Atp5Mg' |GeneSymbol=='Atp5Pb' |GeneSymbol=='Atp5Pd' |GeneSymbol=='Atp5Pf' |GeneSymbol=='Atp5Po' |GeneSymbol=='Atp6Ap1' |GeneSymbol=='Atp6V0B' |GeneSymbol=='Atp6V0C' |GeneSymbol=='Atp6V0E1' |GeneSymbol=='Atp6V1C1' |GeneSymbol=='Atp6V1D' |GeneSymbol=='Atp6V1E1' |GeneSymbol=='Atp6V1F' |GeneSymbol=='Atp6V1G1' |GeneSymbol=='Atp6V1H' |GeneSymbol=='Bax' |GeneSymbol=='Bckdha' |GeneSymbol=='Bdh2' |GeneSymbol=='Casp7' |GeneSymbol=='Cox10' |GeneSymbol=='Cox11' |GeneSymbol=='Cox15' |GeneSymbol=='Cox17' |GeneSymbol=='Cox4I1' |GeneSymbol=='Cox5A' |GeneSymbol=='Cox5B' |GeneSymbol=='Cox6A1' |GeneSymbol=='Cox6B1' |GeneSymbol=='Cox6C' |GeneSymbol=='Cox7A2' |GeneSymbol=='Cox7A2L' |GeneSymbol=='Cox7B' |GeneSymbol=='Cox7C' |GeneSymbol=='Cox8A' |GeneSymbol=='Cpt1A' |GeneSymbol=='Cs' |GeneSymbol=='Cyb5A' |GeneSymbol=='Cyb5R3' |GeneSymbol=='Cyc1' |GeneSymbol=='Cycs' |GeneSymbol=='Decr1' |GeneSymbol=='Dlat' |GeneSymbol=='Dld' |GeneSymbol=='Dlst' |GeneSymbol=='Ech1' |GeneSymbol=='Echs1' |GeneSymbol=='Eci1' |GeneSymbol=='Etfa' |GeneSymbol=='Etfb' |GeneSymbol=='Etfdh' |GeneSymbol=='Fdx1' |GeneSymbol=='Fh' |GeneSymbol=='Fxn' |GeneSymbol=='Glud1' |GeneSymbol=='Got2' |GeneSymbol=='Gpi' |GeneSymbol=='Gpx4' |GeneSymbol=='Grpel1' |GeneSymbol=='Hadha' |GeneSymbol=='Hadhb' |GeneSymbol=='Hccs' |GeneSymbol=='Hsd17B10' |GeneSymbol=='Hspa9' |GeneSymbol=='Htra2' |GeneSymbol=='Idh1' |GeneSymbol=='Idh2' |GeneSymbol=='Idh3A' |GeneSymbol=='Idh3B' |GeneSymbol=='Idh3G' |GeneSymbol=='Immt' |GeneSymbol=='Isca1' |GeneSymbol=='Iscu' |GeneSymbol=='Ldha' |GeneSymbol=='Ldhb' |GeneSymbol=='Lrpprc' |GeneSymbol=='Maob' |GeneSymbol=='Mdh1' |GeneSymbol=='Mdh2' |GeneSymbol=='Mfn2' |GeneSymbol=='Mgst3' |GeneSymbol=='Mpc1' |GeneSymbol=='Mrpl11' |GeneSymbol=='Mrpl15' |GeneSymbol=='Mrpl34' |GeneSymbol=='Mrpl35' |GeneSymbol=='Mrps11' |GeneSymbol=='Mrps12' |GeneSymbol=='Mrps15' |GeneSymbol=='Mrps22' |GeneSymbol=='Mrps30' |GeneSymbol=='Mtrf1')

hm_tab_hall_oxphos2 = subset(hm_tab, GeneSymbol=='Mtrr' |GeneSymbol=='Mtx2' |GeneSymbol=='Ndufa1' |GeneSymbol=='Ndufa2' |GeneSymbol=='Ndufa3' |GeneSymbol=='Ndufa4' |GeneSymbol=='Ndufa5' |GeneSymbol=='Ndufa6' |GeneSymbol=='Ndufa7' |GeneSymbol=='Ndufa8' |GeneSymbol=='Ndufa9' |GeneSymbol=='Ndufab1' |GeneSymbol=='Ndufb1' |GeneSymbol=='Ndufb2' |GeneSymbol=='Ndufb3' |GeneSymbol=='Ndufb4' |GeneSymbol=='Ndufb5' |GeneSymbol=='Ndufb6' |GeneSymbol=='Ndufb7' |GeneSymbol=='Ndufb8' |GeneSymbol=='Ndufc1' |GeneSymbol=='Ndufc2' |GeneSymbol=='Ndufs1' |GeneSymbol=='Ndufs2' |GeneSymbol=='Ndufs3' |GeneSymbol=='Ndufs4' |GeneSymbol=='Ndufs6' |GeneSymbol=='Ndufs7' |GeneSymbol=='Ndufs8' |GeneSymbol=='Ndufv1' |GeneSymbol=='Ndufv2' |GeneSymbol=='Nnt' |GeneSymbol=='Nqo2' |GeneSymbol=='Oat' |GeneSymbol=='Ogdh' |GeneSymbol=='Opa1' |GeneSymbol=='Oxa1L' |GeneSymbol=='Pdha1' |GeneSymbol=='Pdhb' |GeneSymbol=='Pdhx' |GeneSymbol=='Pdk4' |GeneSymbol=='Pdp1' |GeneSymbol=='Phb2' |GeneSymbol=='Phyh' |GeneSymbol=='Pmpca' |GeneSymbol=='Polr2F' |GeneSymbol=='Por' |GeneSymbol=='Prdx3' |GeneSymbol=='Retsat' |GeneSymbol=='Rhot1' |GeneSymbol=='Rhot2' |GeneSymbol=='Sdha' |GeneSymbol=='Sdhb' |GeneSymbol=='Sdhc' |GeneSymbol=='Sdhd' |GeneSymbol=='Slc25A11' |GeneSymbol=='Slc25A12' |GeneSymbol=='Slc25A20' |GeneSymbol=='Slc25A3' |GeneSymbol=='Slc25A4' |GeneSymbol=='Slc25A5' |GeneSymbol=='Slc25A6' |GeneSymbol=='Sucla2' |GeneSymbol=='Suclg1' |GeneSymbol=='Supv3L1' |GeneSymbol=='Surf1' |GeneSymbol=='Tcirg1' |GeneSymbol=='Timm10' |GeneSymbol=='Timm13' |GeneSymbol=='Timm17A' |GeneSymbol=='Timm50' |GeneSymbol=='Timm8B' |GeneSymbol=='Timm9' |GeneSymbol=='Tomm22' |GeneSymbol=='Tomm70' |GeneSymbol=='Uqcr10' |GeneSymbol=='Uqcr11' |GeneSymbol=='Uqcrb' |GeneSymbol=='Uqcrc1' |GeneSymbol=='Uqcrc2' |GeneSymbol=='Uqcrfs1' |GeneSymbol=='Uqcrh' |GeneSymbol=='Uqcrq' |GeneSymbol=='Vdac1' |GeneSymbol=='Vdac2' |GeneSymbol=='Vdac3')

hm_tab_hall_oxphos <- rbind(hm_tab_hall_oxphos1, hm_tab_hall_oxphos2)

hm_tab_hall_oxphos <- hm_tab_hall_oxphos %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_oxphos) = hm_tab_hall_oxphos$GeneSymbol
hm_hall_oxphos_annot = data.frame("Sig" = hm_tab_hall_oxphos$sig2)
rownames(hm_hall_oxphos_annot) = rownames(hm_tab_hall_oxphos)

hm_hall_oxphos <- pheatmap(hm_tab_hall_oxphos[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_oxphos$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_oxphos_annot, legend_labels = "Relative expression", main = "HALLMARK_OXIDATIVE_PHOSPHORYLATION genes")

pdf(file="IngHFD_hm_hall_oxphos.pdf",width=7,height=12)
hm_hall_oxphos
dev.off()


##### hm of hallmark ROS genes

hm_tab_hall_ros = subset(hm_tab, GeneSymbol=='Abcc1' |GeneSymbol=='Atox1' |GeneSymbol=='Cat' |GeneSymbol=='Cdkn2D' |GeneSymbol=='Egln2' |GeneSymbol=='Ercc2' |GeneSymbol=='Fes' |GeneSymbol=='Ftl' |GeneSymbol=='G6Pd' |GeneSymbol=='Gclc' |GeneSymbol=='Gclm' |GeneSymbol=='Glrx' |GeneSymbol=='Glrx2' |GeneSymbol=='Gpx3' |GeneSymbol=='Gpx4' |GeneSymbol=='Gsr' |GeneSymbol=='Hhex' |GeneSymbol=='Hmox2' |GeneSymbol=='Ipcef1' |GeneSymbol=='Junb' |GeneSymbol=='Lamtor5' |GeneSymbol=='Lsp1' |GeneSymbol=='Mbp' |GeneSymbol=='Mgst1' |GeneSymbol=='Mpo' |GeneSymbol=='Msra' |GeneSymbol=='Ndufa6' |GeneSymbol=='Ndufb4' |GeneSymbol=='Ndufs2' |GeneSymbol=='Nqo1' |GeneSymbol=='Oxsr1' |GeneSymbol=='Pdlim1' |GeneSymbol=='Pfkp' |GeneSymbol=='Prdx1' |GeneSymbol=='Prdx2' |GeneSymbol=='Prdx4' |GeneSymbol=='Prdx6' |GeneSymbol=='Prnp' |GeneSymbol=='Ptpa' |GeneSymbol=='Sbno2' |GeneSymbol=='Scaf4' |GeneSymbol=='Selenos' |GeneSymbol=='Sod1' |GeneSymbol=='Sod2' |GeneSymbol=='Srxn1' |GeneSymbol=='Stk25' |GeneSymbol=='Txn' |GeneSymbol=='Txnrd1' |GeneSymbol=='Txnrd2')

hm_tab_hall_ros <- hm_tab_hall_ros %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_ros) = hm_tab_hall_ros$GeneSymbol
hm_hall_ros_annot = data.frame("Sig" = hm_tab_hall_ros$sig2)
rownames(hm_hall_ros_annot) = rownames(hm_tab_hall_ros)

hm_hall_ros <- pheatmap(hm_tab_hall_ros[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_ros$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_ros_annot, legend_labels = "Relative expression", main = "HALLMARK_REACTIVE_OXYGEN_SPECIES_PATHWAY genes")

pdf(file="IngHFD_hm_hall_ros.pdf",width=8,height=10)
hm_hall_ros
dev.off()


##### hm of hallmark UPR genes

hm_tab_hall_UPR = subset(hm_tab, GeneSymbol=='Aldh18A1' |GeneSymbol=='Arfgap1' |GeneSymbol=='Asns' |GeneSymbol=='Atf3' |GeneSymbol=='Atf4' |GeneSymbol=='Atf6' |GeneSymbol=='Atp6V0D1' |GeneSymbol=='Bag3' |GeneSymbol=='Banf1' |GeneSymbol=='Calr' |GeneSymbol=='Ccl2' |GeneSymbol=='Cebpb' |GeneSymbol=='Cebpg' |GeneSymbol=='Chac1' |GeneSymbol=='Cks1B' |GeneSymbol=='Cnot2' |GeneSymbol=='Cnot4' |GeneSymbol=='Cnot6' |GeneSymbol=='Cxxc1' |GeneSymbol=='Dcp1A' |GeneSymbol=='Dcp2' |GeneSymbol=='Dctn1' |GeneSymbol=='Ddit4' |GeneSymbol=='Ddx10' |GeneSymbol=='Dkc1' |GeneSymbol=='Dnaja4' |GeneSymbol=='Dnajb9' |GeneSymbol=='Dnajc3' |GeneSymbol=='Edc4' |GeneSymbol=='Edem1' |GeneSymbol=='Eef2' |GeneSymbol=='Eif2Ak3' |GeneSymbol=='Eif2S1' |GeneSymbol=='Eif4A1' |GeneSymbol=='Eif4A2' |GeneSymbol=='Eif4A3' |GeneSymbol=='Eif4E' |GeneSymbol=='Eif4Ebp1' |GeneSymbol=='Eif4G1' |GeneSymbol=='Ern1' |GeneSymbol=='Ero1A' |GeneSymbol=='Exoc2' |GeneSymbol=='Exosc1' |GeneSymbol=='Exosc10' |GeneSymbol=='Exosc2' |GeneSymbol=='Exosc4' |GeneSymbol=='Exosc5' |GeneSymbol=='Exosc9' |GeneSymbol=='Fkbp14' |GeneSymbol=='Fus' |GeneSymbol=='Gemin4' |GeneSymbol=='Gosr2' |GeneSymbol=='H2Ax' |GeneSymbol=='Herpud1' |GeneSymbol=='Hsp90B1' |GeneSymbol=='Hspa5' |GeneSymbol=='Hspa9' |GeneSymbol=='Hyou1' |GeneSymbol=='Iars1' |GeneSymbol=='Ifit1' |GeneSymbol=='Igfbp1' |GeneSymbol=='Imp3' |GeneSymbol=='Kdelr3' |GeneSymbol=='Khsrp' |GeneSymbol=='Kif5B' |GeneSymbol=='Lsm1' |GeneSymbol=='Lsm4' |GeneSymbol=='Mthfd2' |GeneSymbol=='Mtrex' |GeneSymbol=='Nabp1' |GeneSymbol=='Nfya' |GeneSymbol=='Nfyb' |GeneSymbol=='Nhp2' |GeneSymbol=='Nolc1' |GeneSymbol=='Nop14' |GeneSymbol=='Nop56' |GeneSymbol=='Npm1' |GeneSymbol=='Paip1' |GeneSymbol=='Parn' |GeneSymbol=='Pdia5' |GeneSymbol=='Pdia6' |GeneSymbol=='Pop4' |GeneSymbol=='Preb' |GeneSymbol=='Psat1' |GeneSymbol=='Rps14' |GeneSymbol=='Rrp9' |GeneSymbol=='Sdad1' |GeneSymbol=='Sec11A' |GeneSymbol=='Sec31A' |GeneSymbol=='Serp1' |GeneSymbol=='Shc1' |GeneSymbol=='Slc1A4' |GeneSymbol=='Slc30A5' |GeneSymbol=='Slc7A5' |GeneSymbol=='Spcs1' |GeneSymbol=='Spcs3' |GeneSymbol=='Srpra' |GeneSymbol=='Srprb' |GeneSymbol=='Ssr1' |GeneSymbol=='Stc2' |GeneSymbol=='Tars1' |GeneSymbol=='Tatdn2' |GeneSymbol=='Tspyl2' |GeneSymbol=='Ttc37' |GeneSymbol=='Tubb2A' |GeneSymbol=='Vegfa' |GeneSymbol=='Wfs1' |GeneSymbol=='Wipi1' |GeneSymbol=='Xbp1' |GeneSymbol=='Xpot' |GeneSymbol=='Yif1A' |GeneSymbol=='Ywhaz' |GeneSymbol=='Zbtb17')

hm_tab_hall_UPR <- hm_tab_hall_UPR %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_UPR) = hm_tab_hall_UPR$GeneSymbol
hm_hall_UPR_annot = data.frame("Sig" = hm_tab_hall_UPR$sig2)
rownames(hm_hall_UPR_annot) = rownames(hm_tab_hall_UPR)

hm_hall_UPR <- pheatmap(hm_tab_hall_UPR[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_UPR$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_UPR_annot, legend_labels = "Relative expression", main = "HALLMARK_UNFOLDED_PROTEIN_RESPONSE genes")

pdf(file="IngHFD_hm_hall_UPR.pdf",width=7,height=10)
hm_hall_UPR
dev.off()

##### hm of GO BAT genes

hm_tab_GO_BAT = subset(hm_tab, GeneSymbol=='Adig' |GeneSymbol=='Adipoq' |GeneSymbol=='Adrb1' |GeneSymbol=='Adrb2' |GeneSymbol=='Aldh6A1' |GeneSymbol=='Arl4A' |GeneSymbol=='Bmp7' |GeneSymbol=='Bnip3' |GeneSymbol=='Cebpa' |GeneSymbol=='Cebpb' |GeneSymbol=='Dio2' |GeneSymbol=='Dusp10' |GeneSymbol=='Ebf2' |GeneSymbol=='Ero1A' |GeneSymbol=='Fabp3' |GeneSymbol=='Fabp4' |GeneSymbol=='Ffar4' |GeneSymbol=='Flcn' |GeneSymbol=='Fndc5' |GeneSymbol=='Fto' |GeneSymbol=='Hnrnpu' |GeneSymbol=='Ins' |GeneSymbol=='Itga6' |GeneSymbol=='Lamb3' |GeneSymbol=='Lep' |GeneSymbol=='Lrg1' |GeneSymbol=='Mapk14' |GeneSymbol=='Mb' |GeneSymbol=='Metrnl' |GeneSymbol=='Mtor' |GeneSymbol=='Napepld' |GeneSymbol=='Nudt7' |GeneSymbol=='Pex11A' |GeneSymbol=='Pim1' |GeneSymbol=='Plac8' |GeneSymbol=='Ppargc1A' |GeneSymbol=='Prdm16' |GeneSymbol=='Ptgs2' |GeneSymbol=='Rgs2' |GeneSymbol=='Rreb1' |GeneSymbol=='Sirt1' |GeneSymbol=='Six1' |GeneSymbol=='Slc2A4' |GeneSymbol=='Sox13' |GeneSymbol=='Tfe3' |GeneSymbol=='Trpv4' |GeneSymbol=='Ucp1' |GeneSymbol=='Vstm2A' |GeneSymbol=='Zbtb7B' |GeneSymbol=='Znf516')

hm_tab_GO_BAT <- hm_tab_GO_BAT %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_GO_BAT) = hm_tab_GO_BAT$GeneSymbol
hm_GO_IngHFD_annot = data.frame("Sig" = hm_tab_GO_BAT$sig2)
rownames(hm_GO_IngHFD_annot) = rownames(hm_tab_GO_BAT)

hm_GO_BAT <- pheatmap(hm_tab_GO_BAT[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_GO_BAT$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_GO_IngHFD_annot, legend_labels = "Relative expression", main = "GO_BROWN_FAT_CELL_DIFFERENTIATION genes")

pdf(file="IngHFD_hm_GO_BAT.pdf",width=7,height=10)
hm_GO_BAT
dev.off()


##### hm of myc-TF genes

hm_tab_myc = subset(hm_tab, GeneSymbol=='Abcd2' |GeneSymbol=='Steap4' |GeneSymbol=='Nnmt' |GeneSymbol=='Pde3b' |GeneSymbol=='Hp' |GeneSymbol=='Lrp3' |GeneSymbol=='Slc1a5' |GeneSymbol=='Retn' |GeneSymbol=='Apcdd1' |GeneSymbol=='Adcy5' |GeneSymbol=='C4B' |GeneSymbol=='Gys2' |GeneSymbol=='Hcar2' |GeneSymbol=='Dock11' |GeneSymbol=='Mc2r' |GeneSymbol=='Hcar1' |GeneSymbol=='Dram1' |GeneSymbol=='B3galt2' |GeneSymbol=='Nnat' |GeneSymbol=='Ffar4' |GeneSymbol=='Slc16a7' |GeneSymbol=='Ffar2' |GeneSymbol=='Aoc3' |GeneSymbol=='Rarres2' |GeneSymbol=='Adipoq' |GeneSymbol=='Mmp3' |GeneSymbol=='Sctr' |GeneSymbol=='Klhl2' |GeneSymbol=='Igf1' |GeneSymbol=='Podn' |GeneSymbol=='Cidec' |GeneSymbol=='Tshr' |GeneSymbol=='Por' |GeneSymbol=='Rbp4' |GeneSymbol=='Ccdc80' |GeneSymbol=='Lrg1' |GeneSymbol=='Vnn3' |GeneSymbol=='Chdh' |GeneSymbol=='Lgals12' |GeneSymbol=='Chst1' |GeneSymbol=='St6galnac5')

hm_tab_myc <- hm_tab_myc %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_myc) = hm_tab_myc$GeneSymbol
hm_myc_annot = data.frame("Sig" = hm_tab_myc$sig2)
rownames(hm_myc_annot) = rownames(hm_tab_myc)

hm_myc <- pheatmap(hm_tab_myc[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_myc$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_myc_annot, legend_labels = "Relative expression", main = "Myc-related genes")

pdf(file="IngHFD_hm_myc.pdf",width=7,height=10)
hm_myc
dev.off()


#### make hm of mitochondrial and nuclear encoded mitochondrial genes, using same genes to the figure in eLife paper

hm_tab_mt_mito = subset(hm_tab, GeneSymbol=='mt-Atp6' | GeneSymbol=='mt-Atp8' | GeneSymbol=='mt-Co1' | GeneSymbol=='mt-Co2' | GeneSymbol=='mt-Co3' | GeneSymbol=='mt-Cytb' | GeneSymbol=='mt-Nd1' | GeneSymbol=='mt-Nd2' | GeneSymbol=='mt-Nd3' | GeneSymbol=='mt-Nd4' | GeneSymbol=='mt-Nd4l' | GeneSymbol=='mt-Nd5' | GeneSymbol=='mt-Nd6' | GeneSymbol=='mt-Rnr1' | GeneSymbol=='mt-Rnr2' | GeneSymbol=='mt-Ta' | GeneSymbol=='mt-Tc' | GeneSymbol=='mt-Td' | GeneSymbol=='mt-Te' | GeneSymbol=='mt-Tf' | GeneSymbol=='mt-Tg' | GeneSymbol=='mt-Th' | GeneSymbol=='mt-Ti' | GeneSymbol=='mt-Tk' | GeneSymbol=='mt-Tl1' | GeneSymbol=='mt-Tl2' | GeneSymbol=='mt-Tm' | GeneSymbol=='mt-Tn' | GeneSymbol=='mt-Tp' | GeneSymbol=='mt-Tq' | GeneSymbol=='mt-Tr' | GeneSymbol=='mt-Ts1' | GeneSymbol=='mt-Ts2' | GeneSymbol=='mt-Tt' | GeneSymbol=='mt-Tv' | GeneSymbol=='mt-Tw' | GeneSymbol=='mt-Ty')

hm_tab_mt_mito <- hm_tab_mt_mito %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_mt_mito) = hm_tab_mt_mito$GeneSymbol
hm_mt_mito_annot = data.frame("Sig" = hm_tab_mt_mito$sig2)
rownames(hm_mt_mito_annot) = rownames(hm_tab_mt_mito)

hm_mt_mito <- pheatmap(hm_tab_mt_mito[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_mt_mito$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_mt_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial-encoded mito genes")

pdf(file="IngHFD_hm_mt_mito.pdf",width=7,height=10)
hm_mt_mito
dev.off()

hm_tab_nucl_mito = subset(hm_tab, GeneSymbol=='Ndufb10' |GeneSymbol=='Ndufa3' |GeneSymbol=='Dmac2l' |GeneSymbol=='Atp5o' |GeneSymbol=='Uqcrfs1' |GeneSymbol=='Ndufa8' |GeneSymbol=='Uqcrq' |GeneSymbol=='Surf1' |GeneSymbol=='Atp5b' |GeneSymbol=='Uqcrh' |GeneSymbol=='Ndufa2' |GeneSymbol=='Ndufs7' |GeneSymbol=='Ndufb9' |GeneSymbol=='Ndufb6' |GeneSymbol=='Cox6b1' |GeneSymbol=='Cox6a2' |GeneSymbol=='Ndufa13' |GeneSymbol=='Ndufa9' |GeneSymbol=='Ndufs3' |GeneSymbol=='Uqcrc2' |GeneSymbol=='Ndufa4' |GeneSymbol=='Cycs' |GeneSymbol=='Cyc1' |GeneSymbol=='Ndufs5' |GeneSymbol=='Ndufs4' |GeneSymbol=='Ecsit' |GeneSymbol=='Cox10' |GeneSymbol=='Ndufs8' |GeneSymbol=='Ndufc2' |GeneSymbol=='Atp5a1' |GeneSymbol=='Ndufa7' |GeneSymbol=='Ndufb3' |GeneSymbol=='Ndufa5' |GeneSymbol=='Atp5k' |GeneSymbol=='Cox5b-ps' |GeneSymbol=='Cox18' |GeneSymbol=='Ndufa10' |GeneSymbol=='Atp5j2' |GeneSymbol=='Ndufaf1' |GeneSymbol=='Atp5pb' |GeneSymbol=='Cox11' |GeneSymbol=='Atpaf1' |GeneSymbol=='Sdhb' |GeneSymbol=='Atp5c1' |GeneSymbol=='Cox6b2' |GeneSymbol=='Gm10053' |GeneSymbol=='Phb' |GeneSymbol=='Cox7c' |GeneSymbol=='Sdhd' |GeneSymbol=='Sdhc' |GeneSymbol=='Sdha' |GeneSymbol=='Ndufa6' |GeneSymbol=='Ndufa12' |GeneSymbol=='Ndufa11' |GeneSymbol=='Cox6a1' |GeneSymbol=='Ndufb2' |GeneSymbol=='Cox5a' |GeneSymbol=='Atp5j' |GeneSymbol=='Atp5g3' |GeneSymbol=='Ndufv2' |GeneSymbol=='Ndufb8' |GeneSymbol=='Cox4i1' |GeneSymbol=='Uqcrc1' |GeneSymbol=='Atpaf2' |GeneSymbol=='Ndufb7' |GeneSymbol=='Atp5h' |GeneSymbol=='Cox5b' |GeneSymbol=='Ndufv1' |GeneSymbol=='Ndufv3' |GeneSymbol=='Ndufs1' |GeneSymbol=='Atp5d' |GeneSymbol=='Ndufb4' |GeneSymbol=='Cox7a1' |GeneSymbol=='Cox4i2' |GeneSymbol=='Ndufs6' |GeneSymbol=='Ndufs2' |GeneSymbol=='Ndufc1' |GeneSymbol=='Ndufb5' |GeneSymbol=='Gm21987' |GeneSymbol=='Cox17' |GeneSymbol=='Cox8a' |GeneSymbol=='Cox7a2' |GeneSymbol=='Cox6c' |GeneSymbol=='Nubpl' |GeneSymbol=='Ndufab1')

hm_tab_nucl_mito <- hm_tab_nucl_mito %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_nucl_mito) = hm_tab_nucl_mito$GeneSymbol
hm_nucl_mito_annot = data.frame("Sig" = hm_tab_nucl_mito$sig2)
rownames(hm_nucl_mito_annot) = rownames(hm_tab_nucl_mito)

hm_nucl_mito <- pheatmap(hm_tab_nucl_mito[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_nucl_mito$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_nucl_mito_annot, legend_labels = "Relative expression", main = "Nuclear-encoded mito genes")

pdf(file="IngHFD_hm_nucl_mito.pdf",width=7,height=10)
hm_nucl_mito
dev.off()

#### make side-by-side hm of mitochondrial and nuclear encoded mitochondrial genes, analagous to eLife paper

library(RColorBrewer)
breaksList = seq(-2, 2, by = 0.1)

hm_tab_mt_mito2 <- as.data.frame(hm_tab_mt_mito$log2FC)
rownames(hm_tab_mt_mito2) = hm_tab_mt_mito$GeneSymbol
hm_tab_mt_mito2$log2FCdup <- hm_tab_mt_mito$log2FC

hm_mt_mito2 <- pheatmap(hm_tab_mt_mito2, cluster_rows = TRUE, cluster_cols = FALSE, cutree_rows = 2, legend = FALSE, cellwidth=30, angle_col=45, fontsize_col=6, annotation_row=hm_mt_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial-encoded", show_colnames = FALSE, show_rownames = FALSE, border_color = NA, scale = "none", color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList)

hm_tab_nucl_mito2 <- as.data.frame(hm_tab_nucl_mito$log2FC)
rownames(hm_tab_nucl_mito2) = hm_tab_nucl_mito$GeneSymbol
hm_tab_nucl_mito2$log2FCdup <- hm_tab_nucl_mito$log2FC

hm_nucl_mito2 <- pheatmap(hm_tab_nucl_mito2, cluster_rows = TRUE, cluster_cols = FALSE, cutree_rows = 3, legend = TRUE, cellwidth=30, angle_col=45, fontsize_col=6, annotation_row=hm_nucl_mito_annot, legend_labels = "Relative expression", main = "Nuclear-encoded", show_colnames = FALSE, , show_rownames = FALSE, border_color = NA, color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList)

require(cowplot)
require(ggplotify)

pdf(file="mito_genes_sumfig.pdf",width=8,height=3)
plot_grid(as.grob(hm_mt_mito2), as.grob(hm_nucl_mito2), ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()



############### Pathway analysis using enrichr =====================================================

require(enrichR)
require(tidyr)
require(cowplot)
require(viridis)

## look at sig up & down genes using enrichR
dbs_option <- listEnrichrDbs()

####### use upregulated genes

up_dge = subset(hm_tab, sig2=='sig' & log2FC>0)
write.table(up_dge,file="IngHFD_up_dge.csv",sep=",")
up_dge <- up_dge[!is.na(up_dge$GeneSymbol), ]
up_genes <- as.vector(up_dge$GeneSymbol)


dbs_search <- c("GO_Biological_Process_2018","KEGG_2019_Mouse", "MSigDB_Hallmark_2020","GO_Cellular_Component_2018","GTEx_Tissue_Sample_Gene_Expression_Profiles_up","TF_Perturbations_Followed_by_Expression","GO_Molecular_Function_2018", "HMDB_Metabolites")

up_genes_enrichr <- enrichr(up_genes, databases = dbs_search)

## make figure from enrichr analyses

GO_biol_data_up <- up_genes_enrichr[["GO_Biological_Process_2018"]]
View(GO_biol_data_up)
GO_biol_data_up = subset(GO_biol_data_up, Adjusted.P.value<.05)
GO_biol_data_up <- GO_biol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_biol_data_up$db <- "GO_biol_2019_Human"
GO_biol_fig_up <-ggplot(data=GO_biol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Biological_Process_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_biol_fig_up

KEGG_data_up <- up_genes_enrichr[["KEGG_2019_Mouse"]]
View(KEGG_data_up)
KEGG_data_up = subset(KEGG_data_up, Adjusted.P.value<.05)
KEGG_data_up <- KEGG_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
KEGG_data_up$db <- "KEGG_2019_Mouse"
KEGG_fig_up <-ggplot(data=KEGG_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("KEGG_2019_Mouse") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
KEGG_fig_up

Hall_data_up <- up_genes_enrichr[["MSigDB_Hallmark_2020"]]
View(Hall_data_up)
Hall_data_up = subset(Hall_data_up, Adjusted.P.value<.05)
Hall_data_up <- Hall_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Hall_data_up$db <- "MSigDB_Hallmark_2020"
Hall_fig_up <-ggplot(data=Hall_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("MSigDB_Hallmark_2020") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
Hall_fig_up

GO_cell_data_up <- up_genes_enrichr[["GO_Cellular_Component_2018"]]
View(GO_cell_data_up)
GO_cell_data_up = subset(GO_cell_data_up, Adjusted.P.value<.05)
GO_cell_data_up <- GO_cell_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_cell_data_up$db <- "GO_Cellular_Component_2018"
GO_cell_fig_up <-ggplot(data=GO_cell_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Cellular_Component_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_cell_fig_up

GTEx_data_up <- up_genes_enrichr[["GTEx_Tissue_Sample_Gene_Expression_Profiles_up"]]
View(GTEx_data_up)
GTEx_data_up = subset(GTEx_data_up, Adjusted.P.value<.05)
GTEx_data_up <- GTEx_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GTEx_data_up$db <- "GTEx_Tissue_Sample_Gene_Expression_Profiles_up"
GTEx_fig_up <-ggplot(data=GTEx_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GTEx_Tissue_Sample_Gene_Expression_Profiles_up") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GTEx_fig_up

TF_data_up <- up_genes_enrichr[["TF_Perturbations_Followed_by_Expression"]]
View(TF_data_up)
TF_data_up = subset(TF_data_up, Adjusted.P.value<.05)
TF_data_up <- TF_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
TF_data_up$db <- "TF_Perturbations_Followed_by_Expression"
TF_fig_up <-ggplot(data=TF_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("TF_Perturbations_Followed_by_Expression") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
TF_fig_up

GO_mol_data_up <- up_genes_enrichr[["GO_Molecular_Function_2018"]]
View(GO_mol_data_up)
GO_mol_data_up = subset(GO_mol_data_up, Adjusted.P.value<.05)
GO_mol_data_up <- GO_mol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_mol_data_up$db <- "GO_Molecular_Function_2018"
GO_mol_fig_up <-ggplot(data=GO_mol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Molecular_Function_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
GO_mol_fig_up

Metabol_data_up <- up_genes_enrichr[["HMDB_Metabolites"]]
View(Metabol_data_up)
Metabol_data_up = subset(Metabol_data_up, Adjusted.P.value<.05)
Metabol_data_up <- Metabol_data_up %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Metabol_data_up$db <- "HMDB_Metabolites"
Metabol_fig_up <-ggplot(data=Metabol_data_up, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("HMDB_Metabolites") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c()
Metabol_fig_up

up_path_summary <- rbind(GO_biol_data_up, KEGG_data_up, Hall_data_up, GO_cell_data_up, GTEx_data_up, TF_data_up, GO_mol_data_up, Metabol_data_up)
up_path_summary$dir <- "Up"  

####### use downregulated genes

down_dge = subset(hm_tab, sig2=='sig' & log2FC<0)
write.table(down_dge,file="IngHFD_down_dge.csv",sep=",")
down_list <- as.data.frame(down_dge$GeneSymbol)
down_list <- down_list %>% rename("genes" = "down_dge$GeneSymbol")
down_list <- down_list %>% drop_na()
down_list <- distinct(down_list)

dbs_search <- c("GO_Biological_Process_2018","KEGG_2019_Mouse", "MSigDB_Hallmark_2020","GO_Cellular_Component_2018","GTEx_Tissue_Sample_Gene_Expression_Profiles_up","TF_Perturbations_Followed_by_Expression","GO_Molecular_Function_2018", "HMDB_Metabolites")

down_genes_enrichr <- enrichr(down_list$genes, databases = dbs_search)

## make figure from enrichr analyses

GO_biol_data_down <- down_genes_enrichr[["GO_Biological_Process_2018"]]
View(GO_biol_data_down)
GO_biol_data_down = subset(GO_biol_data_down, Adjusted.P.value<.05)
GO_biol_data_down <- GO_biol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_biol_data_down$db <- "GO_biol_2019_Human"
GO_biol_fig_down <-ggplot(data=GO_biol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Biological_Process_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_biol_fig_down

KEGG_data_down <- down_genes_enrichr[["KEGG_2019_Mouse"]]
View(KEGG_data_down)
KEGG_data_down = subset(KEGG_data_down, Adjusted.P.value<.05)
KEGG_data_down <- KEGG_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
KEGG_data_down$db <- "KEGG_2019_Mouse"
KEGG_fig_down <-ggplot(data=KEGG_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("KEGG_2019_Mouse") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
KEGG_fig_down

Hall_data_down <- down_genes_enrichr[["MSigDB_Hallmark_2020"]]
View(Hall_data_down)
Hall_data_down = subset(Hall_data_down, Adjusted.P.value<.05)
Hall_data_down <- Hall_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Hall_data_down$db <- "MSigDB_Hallmark_2020"
Hall_fig_down <-ggplot(data=Hall_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("MSigDB_Hallmark_2020") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
Hall_fig_down

GO_cell_data_down <- down_genes_enrichr[["GO_Cellular_Component_2018"]]
View(GO_cell_data_down)
GO_cell_data_down = subset(GO_cell_data_down, Adjusted.P.value<.05)
GO_cell_data_down <- GO_cell_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_cell_data_down$db <- "GO_Cellular_Component_2018"
GO_cell_fig_down <-ggplot(data=GO_cell_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Cellular_Component_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_cell_fig_down

GTEx_data_down <- down_genes_enrichr[["GTEx_Tissue_Sample_Gene_Expression_Profiles_up"]]
View(GTEx_data_down)
GTEx_data_down = subset(GTEx_data_down, Adjusted.P.value<.05)
GTEx_data_down <- GTEx_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GTEx_data_down$db <- "GTEx_Tissue_Sample_Gene_Expression_Profiles_down"
GTEx_fig_down <-ggplot(data=GTEx_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GTEx_Tissue_Sample_Gene_Expression_Profiles_up") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GTEx_fig_down

TF_data_down <- down_genes_enrichr[["TF_Perturbations_Followed_by_Expression"]]
View(TF_data_down)
TF_data_down = subset(TF_data_down, Adjusted.P.value<.05)
TF_data_down <- TF_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
TF_data_down$db <- "TF_Perturbations_Followed_by_Expression"
TF_fig_down <-ggplot(data=TF_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("TF_Perturbations_Followed_by_Expression") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
TF_fig_down

GO_mol_data_down <- down_genes_enrichr[["GO_Molecular_Function_2018"]]
View(GO_mol_data_down)
GO_mol_data_down = subset(GO_mol_data_down, Adjusted.P.value<.05)
GO_mol_data_down <- GO_mol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
GO_mol_data_down$db <- "GO_Molecular_Function_2018"
GO_mol_fig_down <-ggplot(data=GO_mol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("GO_Molecular_Function_2018") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
GO_mol_fig_down

Metabol_data_down <- down_genes_enrichr[["HMDB_Metabolites"]]
View(Metabol_data_down)
Metabol_data_down = subset(Metabol_data_down, Adjusted.P.value<.05)
Metabol_data_down <- Metabol_data_down %>% arrange(desc(Combined.Score)) %>% slice(1:10)
Metabol_data_down$db <- "HMDB_Metabolites"
Metabol_fig_down <-ggplot(data=Metabol_data_down, aes(x= reorder(Term, Combined.Score), y=Combined.Score, fill=Combined.Score)) + geom_bar(stat="identity") + theme_classic() + coord_flip() + labs(x="", y = "Combined gene set enrichment score") + ggtitle("HMDB_Metabolites") + theme(plot.title = element_text(face = "bold")) + theme(plot.margin=margin(20,20,20,20, unit = "pt"), legend.position = "none") + scale_fill_viridis_c(option = "plasma")
Metabol_fig_down

down_path_summary <- rbind(GO_biol_data_down, KEGG_data_down, Hall_data_down, GO_cell_data_down, GTEx_data_down, TF_data_down, GO_mol_data_down, Metabol_data_down)
down_path_summary$dir <- "down"  

path_summary <- rbind(up_path_summary, down_path_summary)
path_summary <- path_summary %>% arrange(desc(-Adjusted.P.value))               
write.table(path_summary,file="path_summary.csv",sep=",")

up_path_col1 <- plot_grid(GO_biol_fig_up, KEGG_fig_up, Hall_fig_up, GO_cell_fig_up, ncol = 1, labels = c('A', 'C', 'E', 'G', 'I', 'K', 'M', 'O'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))
up_path_col2 <- plot_grid(GTEx_fig_up, TF_fig_up, GO_mol_fig_up, Metabol_fig_up, ncol = 1, labels = c('B', 'D', 'F', 'H'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))

pdf(file="up_path_sumfig.pdf",width=16,height=12)
plot_grid(up_path_col1, up_path_col2, ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()

down_path_col1 <- plot_grid(GO_biol_fig_down, KEGG_fig_down, Hall_fig_down, GO_cell_fig_down, ncol = 1, labels = c('A', 'C', 'E', 'G', 'I', 'K', 'M', 'O'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))
down_path_col2 <- plot_grid(GTEx_fig_down, TF_fig_down, GO_mol_fig_down, Metabol_fig_down, ncol = 1, labels = c('B', 'D', 'F', 'H'), label_fontface = 'bold', label_size = 22, align = 'v', rel_widths = c(1, 1))

pdf(file="down_path_sumfig.pdf",width=16,height=12)
plot_grid(down_path_col1, down_path_col2, ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()


############### Compare differentially expressed genes to human adipose RNAseq data ====================


library(eulerr)

## load human data

Hum_up_genes <- read.delim(header = TRUE,  dec = ".", file = "Hum_up_genes.txt", sep = "\t")
Hum_up_vect <- as.vector(Hum_up_genes$Mouse.gene.name)
Hum_down_genes <- read.delim(header = TRUE,  dec = ".", file = "Hum_down_genes.txt", sep = "\t")
Hum_down_vect <- as.vector(Hum_down_genes$Mouse.gene.name)
down_genes <- as.vector(down_list$genes)

## up regulated genes
## calculate intersection

up_both <- intersect(Hum_up_vect,up_genes)
hum_up_count <- length(Hum_up_vect)
up_count <- length(up_genes)
up_both_count <- length(up_both)

up_total <- hum_up_count + up_count

## make venn diagrams
up_venn_data <- euler(c("A" = hum_up_count, "B" = up_count, "A&B" = up_both_count))
up_venn_fig <- plot(up_venn_data, quantities = TRUE, fill = list(fill=c("#FDE725FF", "#29AF7FFF"), alpha=0.7), labels=list(labels=c("Human \n White adipose\n ","Mouse \n White adipose\n "), cex=.8))


## down regulated genes
## calculate intersection

down_both <- intersect(Hum_down_vect,down_genes)
hum_down_count <- length(Hum_down_vect)
down_count <- length(down_genes)
down_both_count <- length(down_both)

down_total <- hum_down_count + down_count
venn_total <- up_total + down_total

## make venn diagrams
down_venn_data <- euler(c("A" = hum_down_count, "B" = down_count, "A&B" = down_both_count))
down_venn_fig <- plot(down_venn_data, quantities = TRUE, fill=list(fill = c("#F7CB44FF", "#B8627DFF"), alpha=0.7), labels=list(labels=c("Human \n White adipose\n ","Mouse \n White adipose\n "), cex=.8))
down_venn_fig

up_venn_rat <- up_total / venn_total
down_venn_rat <- down_total / venn_total


pdf(file="IngHFD_venn_sumfig.pdf",width=6,height=6)
plot_grid(as.grob(up_venn_fig), as.grob(down_venn_fig), labels = c('A: Up-regulated', 'B: Down-regulated'), ncol = 1, rel_heights = c(1, 1))
dev.off()



####### --------- 
####### --------- 
####### --------- further figures for paper
####### --------- 

## 2:ncol(norm_counts) --> change to
## 2:((ncol(norm_counts))+1)


IngHFD_vol <- ggplot(data=vplot_tab, aes(x=log2FC, y=neglog_p, colour=significant)) + geom_point(alpha=0.8, size=1.75) + xlab("Log2 Fold change") + ylab("-log10 p-value") + theme_classic() + theme(legend.position="none") + geom_text_repel(data = vplot_tab_label_final, aes(label = GeneSymbol.x), color="black",size = 3, key_glyph = "point") + theme(plot.title = element_text(hjust = 0.2)) + ggtitle("IngHFD") + scale_colour_manual(values = c("#999999", "#E69F00")) + scale_x_continuous(expand = c(0,1), breaks = seq(-8, 8, 2), limits=c(-8, 8))
IngHFD_vol

pdf(file="IngHFD_vol.pdf",width=9,height=6)
IngHFD_vol
dev.off()


pdf(file="IngHFD_Hall_fig_up.pdf",width=8,height=3.5)
Hall_fig_up
dev.off()

pdf(file="IngHFD_Hall_fig_down.pdf",width=8,height=3.5)
Hall_fig_down
dev.off()

pdf(file="IngHFD_KEGG_fig_up.pdf",width=8,height=3.5)
KEGG_fig_up
dev.off()


############ make specific heatmaps following on enriched genesets ---------


ann_colors = list(Sig = c(sig = "#E69F00", not = "#999999"))

hm_hall_UPR <- pheatmap(hm_tab_hall_UPR[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = F, scale = "row", labels_row = hm_tab_hall_UPR$GeneSymbol, fontsize_row = 8, cutree_rows = 3, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_UPR_annot, legend_labels = "Relative expression", main = "HALLMARK_UNFOLDED_PROTEIN_RESPONSE genes", annotation_colors = ann_colors, gaps_col=c(8), treeheight_row = 10)

pdf(file="IngHFD_hm_hall_UPR.pdf",width=7,height=10)
hm_hall_UPR
dev.off()


##### hm of hallmark CholHomeo genes

hm_tab_hall_CholHomeo = subset(hm_tab, GeneSymbol=='Abca2' | GeneSymbol=='Acat2' | GeneSymbol=='Acss2' | GeneSymbol=='Actg1' | GeneSymbol=='Adh4' | GeneSymbol=='Alcam' | GeneSymbol=='Aldoc' | GeneSymbol=='Antxr2' | GeneSymbol=='Anxa13' | GeneSymbol=='Anxa5' | GeneSymbol=='Atf3' | GeneSymbol=='Atf5' | GeneSymbol=='Atxn2' | GeneSymbol=='Avpr1A' | GeneSymbol=='Cbs' | GeneSymbol=='Cd9' | GeneSymbol=='Chka' | GeneSymbol=='Clu' | GeneSymbol=='Cpeb2' | GeneSymbol=='Ctnnb1' | GeneSymbol=='Cxcl16' | GeneSymbol=='Cyp51A1' | GeneSymbol=='Dhcr7' | GeneSymbol=='Ebp' | GeneSymbol=='Ech1' | GeneSymbol=='Errfi1' | GeneSymbol=='Ethe1' | GeneSymbol=='Fabp5' | GeneSymbol=='Fads2' | GeneSymbol=='Fasn' | GeneSymbol=='Fbxo6' | GeneSymbol=='Fdft1' | GeneSymbol=='Fdps' | GeneSymbol=='Gldc' | GeneSymbol=='Gnai1' | GeneSymbol=='Gpx8' | GeneSymbol=='Gstm2' | GeneSymbol=='Gusb' | GeneSymbol=='Hmgcr' | GeneSymbol=='Hmgcs1' | GeneSymbol=='Hsd17B7' | GeneSymbol=='Idi1' | GeneSymbol=='Jag1' | GeneSymbol=='Ldlr' | GeneSymbol=='Lgals3' | GeneSymbol=='Lgmn' | GeneSymbol=='Lpl' | GeneSymbol=='Lss' | GeneSymbol=='Mal2' | GeneSymbol=='Mvd' | GeneSymbol=='Mvk' | GeneSymbol=='Nfil3' | GeneSymbol=='Niban1' | GeneSymbol=='Nsdhl' | GeneSymbol=='Pcyt2' | GeneSymbol=='Pdk3' | GeneSymbol=='Plaur' | GeneSymbol=='Plscr1' | GeneSymbol=='Pmvk' | GeneSymbol=='Pnrc1' | GeneSymbol=='Pparg' | GeneSymbol=='S100A11' | GeneSymbol=='Sc5D' | GeneSymbol=='Scd' | GeneSymbol=='Sema3B' | GeneSymbol=='Sqle' | GeneSymbol=='Srebf2' | GeneSymbol=='Stard4' | GeneSymbol=='Stx5' | GeneSymbol=='Tm7Sf2' | GeneSymbol=='Tmem97' | GeneSymbol=='Tnfrsf12A' | GeneSymbol=='Tp53Inp1' | GeneSymbol=='Trib3')

hm_tab_hall_CholHomeo <- hm_tab_hall_CholHomeo %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_CholHomeo) = hm_tab_hall_CholHomeo$GeneSymbol
hm_hall_CholHomeo_annot = data.frame("Sig" = hm_tab_hall_CholHomeo$sig2)
rownames(hm_hall_CholHomeo_annot) = rownames(hm_tab_hall_CholHomeo)

hm_hall_CholHomeo <- pheatmap(hm_tab_hall_CholHomeo[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_CholHomeo$GeneSymbol, fontsize_row = 8, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_CholHomeo_annot, legend_labels = "Relative expression", gaps_col=c(8), treeheight_row = 10, main="CholHomeo", annotation_colors = ann_colors)

pdf(file="IngHFD_hm_hall_CholHomeo.pdf",width=7,height=10)
hm_hall_CholHomeo
dev.off()


##### hm of hallmark FAmetab genes

hm_tab_hall_FAmetab = subset(hm_tab, GeneSymbol=='Aadat' | GeneSymbol=='Acaa1' | GeneSymbol=='Acaa2' | GeneSymbol=='Acadl' | GeneSymbol=='Acadm' | GeneSymbol=='Acads' | GeneSymbol=='Acadvl' | GeneSymbol=='Acat2' | GeneSymbol=='Aco2' | GeneSymbol=='Acot2' | GeneSymbol=='Acot8' | GeneSymbol=='Acox1' | GeneSymbol=='Acsl1' | GeneSymbol=='Acsl4' | GeneSymbol=='Acsl5' | GeneSymbol=='Acsm3' | GeneSymbol=='Acss1' | GeneSymbol=='Adh1C' | GeneSymbol=='Adh7' | GeneSymbol=='Adipor2' | GeneSymbol=='Adsl' | GeneSymbol=='Alad' | GeneSymbol=='Aldh1A1' | GeneSymbol=='Aldh3A1' | GeneSymbol=='Aldh3A2' | GeneSymbol=='Aldh9A1' | GeneSymbol=='Aldoa' | GeneSymbol=='Aoc3' | GeneSymbol=='Apex1' | GeneSymbol=='Aqp7' | GeneSymbol=='Auh' | GeneSymbol=='Bckdhb' | GeneSymbol=='Blvra' | GeneSymbol=='Bmpr1B' | GeneSymbol=='Bphl' | GeneSymbol=='Ca2' | GeneSymbol=='Ca4' | GeneSymbol=='Ca6' | GeneSymbol=='Cbr1' | GeneSymbol=='Cbr3' | GeneSymbol=='Ccdc58' | GeneSymbol=='Cd1D' | GeneSymbol=='Cd36' | GeneSymbol=='Cel' | GeneSymbol=='Cidea' | GeneSymbol=='Cpox' | GeneSymbol=='Cpt1A' | GeneSymbol=='Cpt2' | GeneSymbol=='Crat' | GeneSymbol=='Cryz' | GeneSymbol=='Cyp1A1' | GeneSymbol=='Cyp4A11' | GeneSymbol=='Cyp4A22' | GeneSymbol=='D2Hgdh' | GeneSymbol=='Decr1' | GeneSymbol=='Dhcr24' | GeneSymbol=='Dld' | GeneSymbol=='Dlst' | GeneSymbol=='Ech1' | GeneSymbol=='Echs1' | GeneSymbol=='Eci1' | GeneSymbol=='Eci2' | GeneSymbol=='Ehhadh' | GeneSymbol=='Elovl5' | GeneSymbol=='Eno2' | GeneSymbol=='Eno3' | GeneSymbol=='Ephx1' | GeneSymbol=='Erp29' | GeneSymbol=='Etfdh' | GeneSymbol=='Fabp1' | GeneSymbol=='Fabp2' | GeneSymbol=='Fasn' | GeneSymbol=='Fh' | GeneSymbol=='Fmo1' | GeneSymbol=='G0S2' | GeneSymbol=='Gabarapl1' | GeneSymbol=='Gad2' | GeneSymbol=='Gapdhs' | GeneSymbol=='Gcdh' | GeneSymbol=='Glul' | GeneSymbol=='Gpd1' | GeneSymbol=='Gpd2' | GeneSymbol=='Grhpr' | GeneSymbol=='Gstz1' | GeneSymbol=='H2Az1' | GeneSymbol=='Hadh' | GeneSymbol=='Hadhb' | GeneSymbol=='Hao2' | GeneSymbol=='Hccs' | GeneSymbol=='Hibch' | GeneSymbol=='Hmgcl' | GeneSymbol=='Hmgcs1' | GeneSymbol=='Hmgcs2' | GeneSymbol=='Hpgd' | GeneSymbol=='Hsd17B10' | GeneSymbol=='Hsd17B11' | GeneSymbol=='Hsd17B4' | GeneSymbol=='Hsd17B7' | GeneSymbol=='Hsdl2' | GeneSymbol=='Hsp90Aa1' | GeneSymbol=='Hsph1' | GeneSymbol=='Idh1' | GeneSymbol=='Idh3B' | GeneSymbol=='Idh3G' | GeneSymbol=='Idi1' | GeneSymbol=='Il4I1' | GeneSymbol=='Inmt' | GeneSymbol=='Kmt5A' | GeneSymbol=='Ldha' | GeneSymbol=='Lgals1' | GeneSymbol=='Ltc4S' | GeneSymbol=='Maoa' | GeneSymbol=='Mcee' | GeneSymbol=='Mdh1' | GeneSymbol=='Mdh2' | GeneSymbol=='Me1' | GeneSymbol=='Metap1' | GeneSymbol=='Mgll' | GeneSymbol=='Mif' | GeneSymbol=='Mlycd' | GeneSymbol=='Nbn' | GeneSymbol=='Ncaph2' | GeneSymbol=='Nsdhl' | GeneSymbol=='Nthl1' | GeneSymbol=='Odc1' | GeneSymbol=='Ostc' | GeneSymbol=='Pcbd1' | GeneSymbol=='Pdha1' | GeneSymbol=='Pdhb' | GeneSymbol=='Ppara' | GeneSymbol=='Prdx6' | GeneSymbol=='Psme1' | GeneSymbol=='Ptprg' | GeneSymbol=='Pts' | GeneSymbol=='Rap1Gds1' | GeneSymbol=='Rdh11' | GeneSymbol=='Rdh16' | GeneSymbol=='Reep6' | GeneSymbol=='Retsat' | GeneSymbol=='S100A10' | GeneSymbol=='Sdha' | GeneSymbol=='Sdhc' | GeneSymbol=='Sdhd' | GeneSymbol=='Serinc1' | GeneSymbol=='Slc22A5' | GeneSymbol=='Sms' | GeneSymbol=='Sucla2' | GeneSymbol=='Suclg1' | GeneSymbol=='Suclg2' | GeneSymbol=='Tdo2' | GeneSymbol=='Tp53Inp2' | GeneSymbol=='Ube2L6' | GeneSymbol=='Ugdh' | GeneSymbol=='Urod' | GeneSymbol=='Uros' | GeneSymbol=='Vnn1' | GeneSymbol=='Xist' | GeneSymbol=='Ywhah')

hm_tab_hall_FAmetab <- hm_tab_hall_FAmetab %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_FAmetab) = hm_tab_hall_FAmetab$GeneSymbol
hm_hall_FAmetab_annot = data.frame("Sig" = hm_tab_hall_FAmetab$sig2)
rownames(hm_hall_FAmetab_annot) = rownames(hm_tab_hall_FAmetab)

hm_hall_FAmetab <- pheatmap(hm_tab_hall_FAmetab[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_FAmetab$GeneSymbol, fontsize_row = 7, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_FAmetab_annot, legend_labels = "Relative expression", gaps_col=c(8), treeheight_row = 10, main="FAmetab", annotation_colors = ann_colors)

pdf(file="IngHFD_hm_hall_FAmetab.pdf",width=7,height=10)
hm_hall_FAmetab
dev.off()


##### hm of hallmark mtorc genes

hm_tab_hall_mtorc1 = subset(hm_tab, GeneSymbol=='Abcf2' | GeneSymbol=='Acaca' | GeneSymbol=='Acly' | GeneSymbol=='Acsl3' | GeneSymbol=='Actr2' | GeneSymbol=='Actr3' | GeneSymbol=='Add3' | GeneSymbol=='Adipor2' | GeneSymbol=='Ak4' | GeneSymbol=='Aldoa' | GeneSymbol=='Arpc5L' | GeneSymbol=='Asns' | GeneSymbol=='Atp2A2' | GeneSymbol=='Atp5Mc1' | GeneSymbol=='Atp6V1D' | GeneSymbol=='Aurka' | GeneSymbol=='Bcat1' | GeneSymbol=='Bhlhe40' | GeneSymbol=='Btg2' | GeneSymbol=='Bub1' | GeneSymbol=='Cacybp' | GeneSymbol=='Calr' | GeneSymbol=='Canx' | GeneSymbol=='Ccnf' | GeneSymbol=='Ccng1' | GeneSymbol=='Cct6A' | GeneSymbol=='Cd9' | GeneSymbol=='Cdc25A' | GeneSymbol=='Cdkn1A' | GeneSymbol=='Cfp' | GeneSymbol=='Cops5' | GeneSymbol=='Coro1A' | GeneSymbol=='Cth' | GeneSymbol=='Ctsc' | GeneSymbol=='Cxcr4' | GeneSymbol=='Cyb5B' | GeneSymbol=='Cyp51A1' | GeneSymbol=='Dapp1' | GeneSymbol=='Ddit3' | GeneSymbol=='Ddit4' | GeneSymbol=='Ddx39A' | GeneSymbol=='Dhcr24' | GeneSymbol=='Dhcr7' | GeneSymbol=='Dhfr' | GeneSymbol=='Ebp' | GeneSymbol=='Edem1' | GeneSymbol=='Eef1E1' | GeneSymbol=='Egln3' | GeneSymbol=='Eif2S2' | GeneSymbol=='Elovl5' | GeneSymbol=='Elovl6' | GeneSymbol=='Eno1' | GeneSymbol=='Eprs1' | GeneSymbol=='Ero1A' | GeneSymbol=='Etf1' | GeneSymbol=='Fads1' | GeneSymbol=='Fads2' | GeneSymbol=='Fdxr' | GeneSymbol=='Fgl2' | GeneSymbol=='Fkbp2' | GeneSymbol=='G6Pd' | GeneSymbol=='Gapdh' | GeneSymbol=='Gbe1' | GeneSymbol=='Gclc' | GeneSymbol=='Gga2' | GeneSymbol=='Gla' | GeneSymbol=='Glrx' | GeneSymbol=='Gmps' | GeneSymbol=='Got1' | GeneSymbol=='Gpi' | GeneSymbol=='Gsk3B' | GeneSymbol=='Gsr' | GeneSymbol=='Gtf2H1' | GeneSymbol=='Hk2' | GeneSymbol=='Hmbs' | GeneSymbol=='Hmgcr' | GeneSymbol=='Hmgcs1' | GeneSymbol=='Hprt1' | GeneSymbol=='Hsp90B1' | GeneSymbol=='Hspa4' | GeneSymbol=='Hspa5' | GeneSymbol=='Hspa9' | GeneSymbol=='Hspd1' | GeneSymbol=='Hspe1' | GeneSymbol=='Idh1' | GeneSymbol=='Idi1' | GeneSymbol=='Ifi30' | GeneSymbol=='Ifrd1' | GeneSymbol=='Igfbp5' | GeneSymbol=='Immt' | GeneSymbol=='Insig1' | GeneSymbol=='Itgb2' | GeneSymbol=='Ldha' | GeneSymbol=='Ldlr' | GeneSymbol=='Lgmn' | GeneSymbol=='Lta4H' | GeneSymbol=='M6Pr')

hm_tab_hall_mtorc2 = subset(hm_tab, GeneSymbol=='Map2K3' | GeneSymbol=='Mcm2' | GeneSymbol=='Mcm4' | GeneSymbol=='Me1' | GeneSymbol=='Mllt11' | GeneSymbol=='Mthfd2' | GeneSymbol=='Mthfd2L' | GeneSymbol=='Nampt' | GeneSymbol=='Nfil3' | GeneSymbol=='Nfkbib' | GeneSymbol=='Nfyc' | GeneSymbol=='Niban1' | GeneSymbol=='Nmt1' | GeneSymbol=='Nufip1' | GeneSymbol=='Nup205' | GeneSymbol=='Nupr1' | GeneSymbol=='P4Ha1' | GeneSymbol=='Pdap1' | GeneSymbol=='Pdk1' | GeneSymbol=='Pfkl' | GeneSymbol=='Pgk1' | GeneSymbol=='Pgm1' | GeneSymbol=='Phgdh' | GeneSymbol=='Pik3R3' | GeneSymbol=='Pitpnb' | GeneSymbol=='Plk1' | GeneSymbol=='Plod2' | GeneSymbol=='Pno1' | GeneSymbol=='Pnp' | GeneSymbol=='Polr3G' | GeneSymbol=='Ppa1' | GeneSymbol=='Ppia' | GeneSymbol=='Ppp1R15A' | GeneSymbol=='Prdx1' | GeneSymbol=='Psat1' | GeneSymbol=='Psma3' | GeneSymbol=='Psma4' | GeneSymbol=='Psmb5' | GeneSymbol=='Psmc2' | GeneSymbol=='Psmc4' | GeneSymbol=='Psmc6' | GeneSymbol=='Psmd12' | GeneSymbol=='Psmd13' | GeneSymbol=='Psmd14' | GeneSymbol=='Psme3' | GeneSymbol=='Psmg1' | GeneSymbol=='Psph' | GeneSymbol=='Qdpr' | GeneSymbol=='Rab1A' | GeneSymbol=='Rdh11' | GeneSymbol=='Rit1' | GeneSymbol=='Rpa1' | GeneSymbol=='Rpn1' | GeneSymbol=='Rrm2' | GeneSymbol=='Rrp9' | GeneSymbol=='Sc5D' | GeneSymbol=='Scd' | GeneSymbol=='Sdf2L1' | GeneSymbol=='Sec11A' | GeneSymbol=='Serp1' | GeneSymbol=='Serpinh1' | GeneSymbol=='Shmt2' | GeneSymbol=='Skap2' | GeneSymbol=='Sla' | GeneSymbol=='Slc1A4' | GeneSymbol=='Slc1A5' | GeneSymbol=='Slc2A1' | GeneSymbol=='Slc2A3' | GeneSymbol=='Slc37A4' | GeneSymbol=='Slc6A6' | GeneSymbol=='Slc7A11' | GeneSymbol=='Slc7A5' | GeneSymbol=='Slc9A3R1' | GeneSymbol=='Sord' | GeneSymbol=='Sqle' | GeneSymbol=='Sqstm1' | GeneSymbol=='Srd5A1' | GeneSymbol=='Ssr1' | GeneSymbol=='Stard4' | GeneSymbol=='Stc1' | GeneSymbol=='Stip1' | GeneSymbol=='Sytl2' | GeneSymbol=='Tbk1' | GeneSymbol=='Tcea1' | GeneSymbol=='Tes' | GeneSymbol=='Tfrc' | GeneSymbol=='Tm7Sf2' | GeneSymbol=='Tmem97' | GeneSymbol=='Tomm40' | GeneSymbol=='Tpi1' | GeneSymbol=='Trib3' | GeneSymbol=='Tuba4A' | GeneSymbol=='Tubg1' | GeneSymbol=='Txnrd1' | GeneSymbol=='Ube2D3' | GeneSymbol=='Uchl5' | GeneSymbol=='Ufm1' | GeneSymbol=='Ung' | GeneSymbol=='Uso1' | GeneSymbol=='Vldlr' | GeneSymbol=='Wars1' | GeneSymbol=='Xbp1' | GeneSymbol=='Ykt6')

hm_tab_hall_mtorc <- rbind(hm_tab_hall_mtorc1, hm_tab_hall_mtorc2)

hm_tab_hall_mtorc <- hm_tab_hall_mtorc %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_mtorc) = hm_tab_hall_mtorc$GeneSymbol
hm_hall_mtorc_annot = data.frame("Sig" = hm_tab_hall_mtorc$sig2)
rownames(hm_hall_mtorc_annot) = rownames(hm_tab_hall_mtorc)

hm_hall_mtorc <- pheatmap(hm_tab_hall_mtorc[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_mtorc$GeneSymbol, fontsize_row = 5, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row= hm_hall_mtorc_annot, legend_labels = "Relative expression", gaps_col=c(8), treeheight_row = 10, annotation_colors = ann_colors, main = "HALLMARK_mtorc_signalling genes")

pdf(file="IngHFD_hm_hall_mtorc.pdf",width=7,height=10)
hm_hall_mtorc
dev.off()



##### hm of hallmark EpiMesenchym genes

hm_tab_hall_EpiMesenchym1 = subset(hm_tab, GeneSymbol=='Abi3Bp' | GeneSymbol=='Acta2' | GeneSymbol=='Adam12' | GeneSymbol=='Anpep' | GeneSymbol=='Aplp1' | GeneSymbol=='Areg' | GeneSymbol=='Basp1' | GeneSymbol=='Bdnf' | GeneSymbol=='Bgn' | GeneSymbol=='Bmp1' | GeneSymbol=='Cadm1' | GeneSymbol=='Cald1' | GeneSymbol=='Calu' | GeneSymbol=='Cap2' | GeneSymbol=='Capg' | GeneSymbol=='Ccn1' | GeneSymbol=='Ccn2' | GeneSymbol=='Cd44' | GeneSymbol=='Cd59' | GeneSymbol=='Cdh11' | GeneSymbol=='Cdh2' | GeneSymbol=='Cdh6' | GeneSymbol=='Col11A1' | GeneSymbol=='Col12A1' | GeneSymbol=='Col16A1' | GeneSymbol=='Col1A1' | GeneSymbol=='Col1A2' | GeneSymbol=='Col3A1' | GeneSymbol=='Col4A1' | GeneSymbol=='Col4A2' | GeneSymbol=='Col5A1' | GeneSymbol=='Col5A2' | GeneSymbol=='Col5A3' | GeneSymbol=='Col6A2' | GeneSymbol=='Col6A3' | GeneSymbol=='Col7A1' | GeneSymbol=='Col8A2' | GeneSymbol=='Colgalt1' | GeneSymbol=='Comp' | GeneSymbol=='Copa' | GeneSymbol=='Crlf1' | GeneSymbol=='Cthrc1' | GeneSymbol=='Cxcl1' | GeneSymbol=='Cxcl12' | GeneSymbol=='Cxcl6' | GeneSymbol=='Cxcl8' | GeneSymbol=='Dab2' | GeneSymbol=='Dcn' | GeneSymbol=='Dkk1' | GeneSymbol=='Dpysl3' | GeneSymbol=='Dst' | GeneSymbol=='Ecm1' | GeneSymbol=='Ecm2' | GeneSymbol=='Edil3' | GeneSymbol=='Efemp2' | GeneSymbol=='Eln' | GeneSymbol=='Emp3' | GeneSymbol=='Eno2' | GeneSymbol=='Fap' | GeneSymbol=='Fas' | GeneSymbol=='Fbln1' | GeneSymbol=='Fbln2' | GeneSymbol=='Fbln5' | GeneSymbol=='Fbn1' | GeneSymbol=='Fbn2' | GeneSymbol=='Fermt2' | GeneSymbol=='Fgf2' | GeneSymbol=='Flna' | GeneSymbol=='Fmod' | GeneSymbol=='Fn1' | GeneSymbol=='Foxc2' | GeneSymbol=='Fstl1' | GeneSymbol=='Fstl3' | GeneSymbol=='Fuca1' | GeneSymbol=='Fzd8' | GeneSymbol=='Gadd45A' | GeneSymbol=='Gadd45B')


hm_tab_hall_EpiMesenchym2 = subset(hm_tab, GeneSymbol=='Gas1' | GeneSymbol=='Gem' | GeneSymbol=='Gja1' | GeneSymbol=='Glipr1' | GeneSymbol=='Gpc1' | GeneSymbol=='Gpx7' | GeneSymbol=='Grem1' | GeneSymbol=='Htra1' | GeneSymbol=='Id2' | GeneSymbol=='Igfbp2' | GeneSymbol=='Igfbp3' | GeneSymbol=='Igfbp4' | GeneSymbol=='Il15' | GeneSymbol=='Il32' | GeneSymbol=='Il6' | GeneSymbol=='Inhba' | GeneSymbol=='Itga2' | GeneSymbol=='Itga5' | GeneSymbol=='Itgav' | GeneSymbol=='Itgb1' | GeneSymbol=='Itgb3' | GeneSymbol=='Itgb5' | GeneSymbol=='Jun' | GeneSymbol=='Lama1' | GeneSymbol=='Lama2' | GeneSymbol=='Lama3' | GeneSymbol=='Lamc1' | GeneSymbol=='Lamc2' | GeneSymbol=='Lgals1' | GeneSymbol=='Lox' | GeneSymbol=='Loxl1' | GeneSymbol=='Loxl2' | GeneSymbol=='Lrp1' | GeneSymbol=='Lrrc15' | GeneSymbol=='Lum' | GeneSymbol=='Magee1' | GeneSymbol=='Matn2' | GeneSymbol=='Matn3' | GeneSymbol=='Mcm7' | GeneSymbol=='Mest' | GeneSymbol=='Mfap5' | GeneSymbol=='Mgp' | GeneSymbol=='Mmp1' | GeneSymbol=='Mmp14' | GeneSymbol=='Mmp2' | GeneSymbol=='Mmp3' | GeneSymbol=='Msx1' | GeneSymbol=='Mxra5' | GeneSymbol=='Myl9' | GeneSymbol=='Mylk' | GeneSymbol=='Nid2' | GeneSymbol=='Nnmt' | GeneSymbol=='Notch2' | GeneSymbol=='Nt5E' | GeneSymbol=='Ntm' | GeneSymbol=='Oxtr' | GeneSymbol=='P3H1' | GeneSymbol=='Pcolce' | GeneSymbol=='Pcolce2' | GeneSymbol=='Pdgfrb' | GeneSymbol=='Pdlim4' | GeneSymbol=='Pfn2' | GeneSymbol=='Plaur' | GeneSymbol=='Plod1' | GeneSymbol=='Plod2')


hm_tab_hall_EpiMesenchym3 = subset(hm_tab, GeneSymbol=='Plod3' | GeneSymbol=='Pmepa1' | GeneSymbol=='Pmp22' | GeneSymbol=='Postn' | GeneSymbol=='Ppib' | GeneSymbol=='Prrx1' | GeneSymbol=='Prss2' | GeneSymbol=='Pthlh' | GeneSymbol=='Ptx3' | GeneSymbol=='Pvr' | GeneSymbol=='Qsox1' | GeneSymbol=='Rgs4' | GeneSymbol=='Rhob' | GeneSymbol=='Sat1' | GeneSymbol=='Scg2' | GeneSymbol=='Sdc1' | GeneSymbol=='Sdc4' | GeneSymbol=='Serpine1' | GeneSymbol=='Serpine2' | GeneSymbol=='Serpinh1' | GeneSymbol=='Sfrp1' | GeneSymbol=='Sfrp4' | GeneSymbol=='Sgcb' | GeneSymbol=='Sgcd' | GeneSymbol=='Sgcg' | GeneSymbol=='Slc6A8' | GeneSymbol=='Slit2' | GeneSymbol=='Slit3' | GeneSymbol=='Snai2' | GeneSymbol=='Sntb1' | GeneSymbol=='Sparc' | GeneSymbol=='Spock1' | GeneSymbol=='Spp1' | GeneSymbol=='Tagln' | GeneSymbol=='Tfpi2' | GeneSymbol=='Tgfb1' | GeneSymbol=='Tgfbi' | GeneSymbol=='Tgfbr3' | GeneSymbol=='Tgm2' | GeneSymbol=='Thbs1' | GeneSymbol=='Thbs2' | GeneSymbol=='Thy1' | GeneSymbol=='Timp1' | GeneSymbol=='Timp3' | GeneSymbol=='Tnc' | GeneSymbol=='Tnfaip3' | GeneSymbol=='Tnfrsf11B' | GeneSymbol=='Tnfrsf12A' | GeneSymbol=='Tpm1' | GeneSymbol=='Tpm2' | GeneSymbol=='Tpm4' | GeneSymbol=='Vcam1' | GeneSymbol=='Vcan' | GeneSymbol=='Vegfa' | GeneSymbol=='Vegfc' | GeneSymbol=='Vim' | GeneSymbol=='Wipf1' | GeneSymbol=='Wnt5A')

hm_tab_hall_EpiMesenchym <-rbind(hm_tab_hall_EpiMesenchym1, hm_tab_hall_EpiMesenchym2, hm_tab_hall_EpiMesenchym3)

hm_tab_hall_EpiMesenchym <- hm_tab_hall_EpiMesenchym %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_EpiMesenchym) = hm_tab_hall_EpiMesenchym$GeneSymbol
hm_hall_EpiMesenchym_annot = data.frame("Sig" = hm_tab_hall_EpiMesenchym$sig2)
rownames(hm_hall_EpiMesenchym_annot) = rownames(hm_tab_hall_EpiMesenchym)

hm_hall_EpiMesenchym <- pheatmap(hm_tab_hall_EpiMesenchym[2:ncol(norm_counts)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_EpiMesenchym$GeneSymbol, fontsize_row = 5, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_EpiMesenchym_annot, legend_labels = "Relative expression", gaps_col=c(8), treeheight_row = 10, main="EpiMesenchym", annotation_colors = ann_colors)

pdf(file="IngHFD_hm_hall_EpiMesenchym.pdf",width=7,height=10)
hm_hall_EpiMesenchym
dev.off()

### hallmark adipogenesis

hm_hall_adip <- pheatmap(hm_tab_hall_adip[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_adip$GeneSymbol, fontsize_row = 8, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_adip_annot, legend_labels = "Relative expression", main = "HALLMARK_ADIPOGENESIS genes", annotation_colors = ann_colors, gaps_col=c(8), treeheight_row = 10)

pdf(file="IngHFD_hm_hall_adip.pdf",width=7,height=10)
hm_hall_adip
dev.off()

## hallmark oxidative phosphorylation

hm_hall_oxphos <- pheatmap(hm_tab_hall_oxphos[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_oxphos$GeneSymbol, fontsize_row = 6, cutree_rows = 3, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_oxphos_annot, legend_labels = "Relative expression", main = "HALLMARK_OXIDATIVE_PHOSPHORYLATION genes", annotation_colors = ann_colors, gaps_col=c(8), treeheight_row = 10, border_colour=NA)

pdf(file="IngHFD_hm_hall_oxphos.pdf",width=7,height=10)
hm_hall_oxphos
dev.off()


### re-colour mito genes sumfig

hm_mt_mito2 <- pheatmap(hm_tab_mt_mito2, cluster_rows = TRUE, cluster_cols = FALSE, cutree_rows = 2, legend = FALSE, cellwidth=30, angle_col=45, fontsize_col=6, annotation_row=hm_mt_mito_annot, legend_labels = "Relative expression", main = "Mitochondrial-encoded", show_colnames = FALSE, show_rownames = FALSE, border_color = NA, scale = "none", color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList, annotation_colors = ann_colors)

hm_tab_nucl_mito2 <- as.data.frame(hm_tab_nucl_mito$log2FC)
rownames(hm_tab_nucl_mito2) = hm_tab_nucl_mito$GeneSymbol
hm_tab_nucl_mito2$log2FCdup <- hm_tab_nucl_mito$log2FC

hm_nucl_mito2 <- pheatmap(hm_tab_nucl_mito2, cluster_rows = TRUE, cluster_cols = FALSE, cutree_rows = 3, legend = TRUE, cellwidth=30, angle_col=45, fontsize_col=6, annotation_row=hm_nucl_mito_annot, legend_labels = "Relative expression", main = "Nuclear-encoded", show_colnames = FALSE, , show_rownames = FALSE, border_color = NA, color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList, annotation_colors = ann_colors)

require(cowplot)
require(ggplotify)

pdf(file="IngHFD_mito_genes_sumfig.pdf",width=8,height=3)
plot_grid(as.grob(hm_mt_mito2), as.grob(hm_nucl_mito2), ncol = 2, rel_heights = c(1.0, 1.0))
dev.off()



##### hm of hallmark KEGG_pyruvate genes

hm_tab_hall_KEGG_pyruvate = subset(hm_tab, GeneSymbol=='Acaca' | GeneSymbol=='Acacb' | GeneSymbol=='Acat1' | GeneSymbol=='Acat2' | GeneSymbol=='Acot12' | GeneSymbol=='Acss1' | GeneSymbol=='Acss2' | GeneSymbol=='Acyp1' | GeneSymbol=='Acyp2' | GeneSymbol=='Akr1B1' | GeneSymbol=='Aldh1B1' | GeneSymbol=='Aldh2' | GeneSymbol=='Aldh3A2' | GeneSymbol=='Aldh7A1' | GeneSymbol=='Aldh9A1' | GeneSymbol=='Dlat' | GeneSymbol=='Dld' | GeneSymbol=='Glo1' | GeneSymbol=='Grhpr' | GeneSymbol=='Hagh' | GeneSymbol=='Haghl' | GeneSymbol=='Ldha' | GeneSymbol=='Ldhal6A' | GeneSymbol=='Ldhal6B' | GeneSymbol=='Ldhb' | GeneSymbol=='Ldhc' | GeneSymbol=='Ldhd' | GeneSymbol=='Mdh1' | GeneSymbol=='Mdh2' | GeneSymbol=='Me1' | GeneSymbol=='Me2' | GeneSymbol=='Me3' | GeneSymbol=='Pc' | GeneSymbol=='Pck1' | GeneSymbol=='Pck2' | GeneSymbol=='Pdha1' | GeneSymbol=='Pdha2' | GeneSymbol=='Pdhb' | GeneSymbol=='Pklr' | GeneSymbol=='Pkm')

hm_tab_hall_KEGG_pyruvate <- hm_tab_hall_KEGG_pyruvate %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_KEGG_pyruvate) = hm_tab_hall_KEGG_pyruvate$GeneSymbol
hm_hall_KEGG_pyruvate_annot = data.frame("Sig" = hm_tab_hall_KEGG_pyruvate$sig2)
rownames(hm_hall_KEGG_pyruvate_annot) = rownames(hm_tab_hall_KEGG_pyruvate)

hm_hall_KEGG_pyruvate <- pheatmap(hm_tab_hall_KEGG_pyruvate[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_KEGG_pyruvate$GeneSymbol, fontsize_row = 7, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_KEGG_pyruvate_annot, legend_labels = "Relative expression", gaps_col=c(8), treeheight_row = 10, main="KEGG_pyruvate", annotation_colors = ann_colors)

pdf(file="IngHFD_hm_hall_KEGG_pyruvate.pdf",width=7,height=7)
hm_hall_KEGG_pyruvate
dev.off()


##### hm of hallmark KEGG_TCA genes

hm_tab_hall_KEGG_TCA = subset(hm_tab, GeneSymbol=='Acly' | GeneSymbol=='Aco1' | GeneSymbol=='Aco2' | GeneSymbol=='Cs' | GeneSymbol=='Dlat' | GeneSymbol=='Dld' | GeneSymbol=='Dlst' | GeneSymbol=='Fh' | GeneSymbol=='Idh1' | GeneSymbol=='Idh2' | GeneSymbol=='Idh3A' | GeneSymbol=='Idh3B' | GeneSymbol=='Idh3G' | GeneSymbol=='Mdh1' | GeneSymbol=='Mdh2' | GeneSymbol=='Ogdh' | GeneSymbol=='Ogdhl' | GeneSymbol=='Pc' | GeneSymbol=='Pck1' | GeneSymbol=='Pck2' | GeneSymbol=='Pdha1' | GeneSymbol=='Pdha2' | GeneSymbol=='Pdhb' | GeneSymbol=='Sdha' | GeneSymbol=='Sdhb' | GeneSymbol=='Sdhc' | GeneSymbol=='Sdhd' | GeneSymbol=='Sucla2' | GeneSymbol=='Suclg1' | GeneSymbol=='Suclg2' | GeneSymbol=='Suclg2P2')

hm_tab_hall_KEGG_TCA <- hm_tab_hall_KEGG_TCA %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_KEGG_TCA) = hm_tab_hall_KEGG_TCA$GeneSymbol
hm_hall_KEGG_TCA_annot = data.frame("Sig" = hm_tab_hall_KEGG_TCA$sig2)
rownames(hm_hall_KEGG_TCA_annot) = rownames(hm_tab_hall_KEGG_TCA)

hm_hall_KEGG_TCA <- pheatmap(hm_tab_hall_KEGG_TCA[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_KEGG_TCA$GeneSymbol, fontsize_row = 7, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_KEGG_TCA_annot, legend_labels = "Relative expression", gaps_col=c(8), treeheight_row = 10, main="KEGG_TCA", annotation_colors = ann_colors)

pdf(file="IngHFD_hm_hall_KEGG_TCA.pdf",width=7,height=7)
hm_hall_KEGG_TCA
dev.off()


##### hm of hallmark KEGG_glycol genes

hm_tab_hall_KEGG_glycol = subset(hm_tab, GeneSymbol=='Acss1' | GeneSymbol=='Acss2' | GeneSymbol=='Adh1A' | GeneSymbol=='Adh1B' | GeneSymbol=='Adh1C' | GeneSymbol=='Adh4' | GeneSymbol=='Adh5' | GeneSymbol=='Adh6' | GeneSymbol=='Adh7' | GeneSymbol=='Akr1A1' | GeneSymbol=='Aldh1A3' | GeneSymbol=='Aldh1B1' | GeneSymbol=='Aldh2' | GeneSymbol=='Aldh3A1' | GeneSymbol=='Aldh3A2' | GeneSymbol=='Aldh3B1' | GeneSymbol=='Aldh3B2' | GeneSymbol=='Aldh7A1' | GeneSymbol=='Aldh9A1' | GeneSymbol=='Aldoa' | GeneSymbol=='Aldob' | GeneSymbol=='Aldoc' | GeneSymbol=='Bpgm' | GeneSymbol=='Dlat' | GeneSymbol=='Dld' | GeneSymbol=='Eno1' | GeneSymbol=='Eno2' | GeneSymbol=='Eno3' | GeneSymbol=='Fbp1' | GeneSymbol=='Fbp2' | GeneSymbol=='G6Pc' | GeneSymbol=='G6Pc2' | GeneSymbol=='Galm' | GeneSymbol=='Gapdh' | GeneSymbol=='Gck' | GeneSymbol=='Gpi' | GeneSymbol=='Hk1' | GeneSymbol=='Hk2' | GeneSymbol=='Hk3' | GeneSymbol=='Ldha' | GeneSymbol=='Ldhal6A' | GeneSymbol=='Ldhal6B' | GeneSymbol=='Ldhb' | GeneSymbol=='Ldhc' | GeneSymbol=='Pck1' | GeneSymbol=='Pck2' | GeneSymbol=='Pdha1' | GeneSymbol=='Pdha2' | GeneSymbol=='Pdhb' | GeneSymbol=='Pfkl' | GeneSymbol=='Pfkm' | GeneSymbol=='Pfkp' | GeneSymbol=='Pgam1' | GeneSymbol=='Pgam2' | GeneSymbol=='Pgam4' | GeneSymbol=='Pgk1' | GeneSymbol=='Pgk2' | GeneSymbol=='Pgm1' | GeneSymbol=='Pgm2' | GeneSymbol=='Pklr' | GeneSymbol=='Pkm' | GeneSymbol=='Tpi1')

hm_tab_hall_KEGG_glycol <- hm_tab_hall_KEGG_glycol %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_KEGG_glycol) = hm_tab_hall_KEGG_glycol$GeneSymbol
hm_hall_KEGG_glycol_annot = data.frame("Sig" = hm_tab_hall_KEGG_glycol$sig2)
rownames(hm_hall_KEGG_glycol_annot) = rownames(hm_tab_hall_KEGG_glycol)

hm_hall_KEGG_glycol <- pheatmap(hm_tab_hall_KEGG_glycol[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_KEGG_glycol$GeneSymbol, fontsize_row = 7, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_KEGG_glycol_annot, legend_labels = "Relative expression", gaps_col=c(8), treeheight_row = 10, main="KEGG_glycol", annotation_colors = ann_colors)

pdf(file="IngHFD_hm_hall_KEGG_glycol.pdf",width=7,height=7)
hm_hall_KEGG_glycol
dev.off()

##### hm of hallmark KEGG_aminoacyl genes

hm_tab_hall_KEGG_aminoacyl = subset(hm_tab, GeneSymbol=='Aars1' | GeneSymbol=='Aars2' | GeneSymbol=='Cars1' | GeneSymbol=='Cars2' | GeneSymbol=='Dars1' | GeneSymbol=='Dars2' | GeneSymbol=='Ears2' | GeneSymbol=='Eprs1' | GeneSymbol=='Fars2' | GeneSymbol=='Farsa' | GeneSymbol=='Farsb' | GeneSymbol=='Gars1' | GeneSymbol=='Hars1' | GeneSymbol=='Hars2' | GeneSymbol=='Iars1' | GeneSymbol=='Iars2' | GeneSymbol=='Kars1' | GeneSymbol=='Lars1' | GeneSymbol=='Lars2' | GeneSymbol=='Mars1' | GeneSymbol=='Mars2' | GeneSymbol=='Mtfmt' | GeneSymbol=='Nars1' | GeneSymbol=='Nars2' | GeneSymbol=='Pars2' | GeneSymbol=='Pstk' | GeneSymbol=='Qars1' | GeneSymbol=='Rars1' | GeneSymbol=='Rars2' | GeneSymbol=='Sars1' | GeneSymbol=='Sars2' | GeneSymbol=='Sepsecs' | GeneSymbol=='Tars1' | GeneSymbol=='Tars2' | GeneSymbol=='Tars3' | GeneSymbol=='Vars1' | GeneSymbol=='Vars2' | GeneSymbol=='Wars1' | GeneSymbol=='Wars2' | GeneSymbol=='Yars1' | GeneSymbol=='Yars2')

hm_tab_hall_KEGG_aminoacyl <- hm_tab_hall_KEGG_aminoacyl %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(hm_tab_hall_KEGG_aminoacyl) = hm_tab_hall_KEGG_aminoacyl$GeneSymbol
hm_hall_KEGG_aminoacyl_annot = data.frame("Sig" = hm_tab_hall_KEGG_aminoacyl$sig2)
rownames(hm_hall_KEGG_aminoacyl_annot) = rownames(hm_tab_hall_KEGG_aminoacyl)

hm_hall_KEGG_aminoacyl <- pheatmap(hm_tab_hall_KEGG_aminoacyl[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_hall_KEGG_aminoacyl$GeneSymbol, fontsize_row = 7, cutree_cols = 2, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_hall_KEGG_aminoacyl_annot, legend_labels = "Relative expression", gaps_col=c(8), treeheight_row = 10, main="KEGG_aminoacyl", annotation_colors = ann_colors)

pdf(file="IngHFD_hm_hall_KEGG_aminoacyl.pdf",width=7,height=7)
hm_hall_KEGG_aminoacyl
dev.off()

## top sig genes

library(dplyr)
library(pheatmap)
hm_tab_sig2_up = subset(hm_tab, log2FC > 0)
hm_tab_sig2_up <- hm_tab_sig2_up %>% arrange(-neglog_p) %>% slice(1:25)
hm_tab_sig2_down = subset(hm_tab, log2FC < 0)
hm_tab_sig2_down <- hm_tab_sig2_down %>% arrange(-neglog_p) %>% slice(1:25)
hm_tab_sig2 <- rbind(hm_tab_sig2_up, hm_tab_sig2_down)


hm_sig <- pheatmap(hm_tab_sig2[2:((ncol(norm_counts))+1)], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_tab_sig2$GeneSymbol, fontsize_row = 8, cutree_rows = 2, cutree_cols = 2, legend = FALSE, cellwidth=9, angle_col=45, fontsize_col=6, main = "Significantly differentially expressed genes", gaps_col=c(8), treeheight_row = 10)

pdf(file="IngHFD_hm_sig.pdf",width=7,height=7)
hm_sig
dev.off()


## comparison of mfn1- vs mfn2- KO MEFs RNAseq data

## import data and prep table using summary stats only

library(readr)
library(tidyverse)
library(pheatmap)
library(gtools)
library(RColorBrewer)

breaksList1 = seq(-2.5, 2.5, by = 0.1)
breaksList2 = seq(-6, 6, by = 0.1)

m1_dm2 <- read_csv("results_table_WT_dm2_m1_dm2_CPM.csv")
m2_dm2 <- read_csv("results_table_WT_dm2_m2_dm2_CPM.csv")
m1_dp8 <- read_csv("results_table_WT_dp8_m1_dp8_CPM.csv")
m2_dp8 <- read_csv("results_table_WT_dp8_m2_dp8_CPM.csv")

m1_dm2 <- m1_dm2 %>% rename("m1_dm2_log2FC" = "log2 FC (MLE)")
m2_dm2 <- m2_dm2 %>% rename("m2_dm2_log2FC" = "log2 FC (MLE)")
m1_dp8 <- m1_dp8 %>% rename("m1_dp8_log2FC" = "log2 FC (MLE)")
m2_dp8 <- m2_dp8 %>% rename("m2_dp8_log2FC" = "log2 FC (MLE)")

m1_dm2 <- m1_dm2 %>% rename("m1_dm2_BHpval" = "BH pval")
m2_dm2 <- m2_dm2 %>% rename("m2_dm2_BHpval" = "BH pval")
m1_dp8 <- m1_dp8 %>% rename("m1_dp8_BHpval" = "BH pval")
m2_dp8 <- m2_dp8 %>% rename("m2_dp8_BHpval" = "BH pval")

m1_dm2$m1_dm2_stars = stars.pval(m1_dm2$m1_dm2_BHpval)
m1_dp8$m1_dp8_stars = stars.pval(m1_dp8$m1_dp8_BHpval)
m2_dm2$m2_dm2_stars = stars.pval(m2_dm2$m2_dm2_BHpval)
m2_dp8$m2_dp8_stars = stars.pval(m2_dp8$m2_dp8_BHpval)

m1_dm2_hm_data = subset(m1_dm2, select=c(GeneSymbol, gene_id, m1_dm2_log2FC, m1_dm2_stars))
m1_dp8_hm_data = subset(m1_dp8, select=c(gene_id, m1_dp8_log2FC, m1_dp8_stars))
m2_dm2_hm_data = subset(m2_dm2, select=c(gene_id, m2_dm2_log2FC, m2_dm2_stars))
m2_dp8_hm_data = subset(m2_dp8, select=c(gene_id, m2_dp8_log2FC, m2_dp8_stars))

MEF_hm_data <- merge(m1_dm2_hm_data, m1_dp8_hm_data, by="gene_id")
MEF_hm_data <- merge(MEF_hm_data, m2_dm2_hm_data, by="gene_id")
MEF_hm_data <- merge(MEF_hm_data, m2_dp8_hm_data, by="gene_id")

MEF_hm_data <- MEF_hm_data %>% distinct(GeneSymbol, .keep_all = TRUE)
rownames(MEF_hm_data) = MEF_hm_data$GeneSymbol
hm_colnames = c("Mfn1-/- day -2","Mfn2-/- day -2", "Mfn1-/- day +8", "Mfn2-/- day +8")

MEF_log2FC_hm = subset(MEF_hm_data, select=c(m1_dm2_log2FC, m2_dm2_log2FC, m1_dp8_log2FC, m2_dp8_log2FC, GeneSymbol))
MEF_stars_hm = subset(MEF_hm_data, select=c(m1_dm2_log2FC, m2_dm2_log2FC, m1_dp8_log2FC, m2_dp8_log2FC, GeneSymbol))



########## make heatmaps

## adipogenesis genes

## adip

MEF_hm_adip = subset(MEF_hm_data, GeneSymbol=="Lep" | GeneSymbol=="Adipoq" | GeneSymbol=="Cd36" | GeneSymbol=="Pparg" | GeneSymbol=="Glut4" | GeneSymbol=="Fasn"| GeneSymbol=="Plin1"| GeneSymbol=="Plin2"| GeneSymbol=="Plin4"| GeneSymbol=="Fabp4"| GeneSymbol=="Isnr"| GeneSymbol=="Lpl"| GeneSymbol=="Agpat2"| GeneSymbol=="Bscl2"| GeneSymbol=="Cidec"| GeneSymbol=="Cebpa"| GeneSymbol=="Acaca"| GeneSymbol=="Ppargc1a"| GeneSymbol=="Ppargc1b"| GeneSymbol=="Slc2a4"  |  GeneSymbol=='Cebpa' | GeneSymbol=='Cebpb' | GeneSymbol=='Cebpd' | GeneSymbol=='Cebpg' | GeneSymbol=='Dlk1' | GeneSymbol=='Deptor' | GeneSymbol=='Mef2a' | GeneSymbol=='Klf4' | GeneSymbol=='Klf6' | GeneSymbol=='Gata2' | GeneSymbol=='Gata3' | GeneSymbol=='Klf2' | GeneSymbol=='Klf7' | GeneSymbol=='Klf5' | GeneSymbol=='Klf9' | GeneSymbol=='Klf15' | GeneSymbol=='Sox6' | GeneSymbol=='Sox9' | GeneSymbol=='Zeb1' | GeneSymbol=='Stat5a' | GeneSymbol=='Smad2' | GeneSymbol=='Smad3' | GeneSymbol=='Srebf1' | GeneSymbol=='Wnt5a' | GeneSymbol=='Mtor' | GeneSymbol=='Creb1')
MEF_hm_adip <- MEF_hm_adip %>% drop_na()

log2FC_hm_adip = subset(MEF_hm_adip, select=c(m1_dm2_log2FC, m2_dm2_log2FC, m1_dp8_log2FC, m2_dp8_log2FC, GeneSymbol))
stars_hm_adip = subset(MEF_hm_adip, select=c(m1_dm2_stars, m2_dm2_stars, m1_dp8_stars, m2_dp8_stars, GeneSymbol))

adip_hm <- pheatmap(log2FC_hm_adip[1:4], cluster_rows = TRUE, cluster_cols = FALSE, angle_col = 45, cutree_cols = 2, display_numbers = stars_hm_adip[1:4], fontsize_number=10, gaps_col=c(2), labels_col = hm_colnames, color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList1, fontsize_row=8, main = "Adipogenesis genes")
adip_hm

pdf(file="MEF_adip_hm.pdf",width=5,height=9)
adip_hm
dev.off()

## mito genes

MEF_hm_mito = subset(MEF_hm_data, GeneSymbol=="Mfn1" | GeneSymbol=="mfn1" | GeneSymbol=="Opa1" | GeneSymbol=="Fis1" | GeneSymbol=="Tomm20" | GeneSymbol=="Ppargc1a"| GeneSymbol=="Ppargc1b"| GeneSymbol=="Cs" | GeneSymbol=='mt-Rnr1' | GeneSymbol=='mt-Rnr2' | GeneSymbol=='mt-Tl1' | GeneSymbol=='mt-Nd1' | GeneSymbol=='mt-Ti' | GeneSymbol=='mt-Tq' | GeneSymbol=='mt-Tm' | GeneSymbol=='mt-Nd2' | GeneSymbol=='mt-Tw' | GeneSymbol=='mt-Ta' | GeneSymbol=='mt-Tn' | GeneSymbol=='mt-Tc' | GeneSymbol=='mt-Ty' | GeneSymbol=='mt-Co1' | GeneSymbol=='mt-Ts1' | GeneSymbol=='mt-Td' | GeneSymbol=='mt-Co2' | GeneSymbol=='mt-Atp8' | GeneSymbol=='mt-Atp6' | GeneSymbol=='mt-Co3' | GeneSymbol=='mt-Tg' | GeneSymbol=='mt-Nd3' | GeneSymbol=='mt-Tr' | GeneSymbol=='mt-Nd4' | GeneSymbol=='mt-Th' | GeneSymbol=='mt-Ts2' | GeneSymbol=='mt-Tl2' | GeneSymbol=='mt-Nd5' | GeneSymbol=='mt-Nd6' | GeneSymbol=='mt-Te' | GeneSymbol=='mt-Cytb' | GeneSymbol=='mt-Tt' | GeneSymbol=='mt-Tp' | GeneSymbol=='mt-Nd4l' | GeneSymbol=='Sdha' | GeneSymbol=="Prkn" | GeneSymbol=="Pink1" | GeneSymbol=="Bnip3" | GeneSymbol=="Nrf1" | GeneSymbol==""| GeneSymbol=="Mff"| GeneSymbol=="Cycs")
MEF_hm_mito <- MEF_hm_mito %>% drop_na()

log2FC_hm_mito = subset(MEF_hm_mito, select=c(m1_dm2_log2FC, m2_dm2_log2FC, m1_dp8_log2FC, m2_dp8_log2FC, GeneSymbol))
stars_hm_mito = subset(MEF_hm_mito, select=c(m1_dm2_stars, m2_dm2_stars, m1_dp8_stars, m2_dp8_stars, GeneSymbol))

mito_hm <- pheatmap(log2FC_hm_mito[1:4], cluster_rows = TRUE, cluster_cols = FALSE, angle_col = 45, cutree_cols = 2, display_numbers = stars_hm_mito[1:4], fontsize_number=10, gaps_col=c(2), labels_col = hm_colnames, color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList1, fontsize_row=8, main = "Mitochondria-related genes")
mito_hm

pdf(file="MEF_mito_hm.pdf",width=5,height=6)
mito_hm
dev.off()

##### hm of hallmark adipogenesis genes

MEF_hm_hall_adip = subset(MEF_hm_data, GeneSymbol=='Abca1' |GeneSymbol=='Abcb8' |GeneSymbol=='Acaa2' |GeneSymbol=='Acadl' |GeneSymbol=='Acadm' |GeneSymbol=='Acads' |GeneSymbol=='Acly' |GeneSymbol=='Aco2' |GeneSymbol=='Acox1' |GeneSymbol=='Adcy6' |GeneSymbol=='Adig' |GeneSymbol=='Adipoq' |GeneSymbol=='Adipor2' |GeneSymbol=='Agpat3' |GeneSymbol=='Aifm1' |GeneSymbol=='Ak2' |GeneSymbol=='Aldh2' |GeneSymbol=='Aldoa' |GeneSymbol=='Angpt1' |GeneSymbol=='Angptl4' |GeneSymbol=='Aplp2' |GeneSymbol=='Apoe' |GeneSymbol=='Araf' |GeneSymbol=='Arl4A' |GeneSymbol=='Atl2' |GeneSymbol=='Atp1B3' |GeneSymbol=='Atp5Po' |GeneSymbol=='Baz2A' |GeneSymbol=='Bckdha' |GeneSymbol=='Bcl2L13' |GeneSymbol=='Bcl6' |GeneSymbol=='C3' |GeneSymbol=='Cat' |GeneSymbol=='Cavin1' |GeneSymbol=='Cavin2' |GeneSymbol=='Ccng2' |GeneSymbol=='Cd151' |GeneSymbol=='Cd302' |GeneSymbol=='Cd36' |GeneSymbol=='Cdkn2C' |GeneSymbol=='Chchd10' |GeneSymbol=='Chuk' |GeneSymbol=='Cidea' |GeneSymbol=='Cmbl' |GeneSymbol=='Cmpk1' |GeneSymbol=='Col15A1' |GeneSymbol=='Col4A1' |GeneSymbol=='Coq3' |GeneSymbol=='Coq5' |GeneSymbol=='Coq9' |GeneSymbol=='Cox6A1' |GeneSymbol=='Cox7B' |GeneSymbol=='Cox8A' |GeneSymbol=='Cpt2' |GeneSymbol=='Crat' |GeneSymbol=='Cs' |GeneSymbol=='Cyc1' |GeneSymbol=='Cyp4B1' |GeneSymbol=='Dbt' |GeneSymbol=='Ddt' |GeneSymbol=='Decr1' |GeneSymbol=='Dgat1' |GeneSymbol=='Dhcr7' |GeneSymbol=='Dhrs7' |GeneSymbol=='Dhrs7B' |GeneSymbol=='Dlat' |GeneSymbol=='Dld' |GeneSymbol=='Dnajb9' |GeneSymbol=='Dnajc15' |GeneSymbol=='Dram2' |GeneSymbol=='Ech1' |GeneSymbol=='Echs1' |GeneSymbol=='Elmod3' |GeneSymbol=='Elovl6' |GeneSymbol=='Enpp2' |GeneSymbol=='Ephx2' |GeneSymbol=='Esrra' |GeneSymbol=='Esyt1' |GeneSymbol=='Etfb' |GeneSymbol=='Fabp4' |GeneSymbol=='Fah' |GeneSymbol=='Fzd4' |GeneSymbol=='G3Bp2' |GeneSymbol=='Gadd45A' |GeneSymbol=='Gbe1' |GeneSymbol=='Ghitm' |GeneSymbol=='Gpam' |GeneSymbol=='Gpat4' |GeneSymbol=='Gpd2' |GeneSymbol=='Gphn' |GeneSymbol=='Gpx3' |GeneSymbol=='Gpx4' |GeneSymbol=='Grpel1' |GeneSymbol=='Hadh' |GeneSymbol=='Hibch' |GeneSymbol=='Hspb8' |GeneSymbol=='Idh1' |GeneSymbol=='Idh3A' |GeneSymbol=='Idh3G' |GeneSymbol=='Ifngr1' |GeneSymbol=='Immt' |GeneSymbol=='Itga7' |GeneSymbol=='Itih5' |GeneSymbol=='Itsn1' |GeneSymbol=='Jagn1' |GeneSymbol=='Lama4' |GeneSymbol=='Lep' |GeneSymbol=='Lifr' |GeneSymbol=='Lipe' |GeneSymbol=='Lpcat3' |GeneSymbol=='Lpl' |GeneSymbol=='Ltc4S' |GeneSymbol=='Map4K3' |GeneSymbol=='Mccc1' |GeneSymbol=='Mdh2' |GeneSymbol=='Me1' |GeneSymbol=='Mgll' |GeneSymbol=='Mgst3' |GeneSymbol=='Miga2' |GeneSymbol=='Mrap' |GeneSymbol=='Mrpl15' |GeneSymbol=='Mtarc2')
MEF_hm_hall_adip <- MEF_hm_hall_adip %>% drop_na()

log2FC_hm_hall_adip = subset(MEF_hm_hall_adip, select=c(m1_dm2_log2FC, m2_dm2_log2FC, m1_dp8_log2FC, m2_dp8_log2FC, GeneSymbol))
stars_hm_hall_adip = subset(MEF_hm_hall_adip, select=c(m1_dm2_stars, m2_dm2_stars, m1_dp8_stars, m2_dp8_stars, GeneSymbol))

hall_adip_hm <- pheatmap(log2FC_hm_hall_adip[1:4], cluster_rows = TRUE, cluster_cols = FALSE, angle_col = 45, cutree_cols = 2, display_numbers = stars_hm_hall_adip[1:4], fontsize_number=10, gaps_col=c(2), labels_col = hm_colnames, color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList1, fontsize_row=8, main = "HALLMARK_ADIPOGENESIS")
hall_adip_hm

pdf(file="MEF_hall_adip_hm.pdf",width=5,height=14)
hall_adip_hm
dev.off()

## oxphos

MEF_hm_oxphos = subset(MEF_hm_data, GeneSymbol=='Abcb7' |GeneSymbol=='Acaa1' |GeneSymbol=='Acaa2' |GeneSymbol=='Acadm' |GeneSymbol=='Acadsb' |GeneSymbol=='Acadvl' |GeneSymbol=='Acat1' |GeneSymbol=='Aco2' |GeneSymbol=='Afg3L2' |GeneSymbol=='Aifm1' |GeneSymbol=='Alas1' |GeneSymbol=='Aldh6A1' |GeneSymbol=='Atp1B1' |GeneSymbol=='Atp5F1A' |GeneSymbol=='Atp5F1B' |GeneSymbol=='Atp5F1C' |GeneSymbol=='Atp5F1D' |GeneSymbol=='Atp5F1E' |GeneSymbol=='Atp5Mc1' |GeneSymbol=='Atp5Mc2' |GeneSymbol=='Atp5Mc3' |GeneSymbol=='Atp5Me' |GeneSymbol=='Atp5Mf' |GeneSymbol=='Atp5Mg' |GeneSymbol=='Atp5Pb' |GeneSymbol=='Atp5Pd' |GeneSymbol=='Atp5Pf' |GeneSymbol=='Atp5Po' |GeneSymbol=='Atp6Ap1' |GeneSymbol=='Atp6V0B' |GeneSymbol=='Atp6V0C' |GeneSymbol=='Atp6V0E1' |GeneSymbol=='Atp6V1C1' |GeneSymbol=='Atp6V1D' |GeneSymbol=='Atp6V1E1' |GeneSymbol=='Atp6V1F' |GeneSymbol=='Atp6V1G1' |GeneSymbol=='Atp6V1H' |GeneSymbol=='Bax' |GeneSymbol=='Bckdha' |GeneSymbol=='Bdh2' |GeneSymbol=='Casp7' |GeneSymbol=='Cox10' |GeneSymbol=='Cox11' |GeneSymbol=='Cox15' |GeneSymbol=='Cox17' |GeneSymbol=='Cox4I1' |GeneSymbol=='Cox5A' |GeneSymbol=='Cox5B' |GeneSymbol=='Cox6A1' |GeneSymbol=='Cox6B1' |GeneSymbol=='Cox6C' |GeneSymbol=='Cox7A2' |GeneSymbol=='Cox7A2L' |GeneSymbol=='Cox7B' |GeneSymbol=='Cox7C' |GeneSymbol=='Cox8A' |GeneSymbol=='Cpt1A' |GeneSymbol=='Cs' |GeneSymbol=='Cyb5A' |GeneSymbol=='Cyb5R3' |GeneSymbol=='Cyc1' |GeneSymbol=='Cycs' |GeneSymbol=='Decr1' |GeneSymbol=='Dlat' |GeneSymbol=='Dld' |GeneSymbol=='Dlst' |GeneSymbol=='Ech1' |GeneSymbol=='Echs1' |GeneSymbol=='Eci1' |GeneSymbol=='Etfa' |GeneSymbol=='Etfb' |GeneSymbol=='Etfdh' |GeneSymbol=='Fdx1' |GeneSymbol=='Fh' |GeneSymbol=='Fxn' |GeneSymbol=='Glud1' |GeneSymbol=='Got2' |GeneSymbol=='Gpi' |GeneSymbol=='Gpx4' |GeneSymbol=='Grpel1' |GeneSymbol=='Hadha' |GeneSymbol=='Hadhb' |GeneSymbol=='Hccs' |GeneSymbol=='Hsd17B10' |GeneSymbol=='Hspa9' |GeneSymbol=='Htra2' |GeneSymbol=='Idh1' |GeneSymbol=='Idh2' |GeneSymbol=='Idh3A' |GeneSymbol=='Idh3B' |GeneSymbol=='Idh3G' |GeneSymbol=='Immt' |GeneSymbol=='Isca1' |GeneSymbol=='Iscu' |GeneSymbol=='Ldha' |GeneSymbol=='Ldhb' |GeneSymbol=='Lrpprc' |GeneSymbol=='Maob' |GeneSymbol=='Mdh1' |GeneSymbol=='Mdh2' |GeneSymbol=='mfn1' |GeneSymbol=='Mgst3' |GeneSymbol=='Mpc1' |GeneSymbol=='Mrpl11' |GeneSymbol=='Mrpl15' |GeneSymbol=='Mrpl34' |GeneSymbol=='Mrpl35' |GeneSymbol=='Mrps11' |GeneSymbol=='Mrps12' |GeneSymbol=='Mrps15' |GeneSymbol=='Mrps22' |GeneSymbol=='Mrps30' |GeneSymbol=='Mtrf1')
MEF_hm_oxphos <- MEF_hm_oxphos %>% drop_na()

log2FC_hm_oxphos = subset(MEF_hm_oxphos, select=c(m1_dm2_log2FC, m2_dm2_log2FC, m1_dp8_log2FC, m2_dp8_log2FC, GeneSymbol))
stars_hm_oxphos = subset(MEF_hm_oxphos, select=c(m1_dm2_stars, m2_dm2_stars, m1_dp8_stars, m2_dp8_stars, GeneSymbol))

oxphos_hm <- pheatmap(log2FC_hm_oxphos[1:4], cluster_rows = TRUE, cluster_cols = FALSE, angle_col = 45, cutree_cols = 2, display_numbers = stars_hm_oxphos[1:4], fontsize_number=10, gaps_col=c(2), labels_col = hm_colnames, color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList1, fontsize_row=8, main = "OXPHOS genes")
oxphos_hm

pdf(file="MEF_oxphos_hm.pdf",width=5,height=6)
oxphos_hm
dev.off()

## ros

MEF_hm_ros = subset(MEF_hm_data, GeneSymbol=='Abcc1' |GeneSymbol=='Atox1' |GeneSymbol=='Cat' |GeneSymbol=='Cdkn2D' |GeneSymbol=='Egln2' |GeneSymbol=='Ercc2' |GeneSymbol=='Fes' |GeneSymbol=='Ftl' |GeneSymbol=='G6Pd' |GeneSymbol=='Gclc' |GeneSymbol=='Gclm' |GeneSymbol=='Glrx' |GeneSymbol=='Glrx2' |GeneSymbol=='Gpx3' |GeneSymbol=='Gpx4' |GeneSymbol=='Gsr' |GeneSymbol=='Hhex' |GeneSymbol=='Hmox2' |GeneSymbol=='Ipcef1' |GeneSymbol=='Junb' |GeneSymbol=='Lamtor5' |GeneSymbol=='Lsp1' |GeneSymbol=='Mbp' |GeneSymbol=='Mgst1' |GeneSymbol=='Mpo' |GeneSymbol=='Msra' |GeneSymbol=='Ndufa6' |GeneSymbol=='Ndufb4' |GeneSymbol=='Ndufs2' |GeneSymbol=='Nqo1' |GeneSymbol=='Oxsr1' |GeneSymbol=='Pdlim1' |GeneSymbol=='Pfkp' |GeneSymbol=='Prdx1' |GeneSymbol=='Prdx2' |GeneSymbol=='Prdx4' |GeneSymbol=='Prdx6' |GeneSymbol=='Prnp' |GeneSymbol=='Ptpa' |GeneSymbol=='Sbno2' |GeneSymbol=='Scaf4' |GeneSymbol=='Selenos' |GeneSymbol=='Sod1' |GeneSymbol=='Sod2' |GeneSymbol=='Srxn1' |GeneSymbol=='Stk25' |GeneSymbol=='Txn' |GeneSymbol=='Txnrd1' |GeneSymbol=='Txnrd2')
MEF_hm_ros <- MEF_hm_ros %>% drop_na()

log2FC_hm_ros = subset(MEF_hm_ros, select=c(m1_dm2_log2FC, m2_dm2_log2FC, m1_dp8_log2FC, m2_dp8_log2FC, GeneSymbol))
stars_hm_ros = subset(MEF_hm_ros, select=c(m1_dm2_stars, m2_dm2_stars, m1_dp8_stars, m2_dp8_stars, GeneSymbol))

ros_hm <- pheatmap(log2FC_hm_ros[1:4], cluster_rows = TRUE, cluster_cols = FALSE, angle_col = 45, cutree_cols = 2, display_numbers = stars_hm_ros[1:4], fontsize_number=10, gaps_col=c(2), labels_col = hm_colnames, color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList1, fontsize_row=8, main = "HALLMARK_REACTIVE_OXYGEN_SPECIES_PATHWAY")
ros_hm

pdf(file="MEF_ros_hm.pdf",width=5,height=6)
ros_hm
dev.off()

## UPR

MEF_hm_UPR = subset(MEF_hm_data, GeneSymbol=='Aldh18A1' |GeneSymbol=='Arfgap1' |GeneSymbol=='Asns' |GeneSymbol=='Atf3' |GeneSymbol=='Atf4' |GeneSymbol=='Atf6' |GeneSymbol=='Atp6V0D1' |GeneSymbol=='Bag3' |GeneSymbol=='Banf1' |GeneSymbol=='Calr' |GeneSymbol=='Ccl2' |GeneSymbol=='Cebpb' |GeneSymbol=='Cebpg' |GeneSymbol=='Chac1' |GeneSymbol=='Cks1B' |GeneSymbol=='Cnot2' |GeneSymbol=='Cnot4' |GeneSymbol=='Cnot6' |GeneSymbol=='Cxxc1' |GeneSymbol=='Dcp1A' |GeneSymbol=='Dcp2' |GeneSymbol=='Dctn1' |GeneSymbol=='Ddit4' |GeneSymbol=='Ddx10' |GeneSymbol=='Dkc1' |GeneSymbol=='Dnaja4' |GeneSymbol=='Dnajb9' |GeneSymbol=='Dnajc3' |GeneSymbol=='Edc4' |GeneSymbol=='Edem1' |GeneSymbol=='Eef2' |GeneSymbol=='Eif2Ak3' |GeneSymbol=='Eif2S1' |GeneSymbol=='Eif4A1' |GeneSymbol=='Eif4A2' |GeneSymbol=='Eif4A3' |GeneSymbol=='Eif4E' |GeneSymbol=='Eif4Ebp1' |GeneSymbol=='Eif4G1' |GeneSymbol=='Ern1' |GeneSymbol=='Ero1A' |GeneSymbol=='Exoc2' |GeneSymbol=='Exosc1' |GeneSymbol=='Exosc10' |GeneSymbol=='Exosc2' |GeneSymbol=='Exosc4' |GeneSymbol=='Exosc5' |GeneSymbol=='Exosc9' |GeneSymbol=='Fkbp14' |GeneSymbol=='Fus' |GeneSymbol=='Gemin4' |GeneSymbol=='Gosr2' |GeneSymbol=='H2Ax' |GeneSymbol=='Herpud1' |GeneSymbol=='Hsp90B1' |GeneSymbol=='Hspa5' |GeneSymbol=='Hspa9' |GeneSymbol=='Hyou1' |GeneSymbol=='Iars1' |GeneSymbol=='Ifit1' |GeneSymbol=='Igfbp1' |GeneSymbol=='Imp3' |GeneSymbol=='Kdelr3' |GeneSymbol=='Khsrp' |GeneSymbol=='Kif5B' |GeneSymbol=='Lsm1' |GeneSymbol=='Lsm4' |GeneSymbol=='Mthfd2' |GeneSymbol=='Mtrex' |GeneSymbol=='Nabp1' |GeneSymbol=='Nfya' |GeneSymbol=='Nfyb' |GeneSymbol=='Nhp2' |GeneSymbol=='Nolc1' |GeneSymbol=='Nop14' |GeneSymbol=='Nop56' |GeneSymbol=='Npm1' |GeneSymbol=='Paip1' |GeneSymbol=='Parn' |GeneSymbol=='Pdia5' |GeneSymbol=='Pdia6' |GeneSymbol=='Pop4' |GeneSymbol=='Preb' |GeneSymbol=='Psat1' |GeneSymbol=='Rps14' |GeneSymbol=='Rrp9' |GeneSymbol=='Sdad1' |GeneSymbol=='Sec11A' |GeneSymbol=='Sec31A' |GeneSymbol=='Serp1' |GeneSymbol=='Shc1' |GeneSymbol=='Slc1A4' |GeneSymbol=='Slc30A5' |GeneSymbol=='Slc7A5' |GeneSymbol=='Spcs1' |GeneSymbol=='Spcs3' |GeneSymbol=='Srpra' |GeneSymbol=='Srprb' |GeneSymbol=='Ssr1' |GeneSymbol=='Stc2' |GeneSymbol=='Tars1' |GeneSymbol=='Tatdn2' |GeneSymbol=='Tspyl2' |GeneSymbol=='Ttc37' |GeneSymbol=='Tubb2A' |GeneSymbol=='Vegfa' |GeneSymbol=='Wfs1' |GeneSymbol=='Wipi1' |GeneSymbol=='Xbp1' |GeneSymbol=='Xpot' |GeneSymbol=='Yif1A' |GeneSymbol=='Ywhaz' |GeneSymbol=='Zbtb17')
MEF_hm_UPR <- MEF_hm_UPR %>% drop_na()

log2FC_hm_UPR = subset(MEF_hm_UPR, select=c(m1_dm2_log2FC, m2_dm2_log2FC, m1_dp8_log2FC, m2_dp8_log2FC, GeneSymbol))
stars_hm_UPR = subset(MEF_hm_UPR, select=c(m1_dm2_stars, m2_dm2_stars, m1_dp8_stars, m2_dp8_stars, GeneSymbol))

UPR_hm <- pheatmap(log2FC_hm_UPR[1:4], cluster_rows = TRUE, cluster_cols = FALSE, angle_col = 45, cutree_cols = 2, display_numbers = stars_hm_UPR[1:4], fontsize_number=10, gaps_col=c(2), labels_col = hm_colnames, color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList1, fontsize_row=8, main = "HALLMARK_UNFOLDED_PROTEIN_RESPONSE")
UPR_hm

pdf(file="MEF_UPR_hm.pdf",width=5,height=12)
UPR_hm
dev.off()

## ISR

MEF_hm_ISR = subset(MEF_hm_data, GeneSymbol=="Atf4" | GeneSymbol=="Atf5" |GeneSymbol=="Atf6" | GeneSymbol=="Xbp1" | GeneSymbol=="Gdf15" | GeneSymbol=="Fgf21" | GeneSymbol=="Trib3"| GeneSymbol=="Eif2ak4"| GeneSymbol=="Ddit3"| GeneSymbol=="Gadd34"| GeneSymbol=="Perk"| GeneSymbol=="Eif2ak1"| GeneSymbol=="Hif1a")
MEF_hm_ISR <- MEF_hm_ISR %>% drop_na()

log2FC_hm_ISR = subset(MEF_hm_ISR, select=c(m1_dm2_log2FC, m2_dm2_log2FC, m1_dp8_log2FC, m2_dp8_log2FC, GeneSymbol))
stars_hm_ISR = subset(MEF_hm_ISR, select=c(m1_dm2_stars, m2_dm2_stars, m1_dp8_stars, m2_dp8_stars, GeneSymbol))

ISR_hm <- pheatmap(log2FC_hm_ISR[1:4], cluster_rows = TRUE, cluster_cols = FALSE, angle_col = 45, cutree_cols = 2, display_numbers = stars_hm_ISR[1:4], fontsize_number=10, gaps_col=c(2), labels_col = hm_colnames, color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList1, fontsize_row=8, main = "ISR genes")
ISR_hm

pdf(file="MEF_ISR_hm.pdf",width=5,height=6)
ISR_hm
dev.off()

## GO_BAT

MEF_hm_GO_BAT = subset(MEF_hm_data, GeneSymbol=='Adig' |GeneSymbol=='Adipoq' |GeneSymbol=='Adrb1' |GeneSymbol=='Adrb2' |GeneSymbol=='Aldh6A1' |GeneSymbol=='Arl4A' |GeneSymbol=='Bmp7' |GeneSymbol=='Bnip3' |GeneSymbol=='Cebpa' |GeneSymbol=='Cebpb' |GeneSymbol=='Dio2' |GeneSymbol=='Dusp10' |GeneSymbol=='Ebf2' |GeneSymbol=='Ero1A' |GeneSymbol=='Fabp3' |GeneSymbol=='Fabp4' |GeneSymbol=='Ffar4' |GeneSymbol=='Flcn' |GeneSymbol=='Fndc5' |GeneSymbol=='Fto' |GeneSymbol=='Hnrnpu' |GeneSymbol=='Ins' |GeneSymbol=='Itga6' |GeneSymbol=='Lamb3' |GeneSymbol=='Lep' |GeneSymbol=='Lrg1' |GeneSymbol=='Mapk14' |GeneSymbol=='Mb' |GeneSymbol=='Metrnl' |GeneSymbol=='Mtor' |GeneSymbol=='Napepld' |GeneSymbol=='Nudt7' |GeneSymbol=='Pex11A' |GeneSymbol=='Pim1' |GeneSymbol=='Plac8' |GeneSymbol=='Ppargc1A' |GeneSymbol=='Prdp36' |GeneSymbol=='Ptgs2' |GeneSymbol=='Rgs2' |GeneSymbol=='Rreb1' |GeneSymbol=='Sirt1' |GeneSymbol=='Six1' |GeneSymbol=='Slc2A4' |GeneSymbol=='Sox13' |GeneSymbol=='Tfe3' |GeneSymbol=='Trpv4' |GeneSymbol=='Ucp1' |GeneSymbol=='Vstm2A' |GeneSymbol=='Zbtb7B' |GeneSymbol=='Znf516')
MEF_hm_GO_BAT <- MEF_hm_GO_BAT %>% drop_na()

log2FC_hm_GO_BAT = subset(MEF_hm_GO_BAT, select=c(m1_dm2_log2FC, m2_dm2_log2FC, m1_dp8_log2FC, m2_dp8_log2FC, GeneSymbol))
stars_hm_GO_BAT = subset(MEF_hm_GO_BAT, select=c(m1_dm2_stars, m2_dm2_stars, m1_dp8_stars, m2_dp8_stars, GeneSymbol))

GO_BAT_hm <- pheatmap(log2FC_hm_GO_BAT[1:4], cluster_rows = TRUE, cluster_cols = FALSE, angle_col = 45, cutree_cols = 2, display_numbers = stars_hm_GO_BAT[1:4], fontsize_number=10, gaps_col=c(2), labels_col = hm_colnames, color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList1, fontsize_row=8, main = "GO_BAT")
GO_BAT_hm

pdf(file="MEF_GO_BAT_hm.pdf",width=5,height=9)
GO_BAT_hm
dev.off()

## myc_TF

MEF_hm_myc_TF = subset(MEF_hm_data, GeneSymbol=='Abcd2' |GeneSymbol=='Steap4' |GeneSymbol=='Nnmt' |GeneSymbol=='Pde3b' |GeneSymbol=='Hp' |GeneSymbol=='Lrp3' |GeneSymbol=='Slc1a5' |GeneSymbol=='Retn' |GeneSymbol=='Apcdd1' |GeneSymbol=='Adcy5' |GeneSymbol=='C4B' |GeneSymbol=='Gys2' |GeneSymbol=='Hcar2' |GeneSymbol=='Dock11' |GeneSymbol=='Mc2r' |GeneSymbol=='Hcar1' |GeneSymbol=='Dram1' |GeneSymbol=='B3galt2' |GeneSymbol=='Nnat' |GeneSymbol=='Ffar4' |GeneSymbol=='Slc16a7' |GeneSymbol=='Ffar2' |GeneSymbol=='Aoc3' |GeneSymbol=='Rarres2' |GeneSymbol=='Adipoq' |GeneSymbol=='Mmp3' |GeneSymbol=='Sctr' |GeneSymbol=='Klhl2' |GeneSymbol=='Igf1' |GeneSymbol=='Podn' |GeneSymbol=='Cidec' |GeneSymbol=='Tshr' |GeneSymbol=='Por' |GeneSymbol=='Rbp4' |GeneSymbol=='Ccdc80' |GeneSymbol=='Lrg1' |GeneSymbol=='Vnn3' |GeneSymbol=='Chdh' |GeneSymbol=='Lgals12' |GeneSymbol=='Chst1' |GeneSymbol=='St6galnac5')
MEF_hm_myc_TF <- MEF_hm_myc_TF %>% drop_na()

log2FC_hm_myc_TF = subset(MEF_hm_myc_TF, select=c(m1_dm2_log2FC, m2_dm2_log2FC, m1_dp8_log2FC, m2_dp8_log2FC, GeneSymbol))
stars_hm_myc_TF = subset(MEF_hm_myc_TF, select=c(m1_dm2_stars, m2_dm2_stars, m1_dp8_stars, m2_dp8_stars, GeneSymbol))

myc_TF_hm <- pheatmap(log2FC_hm_myc_TF[1:4], cluster_rows = TRUE, cluster_cols = FALSE, angle_col = 45, cutree_cols = 2, display_numbers = stars_hm_myc_TF[1:4], fontsize_number=10, gaps_col=c(2), labels_col = hm_colnames, color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), breaks = breaksList1, fontsize_row=8, main = "MYC_TF")
myc_TF_hm

pdf(file="MEF_myc_TF_hm.pdf",width=5,height=12)
myc_TF_hm
dev.off()


########## ---------- ########## ----------########## ----------

#### -- import normalised counts for different heatmaps 


library(readr)
library(tidyverse)
library(pheatmap)
library(gtools)
library(RColorBrewer)

ann_colors = list(Sig = c(not = "#999999", m1sig = "#E69F00", m2sig = "#009E73", both = "#56B4E9"))

#### -- dp8 WT vs m1 vs m2


m1_dp8_hm_tab <- read_csv("hm_tab_m1_dp8.csv")
m2_dp8_hm_tab <- read_csv("hm_tab_m2_dp8.csv")
m2_dp8_hm_tab = subset(m2_dp8_hm_tab, select = -c(GeneSymbol))

dp8_both_hm_tab <- merge(m2_dp8_hm_tab, m1_dp8_hm_tab, by="gene_id")
dp8_both_hm_tab$WT_G = sqrt((dp8_both_hm_tab$WT_dp8_D_m2 * dp8_both_hm_tab$WT_dp8_A_m1))
dp8_both_hm_tab$WT_H = sqrt((dp8_both_hm_tab$WT_dp8_E_m2 * dp8_both_hm_tab$WT_dp8_B_m1))
dp8_both_hm_tab$WT_I = sqrt((dp8_both_hm_tab$WT_dp8_F_m2 * dp8_both_hm_tab$WT_dp8_C_m1))

dp8_both_hm_tab_sort = subset(dp8_both_hm_tab, select=c("GeneSymbol", "WT_G", "WT_H", "WT_I", "m1_dp8_A", "m1_dp8_B", "m1_dp8_C", "m2_dp8_D", "m2_dp8_E", "m2_dp8_F", "log2FC_m1dp8", "BH_pval_m1dp8","log2FC_m2dp8", "BH_pval_m2dp8"))
dp8_both_hm_tab_sig = subset(dp8_both_hm_tab_sort, BH_pval_m1dp8 <= .001 | BH_pval_m2dp8 <= .001)
dp8_both_hm_tab_sig <- dp8_both_hm_tab_sig %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(dp8_both_hm_tab_sig) = dp8_both_hm_tab_sig$GeneSymbol
dp8_both_hm_tab_sig$significant = ifelse(dp8_both_hm_tab_sig$BH_pval_m1dp8 <= .001 & dp8_both_hm_tab_sig$BH_pval_m2dp8 >= .001, "m1sig", ifelse(dp8_both_hm_tab_sig$BH_pval_m1dp8 <= .001 & dp8_both_hm_tab_sig$BH_pval_m2dp8 <= .001, "both", ifelse(dp8_both_hm_tab_sig$BH_pval_m1dp8 >= .001 & dp8_both_hm_tab_sig$BH_pval_m2dp8 <= .001, "m2sig", "not")))
dp8_both_hm_tab_sig_annot <- data.frame(dp8_both_hm_tab_sig$significant)
rownames(dp8_both_hm_tab_sig_annot) = rownames(dp8_both_hm_tab_sig)


#### -- overall hm of both cell lines for all sig genes
labels_col_hm = c("WT","WT","WT","Mfn1-/-","Mfn1-/-","Mfn1-/-","Mfn2-/-","Mfn2-/-","Mfn2-/-")
pdf(file="dp8_both_sig.pdf",width=6, height=9)
dp8_both_sig <- pheatmap(dp8_both_hm_tab_sig[2:10], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", cutree_cols = 3, legend = TRUE, angle_col=45, fontsize_col=8, show_rownames = FALSE, treeheight_row = 0, treeheight_col = 0, labels_col = labels_col_hm, gaps_col=c(3,6), cellwidth=10, annotation_colors = ann_colors )
dp8_both_sig
dev.off()


#### -- top 10 up/down (by BH_pval) for m1 & m2 hm

dp8_hm_tab_m2_up = subset(dp8_both_hm_tab_sort, log2FC_m2dp8 > 0)
dp8_hm_tab_m2_up10 <- dp8_hm_tab_m2_up %>% arrange(BH_pval_m2dp8) %>% slice(1:10)
dp8_hm_tab_m2_down = subset(dp8_both_hm_tab_sort, log2FC_m2dp8 < 0)
dp8_hm_tab_m2_down10 <- dp8_hm_tab_m2_down %>% arrange(BH_pval_m2dp8) %>% slice(1:10)
dp8_hm_tab_m1_up = subset(dp8_both_hm_tab_sort, log2FC_m1dp8 > 0)
dp8_hm_tab_m1_up10 <- dp8_hm_tab_m1_up %>% arrange(BH_pval_m1dp8) %>% slice(1:10)
dp8_hm_tab_m1_down = subset(dp8_both_hm_tab_sort, log2FC_m1dp8 < 0)
dp8_hm_tab_m1_down10 <- dp8_hm_tab_m1_down %>% arrange(BH_pval_m1dp8) %>% slice(1:10)
dp8_top20_hm_tab <- rbind(dp8_hm_tab_m2_up10, dp8_hm_tab_m2_down10, dp8_hm_tab_m1_up10, dp8_hm_tab_m1_down10)
dp8_top20_hm_tab <- dp8_top20_hm_tab %>% distinct(GeneSymbol, .keep_all = TRUE)
rownames(dp8_top20_hm_tab) = dp8_top20_hm_tab$GeneSymbol

pdf(file="dp8_top20_hm.pdf",width=5, height=6)
dp8_top20_hm <- pheatmap(dp8_top20_hm_tab[2:10], cluster_rows = FALSE, cluster_cols = FALSE, scale = "row", cutree_cols = 3, legend = TRUE, angle_col=45, fontsize_col=12, show_rownames = TRUE, treeheight_row = 0, treeheight_col = 0,labels_col = labels_col_hm, gaps_col=c(3,6), cellwidth=12, annotation_colors = ann_colors)
dp8_top20_hm
dev.off()

#### -- specific heatmaps

## add significance column

dp8_both_hm_tab_sort$significant = ifelse(dp8_both_hm_tab_sort$BH_pval_m1dp8 <= .001 & dp8_both_hm_tab_sort$BH_pval_m2dp8 >= .001, "m1sig", ifelse(dp8_both_hm_tab_sort$BH_pval_m1dp8 <= .001 & dp8_both_hm_tab_sort$BH_pval_m2dp8 <= .001, "both", ifelse(dp8_both_hm_tab_sort$BH_pval_m1dp8 >= .001 & dp8_both_hm_tab_sort$BH_pval_m2dp8 <= .001, "m2sig", "not")))

##### hm of adipogenesis-related genes

hm_dp8_both_tab_adip = subset(dp8_both_hm_tab_sort, GeneSymbol=="Lep" | GeneSymbol=="Adipoq" | GeneSymbol=="Cd36" | GeneSymbol=="Pparg" | GeneSymbol=="Glut4" | GeneSymbol=="Fasn"| GeneSymbol=="Plin1"| GeneSymbol=="Plin2"| GeneSymbol=="Plin4"| GeneSymbol=="Fabp4"| GeneSymbol=="Isnr"| GeneSymbol=="Lpl"| GeneSymbol=="Agpat2"| GeneSymbol=="Bscl2"| GeneSymbol=="Cidec"| GeneSymbol=="Cebpa"| GeneSymbol=="Acaca"| GeneSymbol=="Ppargc1a"| GeneSymbol=="Ppargc1b"| GeneSymbol=="Slc2a4" )

rownames(hm_dp8_both_tab_adip) = hm_dp8_both_tab_adip$GeneSymbol
hm_adip_annot = data.frame("Sig" = hm_dp8_both_tab_adip$significant)
rownames(hm_adip_annot) = rownames(hm_dp8_both_tab_adip)

hm_dp8_both_adip <- pheatmap(hm_dp8_both_tab_adip[2:10], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_dp8_both_tab_adip$GeneSymbol, fontsize_row = 9, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_adip_annot, legend_labels = "Relative expression", main = "Adipogenesis-related genes", labels_col = labels_col_hm, gaps_col=c(3,6), treeheight_row = 10, annotation_colors = ann_colors)

pdf(file="hm_dp8_both_adip.pdf",width=4,height=5)
hm_dp8_both_adip
dev.off()

##### hm of Creb1 pathway genes

hm_dp8_both_tab_Creb = subset(dp8_both_hm_tab_sort, GeneSymbol=='Plvap' | GeneSymbol=='Serpine2' | GeneSymbol=='Rasl11B' | GeneSymbol=='Casc4' | GeneSymbol=='Eno2' | GeneSymbol=='Zdhhc2' | GeneSymbol=='Ctgf' | GeneSymbol=='Comp' | GeneSymbol=='Islr' | GeneSymbol=='Ccnd2' | GeneSymbol=='Naglu' | GeneSymbol=='Creb3L2' | GeneSymbol=='Thsd7A' | GeneSymbol=='Phlda3' | GeneSymbol=='Slc38A1' | GeneSymbol=='Igfbp4' | GeneSymbol=='Pdgfrl' | GeneSymbol=='Adam19' | GeneSymbol=='Eid1' | GeneSymbol=='Procr' | GeneSymbol=='Selenom' | GeneSymbol=='Sfrp2' | GeneSymbol=='Rbp1' | GeneSymbol=='Akip1' | GeneSymbol=='Mxra8' | GeneSymbol=='Kdelr3' | GeneSymbol=='Nupr1' | GeneSymbol=='Nbl1' | GeneSymbol=='Shc4' | GeneSymbol=='Igsf8' | GeneSymbol=='Ltbp4' | GeneSymbol=='Ltbp2' | GeneSymbol=='Mical1' | GeneSymbol=='Pdgfc' | GeneSymbol=='Penk' | GeneSymbol=='Pacsin1' | GeneSymbol=='Egr2' | GeneSymbol=='Tgfb2' | GeneSymbol=='Egr3' | GeneSymbol=='Ace' | GeneSymbol=='Hspa2' | GeneSymbol=='Cp' | GeneSymbol=='Bmp2' | GeneSymbol=='Bhlhe40' | GeneSymbol=='Col5A2' | GeneSymbol=='Maff' | GeneSymbol=='Fat1' | GeneSymbol=='Bcl2' | GeneSymbol=='Fxyd5' | GeneSymbol=='Tgfbi' | GeneSymbol=='Lrp11' | GeneSymbol=='Kdm5D' | GeneSymbol=='Ctsz' | GeneSymbol=='Slc40A1' | GeneSymbol=='Snx10' | GeneSymbol=='Arrb1' | GeneSymbol=='Panx1' | GeneSymbol=='Adamtsl2' | GeneSymbol=='Efhd2' | GeneSymbol=='Pmepa1' | GeneSymbol=='Itgb8' | GeneSymbol=='Ptgis' | GeneSymbol=='Mmp2' | GeneSymbol=='Bgn' | GeneSymbol=='Rhoc' | GeneSymbol=='Ptgr1' | GeneSymbol=='Ckap4' | GeneSymbol=='Etv5' | GeneSymbol=='Enah' | GeneSymbol=='Rcn3' | GeneSymbol=='Cnksr1' | GeneSymbol=='Rasa3' | GeneSymbol=='Aldh1A1' | GeneSymbol=='St6Galnac4' | GeneSymbol=='Cd44' | GeneSymbol=='Itga9' | GeneSymbol=='Foxc2' | GeneSymbol=='Cebpa' | GeneSymbol=='Col15A1' | GeneSymbol=='Ccdc68' | GeneSymbol=='Fstl1' | GeneSymbol=='Gnai1' | GeneSymbol=='Cygb' | GeneSymbol=='P2Ry6' | GeneSymbol=='Sertad4' | GeneSymbol=='Olfml3' | GeneSymbol=='Camk2N2' | GeneSymbol=='Pdpn' | GeneSymbol=='Spp1' | GeneSymbol=='Trim47' | GeneSymbol=='Bend4' | GeneSymbol=='Npdc1' | GeneSymbol=='Il33' | GeneSymbol=='Gdf15' | GeneSymbol=='Tmem176A' | GeneSymbol=='Plekha6' | GeneSymbol=='Sulf1' | GeneSymbol=='Bicc1' | GeneSymbol=='Col3A1' | GeneSymbol=='Krt18' | GeneSymbol=='Qpct' | GeneSymbol=='Lnx1' | GeneSymbol=='Cyb561' | GeneSymbol=='Spsb4')

rownames(hm_dp8_both_tab_Creb) = hm_dp8_both_tab_Creb$GeneSymbol
hm_Creb_annot = data.frame("Sig" = hm_dp8_both_tab_Creb$significant)
rownames(hm_Creb_annot) = rownames(hm_dp8_both_tab_Creb)

hm_dp8_both_Creb <- pheatmap(hm_dp8_both_tab_Creb[2:10], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_dp8_both_tab_Creb$GeneSymbol, fontsize_row = 6, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_Creb_annot, legend_labels = "Relative expression", main = "Creb1 pathway genes", labels_col = labels_col_hm, gaps_col=c(3,6), treeheight_row = 10, annotation_colors = ann_colors)

pdf(file="hm_dp8_both_Creb.pdf",width=6,height=8)
hm_dp8_both_Creb
dev.off()

##### hm of Creb_v2 pathway genes (TRRUST)

hm_dp8_both_tab_Creb_v2 = subset(dp8_both_hm_tab_sort, GeneSymbol=='Acsl4' | GeneSymbol=='Bcl2' | GeneSymbol=='Cftr' | GeneSymbol=='Cldn11' | GeneSymbol=='Crtc2' | GeneSymbol=='Entpd1' | GeneSymbol=='Esr1' | GeneSymbol=='Etv2' | GeneSymbol=='Etv3' | GeneSymbol=='Fos' | GeneSymbol=='Fos' | GeneSymbol=='Fos' | GeneSymbol=='Hspa5' | GeneSymbol=='Il10' | GeneSymbol=='Ldha' | GeneSymbol=='Mif' | GeneSymbol=='Mitf' | GeneSymbol=='Nf1' | GeneSymbol=='Nfkbiz' | GeneSymbol=='Nmnat2' | GeneSymbol=='Noct' | GeneSymbol=='Nrf1' | GeneSymbol=='Pde3b' | GeneSymbol=='Penk' | GeneSymbol=='Ppargc1a' | GeneSymbol=='Ppm1d' | GeneSymbol=='Prkce' | GeneSymbol=='Ptgs2' | GeneSymbol=='Ptgs2' | GeneSymbol=='Nectin2' | GeneSymbol=='Ren1' | GeneSymbol=='Slc20a1' | GeneSymbol=='Slc2a3' | GeneSymbol=='Twist1')

rownames(hm_dp8_both_tab_Creb_v2) = hm_dp8_both_tab_Creb_v2$GeneSymbol
hm_Creb_v2_annot = data.frame("Sig" = hm_dp8_both_tab_Creb_v2$significant)
rownames(hm_Creb_v2_annot) = rownames(hm_dp8_both_tab_Creb_v2)

hm_dp8_both_Creb_v2 <- pheatmap(hm_dp8_both_tab_Creb_v2[2:10], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_dp8_both_tab_Creb_v2$GeneSymbol, fontsize_row = 6, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_Creb_v2_annot, legend_labels = "Relative expression", main = "Creb_v21 pathway genes", labels_col = labels_col_hm, gaps_col=c(3,6), treeheight_row = 10, annotation_colors = ann_colors)

pdf(file="hm_dp8_both_Creb_v2.pdf",width=6,height=8)
hm_dp8_both_Creb_v2
dev.off()

##### hm of Gata2 pathway genes

hm_dp8_both_tab_Gata2 = subset(dp8_both_hm_tab_sort, GeneSymbol=='Cebpa' | GeneSymbol=='Csf2' | GeneSymbol=='Lyl1' | GeneSymbol=='Nkx6-1' | GeneSymbol=='Rc3h1' | GeneSymbol=='Spi1' | GeneSymbol=='Spi1' | GeneSymbol=='Smad6' | GeneSymbol=='Spi1' | GeneSymbol=='Spi1' | GeneSymbol=='Spi1' | GeneSymbol=='Tac2' | GeneSymbol=='Tshb')

rownames(hm_dp8_both_tab_Gata2) = hm_dp8_both_tab_Gata2$GeneSymbol
hm_Gata2_annot = data.frame("Sig" = hm_dp8_both_tab_Gata2$significant)
rownames(hm_Gata2_annot) = rownames(hm_dp8_both_tab_Gata2)

hm_dp8_both_Gata2 <- pheatmap(hm_dp8_both_tab_Gata2[2:10], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_dp8_both_tab_Gata2$GeneSymbol, fontsize_row = 6, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_Gata2_annot, legend_labels = "Relative expression", main = "Gata21 pathway genes", labels_col = labels_col_hm, gaps_col=c(3,6), treeheight_row = 10, annotation_colors = ann_colors)

pdf(file="hm_dp8_both_Gata2.pdf",width=6,height=8)
hm_dp8_both_Gata2
dev.off()

##### hm of Tcf3 pathway genes

hm_dp8_both_tab_Tcf3 = subset(dp8_both_hm_tab_sort, GeneSymbol=='Acta2' | GeneSymbol=='Adipoq' | GeneSymbol=='Aicda' | GeneSymbol=='Atxn3' | GeneSymbol=='Ccl21a' | GeneSymbol=='Ccl21b' | GeneSymbol=='Ccl21c' | GeneSymbol=='Ccnd3' | GeneSymbol=='Cd19' | GeneSymbol=='Cd5' | GeneSymbol=='Cd7' | GeneSymbol=='Cd79a' | GeneSymbol=='Cd79a' | GeneSymbol=='Cdh1' | GeneSymbol=='Cdh1' | GeneSymbol=='Cdkn1a' | GeneSymbol=='Ckm' | GeneSymbol=='Cldn4' | GeneSymbol=='Col2a1' | GeneSymbol=='Ebf1' | GeneSymbol=='Epb42' | GeneSymbol=='Esrrb' | GeneSymbol=='Foxo1' | GeneSymbol=='Foxp3' | GeneSymbol=='Id1' | GeneSymbol=='Igk' | GeneSymbol=='Igk' | GeneSymbol=='Igll1' | GeneSymbol=='Insm1' | GeneSymbol=='Kit' | GeneSymbol=='Lef1' | GeneSymbol=='Mir302a' | GeneSymbol=='Myl2' | GeneSymbol=='Nanog' | GeneSymbol=='Neurog1' | GeneSymbol=='Notch1' | GeneSymbol=='Nr0b2' | GeneSymbol=='Nr5a2' | GeneSymbol=='Pax5' | GeneSymbol=='Ptcra' | GeneSymbol=='Smarcc1' | GeneSymbol=='Tcl1' | GeneSymbol=='Tcra' | GeneSymbol=='Tpt1' | GeneSymbol=='Ube2i' | GeneSymbol=='Ung' | GeneSymbol=='Vcam1')

rownames(hm_dp8_both_tab_Tcf3) = hm_dp8_both_tab_Tcf3$GeneSymbol
hm_Tcf3_annot = data.frame("Sig" = hm_dp8_both_tab_Tcf3$significant)
rownames(hm_Tcf3_annot) = rownames(hm_dp8_both_tab_Tcf3)

hm_dp8_both_Tcf3 <- pheatmap(hm_dp8_both_tab_Tcf3[2:10], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_dp8_both_tab_Tcf3$GeneSymbol, fontsize_row = 6, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_Tcf3_annot, legend_labels = "Relative expression", main = "Tcf31 pathway genes", labels_col = labels_col_hm, gaps_col=c(3,6), treeheight_row = 10, annotation_colors = ann_colors)

pdf(file="hm_dp8_both_Tcf3.pdf",width=6,height=8)
hm_dp8_both_Tcf3
dev.off()

#### --  #### --  #### --  #### --  #### -- dm2 WT vs m1 vs m2


m1_dm2_hm_tab <- read_csv("hm_tab_m1_dm2.csv")
m2_dm2_hm_tab <- read_csv("hm_tab_m2_dm2.csv")
m2_dm2_hm_tab = subset(m2_dm2_hm_tab, select = -c(GeneSymbol))

dm2_both_hm_tab <- merge(m2_dm2_hm_tab, m1_dm2_hm_tab, by="gene_id")
dm2_both_hm_tab$WT_G = sqrt((dm2_both_hm_tab$WT_dm2_D_m2 * dm2_both_hm_tab$WT_dm2_A_m1))
dm2_both_hm_tab$WT_H = sqrt((dm2_both_hm_tab$WT_dm2_E_m2 * dm2_both_hm_tab$WT_dm2_B_m1))
dm2_both_hm_tab$WT_I = sqrt((dm2_both_hm_tab$WT_dm2_F_m2 * dm2_both_hm_tab$WT_dm2_C_m1))

dm2_both_hm_tab_sort = subset(dm2_both_hm_tab, select=c("GeneSymbol", "WT_G", "WT_H", "WT_I", "m1_dm2_A", "m1_dm2_B", "m1_dm2_C", "m2_dm2_D", "m2_dm2_E", "m2_dm2_F", "log2FC_m1dm2", "BH_pval_m1dm2","log2FC_m2dm2", "BH_pval_m2dm2"))
dm2_both_hm_tab_sig = subset(dm2_both_hm_tab_sort, BH_pval_m1dm2 <= .001 | BH_pval_m2dm2 <= .001)
dm2_both_hm_tab_sig <- dm2_both_hm_tab_sig %>% distinct(GeneSymbol, .keep_all = TRUE)

rownames(dm2_both_hm_tab_sig) = dm2_both_hm_tab_sig$GeneSymbol
dm2_both_hm_tab_sig$significant = ifelse(dm2_both_hm_tab_sig$BH_pval_m1dm2 <= .001 & dm2_both_hm_tab_sig$BH_pval_m2dm2 >= .001, "m1sig", ifelse(dm2_both_hm_tab_sig$BH_pval_m1dm2 <= .001 & dm2_both_hm_tab_sig$BH_pval_m2dm2 <= .001, "both", ifelse(dm2_both_hm_tab_sig$BH_pval_m1dm2 >= .001 & dm2_both_hm_tab_sig$BH_pval_m2dm2 <= .001, "m2sig", "not")))
dm2_both_hm_tab_sig_annot <- data.frame(dm2_both_hm_tab_sig$significant)
rownames(dm2_both_hm_tab_sig_annot) = rownames(dm2_both_hm_tab_sig)


#### -- overall hm of both cell lines for all sig genes
labels_col_hm = c("WT","WT","WT","Mfn1-/-","Mfn1-/-","Mfn1-/-","Mfn2-/-","Mfn2-/-","Mfn2-/-")
pdf(file="dm2_both_sig.pdf",width=6, height=9)
dm2_both_sig <- pheatmap(dm2_both_hm_tab_sig[2:10], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", cutree_cols = 3, legend = TRUE, angle_col=45, fontsize_col=8, show_rownames = FALSE, treeheight_row = 0, treeheight_col = 0, labels_col = labels_col_hm, gaps_col=c(3,6), cellwidth=10)
dm2_both_sig
dev.off()


#### -- top 10 up/down (by BH_pval) for m1 & m2 hm

dm2_hm_tab_m2_up = subset(dm2_both_hm_tab_sort, log2FC_m2dm2 > 0)
dm2_hm_tab_m2_up10 <- dm2_hm_tab_m2_up %>% arrange(BH_pval_m2dm2) %>% slice(1:10)
dm2_hm_tab_m2_down = subset(dm2_both_hm_tab_sort, log2FC_m2dm2 < 0)
dm2_hm_tab_m2_down10 <- dm2_hm_tab_m2_down %>% arrange(BH_pval_m2dm2) %>% slice(1:10)
dm2_hm_tab_m1_up = subset(dm2_both_hm_tab_sort, log2FC_m1dm2 > 0)
dm2_hm_tab_m1_up10 <- dm2_hm_tab_m1_up %>% arrange(BH_pval_m1dm2) %>% slice(1:10)
dm2_hm_tab_m1_down = subset(dm2_both_hm_tab_sort, log2FC_m1dm2 < 0)
dm2_hm_tab_m1_down10 <- dm2_hm_tab_m1_down %>% arrange(BH_pval_m1dm2) %>% slice(1:10)
dm2_top20_hm_tab <- rbind(dm2_hm_tab_m2_up10, dm2_hm_tab_m2_down10, dm2_hm_tab_m1_up10, dm2_hm_tab_m1_down10)
dm2_top20_hm_tab <- dm2_top20_hm_tab %>% distinct(GeneSymbol, .keep_all = TRUE)
rownames(dm2_top20_hm_tab) = dm2_top20_hm_tab$GeneSymbol

pdf(file="dm2_top20_hm.pdf",width=8, height=10)
dm2_top20_hm <- pheatmap(dm2_top20_hm_tab[2:10], cluster_rows = FALSE, cluster_cols = FALSE, scale = "row", cutree_cols = 3, legend = TRUE, angle_col=45, fontsize_col=12, show_rownames = TRUE, treeheight_row = 0, treeheight_col = 0,labels_col = labels_col_hm, gaps_col=c(3,6), cellwidth=15)
dm2_top20_hm
dev.off()

#### -- specific heatmaps

## add significance column

dm2_both_hm_tab_sort$significant = ifelse(dm2_both_hm_tab_sort$BH_pval_m1dm2 <= .001 & dm2_both_hm_tab_sort$BH_pval_m2dm2 >= .001, "m1sig", ifelse(dm2_both_hm_tab_sort$BH_pval_m1dm2 <= .001 & dm2_both_hm_tab_sort$BH_pval_m2dm2 <= .001, "both", ifelse(dm2_both_hm_tab_sort$BH_pval_m1dm2 >= .001 & dm2_both_hm_tab_sort$BH_pval_m2dm2 <= .001, "m2sig", "not")))

##### hm of adipogenesis-related genes

hm_dm2_both_tab_adip = subset(dm2_both_hm_tab_sort, GeneSymbol=="Lep" | GeneSymbol=="Adipoq" | GeneSymbol=="Cd36" | GeneSymbol=="Pparg" | GeneSymbol=="Glut4" | GeneSymbol=="Fasn"| GeneSymbol=="Plin1"| GeneSymbol=="Plin2"| GeneSymbol=="Plin4"| GeneSymbol=="Fabp4"| GeneSymbol=="Isnr"| GeneSymbol=="Lpl"| GeneSymbol=="Agpat2"| GeneSymbol=="Bscl2"| GeneSymbol=="Cidec"| GeneSymbol=="Cebpa"| GeneSymbol=="Acaca"| GeneSymbol=="Ppargc1a"| GeneSymbol=="Ppargc1b"| GeneSymbol=="Slc2a4" )

rownames(hm_dm2_both_tab_adip) = hm_dm2_both_tab_adip$GeneSymbol
hm_adip_annot = data.frame("Sig" = hm_dm2_both_tab_adip$significant)
rownames(hm_adip_annot) = rownames(hm_dm2_both_tab_adip)

hm_dm2_both_adip <- pheatmap(hm_dm2_both_tab_adip[2:10], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_dm2_both_tab_adip$GeneSymbol, fontsize_row = 9, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_adip_annot, legend_labels = "Relative expression", main = "Adipogenesis-related genes", labels_col = labels_col_hm, gaps_col=c(3,6), treeheight_row = 10, annotation_colors = ann_colors)

pdf(file="hm_dm2_both_adip.pdf",width=4,height=5)
hm_dm2_both_adip
dev.off()

##### hm of Creb1 pathway genes

hm_dm2_both_tab_Creb = subset(dm2_both_hm_tab_sort, GeneSymbol=='Plvap' | GeneSymbol=='Serpine2' | GeneSymbol=='Rasl11B' | GeneSymbol=='Casc4' | GeneSymbol=='Eno2' | GeneSymbol=='Zdhhc2' | GeneSymbol=='Ctgf' | GeneSymbol=='Comp' | GeneSymbol=='Islr' | GeneSymbol=='Ccnd2' | GeneSymbol=='Naglu' | GeneSymbol=='Creb3L2' | GeneSymbol=='Thsd7A' | GeneSymbol=='Phlda3' | GeneSymbol=='Slc38A1' | GeneSymbol=='Igfbp4' | GeneSymbol=='Pdgfrl' | GeneSymbol=='Adam19' | GeneSymbol=='Eid1' | GeneSymbol=='Procr' | GeneSymbol=='Selenom' | GeneSymbol=='Sfrp2' | GeneSymbol=='Rbp1' | GeneSymbol=='Akip1' | GeneSymbol=='Mxra8' | GeneSymbol=='Kdelr3' | GeneSymbol=='Nupr1' | GeneSymbol=='Nbl1' | GeneSymbol=='Shc4' | GeneSymbol=='Igsf8' | GeneSymbol=='Ltbp4' | GeneSymbol=='Ltbp2' | GeneSymbol=='Mical1' | GeneSymbol=='Pdgfc' | GeneSymbol=='Penk' | GeneSymbol=='Pacsin1' | GeneSymbol=='Egr2' | GeneSymbol=='Tgfb2' | GeneSymbol=='Egr3' | GeneSymbol=='Ace' | GeneSymbol=='Hspa2' | GeneSymbol=='Cp' | GeneSymbol=='Bmp2' | GeneSymbol=='Bhlhe40' | GeneSymbol=='Col5A2' | GeneSymbol=='Maff' | GeneSymbol=='Fat1' | GeneSymbol=='Bcl2' | GeneSymbol=='Fxyd5' | GeneSymbol=='Tgfbi' | GeneSymbol=='Lrp11' | GeneSymbol=='Kdm5D' | GeneSymbol=='Ctsz' | GeneSymbol=='Slc40A1' | GeneSymbol=='Snx10' | GeneSymbol=='Arrb1' | GeneSymbol=='Panx1' | GeneSymbol=='Adamtsl2' | GeneSymbol=='Efhd2' | GeneSymbol=='Pmepa1' | GeneSymbol=='Itgb8' | GeneSymbol=='Ptgis' | GeneSymbol=='Mmp2' | GeneSymbol=='Bgn' | GeneSymbol=='Rhoc' | GeneSymbol=='Ptgr1' | GeneSymbol=='Ckap4' | GeneSymbol=='Etv5' | GeneSymbol=='Enah' | GeneSymbol=='Rcn3' | GeneSymbol=='Cnksr1' | GeneSymbol=='Rasa3' | GeneSymbol=='Aldh1A1' | GeneSymbol=='St6Galnac4' | GeneSymbol=='Cd44' | GeneSymbol=='Itga9' | GeneSymbol=='Foxc2' | GeneSymbol=='Cebpa' | GeneSymbol=='Col15A1' | GeneSymbol=='Ccdc68' | GeneSymbol=='Fstl1' | GeneSymbol=='Gnai1' | GeneSymbol=='Cygb' | GeneSymbol=='P2Ry6' | GeneSymbol=='Sertad4' | GeneSymbol=='Olfml3' | GeneSymbol=='Camk2N2' | GeneSymbol=='Pdpn' | GeneSymbol=='Spp1' | GeneSymbol=='Trim47' | GeneSymbol=='Bend4' | GeneSymbol=='Npdc1' | GeneSymbol=='Il33' | GeneSymbol=='Gdf15' | GeneSymbol=='Tmem176A' | GeneSymbol=='Plekha6' | GeneSymbol=='Sulf1' | GeneSymbol=='Bicc1' | GeneSymbol=='Col3A1' | GeneSymbol=='Krt18' | GeneSymbol=='Qpct' | GeneSymbol=='Lnx1' | GeneSymbol=='Cyb561' | GeneSymbol=='Spsb4')

rownames(hm_dm2_both_tab_Creb) = hm_dm2_both_tab_Creb$GeneSymbol
hm_Creb_annot = data.frame("Sig" = hm_dm2_both_tab_Creb$significant)
rownames(hm_Creb_annot) = rownames(hm_dm2_both_tab_Creb)

hm_dm2_both_Creb <- pheatmap(hm_dm2_both_tab_Creb[2:10], cluster_rows = TRUE, cluster_cols = FALSE, scale = "row", labels_row = hm_dm2_both_tab_Creb$GeneSymbol, fontsize_row = 6, legend = TRUE, cellwidth=9, angle_col=45, fontsize_col=6, annotation_row=hm_Creb_annot, legend_labels = "Relative expression", main = "Creb1 pathway genes", labels_col = labels_col_hm, gaps_col=c(3,6), treeheight_row = 10, annotation_colors = ann_colors)

pdf(file="hm_dm2_both_Creb.pdf",width=6,height=8)
hm_dm2_both_Creb
dev.off()


#### -- #### -- #### -- #### -- #### -- #### -- 

#### -- make time-course figures using mfn1- data from dm2, dm0, dp3, and dp8

library(tidyverse)
library(reshape2)

m1_dm2_counts <- read_csv("m1_dm2_norm_counts_gsea.csv")
m1_dm2_counts <- m1_dm2_counts %>% select(1:7)
colnames(m1_dm2_counts) <- c('GeneSymbol', 'WT_dm2_A', 'WT_dm2_B', 'WT_dm2_C', 'm1_dm2_A', 'm1_dm2_B', 'm1_dm2_C')
m1_dm0_counts <- read_csv("m1_dm0_norm_counts_gsea.csv")
m1_dm0_counts <- m1_dm0_counts %>% select(1:7)
colnames(m1_dm0_counts) <- c('GeneSymbol', 'WT_dm0_A', 'WT_dm0_B', 'WT_dm0_C', 'm1_dm0_A', 'm1_dm0_B', 'm1_dm0_C')
m1_dp3_counts <- read_csv("m1_dp3_norm_counts_gsea.csv")
m1_dp3_counts <- m1_dp3_counts %>% select(1:7)
colnames(m1_dp3_counts) <- c('GeneSymbol', 'WT_dp3_A', 'WT_dp3_B', 'WT_dp3_C', 'm1_dp3_A', 'm1_dp3_B', 'm1_dp3_C')
m1_dp8_counts <- read_csv("m1_dp8_norm_counts_gsea.csv")
m1_dp8_counts <- m1_dp8_counts %>% select(1:7)
colnames(m1_dp8_counts) <- c('GeneSymbol', 'WT_dp8_A', 'WT_dp8_B', 'WT_dp8_C', 'm1_dp8_A', 'm1_dp8_B', 'm1_dp8_C')

m1_sumtable <- merge(m1_dm2_counts, m1_dm0_counts, by="GeneSymbol")
m1_sumtable <- merge(m1_sumtable, m1_dp3_counts, by="GeneSymbol")
m1_sumtable <- merge(m1_sumtable, m1_dp8_counts, by="GeneSymbol")

## summarise data function

data_summary <- function(data, varname, groupnames){
  require(plyr)
  summary_func <- function(x, col){
    c(mean = mean(x[[col]], na.rm=TRUE),
      sd = sd(x[[col]], na.rm=TRUE))
  }
  data_sum<-ddply(data, groupnames, .fun=summary_func,
                  varname)
  data_sum <- rename(data_sum, c("mean" = varname))
 return(data_sum)
}

facet.labs <- c("Wild-type", "Mfn1-/-")
names(facet.labs) <- c("WT", "m1")


## filter for a specific gene then annotate and get ready for figure

## Pparg
Pparg_dm2 = subset(m1_dm2_counts, GeneSymbol=="Pparg")
Pparg_dm2_melt <- melt(Pparg_dm2)
Pparg_dm2_melt$day = "-2"
Pparg_dm2_melt$group <- substr(Pparg_dm2_melt$variable, start = 1, stop = 2)
Pparg_dm0 = subset(m1_dm0_counts, GeneSymbol=="Pparg")
Pparg_dm0_melt <- melt(Pparg_dm0)
Pparg_dm0_melt$day = "0"
Pparg_dm0_melt$group <- substr(Pparg_dm0_melt$variable, start = 1, stop = 2)
Pparg_dp3 = subset(m1_dp3_counts, GeneSymbol=="Pparg")
Pparg_dp3_melt <- melt(Pparg_dp3)
Pparg_dp3_melt$day = "3"
Pparg_dp3_melt$group <- substr(Pparg_dp3_melt$variable, start = 1, stop = 2)
Pparg_dp8 = subset(m1_dp8_counts, GeneSymbol=="Pparg")
Pparg_dp8_melt <- melt(Pparg_dp8)
Pparg_dp8_melt$day = "8"
Pparg_dp8_melt$group <- substr(Pparg_dp8_melt$variable, start = 1, stop = 2)

Pparg_sumtab <- rbind(Pparg_dm2_melt, Pparg_dm0_melt, Pparg_dp3_melt, Pparg_dp8_melt)
Pparg_sumtab$group <- factor(Pparg_sumtab$group, levels = c("WT", "m1"))
Pparg_sumtab$day <- factor(Pparg_sumtab$day, levels = c("-2", "0", "3", "8"))

Pparg_sum <- data_summary(Pparg_sumtab, varname="value", groupnames=c("group", "day"))
Pparg_sum$group <- factor(Pparg_sum$group, levels = c("WT", "m1"))
Pparg_sum$n = as.numeric("3")
Pparg_sum$se = Pparg_sum$sd/sqrt(Pparg_sum$n)
Pparg_sumtab$group <- factor(Pparg_sumtab$group, levels = c("WT", "m1"))

Pparg_fig <- ggplot(data=Pparg_sum, aes(x=day, y=value)) + geom_bar(aes(fill=group), stat="identity", color="black", position=position_dodge(), show.legend = FALSE) + geom_point(stroke=0.7, shape=21, data=Pparg_sumtab, aes(x=day, y=value, colour=group), fill="white", size=2.3, alpha=0.9, show.legend=FALSE, position=position_jitterdodge(jitter.width = .2, dodge.width = .9)) + geom_errorbar(aes(group = group, ymin=value-sd, ymax= value+sd), color="black", width=.2, size=.6, position=position_dodge(.9)) + facet_wrap(~group,labeller = labeller(group = facet.labs), strip.position = "top") + theme_classic() + xlab("Day of adipogenic differentiation") + ylab("Normalised\n counts") + scale_fill_manual(values = c("#999999", "#E69F00")) + scale_colour_manual(values = c("black", "black")) + ggtitle("Pparg") + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(size=10,colour="black"), axis.title.y=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), axis.title.x=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), strip.text.x = element_text(size=12, color="black",face="bold")) + scale_y_continuous(labels = scales::comma, expand = c(0,0), breaks = seq(0, 2500, 500), limits=c(0, 2500))

pdf(file="Pparg_fig.pdf",width=8,height=2)
Pparg_fig
dev.off()

## Cebpa
Cebpa_dm2 = subset(m1_dm2_counts, GeneSymbol=="Cebpa")
Cebpa_dm2_melt <- melt(Cebpa_dm2)
Cebpa_dm2_melt$day = "-2"
Cebpa_dm2_melt$group <- substr(Cebpa_dm2_melt$variable, start = 1, stop = 2)
Cebpa_dm0 = subset(m1_dm0_counts, GeneSymbol=="Cebpa")
Cebpa_dm0_melt <- melt(Cebpa_dm0)
Cebpa_dm0_melt$day = "0"
Cebpa_dm0_melt$group <- substr(Cebpa_dm0_melt$variable, start = 1, stop = 2)
Cebpa_dp3 = subset(m1_dp3_counts, GeneSymbol=="Cebpa")
Cebpa_dp3_melt <- melt(Cebpa_dp3)
Cebpa_dp3_melt$day = "3"
Cebpa_dp3_melt$group <- substr(Cebpa_dp3_melt$variable, start = 1, stop = 2)
Cebpa_dp8 = subset(m1_dp8_counts, GeneSymbol=="Cebpa")
Cebpa_dp8_melt <- melt(Cebpa_dp8)
Cebpa_dp8_melt$day = "8"
Cebpa_dp8_melt$group <- substr(Cebpa_dp8_melt$variable, start = 1, stop = 2)

Cebpa_sumtab <- rbind(Cebpa_dm2_melt, Cebpa_dm0_melt, Cebpa_dp3_melt, Cebpa_dp8_melt)
Cebpa_sumtab$group <- factor(Cebpa_sumtab$group, levels = c("WT", "m1"))
Cebpa_sumtab$day <- factor(Cebpa_sumtab$day, levels = c("-2", "0", "3", "8"))

Cebpa_sum <- data_summary(Cebpa_sumtab, varname="value", groupnames=c("group", "day"))
Cebpa_sum$group <- factor(Cebpa_sum$group, levels = c("WT", "m1"))
Cebpa_sum$n = as.numeric("3")
Cebpa_sum$se = Cebpa_sum$sd/sqrt(Cebpa_sum$n)
Cebpa_sumtab$group <- factor(Cebpa_sumtab$group, levels = c("WT", "m1"))

Cebpa_fig <- ggplot(data=Cebpa_sum, aes(x=day, y=value)) + geom_bar(aes(fill=group), stat="identity", color="black", position=position_dodge(), show.legend = FALSE) + geom_point(stroke=0.7, shape=21, data=Cebpa_sumtab, aes(x=day, y=value, colour=group), fill="white", size=2.3, alpha=0.9, show.legend=FALSE, position=position_jitterdodge(jitter.width = .2, dodge.width = .9)) + geom_errorbar(aes(group = group, ymin=value-sd, ymax= value+sd), color="black", width=.2, size=.6, position=position_dodge(.9)) + facet_wrap(~group,labeller = labeller(group = facet.labs), strip.position = "top") + theme_classic() + xlab("Day of adipogenic differentiation") + ylab("Normalised\n counts") + scale_fill_manual(values = c("#999999", "#E69F00")) + scale_colour_manual(values = c("black", "black")) + ggtitle("Cebpa") + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(size=10,colour="black"), axis.title.y=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), axis.title.x=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), strip.background=element_blank(), strip.text.x = element_blank()) + scale_y_continuous(labels = scales::comma, expand = c(0,0), breaks = seq(0, 3500, 500), limits=c(0, 3500))

pdf(file="Cebpa_fig.pdf",width=8,height=2)
Cebpa_fig
dev.off()

## Cebpb
Cebpb_dm2 = subset(m1_dm2_counts, GeneSymbol=="Cebpb")
Cebpb_dm2_melt <- melt(Cebpb_dm2)
Cebpb_dm2_melt$day = "-2"
Cebpb_dm2_melt$group <- substr(Cebpb_dm2_melt$variable, start = 1, stop = 2)
Cebpb_dm0 = subset(m1_dm0_counts, GeneSymbol=="Cebpb")
Cebpb_dm0_melt <- melt(Cebpb_dm0)
Cebpb_dm0_melt$day = "0"
Cebpb_dm0_melt$group <- substr(Cebpb_dm0_melt$variable, start = 1, stop = 2)
Cebpb_dp3 = subset(m1_dp3_counts, GeneSymbol=="Cebpb")
Cebpb_dp3_melt <- melt(Cebpb_dp3)
Cebpb_dp3_melt$day = "3"
Cebpb_dp3_melt$group <- substr(Cebpb_dp3_melt$variable, start = 1, stop = 2)
Cebpb_dp8 = subset(m1_dp8_counts, GeneSymbol=="Cebpb")
Cebpb_dp8_melt <- melt(Cebpb_dp8)
Cebpb_dp8_melt$day = "8"
Cebpb_dp8_melt$group <- substr(Cebpb_dp8_melt$variable, start = 1, stop = 2)

Cebpb_sumtab <- rbind(Cebpb_dm2_melt, Cebpb_dm0_melt, Cebpb_dp3_melt, Cebpb_dp8_melt)
Cebpb_sumtab$group <- factor(Cebpb_sumtab$group, levels = c("WT", "m1"))
Cebpb_sumtab$day <- factor(Cebpb_sumtab$day, levels = c("-2", "0", "3", "8"))

Cebpb_sum <- data_summary(Cebpb_sumtab, varname="value", groupnames=c("group", "day"))
Cebpb_sum$group <- factor(Cebpb_sum$group, levels = c("WT", "m1"))
Cebpb_sum$n = as.numeric("3")
Cebpb_sum$se = Cebpb_sum$sd/sqrt(Cebpb_sum$n)
Cebpb_sumtab$group <- factor(Cebpb_sumtab$group, levels = c("WT", "m1"))

Cebpb_fig <- ggplot(data=Cebpb_sum, aes(x=day, y=value)) + geom_bar(aes(fill=group), stat="identity", color="black", position=position_dodge(), show.legend = FALSE) + geom_point(stroke=0.7, shape=21, data=Cebpb_sumtab, aes(x=day, y=value, colour=group), fill="white", size=2.3, alpha=0.9, show.legend=FALSE, position=position_jitterdodge(jitter.width = .2, dodge.width = .9)) + geom_errorbar(aes(group = group, ymin=value-sd, ymax= value+sd), color="black", width=.2, size=.6, position=position_dodge(.9)) + facet_wrap(~group,labeller = labeller(group = facet.labs), strip.position = "top") + theme_classic() + xlab("Day of adipogenic differentiation") + ylab("Normalised\n counts") + scale_fill_manual(values = c("#999999", "#E69F00")) + scale_colour_manual(values = c("black", "black")) + ggtitle("Cebpb") + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(size=10,colour="black"), axis.title.y=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), axis.title.x=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), strip.background=element_blank(), strip.text.x = element_blank()) + scale_y_continuous(labels = scales::comma, expand = c(0,0), breaks = seq(0, 1500, 500), limits=c(0, 1500))

pdf(file="Cebpb_fig.pdf",width=8,height=2)
Cebpb_fig
dev.off()


## Zfp521
Zfp521_dm2 = subset(m1_dm2_counts, GeneSymbol=="Zfp521")
Zfp521_dm2_melt <- melt(Zfp521_dm2)
Zfp521_dm2_melt$day = "-2"
Zfp521_dm2_melt$group <- substr(Zfp521_dm2_melt$variable, start = 1, stop = 2)
Zfp521_dm0 = subset(m1_dm0_counts, GeneSymbol=="Zfp521")
Zfp521_dm0_melt <- melt(Zfp521_dm0)
Zfp521_dm0_melt$day = "0"
Zfp521_dm0_melt$group <- substr(Zfp521_dm0_melt$variable, start = 1, stop = 2)
Zfp521_dp3 = subset(m1_dp3_counts, GeneSymbol=="Zfp521")
Zfp521_dp3_melt <- melt(Zfp521_dp3)
Zfp521_dp3_melt$day = "3"
Zfp521_dp3_melt$group <- substr(Zfp521_dp3_melt$variable, start = 1, stop = 2)
Zfp521_dp8 = subset(m1_dp8_counts, GeneSymbol=="Zfp521")
Zfp521_dp8_melt <- melt(Zfp521_dp8)
Zfp521_dp8_melt$day = "8"
Zfp521_dp8_melt$group <- substr(Zfp521_dp8_melt$variable, start = 1, stop = 2)

Zfp521_sumtab <- rbind(Zfp521_dm2_melt, Zfp521_dm0_melt, Zfp521_dp3_melt, Zfp521_dp8_melt)
Zfp521_sumtab$group <- factor(Zfp521_sumtab$group, levels = c("WT", "m1"))
Zfp521_sumtab$day <- factor(Zfp521_sumtab$day, levels = c("-2", "0", "3", "8"))

Zfp521_sum <- data_summary(Zfp521_sumtab, varname="value", groupnames=c("group", "day"))
Zfp521_sum$group <- factor(Zfp521_sum$group, levels = c("WT", "m1"))
Zfp521_sum$n = as.numeric("3")
Zfp521_sum$se = Zfp521_sum$sd/sqrt(Zfp521_sum$n)
Zfp521_sumtab$group <- factor(Zfp521_sumtab$group, levels = c("WT", "m1"))

Zfp521_fig <- ggplot(data=Zfp521_sum, aes(x=day, y=value)) + geom_bar(aes(fill=group), stat="identity", color="black", position=position_dodge(), show.legend = FALSE) + geom_point(stroke=0.7, shape=21, data=Zfp521_sumtab, aes(x=day, y=value, colour=group), fill="white", size=2.3, alpha=0.9, show.legend=FALSE, position=position_jitterdodge(jitter.width = .2, dodge.width = .9)) + geom_errorbar(aes(group = group, ymin=value-sd, ymax= value+sd), color="black", width=.2, size=.6, position=position_dodge(.9)) + facet_wrap(~group,labeller = labeller(group = facet.labs), strip.position = "top") + theme_classic() + xlab("Day of adipogenic differentiation") + ylab("Normalised\n counts") + scale_fill_manual(values = c("#999999", "#E69F00")) + scale_colour_manual(values = c("black", "black")) + ggtitle("Zfp521") + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(size=10,colour="black"), axis.title.y=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), axis.title.x=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), strip.background=element_blank(), strip.text.x = element_blank()) + scale_y_continuous(labels = scales::comma, expand = c(0,0), breaks = seq(0, 5000, 1000), limits=c(0, 5000))

pdf(file="Zfp521_fig.pdf",width=8,height=2)
Zfp521_fig
dev.off()

## Klf4
Klf4_dm2 = subset(m1_dm2_counts, GeneSymbol=="Klf4")
Klf4_dm2_melt <- melt(Klf4_dm2)
Klf4_dm2_melt$day = "-2"
Klf4_dm2_melt$group <- substr(Klf4_dm2_melt$variable, start = 1, stop = 2)
Klf4_dm0 = subset(m1_dm0_counts, GeneSymbol=="Klf4")
Klf4_dm0_melt <- melt(Klf4_dm0)
Klf4_dm0_melt$day = "0"
Klf4_dm0_melt$group <- substr(Klf4_dm0_melt$variable, start = 1, stop = 2)
Klf4_dp3 = subset(m1_dp3_counts, GeneSymbol=="Klf4")
Klf4_dp3_melt <- melt(Klf4_dp3)
Klf4_dp3_melt$day = "3"
Klf4_dp3_melt$group <- substr(Klf4_dp3_melt$variable, start = 1, stop = 2)
Klf4_dp8 = subset(m1_dp8_counts, GeneSymbol=="Klf4")
Klf4_dp8_melt <- melt(Klf4_dp8)
Klf4_dp8_melt$day = "8"
Klf4_dp8_melt$group <- substr(Klf4_dp8_melt$variable, start = 1, stop = 2)

Klf4_sumtab <- rbind(Klf4_dm2_melt, Klf4_dm0_melt, Klf4_dp3_melt, Klf4_dp8_melt)
Klf4_sumtab$group <- factor(Klf4_sumtab$group, levels = c("WT", "m1"))
Klf4_sumtab$day <- factor(Klf4_sumtab$day, levels = c("-2", "0", "3", "8"))

Klf4_sum <- data_summary(Klf4_sumtab, varname="value", groupnames=c("group", "day"))
Klf4_sum$group <- factor(Klf4_sum$group, levels = c("WT", "m1"))
Klf4_sum$n = as.numeric("3")
Klf4_sum$se = Klf4_sum$sd/sqrt(Klf4_sum$n)
Klf4_sumtab$group <- factor(Klf4_sumtab$group, levels = c("WT", "m1"))

Klf4_fig <- ggplot(data=Klf4_sum, aes(x=day, y=value)) + geom_bar(aes(fill=group), stat="identity", color="black", position=position_dodge(), show.legend = FALSE) + geom_point(stroke=0.7, shape=21, data=Klf4_sumtab, aes(x=day, y=value, colour=group), fill="white", size=2.3, alpha=0.9, show.legend=FALSE, position=position_jitterdodge(jitter.width = .2, dodge.width = .9)) + geom_errorbar(aes(group = group, ymin=value-sd, ymax= value+sd), color="black", width=.2, size=.6, position=position_dodge(.9)) + facet_wrap(~group,labeller = labeller(group = facet.labs), strip.position = "top") + theme_classic() + xlab("Day of adipogenic differentiation") + ylab("Normalised\n counts") + scale_fill_manual(values = c("#999999", "#E69F00")) + scale_colour_manual(values = c("black", "black")) + ggtitle("Klf4") + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(size=10,colour="black"), axis.title.y=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), axis.title.x=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), strip.background=element_blank(), strip.text.x = element_blank()) + scale_y_continuous(labels = scales::comma, expand = c(0,0), breaks = seq(0, 1250, 250), limits=c(0, 1250))

pdf(file="Klf4_fig.pdf",width=8,height=2)
Klf4_fig
dev.off()

## Ebf1
Ebf1_dm2 = subset(m1_dm2_counts, GeneSymbol=="Ebf1")
Ebf1_dm2_melt <- melt(Ebf1_dm2)
Ebf1_dm2_melt$day = "-2"
Ebf1_dm2_melt$group <- substr(Ebf1_dm2_melt$variable, start = 1, stop = 2)
Ebf1_dm0 = subset(m1_dm0_counts, GeneSymbol=="Ebf1")
Ebf1_dm0_melt <- melt(Ebf1_dm0)
Ebf1_dm0_melt$day = "0"
Ebf1_dm0_melt$group <- substr(Ebf1_dm0_melt$variable, start = 1, stop = 2)
Ebf1_dp3 = subset(m1_dp3_counts, GeneSymbol=="Ebf1")
Ebf1_dp3_melt <- melt(Ebf1_dp3)
Ebf1_dp3_melt$day = "3"
Ebf1_dp3_melt$group <- substr(Ebf1_dp3_melt$variable, start = 1, stop = 2)
Ebf1_dp8 = subset(m1_dp8_counts, GeneSymbol=="Ebf1")
Ebf1_dp8_melt <- melt(Ebf1_dp8)
Ebf1_dp8_melt$day = "8"
Ebf1_dp8_melt$group <- substr(Ebf1_dp8_melt$variable, start = 1, stop = 2)

Ebf1_sumtab <- rbind(Ebf1_dm2_melt, Ebf1_dm0_melt, Ebf1_dp3_melt, Ebf1_dp8_melt)
Ebf1_sumtab$group <- factor(Ebf1_sumtab$group, levels = c("WT", "m1"))
Ebf1_sumtab$day <- factor(Ebf1_sumtab$day, levels = c("-2", "0", "3", "8"))

Ebf1_sum <- data_summary(Ebf1_sumtab, varname="value", groupnames=c("group", "day"))
Ebf1_sum$group <- factor(Ebf1_sum$group, levels = c("WT", "m1"))
Ebf1_sum$n = as.numeric("3")
Ebf1_sum$se = Ebf1_sum$sd/sqrt(Ebf1_sum$n)
Ebf1_sumtab$group <- factor(Ebf1_sumtab$group, levels = c("WT", "m1"))

Ebf1_fig <- ggplot(data=Ebf1_sum, aes(x=day, y=value)) + geom_bar(aes(fill=group), stat="identity", color="black", position=position_dodge(), show.legend = FALSE) + geom_point(stroke=0.7, shape=21, data=Ebf1_sumtab, aes(x=day, y=value, colour=group), fill="white", size=2.3, alpha=0.9, show.legend=FALSE, position=position_jitterdodge(jitter.width = .2, dodge.width = .9)) + geom_errorbar(aes(group = group, ymin=value-sd, ymax= value+sd), color="black", width=.2, size=.6, position=position_dodge(.9)) + facet_wrap(~group,labeller = labeller(group = facet.labs), strip.position = "top") + theme_classic() + xlab("Day of adipogenic differentiation") + ylab("Normalised\n counts") + scale_fill_manual(values = c("#999999", "#E69F00")) + scale_colour_manual(values = c("black", "black")) + ggtitle("Ebf1") + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(size=10,colour="black"), axis.title.y=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), axis.title.x=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), strip.background=element_blank(), strip.text.x = element_blank()) + scale_y_continuous(labels = scales::comma, expand = c(0,0), breaks = seq(0, 900, 100), limits=c(0, 900))

pdf(file="Ebf1_fig.pdf",width=8,height=2)
Ebf1_fig
dev.off()

## Zfp467
Zfp467_dm2 = subset(m1_dm2_counts, GeneSymbol=="Zfp467")
Zfp467_dm2_melt <- melt(Zfp467_dm2)
Zfp467_dm2_melt$day = "-2"
Zfp467_dm2_melt$group <- substr(Zfp467_dm2_melt$variable, start = 1, stop = 2)
Zfp467_dm0 = subset(m1_dm0_counts, GeneSymbol=="Zfp467")
Zfp467_dm0_melt <- melt(Zfp467_dm0)
Zfp467_dm0_melt$day = "0"
Zfp467_dm0_melt$group <- substr(Zfp467_dm0_melt$variable, start = 1, stop = 2)
Zfp467_dp3 = subset(m1_dp3_counts, GeneSymbol=="Zfp467")
Zfp467_dp3_melt <- melt(Zfp467_dp3)
Zfp467_dp3_melt$day = "3"
Zfp467_dp3_melt$group <- substr(Zfp467_dp3_melt$variable, start = 1, stop = 2)
Zfp467_dp8 = subset(m1_dp8_counts, GeneSymbol=="Zfp467")
Zfp467_dp8_melt <- melt(Zfp467_dp8)
Zfp467_dp8_melt$day = "8"
Zfp467_dp8_melt$group <- substr(Zfp467_dp8_melt$variable, start = 1, stop = 2)

Zfp467_sumtab <- rbind(Zfp467_dm2_melt, Zfp467_dm0_melt, Zfp467_dp3_melt, Zfp467_dp8_melt)
Zfp467_sumtab$group <- factor(Zfp467_sumtab$group, levels = c("WT", "m1"))
Zfp467_sumtab$day <- factor(Zfp467_sumtab$day, levels = c("-2", "0", "3", "8"))

Zfp467_sum <- data_summary(Zfp467_sumtab, varname="value", groupnames=c("group", "day"))
Zfp467_sum$group <- factor(Zfp467_sum$group, levels = c("WT", "m1"))
Zfp467_sum$n = as.numeric("3")
Zfp467_sum$se = Zfp467_sum$sd/sqrt(Zfp467_sum$n)
Zfp467_sumtab$group <- factor(Zfp467_sumtab$group, levels = c("WT", "m1"))

Zfp467_fig <- ggplot(data=Zfp467_sum, aes(x=day, y=value)) + geom_bar(aes(fill=group), stat="identity", color="black", position=position_dodge(), show.legend = FALSE) + geom_point(stroke=0.7, shape=21, data=Zfp467_sumtab, aes(x=day, y=value, colour=group), fill="white", size=2.3, alpha=0.9, show.legend=FALSE, position=position_jitterdodge(jitter.width = .2, dodge.width = .9)) + geom_errorbar(aes(group = group, ymin=value-sd, ymax= value+sd), color="black", width=.2, size=.6, position=position_dodge(.9)) + facet_wrap(~group,labeller = labeller(group = facet.labs), strip.position = "top") + theme_classic() + xlab("Day of adipogenic differentiation") + ylab("Normalised\n counts") + scale_fill_manual(values = c("#999999", "#E69F00")) + scale_colour_manual(values = c("black", "black")) + ggtitle("Zfp467") + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(size=10,colour="black"), axis.title.y=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), axis.title.x=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), strip.background=element_blank(), strip.text.x = element_blank()) + scale_y_continuous(labels = scales::comma, expand = c(0,0), breaks = seq(0, 700, 100), limits=c(0, 700))

pdf(file="Zfp467_fig.pdf",width=8,height=2)
Zfp467_fig
dev.off()

## Klf15
Klf15_dm2 = subset(m1_dm2_counts, GeneSymbol=="Klf15")
Klf15_dm2_melt <- melt(Klf15_dm2)
Klf15_dm2_melt$day = "-2"
Klf15_dm2_melt$group <- substr(Klf15_dm2_melt$variable, start = 1, stop = 2)
Klf15_dm0 = subset(m1_dm0_counts, GeneSymbol=="Klf15")
Klf15_dm0_melt <- melt(Klf15_dm0)
Klf15_dm0_melt$day = "0"
Klf15_dm0_melt$group <- substr(Klf15_dm0_melt$variable, start = 1, stop = 2)
Klf15_dp3 = subset(m1_dp3_counts, GeneSymbol=="Klf15")
Klf15_dp3_melt <- melt(Klf15_dp3)
Klf15_dp3_melt$day = "3"
Klf15_dp3_melt$group <- substr(Klf15_dp3_melt$variable, start = 1, stop = 2)
Klf15_dp8 = subset(m1_dp8_counts, GeneSymbol=="Klf15")
Klf15_dp8_melt <- melt(Klf15_dp8)
Klf15_dp8_melt$day = "8"
Klf15_dp8_melt$group <- substr(Klf15_dp8_melt$variable, start = 1, stop = 2)

Klf15_sumtab <- rbind(Klf15_dm2_melt, Klf15_dm0_melt, Klf15_dp3_melt, Klf15_dp8_melt)
Klf15_sumtab$group <- factor(Klf15_sumtab$group, levels = c("WT", "m1"))
Klf15_sumtab$day <- factor(Klf15_sumtab$day, levels = c("-2", "0", "3", "8"))

Klf15_sum <- data_summary(Klf15_sumtab, varname="value", groupnames=c("group", "day"))
Klf15_sum$group <- factor(Klf15_sum$group, levels = c("WT", "m1"))
Klf15_sum$n = as.numeric("3")
Klf15_sum$se = Klf15_sum$sd/sqrt(Klf15_sum$n)
Klf15_sumtab$group <- factor(Klf15_sumtab$group, levels = c("WT", "m1"))

Klf15_fig <- ggplot(data=Klf15_sum, aes(x=day, y=value)) + geom_bar(aes(fill=group), stat="identity", color="black", position=position_dodge(), show.legend = FALSE) + geom_point(stroke=0.7, shape=21, data=Klf15_sumtab, aes(x=day, y=value, colour=group), fill="white", size=2.3, alpha=0.9, show.legend=FALSE, position=position_jitterdodge(jitter.width = .2, dodge.width = .9)) + geom_errorbar(aes(group = group, ymin=value-sd, ymax= value+sd), color="black", width=.2, size=.6, position=position_dodge(.9)) + facet_wrap(~group,labeller = labeller(group = facet.labs), strip.position = "top") + theme_classic() + xlab("Day of adipogenic differentiation") + ylab("Normalised\n counts") + scale_fill_manual(values = c("#999999", "#E69F00")) + scale_colour_manual(values = c("black", "black")) + ggtitle("Klf15") + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(size=10,colour="black"), axis.title.y=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), axis.title.x=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), strip.background=element_blank(), strip.text.x = element_blank()) + scale_y_continuous(labels = scales::comma, expand = c(0,0), breaks = seq(0, 700, 100), limits=c(0, 700))

pdf(file="Klf15_fig.pdf",width=8,height=2)
Klf15_fig
dev.off()








## Lpl
Lpl_dm2 = subset(m1_dm2_counts, GeneSymbol=="Lpl")
Lpl_dm2_melt <- melt(Lpl_dm2)
Lpl_dm2_melt$day = "-2"
Lpl_dm2_melt$group <- substr(Lpl_dm2_melt$variable, start = 1, stop = 2)
Lpl_dm0 = subset(m1_dm0_counts, GeneSymbol=="Lpl")
Lpl_dm0_melt <- melt(Lpl_dm0)
Lpl_dm0_melt$day = "0"
Lpl_dm0_melt$group <- substr(Lpl_dm0_melt$variable, start = 1, stop = 2)
Lpl_dp3 = subset(m1_dp3_counts, GeneSymbol=="Lpl")
Lpl_dp3_melt <- melt(Lpl_dp3)
Lpl_dp3_melt$day = "3"
Lpl_dp3_melt$group <- substr(Lpl_dp3_melt$variable, start = 1, stop = 2)
Lpl_dp8 = subset(m1_dp8_counts, GeneSymbol=="Lpl")
Lpl_dp8_melt <- melt(Lpl_dp8)
Lpl_dp8_melt$day = "8"
Lpl_dp8_melt$group <- substr(Lpl_dp8_melt$variable, start = 1, stop = 2)

Lpl_sumtab <- rbind(Lpl_dm2_melt, Lpl_dm0_melt, Lpl_dp3_melt, Lpl_dp8_melt)
Lpl_sumtab$group <- factor(Lpl_sumtab$group, levels = c("WT", "m1"))
Lpl_sumtab$day <- factor(Lpl_sumtab$day, levels = c("-2", "0", "3", "8"))

Lpl_sum <- data_summary(Lpl_sumtab, varname="value", groupnames=c("group", "day"))
Lpl_sum$group <- factor(Lpl_sum$group, levels = c("WT", "m1"))
Lpl_sum$n = as.numeric("3")
Lpl_sum$se = Lpl_sum$sd/sqrt(Lpl_sum$n)
Lpl_sumtab$group <- factor(Lpl_sumtab$group, levels = c("WT", "m1"))

Lpl_fig <- ggplot(data=Lpl_sum, aes(x=day, y=value)) + geom_bar(aes(fill=group), stat="identity", color="black", position=position_dodge(), show.legend = FALSE) + geom_point(stroke=0.7, shape=21, data=Lpl_sumtab, aes(x=day, y=value, colour=group), fill="white", size=2.3, alpha=0.9, show.legend=FALSE, position=position_jitterdodge(jitter.width = .2, dodge.width = .9)) + geom_errorbar(aes(group = group, ymin=value-sd, ymax= value+sd), color="black", width=.2, size=.6, position=position_dodge(.9)) + facet_wrap(~group,labeller = labeller(group = facet.labs), strip.position = "top") + theme_classic() + xlab("Day of adipogenic differentiation") + ylab("Normalised\n counts") + scale_fill_manual(values = c("#999999", "#E69F00")) + scale_colour_manual(values = c("black", "black")) + ggtitle("Lpl") + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(size=10,colour="black"), axis.title.y=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), axis.title.x=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), strip.text.x = element_text(size=12, color="black",face="bold"))
# + scale_y_continuous(labels = scales::comma, expand = c(0,0), breaks = seq(0, 2500, 500), limits=c(0, 2500))

pdf(file="Lpl_fig.pdf",width=8,height=2)
Lpl_fig
dev.off()


## Apoe
Apoe_dm2 = subset(m1_dm2_counts, GeneSymbol=="Apoe")
Apoe_dm2_melt <- melt(Apoe_dm2)
Apoe_dm2_melt$day = "-2"
Apoe_dm2_melt$group <- substr(Apoe_dm2_melt$variable, start = 1, stop = 2)
Apoe_dm0 = subset(m1_dm0_counts, GeneSymbol=="Apoe")
Apoe_dm0_melt <- melt(Apoe_dm0)
Apoe_dm0_melt$day = "0"
Apoe_dm0_melt$group <- substr(Apoe_dm0_melt$variable, start = 1, stop = 2)
Apoe_dp3 = subset(m1_dp3_counts, GeneSymbol=="Apoe")
Apoe_dp3_melt <- melt(Apoe_dp3)
Apoe_dp3_melt$day = "3"
Apoe_dp3_melt$group <- substr(Apoe_dp3_melt$variable, start = 1, stop = 2)
Apoe_dp8 = subset(m1_dp8_counts, GeneSymbol=="Apoe")
Apoe_dp8_melt <- melt(Apoe_dp8)
Apoe_dp8_melt$day = "8"
Apoe_dp8_melt$group <- substr(Apoe_dp8_melt$variable, start = 1, stop = 2)

Apoe_sumtab <- rbind(Apoe_dm2_melt, Apoe_dm0_melt, Apoe_dp3_melt, Apoe_dp8_melt)
Apoe_sumtab$group <- factor(Apoe_sumtab$group, levels = c("WT", "m1"))
Apoe_sumtab$day <- factor(Apoe_sumtab$day, levels = c("-2", "0", "3", "8"))

Apoe_sum <- data_summary(Apoe_sumtab, varname="value", groupnames=c("group", "day"))
Apoe_sum$group <- factor(Apoe_sum$group, levels = c("WT", "m1"))
Apoe_sum$n = as.numeric("3")
Apoe_sum$se = Apoe_sum$sd/sqrt(Apoe_sum$n)
Apoe_sumtab$group <- factor(Apoe_sumtab$group, levels = c("WT", "m1"))

Apoe_fig <- ggplot(data=Apoe_sum, aes(x=day, y=value)) + geom_bar(aes(fill=group), stat="identity", color="black", position=position_dodge(), show.legend = FALSE) + geom_point(stroke=0.7, shape=21, data=Apoe_sumtab, aes(x=day, y=value, colour=group), fill="white", size=2.3, alpha=0.9, show.legend=FALSE, position=position_jitterdodge(jitter.width = .2, dodge.width = .9)) + geom_errorbar(aes(group = group, ymin=value-sd, ymax= value+sd), color="black", width=.2, size=.6, position=position_dodge(.9)) + facet_wrap(~group,labeller = labeller(group = facet.labs), strip.position = "top") + theme_classic() + xlab("Day of adipogenic differentiation") + ylab("Normalised\n counts") + scale_fill_manual(values = c("#999999", "#E69F00")) + scale_colour_manual(values = c("black", "black")) + ggtitle("Apoe") + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(size=10,colour="black"), axis.title.y=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), axis.title.x=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), strip.text.x = element_text(size=12, color="black",face="bold"))
# + scale_y_continuous(labels = scales::comma, expand = c(0,0), breaks = seq(0, 2500, 500), limits=c(0, 2500))

pdf(file="Apoe_fig.pdf",width=8,height=2)
Apoe_fig
dev.off()


## Slc2a4
Slc2a4_dm2 = subset(m1_dm2_counts, GeneSymbol=="Slc2a4")
Slc2a4_dm2_melt <- melt(Slc2a4_dm2)
Slc2a4_dm2_melt$day = "-2"
Slc2a4_dm2_melt$group <- substr(Slc2a4_dm2_melt$variable, start = 1, stop = 2)
Slc2a4_dm0 = subset(m1_dm0_counts, GeneSymbol=="Slc2a4")
Slc2a4_dm0_melt <- melt(Slc2a4_dm0)
Slc2a4_dm0_melt$day = "0"
Slc2a4_dm0_melt$group <- substr(Slc2a4_dm0_melt$variable, start = 1, stop = 2)
Slc2a4_dp3 = subset(m1_dp3_counts, GeneSymbol=="Slc2a4")
Slc2a4_dp3_melt <- melt(Slc2a4_dp3)
Slc2a4_dp3_melt$day = "3"
Slc2a4_dp3_melt$group <- substr(Slc2a4_dp3_melt$variable, start = 1, stop = 2)
Slc2a4_dp8 = subset(m1_dp8_counts, GeneSymbol=="Slc2a4")
Slc2a4_dp8_melt <- melt(Slc2a4_dp8)
Slc2a4_dp8_melt$day = "8"
Slc2a4_dp8_melt$group <- substr(Slc2a4_dp8_melt$variable, start = 1, stop = 2)

Slc2a4_sumtab <- rbind(Slc2a4_dm2_melt, Slc2a4_dm0_melt, Slc2a4_dp3_melt, Slc2a4_dp8_melt)
Slc2a4_sumtab$group <- factor(Slc2a4_sumtab$group, levels = c("WT", "m1"))
Slc2a4_sumtab$day <- factor(Slc2a4_sumtab$day, levels = c("-2", "0", "3", "8"))

Slc2a4_sum <- data_summary(Slc2a4_sumtab, varname="value", groupnames=c("group", "day"))
Slc2a4_sum$group <- factor(Slc2a4_sum$group, levels = c("WT", "m1"))
Slc2a4_sum$n = as.numeric("3")
Slc2a4_sum$se = Slc2a4_sum$sd/sqrt(Slc2a4_sum$n)
Slc2a4_sumtab$group <- factor(Slc2a4_sumtab$group, levels = c("WT", "m1"))

Slc2a4_fig <- ggplot(data=Slc2a4_sum, aes(x=day, y=value)) + geom_bar(aes(fill=group), stat="identity", color="black", position=position_dodge(), show.legend = FALSE) + geom_point(stroke=0.7, shape=21, data=Slc2a4_sumtab, aes(x=day, y=value, colour=group), fill="white", size=2.3, alpha=0.9, show.legend=FALSE, position=position_jitterdodge(jitter.width = .2, dodge.width = .9)) + geom_errorbar(aes(group = group, ymin=value-sd, ymax= value+sd), color="black", width=.2, size=.6, position=position_dodge(.9)) + facet_wrap(~group,labeller = labeller(group = facet.labs), strip.position = "top") + theme_classic() + xlab("Day of adipogenic differentiation") + ylab("Normalised\n counts") + scale_fill_manual(values = c("#999999", "#E69F00")) + scale_colour_manual(values = c("black", "black")) + ggtitle("Slc2a4") + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(size=10,colour="black"), axis.title.y=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), axis.title.x=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), strip.text.x = element_text(size=12, color="black",face="bold"))
# + scale_y_continuous(labels = scales::comma, expand = c(0,0), breaks = seq(0, 2500, 500), limits=c(0, 2500))

pdf(file="Slc2a4_fig.pdf",width=8,height=2)
Slc2a4_fig
dev.off()

## Ppargc1a
Ppargc1a_dm2 = subset(m1_dm2_counts, GeneSymbol=="Ppargc1a")
Ppargc1a_dm2_melt <- melt(Ppargc1a_dm2)
Ppargc1a_dm2_melt$day = "-2"
Ppargc1a_dm2_melt$group <- substr(Ppargc1a_dm2_melt$variable, start = 1, stop = 2)
Ppargc1a_dm0 = subset(m1_dm0_counts, GeneSymbol=="Ppargc1a")
Ppargc1a_dm0_melt <- melt(Ppargc1a_dm0)
Ppargc1a_dm0_melt$day = "0"
Ppargc1a_dm0_melt$group <- substr(Ppargc1a_dm0_melt$variable, start = 1, stop = 2)
Ppargc1a_dp3 = subset(m1_dp3_counts, GeneSymbol=="Ppargc1a")
Ppargc1a_dp3_melt <- melt(Ppargc1a_dp3)
Ppargc1a_dp3_melt$day = "3"
Ppargc1a_dp3_melt$group <- substr(Ppargc1a_dp3_melt$variable, start = 1, stop = 2)
Ppargc1a_dp8 = subset(m1_dp8_counts, GeneSymbol=="Ppargc1a")
Ppargc1a_dp8_melt <- melt(Ppargc1a_dp8)
Ppargc1a_dp8_melt$day = "8"
Ppargc1a_dp8_melt$group <- substr(Ppargc1a_dp8_melt$variable, start = 1, stop = 2)

Ppargc1a_sumtab <- rbind(Ppargc1a_dm2_melt, Ppargc1a_dm0_melt, Ppargc1a_dp3_melt, Ppargc1a_dp8_melt)
Ppargc1a_sumtab$group <- factor(Ppargc1a_sumtab$group, levels = c("WT", "m1"))
Ppargc1a_sumtab$day <- factor(Ppargc1a_sumtab$day, levels = c("-2", "0", "3", "8"))

Ppargc1a_sum <- data_summary(Ppargc1a_sumtab, varname="value", groupnames=c("group", "day"))
Ppargc1a_sum$group <- factor(Ppargc1a_sum$group, levels = c("WT", "m1"))
Ppargc1a_sum$n = as.numeric("3")
Ppargc1a_sum$se = Ppargc1a_sum$sd/sqrt(Ppargc1a_sum$n)
Ppargc1a_sumtab$group <- factor(Ppargc1a_sumtab$group, levels = c("WT", "m1"))

Ppargc1a_fig <- ggplot(data=Ppargc1a_sum, aes(x=day, y=value)) + geom_bar(aes(fill=group), stat="identity", color="black", position=position_dodge(), show.legend = FALSE) + geom_point(stroke=0.7, shape=21, data=Ppargc1a_sumtab, aes(x=day, y=value, colour=group), fill="white", size=2.3, alpha=0.9, show.legend=FALSE, position=position_jitterdodge(jitter.width = .2, dodge.width = .9)) + geom_errorbar(aes(group = group, ymin=value-sd, ymax= value+sd), color="black", width=.2, size=.6, position=position_dodge(.9)) + facet_wrap(~group,labeller = labeller(group = facet.labs), strip.position = "top") + theme_classic() + xlab("Day of adipogenic differentiation") + ylab("Normalised\n counts") + scale_fill_manual(values = c("#999999", "#E69F00")) + scale_colour_manual(values = c("black", "black")) + ggtitle("Ppargc1a") + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(size=10,colour="black"), axis.title.y=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), axis.title.x=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), strip.text.x = element_text(size=12, color="black",face="bold"))
# + scale_y_continuous(labels = scales::comma, expand = c(0,0), breaks = seq(0, 2500, 500), limits=c(0, 2500))

pdf(file="Ppargc1a_fig.pdf",width=8,height=2)
Ppargc1a_fig
dev.off()

## Srebf1
Srebf1_dm2 = subset(m1_dm2_counts, GeneSymbol=="Srebf1")
Srebf1_dm2_melt <- melt(Srebf1_dm2)
Srebf1_dm2_melt$day = "-2"
Srebf1_dm2_melt$group <- substr(Srebf1_dm2_melt$variable, start = 1, stop = 2)
Srebf1_dm0 = subset(m1_dm0_counts, GeneSymbol=="Srebf1")
Srebf1_dm0_melt <- melt(Srebf1_dm0)
Srebf1_dm0_melt$day = "0"
Srebf1_dm0_melt$group <- substr(Srebf1_dm0_melt$variable, start = 1, stop = 2)
Srebf1_dp3 = subset(m1_dp3_counts, GeneSymbol=="Srebf1")
Srebf1_dp3_melt <- melt(Srebf1_dp3)
Srebf1_dp3_melt$day = "3"
Srebf1_dp3_melt$group <- substr(Srebf1_dp3_melt$variable, start = 1, stop = 2)
Srebf1_dp8 = subset(m1_dp8_counts, GeneSymbol=="Srebf1")
Srebf1_dp8_melt <- melt(Srebf1_dp8)
Srebf1_dp8_melt$day = "8"
Srebf1_dp8_melt$group <- substr(Srebf1_dp8_melt$variable, start = 1, stop = 2)

Srebf1_sumtab <- rbind(Srebf1_dm2_melt, Srebf1_dm0_melt, Srebf1_dp3_melt, Srebf1_dp8_melt)
Srebf1_sumtab$group <- factor(Srebf1_sumtab$group, levels = c("WT", "m1"))
Srebf1_sumtab$day <- factor(Srebf1_sumtab$day, levels = c("-2", "0", "3", "8"))

Srebf1_sum <- data_summary(Srebf1_sumtab, varname="value", groupnames=c("group", "day"))
Srebf1_sum$group <- factor(Srebf1_sum$group, levels = c("WT", "m1"))
Srebf1_sum$n = as.numeric("3")
Srebf1_sum$se = Srebf1_sum$sd/sqrt(Srebf1_sum$n)
Srebf1_sumtab$group <- factor(Srebf1_sumtab$group, levels = c("WT", "m1"))

Srebf1_fig <- ggplot(data=Srebf1_sum, aes(x=day, y=value)) + geom_bar(aes(fill=group), stat="identity", color="black", position=position_dodge(), show.legend = FALSE) + geom_point(stroke=0.7, shape=21, data=Srebf1_sumtab, aes(x=day, y=value, colour=group), fill="white", size=2.3, alpha=0.9, show.legend=FALSE, position=position_jitterdodge(jitter.width = .2, dodge.width = .9)) + geom_errorbar(aes(group = group, ymin=value-sd, ymax= value+sd), color="black", width=.2, size=.6, position=position_dodge(.9)) + facet_wrap(~group,labeller = labeller(group = facet.labs), strip.position = "top") + theme_classic() + xlab("Day of adipogenic differentiation") + ylab("Normalised\n counts") + scale_fill_manual(values = c("#999999", "#E69F00")) + scale_colour_manual(values = c("black", "black")) + ggtitle("Srebf1") + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(size=10,colour="black"), axis.title.y=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), axis.title.x=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), strip.text.x = element_text(size=12, color="black",face="bold"))
# + scale_y_continuous(labels = scales::comma, expand = c(0,0), breaks = seq(0, 2500, 500), limits=c(0, 2500))

pdf(file="Srebf1_fig.pdf",width=8,height=2)
Srebf1_fig
dev.off()


## Zfp521
Zfp521_dm2 = subset(m1_dm2_counts, GeneSymbol=="Zfp521")
Zfp521_dm2_melt <- melt(Zfp521_dm2)
Zfp521_dm2_melt$day = "-2"
Zfp521_dm2_melt$group <- substr(Zfp521_dm2_melt$variable, start = 1, stop = 2)
Zfp521_dm0 = subset(m1_dm0_counts, GeneSymbol=="Zfp521")
Zfp521_dm0_melt <- melt(Zfp521_dm0)
Zfp521_dm0_melt$day = "0"
Zfp521_dm0_melt$group <- substr(Zfp521_dm0_melt$variable, start = 1, stop = 2)
Zfp521_dp3 = subset(m1_dp3_counts, GeneSymbol=="Zfp521")
Zfp521_dp3_melt <- melt(Zfp521_dp3)
Zfp521_dp3_melt$day = "3"
Zfp521_dp3_melt$group <- substr(Zfp521_dp3_melt$variable, start = 1, stop = 2)
Zfp521_dp8 = subset(m1_dp8_counts, GeneSymbol=="Zfp521")
Zfp521_dp8_melt <- melt(Zfp521_dp8)
Zfp521_dp8_melt$day = "8"
Zfp521_dp8_melt$group <- substr(Zfp521_dp8_melt$variable, start = 1, stop = 2)

Zfp521_sumtab <- rbind(Zfp521_dm2_melt, Zfp521_dm0_melt, Zfp521_dp3_melt, Zfp521_dp8_melt)
Zfp521_sumtab$group <- factor(Zfp521_sumtab$group, levels = c("WT", "m1"))
Zfp521_sumtab$day <- factor(Zfp521_sumtab$day, levels = c("-2", "0", "3", "8"))

Zfp521_sum <- data_summary(Zfp521_sumtab, varname="value", groupnames=c("group", "day"))
Zfp521_sum$group <- factor(Zfp521_sum$group, levels = c("WT", "m1"))
Zfp521_sum$n = as.numeric("3")
Zfp521_sum$se = Zfp521_sum$sd/sqrt(Zfp521_sum$n)
Zfp521_sumtab$group <- factor(Zfp521_sumtab$group, levels = c("WT", "m1"))

Zfp521_fig <- ggplot(data=Zfp521_sum, aes(x=day, y=value)) + geom_bar(aes(fill=group), stat="identity", color="black", position=position_dodge(), show.legend = FALSE) + geom_point(stroke=0.7, shape=21, data=Zfp521_sumtab, aes(x=day, y=value, colour=group), fill="white", size=2.3, alpha=0.9, show.legend=FALSE, position=position_jitterdodge(jitter.width = .2, dodge.width = .9)) + geom_errorbar(aes(group = group, ymin=value-sd, ymax= value+sd), color="black", width=.2, size=.6, position=position_dodge(.9)) + facet_wrap(~group,labeller = labeller(group = facet.labs), strip.position = "top") + theme_classic() + xlab("Day of adipogenic differentiation") + ylab("Normalised\n counts") + scale_fill_manual(values = c("#999999", "#E69F00")) + scale_colour_manual(values = c("black", "black")) + ggtitle("Zfp521") + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(size=10,colour="black"), axis.title.y=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), axis.title.x=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), strip.text.x = element_text(size=12, color="black",face="bold"))
# + scale_y_continuous(labels = scales::comma, expand = c(0,0), breaks = seq(0, 2500, 500), limits=c(0, 2500))

pdf(file="Zfp521_fig.pdf",width=8,height=2)
Zfp521_fig
dev.off()



## Zfp467
Zfp467_dm2 = subset(m1_dm2_counts, GeneSymbol=="Zfp467")
Zfp467_dm2_melt <- melt(Zfp467_dm2)
Zfp467_dm2_melt$day = "-2"
Zfp467_dm2_melt$group <- substr(Zfp467_dm2_melt$variable, start = 1, stop = 2)
Zfp467_dm0 = subset(m1_dm0_counts, GeneSymbol=="Zfp467")
Zfp467_dm0_melt <- melt(Zfp467_dm0)
Zfp467_dm0_melt$day = "0"
Zfp467_dm0_melt$group <- substr(Zfp467_dm0_melt$variable, start = 1, stop = 2)
Zfp467_dp3 = subset(m1_dp3_counts, GeneSymbol=="Zfp467")
Zfp467_dp3_melt <- melt(Zfp467_dp3)
Zfp467_dp3_melt$day = "3"
Zfp467_dp3_melt$group <- substr(Zfp467_dp3_melt$variable, start = 1, stop = 2)
Zfp467_dp8 = subset(m1_dp8_counts, GeneSymbol=="Zfp467")
Zfp467_dp8_melt <- melt(Zfp467_dp8)
Zfp467_dp8_melt$day = "8"
Zfp467_dp8_melt$group <- substr(Zfp467_dp8_melt$variable, start = 1, stop = 2)

Zfp467_sumtab <- rbind(Zfp467_dm2_melt, Zfp467_dm0_melt, Zfp467_dp3_melt, Zfp467_dp8_melt)
Zfp467_sumtab$group <- factor(Zfp467_sumtab$group, levels = c("WT", "m1"))
Zfp467_sumtab$day <- factor(Zfp467_sumtab$day, levels = c("-2", "0", "3", "8"))

Zfp467_sum <- data_summary(Zfp467_sumtab, varname="value", groupnames=c("group", "day"))
Zfp467_sum$group <- factor(Zfp467_sum$group, levels = c("WT", "m1"))
Zfp467_sum$n = as.numeric("3")
Zfp467_sum$se = Zfp467_sum$sd/sqrt(Zfp467_sum$n)
Zfp467_sumtab$group <- factor(Zfp467_sumtab$group, levels = c("WT", "m1"))

Zfp467_fig <- ggplot(data=Zfp467_sum, aes(x=day, y=value)) + geom_bar(aes(fill=group), stat="identity", color="black", position=position_dodge(), show.legend = FALSE) + geom_point(stroke=0.7, shape=21, data=Zfp467_sumtab, aes(x=day, y=value, colour=group), fill="white", size=2.3, alpha=0.9, show.legend=FALSE, position=position_jitterdodge(jitter.width = .2, dodge.width = .9)) + geom_errorbar(aes(group = group, ymin=value-sd, ymax= value+sd), color="black", width=.2, size=.6, position=position_dodge(.9)) + facet_wrap(~group,labeller = labeller(group = facet.labs), strip.position = "top") + theme_classic() + xlab("Day of adipogenic differentiation") + ylab("Normalised\n counts") + scale_fill_manual(values = c("#999999", "#E69F00")) + scale_colour_manual(values = c("black", "black")) + ggtitle("Zfp467") + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(size=10,colour="black"), axis.title.y=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), axis.title.x=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), strip.text.x = element_text(size=12, color="black",face="bold"))
# + scale_y_continuous(labels = scales::comma, expand = c(0,0), breaks = seq(0, 2500, 500), limits=c(0, 2500))

pdf(file="Zfp467_fig.pdf",width=8,height=2)
Zfp467_fig
dev.off()

## Gata4
Gata4_dm2 = subset(m1_dm2_counts, GeneSymbol=="Gata4")
Gata4_dm2_melt <- melt(Gata4_dm2)
Gata4_dm2_melt$day = "-2"
Gata4_dm2_melt$group <- substr(Gata4_dm2_melt$variable, start = 1, stop = 2)
Gata4_dm0 = subset(m1_dm0_counts, GeneSymbol=="Gata4")
Gata4_dm0_melt <- melt(Gata4_dm0)
Gata4_dm0_melt$day = "0"
Gata4_dm0_melt$group <- substr(Gata4_dm0_melt$variable, start = 1, stop = 2)
Gata4_dp3 = subset(m1_dp3_counts, GeneSymbol=="Gata4")
Gata4_dp3_melt <- melt(Gata4_dp3)
Gata4_dp3_melt$day = "3"
Gata4_dp3_melt$group <- substr(Gata4_dp3_melt$variable, start = 1, stop = 2)
Gata4_dp8 = subset(m1_dp8_counts, GeneSymbol=="Gata4")
Gata4_dp8_melt <- melt(Gata4_dp8)
Gata4_dp8_melt$day = "8"
Gata4_dp8_melt$group <- substr(Gata4_dp8_melt$variable, start = 1, stop = 2)

Gata4_sumtab <- rbind(Gata4_dm2_melt, Gata4_dm0_melt, Gata4_dp3_melt, Gata4_dp8_melt)
Gata4_sumtab$group <- factor(Gata4_sumtab$group, levels = c("WT", "m1"))
Gata4_sumtab$day <- factor(Gata4_sumtab$day, levels = c("-2", "0", "3", "8"))

Gata4_sum <- data_summary(Gata4_sumtab, varname="value", groupnames=c("group", "day"))
Gata4_sum$group <- factor(Gata4_sum$group, levels = c("WT", "m1"))
Gata4_sum$n = as.numeric("3")
Gata4_sum$se = Gata4_sum$sd/sqrt(Gata4_sum$n)
Gata4_sumtab$group <- factor(Gata4_sumtab$group, levels = c("WT", "m1"))

Gata4_fig <- ggplot(data=Gata4_sum, aes(x=day, y=value)) + geom_bar(aes(fill=group), stat="identity", color="black", position=position_dodge(), show.legend = FALSE) + geom_point(stroke=0.7, shape=21, data=Gata4_sumtab, aes(x=day, y=value, colour=group), fill="white", size=2.3, alpha=0.9, show.legend=FALSE, position=position_jitterdodge(jitter.width = .2, dodge.width = .9)) + geom_errorbar(aes(group = group, ymin=value-sd, ymax= value+sd), color="black", width=.2, size=.6, position=position_dodge(.9)) + facet_wrap(~group,labeller = labeller(group = facet.labs), strip.position = "top") + theme_classic() + xlab("Day of adipogenic differentiation") + ylab("Normalised\n counts") + scale_fill_manual(values = c("#999999", "#E69F00")) + scale_colour_manual(values = c("black", "black")) + ggtitle("Gata4") + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(size=10,colour="black"), axis.title.y=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), axis.title.x=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), strip.text.x = element_text(size=12, color="black",face="bold"))
# + scale_y_continuous(labels = scales::comma, expand = c(0,0), breaks = seq(0, 2500, 500), limits=c(0, 2500))

pdf(file="Gata4_fig.pdf",width=8,height=2)
Gata4_fig
dev.off()


## try making gene figures as overlayed line plots

## Pparg
Pparg_sum_line <- Pparg_sum
Pparg_sum_line$day <- as.numeric(levels(Pparg_sum_line$day))[Pparg_sum_line$day]
Pparg_sumtab_line <- Pparg_sumtab
Pparg_sumtab_line$day <- as.numeric(levels(Pparg_sumtab_line$day))[Pparg_sumtab_line$day]
Pparg_fig_line <- ggplot(data=Pparg_sum_line, aes(x=day, y=value, group=group)) + geom_line(aes(x=day, y=value, colour=group), show.legend=FALSE, size=1) + geom_point(stroke=0.7, shape=21, data=Pparg_sumtab_line, aes(x=day, y=value, colour=group), fill="white", size=2.3, alpha=0.9, show.legend=FALSE, position=position_jitter(width=0.15)) + geom_errorbar(aes(group = group, ymin=value-sd, ymax= value+sd), color="black", width=.2, size=.5) + theme_classic() + xlab("Day of adipogenic differentiation") + ylab("Normalised\n counts") + scale_colour_manual(values = c("#999999", "#E69F00")) + ggtitle("Pparg") + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(size=10,colour="black"), axis.title.y=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), axis.title.x=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), strip.text.x = element_text(size=12, color="black",face="bold")) + scale_x_continuous(labels = scales::comma, breaks = c(-2, 0, 3, 8), limits=c(-2.5, 8.5), expand = c(0,0)) 

# + scale_y_continuous(labels = scales::comma, expand = c(0,0), breaks = seq(0, 3000, 500), limits=c(0, 3000)) 

pdf(file="Pparg_line_fig.pdf",width=8,height=2.5)
Pparg_fig_line
dev.off()

## Cebpa
Cebpa_sum_line <- Cebpa_sum
Cebpa_sum_line$day <- as.numeric(levels(Cebpa_sum_line$day))[Cebpa_sum_line$day]
Cebpa_sumtab_line <- Cebpa_sumtab
Cebpa_sumtab_line$day <- as.numeric(levels(Cebpa_sumtab_line $day))[Cebpa_sumtab_line $day]
Cebpa_fig_line <- ggplot(data=Cebpa_sum_line, aes(x=day, y=value, group=group)) + geom_line(aes(x=day, y=value, colour=group), show.legend=FALSE, size=1) + geom_point(stroke=0.7, shape=21, data=Cebpa_sumtab_line, aes(x=day, y=value, colour=group), fill="white", size=2.3, alpha=0.9, show.legend=FALSE, position=position_jitter(width=0.15)) + geom_errorbar(aes(group = group, ymin=value-sd, ymax= value+sd), color="black", width=.2, size=.5) + theme_classic() + xlab("Day of adipogenic differentiation") + ylab("Normalised\n counts") + scale_colour_manual(values = c("#999999", "#E69F00")) + ggtitle("Cebpa") + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(size=10,colour="black"), axis.title.y=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), axis.title.x=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), strip.text.x = element_text(size=12, color="black",face="bold")) + scale_x_continuous(labels = scales::comma, breaks = c(-2, 0, 3, 8), limits=c(-2.5, 8.5), expand = c(0,0)) 

# + scale_y_continuous(labels = scales::comma, expand = c(0,0), breaks = seq(0, 3000, 500), limits=c(0, 3000)) 

pdf(file="Cebpa_line_fig.pdf",width=8,height=2.5)
Cebpa_fig_line
dev.off()

## Cebpb
Cebpb_sum_line <- Cebpb_sum
Cebpb_sum_line$day <- as.numeric(levels(Cebpb_sum_line$day))[Cebpb_sum_line$day]
Cebpb_sumtab_line <- Cebpb_sumtab
Cebpb_sumtab_line$day <- as.numeric(levels(Cebpb_sumtab_line$day))[Cebpb_sumtab_line$day]
Cebpb_fig_line <- ggplot(data=Cebpb_sum_line, aes(x=day, y=value, group=group)) + geom_line(aes(x=day, y=value, colour=group), show.legend=FALSE, size=1) + geom_point(stroke=0.7, shape=21, data=Cebpb_sumtab_line, aes(x=day, y=value, colour=group), fill="white", size=2.3, alpha=0.9, show.legend=FALSE, position=position_jitter(width=0.15)) + geom_errorbar(aes(group = group, ymin=value-sd, ymax= value+sd), color="black", width=.2, size=.5) + theme_classic() + xlab("Day of adipogenic differentiation") + ylab("Normalised\n counts") + scale_colour_manual(values = c("#999999", "#E69F00")) + ggtitle("Cebpb") + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(size=10,colour="black"), axis.title.y=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), axis.title.x=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), strip.text.x = element_text(size=12, color="black",face="bold")) + scale_x_continuous(labels = scales::comma, breaks = c(-2, 0, 3, 8), limits=c(-2.5, 8.5), expand = c(0,0)) 

# + scale_y_continuous(labels = scales::comma, expand = c(0,0), breaks = seq(0, 3000, 500), limits=c(0, 3000)) 

pdf(file="Cebpb_line_fig.pdf",width=8,height=2.5)
Cebpb_fig_line
dev.off()

## Klf4
Klf4_sum_line <- Klf4_sum
Klf4_sum_line$day <- as.numeric(levels(Klf4_sum_line$day))[Klf4_sum_line$day]
Klf4_sumtab_line <- Klf4_sumtab
Klf4_sumtab_line$day <- as.numeric(levels(Klf4_sumtab_line$day))[Klf4_sumtab_line$day]
Klf4_fig_line <- ggplot(data=Klf4_sum_line, aes(x=day, y=value, group=group)) + geom_line(aes(x=day, y=value, colour=group), show.legend=FALSE, size=1) + geom_point(stroke=0.7, shape=21, data=Klf4_sumtab_line, aes(x=day, y=value, colour=group), fill="white", size=2.3, alpha=0.9, show.legend=FALSE, position=position_jitter(width=0.15)) + geom_errorbar(aes(group = group, ymin=value-sd, ymax= value+sd), color="black", width=.2, size=.5) + theme_classic() + xlab("Day of adipogenic differentiation") + ylab("Normalised\n counts") + scale_colour_manual(values = c("#999999", "#E69F00")) + ggtitle("Klf4") + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(size=10,colour="black"), axis.title.y=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), axis.title.x=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), strip.text.x = element_text(size=12, color="black",face="bold")) + scale_x_continuous(labels = scales::comma, breaks = c(-2, 0, 3, 8), limits=c(-2.5, 8.5), expand = c(0,0)) 

# + scale_y_continuous(labels = scales::comma, expand = c(0,0), breaks = seq(0, 3000, 500), limits=c(0, 3000)) 

pdf(file="Klf4_line_fig.pdf",width=8,height=2.5)
Klf4_fig_line
dev.off()


## Zfp467
Zfp467_sum_line <- Zfp467_sum
Zfp467_sum_line$day <- as.numeric(levels(Zfp467_sum_line$day))[Zfp467_sum_line$day]
Zfp467_sumtab_line <- Zfp467_sumtab
Zfp467_sumtab_line$day <- as.numeric(levels(Zfp467_sumtab_line$day))[Zfp467_sumtab_line$day]
Zfp467_fig_line <- ggplot(data=Zfp467_sum_line, aes(x=day, y=value, group=group)) + geom_line(aes(x=day, y=value, colour=group), show.legend=FALSE, size=1) + geom_point(stroke=0.7, shape=21, data=Zfp467_sumtab_line, aes(x=day, y=value, colour=group), fill="white", size=2.3, alpha=0.9, show.legend=FALSE, position=position_jitter(width=0.15)) + geom_errorbar(aes(group = group, ymin=value-sd, ymax= value+sd), color="black", width=.2, size=.5) + theme_classic() + xlab("Day of adipogenic differentiation") + ylab("Normalised\n counts") + scale_colour_manual(values = c("#999999", "#E69F00")) + ggtitle("Zfp467") + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(size=10,colour="black"), axis.title.y=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), axis.title.x=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), strip.text.x = element_text(size=12, color="black",face="bold")) + scale_x_continuous(labels = scales::comma, breaks = c(-2, 0, 3, 8), limits=c(-2.5, 8.5), expand = c(0,0)) 

# + scale_y_continuous(labels = scales::comma, expand = c(0,0), breaks = seq(0, 3000, 500), limits=c(0, 3000)) 

pdf(file="Zfp467_line_fig.pdf",width=8,height=2.5)
Zfp467_fig_line
dev.off()

## Klf15
Klf15_sum_line <- Klf15_sum
Klf15_sum_line$day <- as.numeric(levels(Klf15_sum_line$day))[Klf15_sum_line$day]
Klf15_sumtab_line <- Klf15_sumtab
Klf15_sumtab_line$day <- as.numeric(levels(Klf15_sumtab_line$day))[Klf15_sumtab_line$day]
Klf15_fig_line <- ggplot(data=Klf15_sum_line, aes(x=day, y=value, group=group)) + geom_line(aes(x=day, y=value, colour=group), show.legend=FALSE, size=1) + geom_point(stroke=0.7, shape=21, data=Klf15_sumtab_line, aes(x=day, y=value, colour=group), fill="white", size=2.3, alpha=0.9, show.legend=FALSE, position=position_jitter(width=0.15)) + geom_errorbar(aes(group = group, ymin=value-sd, ymax= value+sd), color="black", width=.2, size=.5) + theme_classic() + xlab("Day of adipogenic differentiation") + ylab("Normalised\n counts") + scale_colour_manual(values = c("#999999", "#E69F00")) + ggtitle("Klf15") + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(size=10,colour="black"), axis.title.y=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), axis.title.x=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), strip.text.x = element_text(size=12, color="black",face="bold")) + scale_x_continuous(labels = scales::comma, breaks = c(-2, 0, 3, 8), limits=c(-2.5, 8.5), expand = c(0,0)) 

# + scale_y_continuous(labels = scales::comma, expand = c(0,0), breaks = seq(0, 3000, 500), limits=c(0, 3000)) 

pdf(file="Klf15_line_fig.pdf",width=8,height=2.5)
Klf15_fig_line
dev.off()

## Zfp521
Zfp521_sum_line <- Zfp521_sum
Zfp521_sum_line$day <- as.numeric(levels(Zfp521_sum_line$day))[Zfp521_sum_line$day]
Zfp521_sumtab_line <- Zfp521_sumtab
Zfp521_sumtab_line$day <- as.numeric(levels(Zfp521_sumtab_line$day))[Zfp521_sumtab_line$day]
Zfp521_fig_line <- ggplot(data=Zfp521_sum_line, aes(x=day, y=value, group=group)) + geom_line(aes(x=day, y=value, colour=group), show.legend=FALSE, size=1) + geom_point(stroke=0.7, shape=21, data=Zfp521_sumtab_line, aes(x=day, y=value, colour=group), fill="white", size=2.3, alpha=0.9, show.legend=FALSE, position=position_jitter(width=0.15)) + geom_errorbar(aes(group = group, ymin=value-sd, ymax= value+sd), color="black", width=.2, size=.5) + theme_classic() + xlab("Day of adipogenic differentiation") + ylab("Normalised\n counts") + scale_colour_manual(values = c("#999999", "#E69F00")) + ggtitle("Zfp521") + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(size=10,colour="black"), axis.title.y=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), axis.title.x=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), strip.text.x = element_text(size=12, color="black",face="bold")) + scale_x_continuous(labels = scales::comma, breaks = c(-2, 0, 3, 8), limits=c(-2.5, 8.5), expand = c(0,0)) 

# + scale_y_continuous(labels = scales::comma, expand = c(0,0), breaks = seq(0, 3000, 500), limits=c(0, 3000)) 

pdf(file="Zfp521_line_fig.pdf",width=8,height=2.5)
Zfp521_fig_line
dev.off()




## Gata4
Gata4_sum_line <- Gata4_sum
Gata4_sum_line$day <- as.numeric(levels(Gata4_sum_line$day))[Gata4_sum_line$day]
Gata4_sumtab_line <- Gata4_sumtab
Gata4_sumtab_line$day <- as.numeric(Gata4_sumtab_line$day)
Gata4_fig_line <- ggplot(data=Gata4_sum_line, aes(x=day, y=value, group=group)) + geom_line(aes(x=day, y=value, colour=group), show.legend=FALSE, size=1) + geom_point(stroke=0.7, shape=21, data=Gata4_sumtab_line, aes(x=day, y=value, colour=group), fill="white", size=2.3, alpha=0.9, show.legend=FALSE, position=position_jitter(width=0.15)) + geom_errorbar(aes(group = group, ymin=value-sd, ymax= value+sd), color="black", width=.2, size=.5) + theme_classic() + xlab("Day of adipogenic differentiation") + ylab("Normalised\n counts") + scale_colour_manual(values = c("#999999", "#E69F00")) + ggtitle("Gata4") + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(size=10,colour="black"), axis.title.y=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), axis.title.x=element_text(size=12, angle=0, vjust=0.5,face="bold",colour="black"), strip.text.x = element_text(size=12, color="black",face="bold")) + scale_x_continuous(labels = scales::comma, breaks = c(-2, 0, 3, 8), limits=c(-2.5, 8.5), expand = c(0,0)) 

# + scale_y_continuous(labels = scales::comma, expand = c(0,0), breaks = seq(0, 3000, 500), limits=c(0, 3000)) 

pdf(file="Gata4_line_fig.pdf",width=8,height=2.5)
Gata4_fig_line
dev.off()
























































































































